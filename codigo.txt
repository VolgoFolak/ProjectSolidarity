/* Variables y estilos base (mantén los que tienes) */
:root {
  --primary: #4a6fa5;
  --primary-light: #6d8fc7;
  --secondary: #166088;
  --accent: #4fc3a1;
  --accent-dark: #3aa389;
  --dark: #2d3748;
  --darker: #1a202c;
  --light: #f8f9fa;
  --gray: #e2e8f0;
  --white: #ffffff;
  --btn-bg: #4a6fa5;
  --btn-bg-hover: #3da58a;
  --btn-outline: #fff;
  --btn-outline-border: #4a6fa5;
  --btn-outline-hover: #eaf3fa;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  font-size: 16px;
  scroll-behavior: smooth;
}

body {
  font-family: 'Poppins', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  background: var(--light);
  color: var(--darker);
  line-height: 1.6;
  padding-bottom: 72px; /* Espacio para el menú móvil */
}

/* Header y Navbar Responsive */
header {
  background: var(--white);
  box-shadow: 0 2px 15px rgba(0, 0, 0, 0.08);
  position: sticky;
  top: 0;
  z-index: 1000;
  width: 100%;
  padding: 0.5rem 1rem;
}

.navbar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1rem;
  position: relative;
  background: #fff;
  z-index: 100;
  box-shadow: 0 2px 8px rgba(74,111,165,0.07);
}

.logo {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  text-decoration: none;
  z-index: 1001;
}

.logo-icon {
  font-size: 1.8rem;
  color: var(--primary);
}

.logo-text {
  font-size: 1.4rem;
  font-weight: 600;
  color: var(--primary);
  letter-spacing: 1px;
}

/* Menú hamburguesa (solo visible en móvil) */
.menu-toggle {
  display: none;
  background: none;
  border: none;
  cursor: pointer;
  padding: 0.5rem;
  z-index: 1001;
}

.menu-bar {
  display: block;
  width: 25px;
  height: 3px;
  background: var(--primary);
  margin: 5px 0;
  transition: all 0.3s ease;
}

/* Contenedor de enlaces */
.nav-links-container {
  display: flex;
  flex-grow: 1;
  justify-content: space-between;
  align-items: center;
}

/* Enlaces de navegación */
.nav-links {
  display: flex;
  gap: 1.5rem;
  align-items: center;
}

.auth-container {
  display: flex;
  align-items: center;
  gap: 1rem;
}

/* Botones */
.btn {
  padding: 0.5em 1.2em;
  border-radius: 30px;
  border: none;
  font-weight: 500;
  font-size: 1em;
  cursor: pointer;
  transition: background 0.2s, color 0.2s;
  text-decoration: none;
  display: inline-block;
}

.btn-primary {
  background: var(--btn-bg);
  color: #fff;
}

.btn-primary:hover {
  background: var(--btn-bg-hover);
}

.btn-outline {
  background: var(--btn-outline);
  color: var(--primary);
  border: 2px solid var(--btn-outline-border);
}

.btn-outline:hover {
  background: var(--btn-outline-hover);
}

/* Contenido principal */
.main-content {
  min-height: calc(100vh - 120px);
  width: 100%;
  overflow-x: hidden;
}

/* Secciones comunes */
.section-header {
  text-align: center;
  margin-bottom: 2.5rem;
  padding: 0 1rem;
}

.section-header h2 {
  font-size: 2rem;
  color: var(--primary);
  margin-bottom: 0.5rem;
}

.section-header p {
  color: #6b7280;
  font-size: 1.1rem;
  max-width: 700px;
  margin: 0 auto;
}

/* Hero Section Responsive */
.hero {
  background: linear-gradient(135deg, var(--primary), var(--primary-dark));
  color: white;
  padding: 3rem 1rem 4rem;
  text-align: center;
  position: relative;
  overflow: hidden;
}

.hero-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  max-width: 1200px;
  margin: 0 auto;
  position: relative;
  z-index: 2;
  gap: 2rem;
}

.hero-content {
  flex: 1;
  text-align: center;
  padding: 1rem 0;
  width: 100%;
}

.hero-image {
  flex: 1;
  position: relative;
  display: none;
  width: 100%;
  max-width: 500px;
  margin: 0 auto;
}

.hero h1 {
  font-size: 2rem;
  margin-bottom: 1rem;
  font-weight: 800;
  line-height: 1.2;
  text-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.hero p {
  font-size: 1.1rem;
  margin: 0 auto 1.5rem;
  font-weight: 400;
  opacity: 0.9;
  max-width: 100%;
  padding: 0 1rem;
}

.hero-buttons {
  display: flex;
  gap: 1rem;
  margin-top: 1.5rem;
  flex-wrap: wrap;
  justify-content: center;
}

.hero-features {
  display: flex;
  gap: 1rem;
  margin-top: 1.5rem;
  flex-wrap: wrap;
  justify-content: center;
}

.feature-badge {
  background: rgba(255,255,255,0.15);
  border-radius: 50px;
  padding: 0.5rem 1rem;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-size: 0.85rem;
  backdrop-filter: blur(5px);
}

/* Grids responsive */
.actions-grid, .communities-grid {
  display: grid;
  grid-template-columns: 1fr;
  gap: 1.5rem;
  padding: 0 1rem;
}

.action-card, .community-card {
  width: 100%;
  margin: 0 auto;
}

/* Footer responsive */
footer {
  background: white;
  padding: 2rem 1rem;
  border-top: 1px solid var(--gray);
}

.footer-content {
  display: flex;
  flex-direction: column;
  gap: 2rem;
  max-width: 1200px;
  margin: 0 auto;
}

.footer-logo {
  display: flex;
  align-items: center;
  gap: 0.7rem;
  margin-bottom: 1rem;
}

/* Menú móvil */
/* .mobile-nav {
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  background: white;
  display: flex;
  justify-content: space-around;
  padding: 0.75rem 0;
  box-shadow: 0 -2px 10px rgba(0,0,0,0.1);
  z-index: 1000;
}

.mobile-nav-item {
  display: flex;
  flex-direction: column;
  align-items: center;
  text-decoration: none;
  color: var(--dark);
  font-size: 0.8rem;
  gap: 0.3rem;
}

.mobile-nav-item i {
  font-size: 1.4rem;
}

.mobile-nav-item.active {
  color: var(--primary);
} */

/* Modal responsive */
.modal-container {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background: rgba(0,0,0,0.35);
  z-index: 9999;
  align-items: center;
  justify-content: center;
  padding: 1rem;
}

.modal-content {
  background: #fff;
  border-radius: 16px;
  max-width: 370px;
  width: 100%;
  padding: 1.5rem;
  box-shadow: 0 8px 32px rgba(0,0,0,0.13);
  text-align: center;
  position: relative;
}

.modal-icon {
  font-size: 2.5rem;
  color: var(--accent);
  display: block;
  margin-bottom: 1rem;
}

.modal-content h2 {
  color: var(--accent);
  font-weight: 900;
  margin-bottom: 0.7rem;
  font-size: 1.5rem;
}

.modal-content p {
  color: #444;
  font-size: 1rem;
  margin-bottom: 0.5rem;
}

.modal-subtext {
  color: #888;
  font-size: 0.9rem;
  margin-top: 0.5rem;
}

.modal-button {
  margin-top: 1.5rem;
  background: var(--accent);
  color: #fff;
  border: none;
  border-radius: 8px;
  padding: 0.8rem 1.5rem;
  font-size: 1rem;
  font-weight: 700;
  cursor: pointer;
  width: 100%;
}

/* Media Queries para tablets */
@media (min-width: 600px) {
  .hero {
    padding: 4rem 1.5rem 5rem;
  }
  
  .hero h1 {
    font-size: 2.3rem;
  }
  
  .hero p {
    font-size: 1.15rem;
  }
  
  .actions-grid, .communities-grid {
    grid-template-columns: repeat(2, 1fr);
  }
  
  .footer-content {
    flex-direction: row;
    flex-wrap: wrap;
  }
  
  .footer-content > div {
    flex: 1 1 45%;
    min-width: 0;
  }
}

/* Media Queries para desktop */
@media (min-width: 992px) {
  body {
    padding-bottom: 0;
  }
  
  .mobile-nav {
    display: none;
  }
  
  .hero {
    padding: 5rem 2rem 6rem;
  }
  
  .hero-container {
    flex-direction: row;
    text-align: left;
    gap: 3rem;
  }
  
  .hero-content {
    text-align: left;
    padding: 2rem 0;
  }
  
  .hero-image {
    display: block;
  }
  
  .hero h1 {
    font-size: 2.8rem;
  }
  
  .hero p {
    margin: 0 0 2rem;
    padding: 0;
    text-align: left;
  }
  
  .hero-buttons, .hero-features {
    justify-content: flex-start;
  }
  
  .actions-grid {
    grid-template-columns: repeat(3, 1fr);
    padding: 0;
  }
  
  .communities-grid {
    grid-template-columns: repeat(3, 1fr);
    padding: 0;
  }
  
  .footer-content > div {
    flex: 1 1 22%;
  }
}

/* Media Queries para pantallas grandes */
@media (min-width: 1200px) {
  .hero h1 {
    font-size: 3.2rem;
  }
  
  .hero p {
    font-size: 1.25rem;
  }
}

/* Menú hamburguesa para móviles */
@media (max-width: 991px) {
  .nav-links {
    position: fixed;
    top: 70px;
    left: 0;
    right: 0;
    bottom: 0;
    background: white;
    flex-direction: column;
    justify-content: flex-start;
    padding: 2rem;
    gap: 1.5rem;
    transform: translateX(-100%);
    transition: transform 0.3s ease;
    z-index: 999;
    overflow-y: auto;
  }
  
  .nav-links.active {
    transform: translateX(0);
  }
  
  .auth-buttons {
    flex-direction: column;
    gap: 1rem;
    width: 100%;
    margin-top: 1rem;
  }
  
  #user-menu {
    margin-left: auto;
  }
  
  /* Botón hamburguesa */
  .menu-toggle {
    display: flex;
    flex-direction: column;
    justify-content: space-around;
    width: 30px;
    height: 24px;
    background: transparent;
    border: none;
    cursor: pointer;
    padding: 0;
    z-index: 1001;
  }
  
  .menu-toggle span {
    width: 100%;
    height: 3px;
    background: var(--primary);
    transition: all 0.3s ease;
  }
  
  .menu-toggle.active span:nth-child(1) {
    transform: translateY(8px) rotate(45deg);
  }
  
  .menu-toggle.active span:nth-child(2) {
    opacity: 0;
  }
  
  .menu-toggle.active span:nth-child(3) {
    transform: translateY(-8px) rotate(-45deg);
  }
  
  /* Añade esto al navbar.njk */
  /* <button class="menu-toggle" id="mobile-menu-toggle">
    <span></span>
    <span></span>
    <span></span>
  </button> */
}

/* Responsive */
@media (max-width: 991px) {
  .menu-toggle {
    display: block;
  }

  .nav-links-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: #fff;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    transform: translateX(100%);
    transition: transform 0.3s ease;
    z-index: 1000;
    padding-top: 80px;
  }

  .nav-links-container.active {
    transform: translateX(0);
  }

  .nav-links {
    flex-direction: column;
    width: 100%;
    padding: 1rem;
    gap: 2rem;
  }

  .auth-container {
    flex-direction: column;
    width: 100%;
    padding: 1rem;
    gap: 1.5rem;
  }

  .menu-toggle.active .menu-bar:nth-child(1) {
    transform: translateY(8px) rotate(45deg);
  }
  .menu-toggle.active .menu-bar:nth-child(2) {
    opacity: 0;
  }
  .menu-toggle.active .menu-bar:nth-child(3) {
    transform: translateY(-8px) rotate(-45deg);
  }

  body.no-scroll {
    overflow: hidden;
  }
}
:root {
  --primary: #4a6fa5;
  --primary-light: #6d8fc7;
  --secondary: #166088;
  --accent: #4fc3a1;
  --accent-dark: #3aa389;
  --dark: #2d3748;
  --darker: #1a202c;
  --light: #f8f9fa;
  --gray: #e2e8f0;
  --white: #ffffff;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: 'Poppins', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap');
@import url('otra-hoja.css');

body {
  background: var(--light);
  color: var(--darker);
  line-height: 1.6;
  font-family: 'Roboto', sans-serif;
}

/* Header */
header {
  background: var(--white);
  box-shadow: 0 2px 15px rgba(0, 0, 0, 0.08);
  position: sticky;
  top: 0;
  z-index: 1000;
  padding: 1rem 0;
  width: 100%;
}

.navbar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  max-width: 1200px;
  margin: 0 auto;
  width: 100%;
  padding: 0.1rem 0.5rem !important;
}

.logo {
  display: flex;
  align-items: center;
  gap: 12px;
  text-decoration: none;
}

.logo-icon {
  font-size: 2rem;
  color: var(--primary);
}

.logo-text {
  font-size: 1.5rem;
  font-weight: 700;
  color: var(--primary);
  letter-spacing: -0.5px;
}

.nav-links {
  display: flex;
  align-items: center;
  gap: 2rem;
}

.nav-links a {
  text-decoration: none;
  color: var(--dark);
  font-weight: 500;
  transition: all 0.3s ease;
  position: relative;
  padding: 0.5rem 0;
}

.nav-links a:hover {
  color: var(--primary);
}

.nav-links a::after {
  content: '';
  position: absolute;
  bottom: 0;
  left: 0;
  width: 0;
  height: 2px;
  background: var(--primary);
  transition: width 0.3s ease;
}

.nav-links a:hover::after {
  width: 100%;
}

.auth-buttons {
  display: flex;
  gap: 1rem;
}

/* Botones mejorados */
.btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: 0.75rem 1.75rem;
  border-radius: 50px;
  font-weight: 600;
  text-decoration: none;
  transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  gap: 0.5rem;
  border: none;
  cursor: pointer;
  font-size: 1rem;
}

.btn-sm {
  padding: 0.6rem 1.5rem;
  font-size: 0.9rem;
}

.btn-primary {
  background: var(--primary);
  color: var(--white);
}

.btn-primary:hover {
  background: var(--secondary);
  transform: translateY(-2px);
  box-shadow: 0 5px 15px rgba(22, 96, 136, 0.2);
}

.btn-outline {
  background: transparent;
  border: 2px solid var(--primary);
  color: var(--primary);
}

.btn-outline:hover {
  background: var(--primary);
  color: var(--white);
  transform: translateY(-2px);
}

.btn-accent {
  background: var(--accent);
  color: var(--white);
}

.btn-accent:hover {
  background: var(--accent-dark);
  transform: translateY(-2px);
  box-shadow: 0 5px 15px rgba(63, 195, 161, 0.2);
}

.btn i {
  font-size: 1.1rem;
}

/* --- Menú de usuario robusto y limpio --- */
#user-menu {
  position: relative;
  display: flex;
  align-items: center;
}

.user-avatar {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  object-fit: cover;
  border: 2px solid #e2e8f0;
  background: #fff;
}

.user-name {
  font-weight: 600;
  margin-left: 0.5em;
}

#user-dropdown {
  display: none;
  position: absolute;
  right: 0;
  top: 110%;
  min-width: 200px;
  background: #fff;
  box-shadow: 0 2px 10px rgba(0,0,0,0.13);
  border-radius: 8px;
  z-index: 1001;
  padding: 0.5em 0;
}

#user-menu:hover #user-dropdown,
#user-dropdown:hover {
  display: block;
}

#user-dropdown a {
  display: flex;
  align-items: center;
  gap: 0.7em;
  padding: 0.7em 1.2em;
  color: #333 !important;
  text-decoration: none;
  font-weight: 500;
  transition: background 0.2s, color 0.2s;
  border: none;
  background: none;
}

#user-dropdown a:hover {
  background: #f5f5f5;
  color: #2dd4bf !important;
}

/* Colores para los íconos del menú de usuario */
.icon-profile { color: #4a6fa5 !important; }
.icon-messages { color: #4fc3a1 !important; }
.icon-settings { color: #fbbf24 !important; }
.icon-help { color: #10b981 !important; }
.icon-logout { color: #ef4444 !important; }

/* Dropdown styles para el menú principal */
.dropdown {
  position: relative;
  display: flex;
  align-items: center;
}

.dropbtn {
  cursor: pointer;
}

.dropbtn.btn-accent {
  color: var(--accent);
  background: transparent;
  border: none;
  font-weight: 600;
  transition: color 0.3s;
}

.dropbtn.btn-accent:hover,
.dropdown:hover .dropbtn.btn-accent {
  color: var(--accent-dark);
  background: transparent;
}

.dropdown-content {
  display: none;
  position: absolute;
  left: 0;
  top: 100%;
  background: #fff;
  min-width: 180px;
  box-shadow: 0 8px 16px rgba(0,0,0,0.2);
  z-index: 100;
  border-radius: 8px;
  margin-top: 0;
}

.dropdown-content a {
  color: #333;
  padding: 10px 16px;
  text-decoration: none;
  display: block;
}

.dropdown-content a[href="/profile"] {
  color: #2dd4bf !important;
  font-weight: 600;
}

.dropdown:hover .dropdown-content,
.dropdown-content:hover {
  display: block;
}

.dropdown-content a:hover {
  background: #f1f1f1;
}

/* Solo para el avatar del sidebar */
.sidebar-avatar {
  width: 44px;
  height: 44px;
  border-radius: 50%;
  object-fit: cover;
  border: 2px solid #e2e8f0;
  background: #fff;
}

/* Solo para el avatar del navbar */
#user-menu .user-avatar {
  width: 55px;
  height: 55px;
  border-radius: 50%;
  object-fit: cover;
  border: 2px solid #e2e8f0;
  background: #fff;
}

/* Badges de tipo de actividad, arriba a la izquierda y estilo consistente */
.activity-badge {
  position: absolute;
  top: 1em;
  left: 1em;
  z-index: 2;
  font-size: 0.92em;
  font-weight: 600;
  padding: 0.16em 0.85em;
  border-radius: 999px;
  min-width: 64px;
  text-align: center;
  color: #fff !important;
  box-shadow: 0 2px 8px rgba(76,163,161,0.09);
  letter-spacing: 0.01em;
  display: inline-block;
  border: none;
  text-transform: uppercase;
  font-family: 'Poppins', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  line-height: 1.2;
}
.activity-badge.cause { background: #e74c3c !important; }
.activity-badge.task { background: #3498db !important; }
.activity-badge.challenge { background: #f39c12 !important; }
.activity-badge.volunteering { background: #2ecc71 !important; }
.activity-badge.trending {
  background: #ff9800 !important;
  color: #fff !important;
  margin-top: 2.3em;
  left: 1em;
  right: auto;
  min-width: 70px;
}

/* Tarjetas de actividad: colores y fuente consistentes */
.activity-card {
  background: #fff;
  border-radius: 12px;
  box-shadow: 0 2px 10px rgba(76,163,161,0.07);
  border: 1.5px solid #e2e8f0;
  overflow: hidden;
  display: flex;
  flex-direction: column;
  min-width: 0;
  position: relative;
  transition: box-shadow 0.18s, border 0.18s;
  font-family: 'Poppins', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}
.activity-card:hover {
  box-shadow: 0 6px 24px rgba(76, 163, 161, 0.13);
  border-color: #4fc3a1;
}
.activity-header {
  display: flex;
  align-items: center;
  gap: 0.5em;
  font-size: 1.08em;
  font-weight: 700;
  margin-bottom: 0.5em;
  color: #4a6fa5;
  background: none;
  box-shadow: none;
  border-radius: 0;
  padding: 0;
  margin: 0 0 0 0;
}
.activity-content h4 {
  font-size: 1.13em;
  color: #2d3748;
  font-weight: 700;
  margin-bottom: 0.2em;
  font-family: 'Poppins', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}
.activity-meta, .activity-impact {
  color: #6b7280;
  font-size: 0.97em;
  font-family: 'Poppins', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}
.activity-link {
  color: #4a6fa5;
  font-weight: 600;
  text-decoration: underline;
  font-size: 0.97em;
  margin: 0.7em 1.2em 1.2em 1.2em;
  align-self: flex-start;
  transition: color 0.18s;
}
.activity-link:hover { color: #4fc3a1; }

/* --- Estilos para compartir (compartidos en causas, tareas, etc) --- */
.share-section {
  margin-top: 2rem;
  padding-top: 2rem;
  border-top: 1px solid #e5e7eb;
}
.share-title {
  font-size: 1.3rem;
  font-weight: 600;
  color: var(--primary, #4a6fa5);
  margin-bottom: 1.5rem;
  text-align: center;
}
.share-content {
  background: #f8fafc;
  border-radius: 12px;
  padding: 1.5rem;
  margin-bottom: 1.5rem;
  position: relative;
}
.share-text {
  font-size: 1rem;
  line-height: 1.6;
  color: #4b5563;
  margin-bottom: 1rem;
}
.share-highlight {
  color: var(--primary, #4a6fa5);
  font-weight: 600;
}
.share-buttons {
  display: flex;
  justify-content: center;
  gap: 1rem;
  flex-wrap: wrap;
}
.share-btn {
  display: flex;
  align-items: center;
  gap: 0.7rem;
  padding: 0.8rem 1.5rem;
  border-radius: 8px;
  font-weight: 600;
  color: white;
  transition: all 0.2s;
  text-decoration: none;
  border: none;
  cursor: pointer;
}
.share-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}
.share-btn-facebook { background: #3b5998; }
.share-btn-twitter { background: #1da1f2; }
.share-btn-whatsapp { background: #25d366; }
.share-btn-link { background: var(--primary, #4a6fa5); }

/* Responsive Design */
@media (max-width: 992px) {
  .hero-content {
    flex-direction: column;
    text-align: center;
  }

  .hero-text {
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  .hero h1 {
    font-size: 2.5rem;
  }

  .hero-image {
    max-width: 600px;
    margin: 0 auto;
  }
}

@media (max-width: 768px) {
  .navbar {
    flex-direction: column;
    gap: 1.5rem;
  }

  .nav-links {
    gap: 1.5rem;
  }

  .hero h1 {
    font-size: 2.2rem;
  }

  .hero-buttons {
    flex-direction: column;
    gap: 1rem;
  }

  .btn {
    width: 100%;
  }

  .section-header h2 {
    font-size: 2rem;
  }
}

@media (max-width: 576px) {
  .hero {
    padding: 4rem 1.5rem;
  }

  .hero h1 {
    font-size: 2rem;
  }

  .hero p {
    font-size: 1rem;
  }

  .features, .testimonials, .causes, .cta {
    padding: 4rem 1.5rem;
  }
}

@media (max-width: 991px) {
  .nav-links {
    display: flex;
    flex-direction: column;
    position: fixed;
    top: 0;
    right: 0;
    height: 100vh;
    width: 80vw;
    max-width: 340px;
    background: #fff;
    box-shadow: -2px 0 16px rgba(74,111,165,0.10);
    transform: translateX(100%);
    transition: transform 0.3s cubic-bezier(.77,0,.18,1);
    z-index: 999;
    padding: 2.5rem 1.5rem 1.5rem 1.5rem;
    gap: 1.5rem;
  }
  .nav-links.active {
    transform: translateX(0);
  }
}
const IMPACT_POINTS = {
  register: 100,
  daily_login: 5,
  weekly_streak: 50,
  post_activity: 50, // causa, tarea, reto, voluntariado
  share: 5,
  per_euro_donated: 5
};

// Suma puntos al usuario
async function addImpactPoints(userId, points) {
  if (!userId || !points) return;
  const { data: profile, error } = await supabase
    .from('profiles')
    .select('impact_points, weekly_points')
    .eq('id', userId)
    .single();
  if (error || !profile) return;
  const newImpactPoints = (profile.impact_points || 0) + points;
  const newWeeklyPoints = (profile.weekly_points || 0) + points;
  await supabase
    .from('profiles')
    .update({
      impact_points: newImpactPoints,
      weekly_points: newWeeklyPoints
    })
    .eq('id', userId);
}

// 1. Al registrarse
async function onUserRegister(userId) {
  await addImpactPoints(userId, IMPACT_POINTS.register);
}

// 2. Al hacer login diario
async function onUserDailyLogin(userId) {
  await addImpactPoints(userId, IMPACT_POINTS.daily_login);
  // Aquí puedes añadir lógica para streak semanal
  // Ejemplo: si es el 7º día seguido, suma bonus
  const streak = await getLoginStreak(userId);
  if (streak && streak % 7 === 0) {
    await addImpactPoints(userId, IMPACT_POINTS.weekly_streak);
  }
}

// 3. Al publicar causa, tarea, reto o voluntariado
async function onPostActivity(userId) {
  await addImpactPoints(userId, IMPACT_POINTS.post_activity);
}

// 4. Al unirse a una actividad (puntos variables)
async function onJoinActivity(userId, activityPoints) {
  await addImpactPoints(userId, activityPoints);
}

// 5. Por cada euro donado
async function onDonate(userId, euros) {
  const points = euros * IMPACT_POINTS.per_euro_donated;
  await addImpactPoints(userId, points);
}

// 6. Por compartir en redes
async function onShare(userId) {
  await addImpactPoints(userId, IMPACT_POINTS.share);
}

// Ejemplo de función para obtener el streak de login semanal (debes implementarla según tu lógica)
async function getLoginStreak(userId) {
  // Aquí deberías consultar una tabla de logins diarios y calcular el streak
  // Por ahora, devuelve 7 para simular un bonus semanal
  return 7;
}
document.addEventListener('DOMContentLoaded', async () => {
  // Cargar causas desde Supabase
  const { data: causas, error } = await supabase
    .from('causas')
    .select('*')
    .order('created_at', { ascending: false })
    .limit(3);

  if (error) {
    // Muestra un mensaje de error en la UI si quieres
    return;
  }

  const grid = document.querySelector('.causes-grid');
  if (!grid) return;

  grid.innerHTML = '';
  causas.forEach(causa => {
    grid.innerHTML += `
      <div class="cause-card">
        <div class="cause-image">
          <img src="${causa.imagen_url}" alt="${causa.titulo}">
        </div>
        <div class="cause-content">
          <h3>${causa.titulo}</h3>
          <p>${causa.descripcion}</p>
          <div class="progress-container">
            <div class="progress-bar">
              <div class="progress" style="width: ${causa.progreso || 0}%;"></div>
            </div>
            <div class="progress-info">
              <span>${causa.recaudado || 0} recaudados</span>
              <span>${causa.progreso || 0}%</span>
            </div>
          </div>
          <a href="#" class="btn btn-primary btn-sm">
            <i class="fas fa-heart"></i> Apoyar
          </a>
        </div>
      </div>
    `;
  });
});
document.getElementById('loginForm').addEventListener('submit', async function(e) {
  e.preventDefault();
  const loginValue = document.getElementById('loginEmail').value.trim();
  const password = document.getElementById('loginPassword').value;
  const errorDiv = document.getElementById('loginError');
  errorDiv.style.display = 'none';

  let user = null;
  let error = null;

  if (loginValue.includes('@')) {
    // Login por email
    const res = await supabase.auth.signInWithPassword({ email: loginValue, password });
    user = res.data?.user;
    error = res.error;
  } else {
    // Login por username
    const { data: profile } = await supabase
      .from('profiles')
      .select('email')
      .eq('username', loginValue)
      .maybeSingle();
    if (!profile) {
      errorDiv.textContent = 'Usuario no encontrado';
      errorDiv.style.display = 'block';
      return;
    }
    const res = await supabase.auth.signInWithPassword({ email: profile.email, password });
    user = res.data?.user;
    error = res.error;
  }

  if (error) {
    errorDiv.textContent = error.message || 'No se pudo iniciar sesión';
    errorDiv.style.display = 'block';
  } else {
    window.location.href = '/profile';
  }
});
document.addEventListener('DOMContentLoaded', async () => {
  // Autenticación (ajusta según tu lógica)
  const { data: { user } } = await supabase.auth.getUser();
  const authButtons = document.getElementById('auth-buttons');
  const userMenu = document.getElementById('user-menu');

  if (user) {
    const { data: perfil } = await supabase
      .from('profiles')
      .select('username, photo_url')
      .eq('id', user.id)
      .single();

    document.getElementById('user-avatar').src = perfil?.photo_url || '/img/default-user.png';
    document.getElementById('user-name').textContent = perfil?.username || user.email;
    authButtons.style.display = 'none';
    userMenu.style.display = 'flex';
  } else {
    authButtons.style.display = 'flex';
    userMenu.style.display = 'none';
  }

  // Logout
  const logoutBtn = document.getElementById('logout-btn-link');
  if (logoutBtn) {
    logoutBtn.onclick = async (e) => {
      e.preventDefault();
      await supabase.auth.signOut();
      window.location.reload();
    };
  }

  // Menú móvil hamburguesa
  const toggle = document.getElementById('mobile-menu-toggle');
  const navContainer = document.querySelector('.nav-links-container');

  if (toggle && navContainer) {
    toggle.addEventListener('click', () => {
      toggle.classList.toggle('active');
      navContainer.classList.toggle('active');
      document.body.classList.toggle('no-scroll');
    });
  }

  // Cerrar menú al hacer clic en un enlace
  document.querySelectorAll('.nav-links a').forEach(link => {
    link.addEventListener('click', () => {
      if (toggle && navContainer) {
        toggle.classList.remove('active');
        navContainer.classList.remove('active');
        document.body.classList.remove('no-scroll');
      }
    });
  });
});
document.addEventListener('DOMContentLoaded', () => {
  window.waitForSupabase(async (supabase) => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      const authButtons = document.getElementById('auth-buttons');
      const userMenu = document.getElementById('user-menu');
      
      if (user) {
        const { data: perfil } = await supabase
          .from('profiles')
          .select('username, photo_url')
          .eq('id', user.id)
          .single();

        document.getElementById('user-avatar').src = perfil?.photo_url || '/images/default-avatar.png';
        document.getElementById('user-name').textContent = perfil?.username || user.email;
        authButtons.style.display = 'none';
        userMenu.style.display = 'flex';
        
        document.getElementById('logout-btn').onclick = async () => {
          await supabase.auth.signOut();
          window.location.reload();
        };
      } else {
        authButtons.style.display = 'flex';
        userMenu.style.display = 'none';
      }
    } catch (error) {
      console.error("Error en navbar:", error);
    }
  });
});
document.addEventListener('DOMContentLoaded', async () => {
  const { data: { user } } = await supabase.auth.getUser();
  const authButtons = document.getElementById('auth-buttons');
  const userMenu = document.getElementById('user-menu');
  if (user) {
    // Consulta el perfil del usuario
    const { data: perfil } = await supabase
      .from('profiles')
      .select('username, photo_url')
      .eq('id', user.id)
      .single();

    document.getElementById('user-avatar').src = perfil?.photo_url || '/images/default-avatar.png';
    document.getElementById('user-name').textContent = perfil?.username || user.email;
    authButtons.style.display = 'none';
    userMenu.style.display = 'flex';
  } else {
    authButtons.style.display = 'flex';
    userMenu.style.display = 'none';
  }

  // Usa el id correcto
  const logoutBtn = document.getElementById('logout-btn-link');
  if (logoutBtn) {
    logoutBtn.onclick = async (e) => {
      e.preventDefault();
      await supabase.auth.signOut();
      window.location.reload();
    };
  }
});

document.addEventListener('DOMContentLoaded', () => {
  const toggle = document.getElementById('mobile-menu-toggle');
  const navLinks = document.getElementById('nav-links');
  const overlay = document.getElementById('nav-overlay');
  if (toggle && navLinks && overlay) {
    toggle.addEventListener('click', () => {
      navLinks.classList.toggle('active');
      toggle.classList.toggle('active');
      overlay.classList.toggle('active');
      document.body.classList.toggle('no-scroll');
    });
    overlay.addEventListener('click', () => {
      navLinks.classList.remove('active');
      toggle.classList.remove('active');
      overlay.classList.remove('active');
      document.body.classList.remove('no-scroll');
    });
    navLinks.querySelectorAll('a').forEach(link => {
      link.addEventListener('click', () => {
        navLinks.classList.remove('active');
        toggle.classList.remove('active');
        overlay.classList.remove('active');
        document.body.classList.remove('no-scroll');
      });
    });
  }
});
// logout.js - Código super sencillo
document.addEventListener('DOMContentLoaded', () => {
  const logoutBtn = document.getElementById('logout-btn');
  
  if (logoutBtn) {
    logoutBtn.addEventListener('click', async () => {
      const { error } = await supabase.auth.signOut();
      if (!error) {
        // Limpiar datos locales
        sessionStorage.removeItem('user');
        // Redirigir al home
        window.location.href = "/";
      } else {
        alert('Error al cerrar sesión: ' + error.message);
      }
    });
  }
});
document.addEventListener('DOMContentLoaded', async () => {
  const { data: { user } } = await supabase.auth.getUser();

  // Redirige si la página requiere autenticación y el usuario NO está logueado
  const publicPaths = ["/", "/login", "/register"];
  if (!user && !publicPaths.includes(window.location.pathname)) {
    window.location.href = "/";
  }

  // Guarda datos útiles en sessionStorage si quieres usarlos en otras páginas
  if (user) {
    sessionStorage.setItem('user', JSON.stringify({
      id: user.id,
      email: user.email,
      name: user.user_metadata?.name,
      avatar: user.user_metadata?.avatar_url
    }));
  } else {
    sessionStorage.removeItem('user');
  }
});
// Evento global para el botón "Unirse"
document.addEventListener('click', async (e) => {
  const joinBtn = e.target.closest('.join-team-btn');
  if (!joinBtn || joinBtn.disabled) return;

  const teamId = joinBtn.dataset.teamId;
  const { data: { session } } = await supabase.auth.getSession();

  if (!session?.user) {
    document.getElementById('loginModal').classList.add('active');
    return;
  }

  // Bloquear UI para evitar dobles clics
  const originalText = joinBtn.innerHTML;
  joinBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
  joinBtn.disabled = true;

  try {
    // 1. Intentar insertar la membresía directamente
    const { error: insertError } = await supabase
      .from('team_members')
      .insert({
        team_id: teamId,
        user_id: session.user.id,
        role: 'member',
        joined_at: new Date().toISOString()
      });

    // Si ya es miembro (error 23505), no incrementes el contador
    if (insertError && insertError.code === '23505') {
      // Ya es miembro, solo actualiza UI y contador real
    } else if (insertError) {
      throw insertError;
    } else {
      // Solo si la inserción fue exitosa, incrementa el contador en la base de datos
      const { error: updateError } = await supabase
        .rpc('increment_team_counter', {
          team_id_input: teamId,
          field_name: 'members_count'
        });
      if (updateError) throw updateError;
    }

    // 2. Obtener el valor real actualizado desde Supabase
    const { data: updatedTeam, error: fetchError } = await supabase
      .from('teams')
      .select('members_count')
      .eq('id', teamId)
      .single();

    if (fetchError) throw fetchError;

    // 3. Actualizar el contador en todas las tarjetas de este equipo
    document.querySelectorAll(`.team-card-classic[data-team-id="${teamId}"] .members-count-classic`).forEach(el => {
      el.textContent = updatedTeam.members_count;
    });

    // 4. Cambiar el botón a "Miembro"
    joinBtn.innerHTML = '<i class="fas fa-user-check"></i> Miembro';
    joinBtn.classList.remove('btn-accent');
    joinBtn.classList.add('btn-outline');
    joinBtn.disabled = true;

  } catch (error) {
    console.error('Error al unirse:', error);
    joinBtn.innerHTML = originalText;
    joinBtn.disabled = false;
    alert(error.message || 'Error al unirse a la comunidad');
  }
});
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Solidarity - Inicio</title>
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
</head>
<body>
    <div class="app-container">
        <!-- Sidebar -->
        <aside class="sidebar">
            <div class="sidebar-header">
                <div class="app-logo">
                    <i class="fas fa-hands-helping"></i>
                    <h1>Solidarity</h1>
                </div>
            </div>
            
            <nav class="sidebar-nav">
                <ul>
                    <li class="active">
                        <a href="/home">
                            <i class="fas fa-home"></i>
                            <span>Inicio</span>
                        </a>
                    </li>
                    <li>
                        <a href="/causes">
                            <i class="fas fa-heart"></i>
                            <span>Causas</span>
                        </a>
                    </li>
                    <li>
                        <a href="/tasks">
                            <i class="fas fa-tasks"></i>
                            <span>Tareas Solidarias</span>
                        </a>
                    </li>
                    <li>
                        <a href="/volunteer">
                            <i class="fas fa-hands-helping"></i>
                            <span>Voluntariados</span>
                        </a>
                    </li>
                    <li>
                        <a href="/impact">
                            <i class="fas fa-chart-line"></i>
                            <span>Mi Impacto</span>
                        </a>
                    </li>
                    <li>
                        <a href="/ranking">
                            <i class="fas fa-trophy"></i>
                            <span>Ranking</span>
                        </a>
                    </li>
                </ul>
            </nav>
            
            <div class="sidebar-footer">
                <div class="user-profile">
                    <div class="user-avatar">
                        <img src="/images/default-avatar.jpg" alt="User Avatar">
                    </div>
                    <div class="user-info">
                        <span class="user-name" id="sidebarUserName">Nombre Usuario</span>
                        <span class="user-level">Nivel 2</span>
                    </div>
                </div>
                <a href="/settings" class="settings-link">
                    <i class="fas fa-cog"></i>
                </a>
            </div>
        </aside>
        
        <!-- Main Content -->
        <main class="main-content">
            <header class="main-header">
                <div class="header-left">
                    <button class="menu-toggle">
                        <i class="fas fa-bars"></i>
                    </button>
                    <h2 id="pageTitle">Inicio</h2>
                </div>
                <div class="header-right">
                    <div class="notifications">
                        <i class="fas fa-bell"></i>
                        <span class="badge">3</span>
                    </div>
                    <div class="messages">
                        <i class="fas fa-envelope"></i>
                        <span class="badge">1</span>
                    </div>
                </div>
            </header>
            
            <div class="content-wrapper">
                <!-- Sección Take Action -->
                <section class="section take-action">
                    <div class="section-header">
                        <h3>Take Action</h3>
                        <a href="/tasks" class="see-all">Ver todas</a>
                    </div>
                    <div class="tasks-carousel" id="featuredTasks">
                        <!-- Las tareas se cargarán dinámicamente aquí -->
                    </div>
                </section>
                
                <!-- Impact Score -->
                <section class="impact-score-section">
                    <div class="impact-score-card">
                        <h4>Mi Impact Score</h4>
                        <div class="score-display" id="impactScoreDisplay">750</div>
                        <div class="progress-container">
                            <div class="progress-bar">
                                <div class="progress" style="width: 65%;"></div>
                            </div>
                            <div class="progress-info">
                                <span>65% hacia el siguiente nivel</span>
                            </div>
                        </div>
                        <div class="impact-stats">
                            <div class="stat-item">
                                <i class="fas fa-donate"></i>
                                <span>$1,200 donados</span>
                            </div>
                            <div class="stat-item">
                                <i class="fas fa-tasks"></i>
                                <span>8 tareas completadas</span>
                            </div>
                            <div class="stat-item">
                                <i class="fas fa-clock"></i>
                                <span>25 horas de voluntariado</span>
                            </div>
                        </div>
                    </div>
                </section>
                
                <!-- What's Happening Now -->
                <section class="section whats-happening">
                    <div class="section-header">
                        <h3>What's Happening Now</h3>
                        <a href="/news" class="see-all">Ver más</a>
                    </div>
                    <div class="news-carousel" id="newsCarousel">
                        <!-- Las noticias se cargarán dinámicamente aquí -->
                    </div>
                </section>
                
                <!-- Progreso Personal -->
                <section class="section personal-progress">
                    <h3>Mi Progreso</h3>
                    <div class="progress-grid">
                        <div class="progress-item">
                            <div class="progress-circle" data-value="75">
                                <svg class="progress-ring" width="80" height="80">
                                    <circle class="progress-ring-circle" stroke-width="8" fill="transparent" r="36" cx="40" cy="40"/>
                                </svg>
                                <div class="progress-text">75%</div>
                            </div>
                            <h4>Donaciones</h4>
                        </div>
                        <div class="progress-item">
                            <div class="progress-circle" data-value="60">
                                <svg class="progress-ring" width="80" height="80">
                                    <circle class="progress-ring-circle" stroke-width="8" fill="transparent" r="36" cx="40" cy="40"/>
                                </svg>
                                <div class="progress-text">60%</div>
                            </div>
                            <h4>Tareas</h4>
                        </div>
                        <div class="progress-item">
                            <div class="progress-circle" data-value="45">
                                <svg class="progress-ring" width="80" height="80">
                                    <circle class="progress-ring-circle" stroke-width="8" fill="transparent" r="36" cx="40" cy="40"/>
                                </svg>
                                <div class="progress-text">45%</div>
                            </div>
                            <h4>Voluntariado</h4>
                        </div>
                    </div>
                </section>
            </div>
        </main>
    </div>

    <script src="/js/app.js"></script>
</body>
</html>
{% extends "layout.njk" %}

{% block title %}Solidarity - Iniciar Sesión{% endblock %}

{% block head %}
<style>
    .login-container {
        max-width: 420px;
        margin: 4rem auto 0 auto;
        background: var(--white);
        border-radius: 16px;
        box-shadow: 0 8px 32px rgba(0,0,0,0.07);
        border: 1px solid var(--gray);
        padding: 2.5rem 2rem 2rem 2rem;
        display: flex;
        flex-direction: column;
        align-items: center;
    }
    .login-title {
        font-size: 2rem;
        font-weight: 700;
        color: var(--primary);
        margin-bottom: 1.2rem;
        text-align: center;
    }
    .login-desc {
        color: #6b7280;
        font-size: 1.05rem;
        margin-bottom: 2rem;
        text-align: center;
    }
    .login-form {
        width: 100%;
        display: flex;
        flex-direction: column;
        gap: 1.2rem;
    }
    .form-group {
        display: flex;
        flex-direction: column;
        gap: 0.4rem;
    }
    .form-group label {
        font-weight: 500;
        color: var(--darker);
    }
    .form-group input {
        padding: 0.75rem 1rem;
        border-radius: 8px;
        border: 1px solid var(--gray);
        font-size: 1rem;
        background: var(--light);
        transition: border 0.2s;
    }
    .form-group input:focus {
        border: 1.5px solid var(--primary);
        outline: none;
        background: #fff;
    }
    .form-group .input-icon {
        position: relative;
    }
    .form-group .input-icon input {
        padding-left: 2.5rem;
    }
    .form-group .input-icon i {
        position: absolute;
        left: 0.8rem;
        top: 50%;
        transform: translateY(-50%);
        color: var(--primary);
        font-size: 1.1rem;
    }
    .login-form .btn {
        margin-top: 0.5rem;
        width: 100%;
        font-size: 1.1rem;
    }
    .login-divider {
        width: 100%;
        text-align: center;
        margin: 1.5rem 0 1.2rem 0;
        color: #b0b0b0;
        font-size: 0.98rem;
        position: relative;
    }
    .login-divider:before,
    .login-divider:after {
        content: "";
        display: inline-block;
        width: 35%;
        height: 1px;
        background: #e2e8f0;
        vertical-align: middle;
        margin: 0 0.5rem;
    }
    .social-login {
        display: flex;
        flex-direction: column;
        gap: 0.7rem;
        width: 100%;
    }
    .social-btn {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.7rem;
        border: none;
        border-radius: 50px;
        padding: 0.7rem 1rem;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: background 0.2s, color 0.2s;
    }
    .social-btn.google {
        background: #fff;
        color: #ea4335;
        border: 1.5px solid #ea4335;
    }
    .social-btn.google:hover {
        background: #ea4335;
        color: #fff;
    }
    .social-btn.facebook {
        background: #fff;
        color: #1877f3;
        border: 1.5px solid #1877f3;
    }
    .social-btn.facebook:hover {
        background: #1877f3;
        color: #fff;
    }
    .social-btn.twitter {
        background: #fff;
        color: #1da1f2;
        border: 1.5px solid #1da1f2;
    }
    .social-btn.twitter:hover {
        background: #1da1f2;
        color: #fff;
    }
    .login-footer {
        margin-top: 1.5rem;
        text-align: center;
        color: #6b7280;
        font-size: 0.98rem;
    }
    .login-footer a {
        color: var(--primary);
        text-decoration: none;
        font-weight: 500;
        margin-left: 0.3rem;
    }
    .login-footer a:hover {
        text-decoration: underline;
    }
    @media (max-width: 600px) {
        .login-container {
            margin: 2rem 0 0 0;
            border-radius: 10px;
            padding: 1.5rem 0.7rem 1.2rem 0.7rem;
        }
    }
</style>
{% endblock %}

{% block content %}
<div class="login-container">
    <div class="login-title">
        <i class="fas fa-sign-in-alt"></i> Iniciar Sesión
    </div>
    <div class="login-desc">
        Accede a tu cuenta para continuar generando impacto.
    </div>
    <form class="login-form" id="loginForm" autocomplete="off">
        <div class="form-group">
            <label for="login">Correo electrónico o Nombre de usuario</label>
            <div class="input-icon">
                <i class="fas fa-user"></i>
                <input type="text" id="login" name="login" placeholder="Email o username" required>
            </div>
        </div>
        <div class="form-group">
            <label for="password">Contraseña</label>
            <div class="input-icon">
                <i class="fas fa-lock"></i>
                <input type="password" id="password" name="password" placeholder="Contraseña" required>
            </div>
        </div>
        <div id="loginError" style="color:#e53e3e; text-align:center; margin-bottom:1rem; display:none;"></div>
        <button type="submit" class="btn btn-primary">
            <i class="fas fa-sign-in-alt"></i> Iniciar Sesión
        </button>
    </form>
    <div class="login-divider">o inicia sesión con</div>
    <div class="social-login">
        <button type="button" class="social-btn google">
            <i class="fab fa-google"></i> Google
        </button>
        <button type="button" class="social-btn facebook">
            <i class="fab fa-facebook-f"></i> Facebook
        </button>
        <button type="button" class="social-btn twitter">
            <i class="fab fa-twitter"></i> Twitter
        </button>
    </div>
    <div class="login-footer">
        ¿No tienes cuenta?
        <a href="/register">Regístrate</a>
    </div>
</div>
{% endblock %}

{% block scripts %}

<script>

document.getElementById('loginForm').addEventListener('submit', async function(e) {
  e.preventDefault();

  const loginValue = document.getElementById('login').value.trim();
  const password = document.getElementById('password').value;

  let user = null;
  let error = null;

  // Si es email, intenta login directo
  if (loginValue.includes('@')) {
    const res = await supabase.auth.signInWithPassword({ email: loginValue, password });
    user = res.data?.user;
    error = res.error;
  } else {
    // Si es username, busca el email asociado
    const { data: profile, error: profileError } = await supabase
      .from('profiles')
      .select('email')
      .eq('username', loginValue)
      .maybeSingle();
    if (!profile || profileError) {
      document.getElementById('loginError').textContent = 'Usuario no encontrado';
      document.getElementById('loginError').style.display = 'block';
      return;
    }
    const res = await supabase.auth.signInWithPassword({ email: profile.email, password });
    user = res.data?.user;
    error = res.error;
  }

  if (error) {
    document.getElementById('loginError').textContent = error.message || 'No se pudo iniciar sesión';
    document.getElementById('loginError').style.display = 'block';
    return;
  }

  if (!user) {
    document.getElementById('loginError').textContent = 'No se pudo obtener el usuario';
    document.getElementById('loginError').style.display = 'block';
    return;
  }

  // Comprueba si el perfil existe en la tabla profiles
  const { data: profile, error: profileError } = await supabase
    .from('profiles')
    .select('id')
    .eq('id', user.id)
    .maybeSingle();

  if (!profile) {
    window.location.href = '/completar-perfil';
  } else {
    window.location.href = '/';
  }
});
</script>
{% endblock %}
{% extends "layout.njk" %}

{% block title %}Registro | Solidarity{% endblock %}

{% block head %}
  {{ super() }}
  <style>
    .register-section {
      max-width: 480px;
      margin: 3rem auto 2rem auto;
      background: #fff;
      border-radius: 16px;
      box-shadow: 0 2px 16px rgba(0,0,0,0.07);
      padding: 2.5rem 2rem 2rem 2rem;
    }
    .register-header {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 1rem;
      margin-bottom: 1.5rem;
    }
    .register-header img {
      height: 48px;
      width: 48px;
      border-radius: 12px;
      background: #f8fafc;
      object-fit: contain;
      box-shadow: 0 2px 8px rgba(0,0,0,0.06);
    }
    .register-header h1 {
      font-size: 2rem;
      font-weight: 900;
      color: var(--primary);
      margin: 0;
    }
    .register-form label {
      font-weight: 600;
      color: var(--primary);
      margin-bottom: 0.3rem;
      display: block;
    }
    .register-form input,
    .register-form select,
    .register-form textarea {
      width: 100%;
      padding: 0.7rem 1rem;
      border-radius: 8px;
      border: 1px solid #e5e7eb;
      margin-bottom: 1.1rem;
      font-size: 1rem;
      background: #f8fafc;
      transition: border 0.2s;
    }
    .register-form input:focus,
    .register-form select:focus,
    .register-form textarea:focus {
      border: 1.5px solid var(--accent);
      outline: none;
      background: #fff;
    }
    .register-form .interests-section {
      margin-bottom: 1.5rem;
    }
    .register-form .interests-title {
      font-weight: 600;
      color: var(--primary);
      margin-bottom: 0.5rem;
      font-size: 1.08rem;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }
    .register-form .interests-list {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem 0.5rem;
      margin-bottom: 0.2rem;
      justify-content: flex-start;
    }
    .register-form .interest-chip {
      background: #f1f5f9;
      color: var(--primary);
      border-radius: 999px;
      padding: 0.45rem 1.1rem;
      font-size: 1rem;
      cursor: pointer;
      border: 1.5px solid #e5e7eb;
      transition: background 0.2s, border 0.2s, color 0.2s;
      user-select: none;
      display: flex;
      align-items: center;
      gap: 0.4rem;
    }
    .register-form .interest-chip.selected {
      background: var(--accent);
      color: #fff;
      border: 1.5px solid var(--primary);
      font-weight: 600;
    }
    .register-form .photo-preview {
      display: flex;
      align-items: center;
      gap: 1rem;
      margin-bottom: 1.2rem;
    }
    .register-form .photo-preview img {
      width: 64px;
      height: 64px;
      border-radius: 50%;
      object-fit: cover;
      border: 2px solid var(--accent);
      background: #f1f5f9;
    }
    .register-form .photo-preview label {
      margin-bottom: 0;
      font-weight: 400;
      color: var(--primary);
      cursor: pointer;
    }
    .register-form .btn {
      width: 100%;
      margin-top: 0.5rem;
    }
    .register-form .form-desc {
      text-align: center;
      color: #6b7280;
      margin-bottom: 1.5rem;
      font-size: 1.08rem;
    }
    .register-form .success-message {
      background: #e6f7f1;
      color: var(--primary);
      border-radius: 8px;
      padding: 1rem;
      text-align: center;
      margin-bottom: 1rem;
      font-weight: 600;
    }
    .register-form .slogan-section {
      margin-bottom: 1.2rem;
    }
    .register-form .slogan-section label {
      font-weight: 600;
      color: var(--primary);
      margin-bottom: 0.3rem;
      display: block;
    }
    .register-form .slogan-section input {
      font-style: italic;
    }
    .social-register {
      display: flex;
      flex-direction: column;
      gap: 0.7rem;
      margin-bottom: 2rem;
      margin-top: 0.5rem;
    }
    .social-btn {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.7rem;
      border-radius: 8px;
      border: 1.5px solid #e5e7eb;
      background: #f8fafc;
      color: #222;
      font-weight: 600;
      font-size: 1rem;
      padding: 0.7rem 0;
      cursor: pointer;
      transition: background 0.18s, border 0.18s;
      text-decoration: none;
    }
    .social-btn:hover {
      background: var(--primary-light, #e6f0fa);
      border: 1.5px solid var(--primary);
      color: var(--primary);
    }
    .social-btn img {
      width: 22px;
      height: 22px;
      margin-right: 0.7rem;
      border-radius: 4px;
      background: #fff;
      object-fit: contain;
      box-shadow: 0 1px 3px rgba(0,0,0,0.04);
    }
    .social-divider {
      text-align: center;
      color: #b0b0b0;
      margin: 1.5rem 0 1.2rem 0;
      font-size: 1rem;
      position: relative;
    }
    .social-divider:before,
    .social-divider:after {
      content: "";
      display: inline-block;
      width: 35%;
      height: 1px;
      background: #e5e7eb;
      vertical-align: middle;
      margin: 0 0.7rem;
    }
    .register-form .mini-icon {
      width: 20px;
      height: 20px;
      margin-right: 7px;
      vertical-align: middle;
      border-radius: 4px;
      background: #f8fafc;
      object-fit: contain;
      box-shadow: 0 1px 3px rgba(0,0,0,0.04);
    }
    @media (max-width: 600px) {
      .register-section { padding: 1.2rem 0.5rem; }
      .register-header img { height: 36px; width: 36px; }
      .register-header h1 { font-size: 1.3rem; }
    }
  </style>
{% endblock %}

{% block content %}
<section class="register-section">
  <div class="register-header">
    <span style="display:flex;align-items:center;justify-content:center;height:48px;width:48px;border-radius:12px;background:#f8fafc;box-shadow:0 2px 8px rgba(0,0,0,0.06);">
      <i class="fas fa-hands-helping" style="font-size:2rem;color:var(--accent,#2dd4bf);"></i>
    </span>
    <h1>Únete a Solidarity</h1>
  </div>
  <div class="social-register">
    <a href="/auth/google" class="social-btn gmail">
      <img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/google/google-original.svg" alt="Google logo">
      Registrarse con Gmail
    </a>
    <a href="/auth/facebook" class="social-btn facebook">
      <img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/facebook/facebook-original.svg" alt="Facebook logo">
      Registrarse con Facebook
    </a>
    <a href="/auth/twitter" class="social-btn twitter">
      <img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/twitter/twitter-original.svg" alt="Twitter logo">
      Registrarse con Twitter
    </a>
  </div>
  <form class="register-form" id="registerForm" enctype="multipart/form-data" autocomplete="off">
    <div class="form-desc">
      Crea tu cuenta y empieza a transformar el mundo. Personaliza tu perfil, elige tus intereses y conecta con la comunidad.
    </div>
    <label for="photo">Foto de perfil</label>
    <div class="photo-preview">
      <img id="photoPreview" src="https://randomuser.me/api/portraits/lego/1.jpg" alt="Foto de perfil">
      <label for="photo" style="cursor:pointer;">
        <i class="fas fa-camera"></i> Cambiar foto
        <input type="file" id="photo" name="photo" accept="image/*" style="display:none;">
      </label>
    </div>
    <label for="firstName">Nombre</label>
    <input type="text" id="firstName" name="firstName" required placeholder="Tu nombre">

    <label for="lastName">Apellido</label>
    <input type="text" id="lastName" name="lastName" required placeholder="Tu apellido">

    <label for="username">Nombre de usuario</label>
    <input type="text" id="username" name="username" required placeholder="Ej: solidaridad123">

    <label for="email">Correo electrónico</label>
    <input type="email" id="email" name="email" required placeholder="tucorreo@email.com">

    <label for="password">Contraseña</label>
    <input type="password" id="password" name="password" required minlength="6" placeholder="Mínimo 6 caracteres">

    <label for="country">País</label>
    <select id="country" name="country" required>
      <option value="">Selecciona tu país</option>
      <option value="España">España</option>
      <option value="México">México</option>
      <option value="Argentina">Argentina</option>
      <option value="Colombia">Colombia</option>
      <option value="Chile">Chile</option>
      <option value="Perú">Perú</option>
      <option value="Uruguay">Uruguay</option>
      <option value="Venezuela">Venezuela</option>
      <option value="Bolivia">Bolivia</option>
      <option value="Ecuador">Ecuador</option>
      <option value="Costa Rica">Costa Rica</option>
      <option value="Panamá">Panamá</option>
      <option value="Otro">Otro</option>
    </select>

    <label for="birthdate">Fecha de nacimiento</label>
    <input type="date" id="birthdate" name="birthdate" required>

    <div class="slogan-section">
      <label for="slogan">Slogan personal o frase motivacional</label>
      <input type="text" id="slogan" name="slogan" maxlength="80" placeholder="Ej: ¡Pequeñas acciones, grandes cambios!">
    </div>

    <div class="interests-section">
      <div class="interests-title">
        <i class="fas fa-heart"></i> Intereses principales
      </div>
      <div class="interests-list" id="interestsList">
        <span class="interest-chip" data-value="medio ambiente">
          <img src="https://cdn-icons-png.flaticon.com/512/2909/2909769.png" class="mini-icon" alt="Medio ambiente">Medio ambiente
        </span>
        <span class="interest-chip" data-value="educación">
          <img src="https://cdn-icons-png.flaticon.com/512/3135/3135755.png" class="mini-icon" alt="Educación">Educación
        </span>
        <span class="interest-chip" data-value="inclusión">
          <img src="https://cdn-icons-png.flaticon.com/512/1077/1077012.png" class="mini-icon" alt="Inclusión">Inclusión
        </span>
        <span class="interest-chip" data-value="salud">
          <img src="https://cdn-icons-png.flaticon.com/512/833/833472.png" class="mini-icon" alt="Salud">Salud
        </span>
        <span class="interest-chip" data-value="animales">
          <img src="https://cdn-icons-png.flaticon.com/512/616/616408.png" class="mini-icon" alt="Animales">Animales
        </span>
        <span class="interest-chip" data-value="tecnología">
          <img src="https://cdn-icons-png.flaticon.com/512/2721/2721297.png" class="mini-icon" alt="Tecnología">Tecnología
        </span>
        <span class="interest-chip" data-value="arte">
          <img src="https://cdn-icons-png.flaticon.com/512/3595/3595455.png" class="mini-icon" alt="Arte">Arte
        </span>
        <span class="interest-chip" data-value="deporte">
          <img src="https://cdn-icons-png.flaticon.com/512/1041/1041916.png" class="mini-icon" alt="Deporte">Deporte
        </span>
        <span class="interest-chip" data-value="derechos humanos">
          <img src="https://cdn-icons-png.flaticon.com/512/3135/3135715.png" class="mini-icon" alt="Derechos Humanos">Derechos Humanos
        </span>
        <span class="interest-chip" data-value="pobreza">
          <img src="https://cdn-icons-png.flaticon.com/512/2917/2917995.png" class="mini-icon" alt="Pobreza">Pobreza
        </span>
        <span class="interest-chip" data-value="igualdad de género">
          <img src="https://cdn-icons-png.flaticon.com/512/3135/3135789.png" class="mini-icon" alt="Igualdad de género">Igualdad de género
        </span>
        <span class="interest-chip" data-value="cultura">
          <img src="https://cdn-icons-png.flaticon.com/512/3135/3135768.png" class="mini-icon" alt="Cultura">Cultura
        </span>
        <span class="interest-chip" data-value="innovación">
          <img src="https://cdn-icons-png.flaticon.com/512/3135/3135773.png" class="mini-icon" alt="Innovación">Innovación
        </span>
        <span class="interest-chip" data-value="emprendimiento">
          <img src="https://cdn-icons-png.flaticon.com/512/3135/3135792.png" class="mini-icon" alt="Emprendimiento">Emprendimiento
        </span>
        <span class="interest-chip" data-value="alimentación">
          <img src="https://cdn-icons-png.flaticon.com/512/1046/1046857.png" class="mini-icon" alt="Alimentación">Alimentación
        </span>
        <span class="interest-chip" data-value="energía">
          <img src="https://cdn-icons-png.flaticon.com/512/1046/1046876.png" class="mini-icon" alt="Energía">Energía
        </span>
        <span class="interest-chip" data-value="voluntariado">
          <img src="https://cdn-icons-png.flaticon.com/512/3135/3135766.png" class="mini-icon" alt="Voluntariado">Voluntariado
        </span>
      </div>
      <div style="font-size:0.97rem;color:#6b7280;margin-top:0.2rem;">
        Selecciona uno o varios intereses para personalizar tu experiencia.
      </div>
    </div>

    <label for="bio">Sobre ti</label>
    <textarea id="bio" name="bio" rows="2" maxlength="200" placeholder="Cuéntanos algo sobre ti..."></textarea>

    <button type="submit" class="btn btn-accent btn-lg">
      <i class="fas fa-user-plus"></i> Crear cuenta
    </button>
  </form>
  <div id="registerSuccess" class="success-message" style="display:none;">
    ¡Registro exitoso! Te hemos enviado un correo de bienvenida. Revisa tu bandeja de entrada.
  </div>

  <!-- Modal de éxito de registro -->
  <div id="registerModal" style="display:none; position:fixed; top:0; left:0; width:100vw; height:100vh; background:rgba(0,0,0,0.35); z-index:9999; align-items:center; justify-content:center;">
    <div style="background:#fff; border-radius:16px; max-width:350px; margin:auto; padding:2rem 1.5rem; box-shadow:0 8px 32px rgba(0,0,0,0.13); text-align:center; position:relative;">
      <span style="font-size:2.5rem; color:var(--accent,#2dd4bf); display:block; margin-bottom:1rem;">
        <i class="fas fa-envelope-open-text"></i>
      </span>
      <h2 style="color:var(--primary); font-weight:800; margin-bottom:0.7rem;">¡Registro iniciado!</h2>
      <p style="color:#444; font-size:1.08rem;">
        Si tu correo es válido, recibirás un email de confirmación.<br>
        Revisa tu bandeja de entrada y la carpeta de spam.<br>
        <span style="color:#888; font-size:0.97rem;">No cierres esta ventana hasta confirmar tu correo.</span>
      </p>
      <button onclick="document.getElementById('registerModal').style.display='none';" style="margin-top:1.2rem; background:var(--accent,#2dd4bf); color:#fff; border:none; border-radius:8px; padding:0.7rem 1.5rem; font-size:1.1rem; font-weight:600; cursor:pointer;">
        Entendido
      </button>
    </div>
  </div>
</section>
{% endblock %}

{% block scripts %}
  {{ super() }}
  <script>
    // Foto de perfil preview
document.getElementById('photo').addEventListener('change', function(e) {
  const file = e.target.files[0];
  if (file) {
    const reader = new FileReader();
    reader.onload = function(evt) {
      document.getElementById('photoPreview').src = evt.target.result;
    };
    reader.readAsDataURL(file);
  }
});

// Intereses selección
const interestsList = document.getElementById('interestsList');
let selectedInterests = [];
interestsList.addEventListener('click', function(e) {
  const chip = e.target.closest('.interest-chip');
  if (chip) {
    chip.classList.toggle('selected');
    const value = chip.getAttribute('data-value');
    if (chip.classList.contains('selected')) {
      selectedInterests.push(value);
    } else {
      selectedInterests = selectedInterests.filter(i => i !== value);
    }
  }
});

// Registro real con Supabase
document.getElementById('registerForm').addEventListener('submit', async function(e) {
  e.preventDefault();

  // Recoge los datos del formulario
  const email = document.getElementById('email').value.trim();
  const password = document.getElementById('password').value;
  const firstName = document.getElementById('firstName').value.trim();
  const lastName = document.getElementById('lastName').value.trim();
  const username = document.getElementById('username').value.trim();
  const birthdate = document.getElementById('birthdate').value;
  const country = document.getElementById('country').value;
  const slogan = document.getElementById('slogan').value.trim();
  const bio = document.getElementById('bio').value.trim();
  const interests = selectedInterests;
  const photoFile = document.getElementById('photo').files[0];

  // 1. Registra el usuario en Supabase Auth
  const { data: signUpData, error: signUpError } = await supabase.auth.signUp({ email, password });
  if (signUpError) {
    alert(signUpError.message || 'No se pudo registrar');
    return;
  }

  // 2. Sube la foto si existe
  let photo_url = null;
  if (photoFile) {
    const fileExt = photoFile.name.split('.').pop();
    const fileName = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}.${fileExt}`;
    const filePath = `avatars/${fileName}`;
    const { error: uploadError } = await supabase.storage
      .from('avatars')
      .upload(filePath, photoFile, { upsert: true });
    if (!uploadError) {
      const { data: publicUrlData } = supabase.storage.from('avatars').getPublicUrl(filePath);
      photo_url = publicUrlData.publicUrl;
    }
  }

  // 3. Inserta el perfil en la tabla profiles con el mismo id que el usuario de Auth
  const userId = signUpData.user?.id;
  if (userId) {
    await supabase
      .from('profiles')
      .insert([{
        id: userId,
        email,
        first_name: firstName,
        last_name: lastName,
        username,
        birthdate,
        country,
        slogan,
        bio,
        interests,
        photo_url
      }]);
  }

  // 4. Muestra mensaje de éxito
  document.getElementById('registerSuccess').style.display = 'block';
  document.getElementById('registerModal').style.display = 'flex';
  window.scrollTo({ top: 0, behavior: 'smooth' });
});
  </script>
{% endblock %}
{% extends "layout.njk" %}

{% block title %}Causas - Solidarity{% endblock %}

{% block head %}
  {{ super() }}
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
  <style>
    :root {
      --primary: #4a6fa5;
      --primary-dark: #166088;
      --gray: #e2e8f0;
      --white: #fff;
      --accent: #4fc3a1;
      --accent-dark: #3da58a;
      --urgent: #e53e3e;
    }
    body {
      background: #f8fafc;
      font-family: 'Inter', Arial, sans-serif;
      color: #2d3748;
      font-size: 1rem;
    }
    .modal-bg {
      display: none;
      position: fixed;
      top: 0; left: 0; width: 100vw; height: 100vh;
      background: rgba(0,0,0,0.35);
      z-index: 9999;
      align-items: center;
      justify-content: center;
    }
    .modal-bg.active { display: flex; }
    .modal-content {
      background: #fff;
      border-radius: 18px;
      max-width: 540px;
      width: 95vw;
      padding: 2.5rem 1.5rem 2rem 1.5rem;
      box-shadow: 0 8px 32px rgba(0,0,0,0.13);
      position: relative;
      animation: fadeIn 0.3s;
      max-height: 90vh;
      overflow-y: auto;
    }
    .close-modal {
      position: absolute;
      top: 1.1rem; right: 1.3rem;
      background: none;
      border: none;
      font-size: 2rem;
      color: #aaa;
      cursor: pointer;
      transition: color 0.2s;
    }
    .close-modal:hover { color: var(--primary, #4a6fa5); }
    .create-cause-title {
      font-size: 1.5rem;
      font-weight: 800;
      color: var(--primary, #4a6fa5);
      margin-bottom: 1.2rem;
      text-align: center;
    }
    .cause-form .form-group label { font-weight: 600; color: var(--primary, #4a6fa5); }
    .cause-form .form-group input,
    .cause-form .form-group textarea {
      width: 100%;
      padding: 0.7rem 1rem;
      border-radius: 8px;
      border: 1px solid #e5e7eb;
      margin-bottom: 0.2rem;
      font-size: 1rem;
      background: #f8fafc;
      transition: border 0.2s;
    }
    .cause-form .form-group input:focus,
    .cause-form .form-group textarea:focus {
      border: 1.5px solid var(--accent, #4fc3a1);
      outline: none;
      background: #fff;
    }
    .cause-form .form-group textarea {
      min-height: 90px;
      resize: vertical;
    }
    .form-inline-group {
      display: flex;
      gap: 1rem;
    }
    .form-inline-group .form-group { flex: 1; }
    .preview-img {
      width: 100%;
      max-width: 320px;
      height: 180px;
      object-fit: cover;
      border-radius: 10px;
      margin-top: 0.5rem;
      border: 1px solid #e5e7eb;
      display: none;
    }
    .points-info {
      background: var(--accent, #4fc3a1);
      color: #fff;
      border-radius: 8px;
      padding: 0.7rem 1rem;
      margin-top: 0.5rem;
      font-size: 1.05rem;
      display: flex;
      align-items: center;
      gap: 0.7rem;
    }
    .after-create {
      margin-top: 2rem;
      background: var(--primary-light, #e6f0fa);
      color: #444;
      border-radius: 10px;
      padding: 1.5rem 1rem;
      text-align: center;
    }
    @media (max-width: 600px) {
      .modal-content { padding: 1.2rem 0.5rem 1.2rem 0.5rem; }
      .create-cause-title { font-size: 1.1rem; }
      .form-inline-group { flex-direction: column; }
    }
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(-30px);}
      to { opacity: 1; transform: translateY(0);}
    }
    /* SOLO estilos de la página de causas, NO navbar, logo, nav-links, auth-buttons, user-info, footer */
    .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.5);
        z-index: 1000;
        justify-content: center;
        align-items: center;
    }
    .modal-content {
        background: #fff;
        padding: 2rem;
        border-radius: 10px;
        max-width: 500px;
        width: 90%;
        text-align: center;
    }
    .modal-buttons {
        display: flex;
        gap: 1rem;
        justify-content: center;
        margin-top: 1.5rem;
    }
    .main-container {
        max-width: 1200px;
        margin: 2rem auto;
        padding: 0 2rem;
    }
    .causes-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
    }
    .causes-header h1 {
        font-size: 2rem;
        color: var(--primary);
        font-weight: 700;
    }
    .causes-search {
        margin-bottom: 2rem;
        display: flex;
        align-items: center;
        gap: 0.7rem;
    }
    .causes-search input {
        flex: 1;
        padding: 0.6rem 1.2rem;
        border-radius: 7px;
        border: 1.5px solid var(--gray);
        font-size: 1.05rem;
        outline: none;
        transition: border 0.2s;
        background: #fff;
    }
    .causes-search input:focus {
        border-color: var(--primary);
    }
    .tabs {
        display: flex;
        border-bottom: 1px solid var(--gray);
        margin-bottom: 2rem;
    }
    .tab {
        padding: 0.75rem 1.5rem;
        cursor: pointer;
        position: relative;
        font-weight: 500;
        color: #6b7280;
        background: none;
        border: none;
        outline: none;
    }
    .tab.active {
        color: var(--primary);
        font-weight: 600;
    }
    .tab.active::after {
        content: '';
        position: absolute;
        bottom: -1px;
        left: 0;
        width: 100%;
        height: 3px;
        background: var(--primary);
    }
    .causes-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 2rem;
    }
    .cause-card {
        background: white;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
        transition: all 0.3s ease;
        border: 1px solid var(--gray);
        display: flex;
        flex-direction: column;
    }
    .cause-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    }
    .cause-image {
        height: 180px;
        overflow: hidden;
        position: relative;
    }
    .cause-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
    }
    .cause-card:hover .cause-image img {
        transform: scale(1.05);
    }
    .cause-badge {
        position: absolute;
        top: 1rem;
        right: 1rem;
        background: rgba(255, 255, 255, 0.9);
        padding: 0.3rem 0.8rem;
        border-radius: 50px;
        font-size: 0.8rem;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }
    .cause-badge.urgent {
        background: var(--urgent);
        color: white;
    }
    .cause-badge.points {
        background: var(--primary);
        color: white;
        left: 1rem;
        right: auto;
    }
    .cause-content {
        padding: 1.5rem;
        display: flex;
        flex-direction: column;
        flex: 1;
    }
    .cause-content h3 {
        font-size: 1.3rem;
        margin-bottom: 0.8rem;
        color: #2d3748;
    }
    .cause-content p {
        color: #6b7280;
        margin-bottom: 1.5rem;
        font-size: 0.95rem;
        line-height: 1.6;
        flex-grow: 1;
    }
    .cause-meta {
        display: flex;
        gap: 1rem;
        margin-bottom: 1.5rem;
        font-size: 0.85rem;
        flex-wrap: wrap;
    }
    .meta-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: #6b7280;
    }
    .meta-item i {
        color: var(--primary);
    }
    .beneficiaries-count {
        display: inline-flex;
        align-items: center;
        background: #f0f9ff;
        color: var(--primary);
        padding: 0.3rem 0.8rem;
        border-radius: 50px;
        font-size: 0.85rem;
        font-weight: 600;
    }
    .beneficiaries-count i {
        margin-right: 0.3rem;
    }
    .cause-progress {
        margin-bottom: 1.5rem;
    }
    .progress-bar {
        height: 8px;
        background: var(--gray);
        border-radius: 4px;
        overflow: hidden;
        margin-bottom: 0.5rem;
    }
    .progress-fill {
        height: 100%;
        background: var(--primary);
        border-radius: 4px;
    }
    .progress-info {
        display: flex;
        justify-content: space-between;
        font-size: 0.9rem;
        color: #6b7280;
    }
    .cause-actions {
        display: flex;
        gap: 0.8rem;
    }
    .cause-actions .btn {
        flex: 1;
        text-align: center;
        justify-content: center;
    }
    .btn-accent {
        background: var(--accent);
        color: white;
    }
    .btn-accent:hover {
        background: var(--accent-dark);
        transform: translateY(-2px);
    }
    .btn-sm {
        padding: 0.4rem 0.8rem;
        font-size: 0.85rem;
    }
    @media (max-width: 900px) {
        .main-container {
            padding: 1.2rem 0.5rem;
        }
    }
    @media (max-width: 768px) {
        .causes-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 1rem;
        }
        .causes-grid {
            grid-template-columns: 1fr;
        }
        .cause-actions {
            flex-direction: column;
        }
    }

    /* Nuevos estilos para el modal de causa */
    .modal-cause-details {
      display: flex;
      flex-direction: column;
      gap: 1.5rem;
    }
    .modal-cause-header {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
      padding-bottom: 1rem;
      border-bottom: 1px solid #e5e7eb;
    }
    .modal-cause-header h2 {
      color: var(--primary);
      font-size: 1.8rem;
      margin: 0;
    }
    .modal-cause-category {
      background: var(--accent);
      color: white;
      padding: 0.3rem 0.8rem;
      border-radius: 50px;
      font-size: 0.85rem;
      font-weight: 600;
      align-self: flex-start;
    }
    .modal-cause-main {
      display: grid;
      grid-template-columns: 1fr 1.5fr;
      gap: 1.5rem;
    }
    .modal-cause-image {
      border-radius: 12px;
      overflow: hidden;
      height: 240px;
    }
    .modal-cause-image img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
    .modal-cause-info {
      display: flex;
      flex-direction: column;
      gap: 1.2rem;
    }
    .modal-cause-progress {
      background: #f8fafc;
      padding: 1rem;
      border-radius: 10px;
    }
    .modal-cause-meta {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 0.8rem;
      font-size: 0.95rem;
    }
    .modal-cause-meta div {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      color: #6b7280;
    }
    .modal-cause-meta i {
      color: var(--primary);
      width: 1.2rem;
      text-align: center;
    }
    .modal-cause-shortdesc,
    .modal-cause-desc {
      padding: 1rem;
      background: #f8fafc;
      border-radius: 10px;
      font-size: 0.95rem;
      line-height: 1.6;
    }
    .modal-cause-shortdesc b,
    .modal-cause-desc b {
      color: var(--primary);
    }
    .modal-cause-actions {
      display: flex;
      gap: 1rem;
      margin-top: 0.5rem;
    }
    .modal-cause-linked {
      margin-top: 1.5rem;
      padding-top: 1.5rem;
      border-top: 1px solid #e5e7eb;
    }
    .modal-cause-linked h4 {
      color: var(--primary);
      margin-bottom: 1rem;
      font-size: 1.2rem;
    }
    .linked-items {
      display: flex;
      flex-direction: column;
      gap: 0.8rem;
    }
    .linked-item {
      display: flex;
      align-items: center;
      gap: 0.7rem;
      padding: 0.8rem 1rem;
      background: #f8fafc;
      border-radius: 8px;
      font-size: 0.95rem;
      transition: background 0.2s;
    }
    .linked-item:hover {
      background: #e6f0fa;
    }
    .linked-item i {
      color: var(--accent);
    }
    .linked-loading {
      color: #6b7280;
      text-align: center;
      padding: 1rem;
    }

    /* Modal de Causa */
    .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.35);
        z-index: 1000;
        justify-content: center;
        align-items: center;
    }
    .modal-content {
        background: #fff;
        border-radius: 18px;
        max-width: 740px;
        width: 95vw;
        padding: 2rem;
        box-shadow: 0 8px 32px rgba(74,111,165,0.13);
        position: relative;
        max-height: 90vh;
        overflow-y: auto;
    }
    #closeModal {
      position: absolute;
      top: 1.5rem;
      right: 1.5rem;
      background: none;
      border: none;
      font-size: 1.8rem;
      color: #6b7280;
      cursor: pointer;
      transition: color 0.2s;
    }
    #closeModal:hover {
      color: var(--primary);
    }
    .modal-cause-container {
      font-family: 'Poppins', sans-serif;
      color: #2d3748;
    }
    .modal-cause-header { margin-bottom: 1.8rem; }
    .modal-cause-title {
      font-size: 2rem;
      font-weight: 700;
      color: var(--primary);
      margin-bottom: 0.5rem;
      line-height: 1.3;
    }
    .modal-cause-image-wrapper {
      width: 100%;
      height: 320px;
      border-radius: 12px;
      overflow: hidden;
      position: relative;
      margin-bottom: 1.5rem;
      box-shadow: 0 4px 12px rgba(0,0,0,0.08);
    }
    .modal-cause-image {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: transform 0.3s ease;
    }
    .modal-cause-badge {
      position: absolute;
      top: 1.5rem;
      left: 1.5rem;
      background: rgba(255,255,255,0.95);
      padding: 0.5rem 1rem;
      border-radius: 50px;
      font-size: 0.9rem;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 0.6rem;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
      z-index: 2;
    }
    .modal-cause-badge.urgent {
      background: var(--urgent);
      color: white;
    }
    .modal-cause-progress-container {
      background: #f8fafc;
      padding: 1.5rem;
      border-radius: 12px;
      margin-bottom: 2rem;
      border: 1px solid #e5e7eb;
    }
    .progress-info {
      display: flex;
      justify-content: space-between;
      margin-top: 0.8rem;
      font-size: 0.95rem;
      color: #6b7280;
    }
    .modal-cause-meta-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
      gap: 1.5rem;
      margin-bottom: 2rem;
    }
    .meta-item {
      display: flex;
      align-items: center;
      gap: 0.8rem;
      font-size: 0.95rem;
    }
    .meta-icon {
      color: var(--primary);
      font-size: 1.1rem;
      width: 1.5rem;
      text-align: center;
    }
    .modal-cause-content { margin-bottom: 2rem; }
    .content-section { margin-bottom: 2rem; }
    .content-title {
      font-size: 1.3rem;
      font-weight: 600;
      color: var(--primary);
      margin-bottom: 1rem;
      display: flex;
      align-items: center;
      gap: 0.7rem;
    }
    .content-text {
      line-height: 1.7;
      color: #4b5563;
      font-size: 1.05rem;
    }
    .points-notice {
      background: #f0f9ff;
      border-left: 4px solid var(--accent);
      padding: 1rem;
      border-radius: 0 8px 8px 0;
      margin: 1.5rem 0;
      font-size: 0.95rem;
    }
    .modal-cause-actions {
      display: flex;
      gap: 1rem;
      margin-top: 2rem;
      flex-wrap: wrap;
    }
    .action-btn {
      flex: 1;
      min-width: 200px;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.7rem;
      padding: 1rem;
      border-radius: 8px;
      font-weight: 600;
      font-size: 1.05rem;
      transition: all 0.2s ease;
    }
    .action-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }
    .action-btn-primary {
      background: var(--primary);
      color: white;
    }
    .action-btn-accent {
      background: var(--accent);
      color: white;
    }
    .action-btn-secondary {
      background: #f8fafc;
      color: var(--primary);
      border: 1px solid var(--primary-light);
    }
    .share-section {
      margin-top: 3rem;
      padding-top: 2rem;
      border-top: 1px solid #e5e7eb;
    }
    .share-title {
      font-size: 1.3rem;
      font-weight: 600;
      color: var(--primary);
      margin-bottom: 1.5rem;
      text-align: center;
    }
    .share-content {
      background: #f8fafc;
      border-radius: 12px;
      padding: 1.5rem;
      margin-bottom: 1.5rem;
      position: relative;
    }
    .share-text {
      font-size: 1rem;
      line-height: 1.6;
      color: #4b5563;
      margin-bottom: 1rem;
    }
    .share-highlight {
      color: var(--primary);
      font-weight: 600;
    }
    .share-buttons {
      display: flex;
      justify-content: center;
      gap: 1rem;
      flex-wrap: wrap;
    }
    .share-btn {
      display: flex;
      align-items: center;
      gap: 0.7rem;
      padding: 0.8rem 1.5rem;
      border-radius: 50px;
      font-weight: 600;
      color: white;
      transition: all 0.2s;
    }
    .share-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    .share-btn-facebook { background: #3b5998; }
    .share-btn-twitter { background: #1da1f2; }
    .share-btn-whatsapp { background: #25d366; }
    .share-btn-link { background: var(--primary); }
    @media (max-width: 768px) {
      .modal-cause-title { font-size: 1.6rem; }
      .modal-cause-image-wrapper { height: 240px; }
      .modal-cause-actions { flex-direction: column; }
      .action-btn { width: 100%; }
    }
    @keyframes fadeInOut {
      0% { opacity: 0; transform: translateX(-50%) translateY(20px); }
      15% { opacity: 1; transform: translateX(-50%) translateY(0); }
      85% { opacity: 1; transform: translateX(-50%) translateY(0); }
      100% { opacity: 0; transform: translateX(-50%) translateY(-20px); }
    }
  </style>
{% endblock %}

{% block content %}
  <!-- Modal para usuarios no logueados -->
  <div class="modal-bg" id="loginModal">
    <div class="modal-content">
      <h3>Para crear una causa</h3>
      <p>Debes ser un usuario registrado. ¿Deseas iniciar sesión o registrarte ahora?</p>
      <div class="modal-buttons">
        <a href="/login?return=/causes" class="btn btn-primary">Iniciar Sesión</a>
        <a href="/register?return=/causes" class="btn btn-outline">Registrarse</a>
        <button id="cancelModal" class="btn">Cancelar</button>
      </div>
    </div>
  </div>

  <!-- Modal emergente para crear causa -->
  <div id="createCauseModal" class="modal-bg">
    <div class="modal-content">
      <button class="close-modal" id="closeCreateCauseModal" title="Cerrar">&times;</button>
      <div class="create-cause-title">
        <i class="fas fa-plus-circle"></i> Crear Nueva Causa Solidaria
      </div>
      <form class="cause-form" id="causeForm" autocomplete="off">
        <div class="form-group">
          <label for="title">Título de la causa</label>
          <input type="text" id="title" name="title" placeholder="Ej: Agua limpia para todos" required>
        </div>
        <div class="form-group">
          <label for="short_description">Descripción corta (máx. 3 líneas)</label>
          <textarea id="short_description" name="short_description" maxlength="180" placeholder="Resumen breve para mostrar en la tarjeta..." required></textarea>
        </div>
        <div class="form-group">
          <label for="description">Descripción exhaustiva</label>
          <textarea id="description" name="description" placeholder="Describe la causa, el objetivo, contexto, cómo se usará la ayuda..." required></textarea>
        </div>
        <div class="form-group">
          <label for="photo">Foto principal</label>
          <input type="file" id="photo" name="photo" accept="image/*">
          <img id="previewImg" class="preview-img" alt="Vista previa de la foto" style="display:none;">
        </div>
        <div class="form-inline-group">
          <div class="form-group">
            <label for="goal">Meta de recaudación (€)</label>
            <input type="number" id="goal" name="goal" min="1" step="0.01" placeholder="Ej: 5000" required>
          </div>
          <div class="form-group">
            <label for="beneficiaries">Nº de beneficiarios</label>
            <input type="number" id="beneficiaries" name="beneficiaries" min="1" placeholder="Ej: 100" required>
          </div>
        </div>
        <div class="form-inline-group">
          <div class="form-group">
            <label for="city">Ciudad</label>
            <input type="text" id="city" name="city" placeholder="Ej: Madrid" required>
          </div>
          <div class="form-group">
            <label for="country">País</label>
            <input type="text" id="country" name="country" placeholder="Ej: España" required>
          </div>
        </div>
        <div class="form-group">
          <label for="points">Puntos por colaborar</label>
          <input type="number" id="points" name="points" min="1" max="1000" value="50" required>
          <div class="points-info" id="pointsText">
            <i class="fas fa-star"></i>
            Colaborar en esta causa otorgará <strong>50 puntos</strong> a cada participante.
          </div>
        </div>
        <input type="hidden" id="lat" name="lat">
        <input type="hidden" id="lng" name="lng">
        <button type="submit" class="btn btn-primary" style="margin-top:1rem;">
          <i class="fas fa-paper-plane"></i> Crear Causa
        </button>
      </form>
      <div class="after-create" id="afterCreate" style="display:none;">
        <h3>¡Causa creada con éxito!</h3>
        <p>¿Quieres agregar tareas o retos específicos vinculados a esta causa?</p>
        <a href="/tasks/create" class="btn btn-accent">
          <i class="fas fa-tasks"></i> Agregar tareas/retos
        </a>
        <br>
        <a href="/causes" class="btn btn-outline" style="margin-top:1rem;">
          <i class="fas fa-arrow-left"></i> Volver a causas
        </a>
      </div>
    </div>
  </div>

  <!-- Modal de Causa -->
  <div id="causeModal" class="modal" style="display:none; position:fixed; z-index:9999; left:0; top:0; width:100vw; height:100vh; background:rgba(0,0,0,0.35); align-items:center; justify-content:center;">
    <div class="modal-content" style="background:#fff; border-radius:18px; max-width:740px; width:95vw; padding:2rem; box-shadow:0 8px 32px rgba(74,111,165,0.13); position:relative; max-height:90vh; overflow-y:auto;">
      <button id="closeModal" style="position:absolute; top:1.5rem; right:1.5rem; background:none; border:none; font-size:1.8rem; color:#6b7280; cursor:pointer; transition:color 0.2s;" onmouseover="this.style.color='#4a6fa5'" onmouseout="this.style.color='#6b7280'">&times;</button>
      <div id="modalBody" style="padding:0.5rem;">
        <!-- Contenido dinámico -->
      </div>
    </div>
  </div>

  <!-- Contenido principal de la página de causas -->
  <div class="main-container">
    <div class="causes-header">
      <h1>Causas Solidarias</h1>
      <a href="#" id="create-cause-btn" class="btn btn-primary">
        <i class="fas fa-plus"></i> Crear Causa
      </a>
    </div>
    <div class="causes-search">
      <input type="text" id="search-input" placeholder="Buscar por título, país, descripción...">
      <i class="fas fa-search" style="color:#4a6fa5;"></i>
    </div>
    <div class="tabs">
      <button class="tab active" data-filter="all">Todas</button>
      <button class="tab" data-filter="education">Educación</button>
      <button class="tab" data-filter="health">Salud</button>
      <button class="tab" data-filter="environment">Medio Ambiente</button>
      <button class="tab" data-filter="animals">Animales</button>
      <button class="tab" data-filter="community">Comunidad</button>
    </div>
    <div class="causes-grid" id="causesList">
      <!-- Las causas se cargarán dinámicamente desde Supabase -->
    </div>
  </div>
{% endblock %}

{% block scripts %}
{{ super() }}
<script>
let currentFilter = "all";

document.addEventListener('DOMContentLoaded', async function() {
  // Abrir modal de crear causa
  document.getElementById('create-cause-btn').onclick = async function(e) {
    e.preventDefault();
    const { data: { session } } = await supabase.auth.getSession();
    if (session?.user) {
      document.getElementById('createCauseModal').classList.add('active');
      document.body.style.overflow = 'hidden';
    } else {
      document.getElementById('loginModal').classList.add('active');
    }
  };

  // Cerrar modal de crear causa
  document.getElementById('closeCreateCauseModal').onclick = function() {
    document.getElementById('createCauseModal').classList.remove('active');
    document.body.style.overflow = '';
    document.getElementById('causeForm').reset();
    document.getElementById('previewImg').style.display = 'none';
    document.getElementById('causeForm').style.display = 'block';
    document.getElementById('afterCreate').style.display = 'none';
  };

  // Cerrar modal al hacer click fuera del contenido
  document.getElementById('createCauseModal').onclick = function(e) {
    if (e.target === this) {
      this.classList.remove('active');
      document.body.style.overflow = '';
      document.getElementById('causeForm').style.display = 'block';
      document.getElementById('afterCreate').style.display = 'none';
    }
  };

  // Modal login
  document.getElementById('cancelModal').onclick = function() {
    document.getElementById('loginModal').classList.remove('active');
  };
  document.getElementById('loginModal').onclick = function(e) {
    if (e.target === this) this.classList.remove('active');
  };

  // Tabs
  document.querySelectorAll('.tab').forEach(tab => {
    tab.addEventListener('click', function() {
      document.querySelector('.tab.active').classList.remove('active');
      this.classList.add('active');
      loadCausesFromSupabase(this.getAttribute('data-filter'));
    });
  });

  // Búsqueda
  document.getElementById('search-input').addEventListener('input', function() {
    loadCausesFromSupabase(currentFilter, this.value);
  });

  // Vista previa de imagen
  document.getElementById('photo').addEventListener('change', function(e) {
    const file = e.target.files[0];
    const preview = document.getElementById('previewImg');
    if (file) {
      const reader = new FileReader();
      reader.onload = function(evt) {
        preview.src = evt.target.result;
        preview.style.display = 'block';
      };
      reader.readAsDataURL(file);
    } else {
      preview.src = '';
      preview.style.display = 'none';
    }
  });

  // Actualizar texto de puntos
  document.getElementById('points').addEventListener('input', function() {
    const val = this.value || 0;
    document.getElementById('pointsText').innerHTML = `<i class="fas fa-star"></i> Colaborar en esta causa otorgará <strong>${val} puntos</strong> a cada participante.`;
  });

  // Envío del formulario
  document.getElementById('causeForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    // Recoge los datos del formulario
    const title = document.getElementById('title').value.trim();
    const short_description = document.getElementById('short_description').value.trim();
    const description = document.getElementById('description').value.trim();
    const goal = parseFloat(document.getElementById('goal').value);
    const beneficiaries = parseInt(document.getElementById('beneficiaries').value, 10);
    const city = document.getElementById('city').value.trim();
    const country = document.getElementById('country').value.trim();
    const points = parseInt(document.getElementById('points').value, 10);
    const photoFile = document.getElementById('photo').files[0];
    let photo_url = null;

    // Sube la foto a Supabase Storage si existe
    if (photoFile) {
      const fileExt = photoFile.name.split('.').pop();
      const fileName = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}.${fileExt}`;
      const filePath = `public/${fileName}`;
      const { error: uploadError } = await supabase.storage
        .from('causes')
        .upload(filePath, photoFile, { upsert: true });
      if (uploadError) {
        alert('Error subiendo la foto: ' + uploadError.message);
        return;
      }
      const { data } = supabase.storage.from('causes').getPublicUrl(filePath);
      photo_url = data.publicUrl;
    }

    // Guarda la causa en la tabla
    const { data: { session } } = await supabase.auth.getSession();
    const user = session?.user;
    if (!user) {
      alert('Debes iniciar sesión para crear una causa.');
      return;
    }

    const lat = document.getElementById('lat').value;
    const lng = document.getElementById('lng').value;

    const { error } = await supabase
      .from('causes')
      .insert([{
        title,
        short_description,
        description,
        goal,
        beneficiaries,
        city,
        country,
        lat: lat ? parseFloat(lat) : null,
        lng: lng ? parseFloat(lng) : null,
        points,
        photo_url,
        user_id: user.id,
        raised: 0,
        donors: 0,
        urgent: false,
        category: 'community' // Puedes cambiar esto según tu lógica
      }]);

    if (error) {
      alert('Error al crear la causa: ' + error.message);
      return;
    }

    document.getElementById('causeForm').style.display = 'none';
    document.getElementById('afterCreate').style.display = 'block';
    loadCausesFromSupabase();
  });

  // Cargar causas al iniciar
  await loadCausesFromSupabase();
});

async function loadCausesFromSupabase(filter = "all", searchTerm = "") {
  currentFilter = filter;
  let query = supabase
    .from('causes')
    .select('*')
    .order('created_at', { ascending: false });

  if (filter !== "all") {
    query = query.eq('category', filter);
  }
  if (searchTerm && searchTerm.trim() !== "") {
    query = query.or(`title.ilike.%${searchTerm}%,description.ilike.%${searchTerm}%,city.ilike.%${searchTerm}%,country.ilike.%${searchTerm}%`);
  }
  const { data: causes, error } = await query;
  const causesList = document.getElementById('causesList');
  if (error) {
    causesList.innerHTML = '<div style="color:#e53e3e;text-align:center;">Error al cargar las causas.</div>';
    return;
  }
  causesList.innerHTML = '';
  if (!causes || causes.length === 0) {
    causesList.innerHTML = '<div style="color:#6b7280;text-align:center;padding:2rem;grid-column:1/-1;">No se encontraron causas.</div>';
    return;
  }
  causes.forEach(cause => {
    const progress = cause.goal ? Math.min(Math.round((cause.raised / cause.goal) * 100), 100) : 0;
    const urgentBadge = cause.urgent ? `<div class="cause-badge urgent"><i class="fas fa-exclamation-circle"></i> Urgente</div>` : "";
    const pointsBadge = `<div class="cause-badge points"><i class="fas fa-star"></i> +${cause.points || 0} pts</div>`;
    const location = cause.city && cause.country ? `${cause.city}, ${cause.country}` : "";
    const card = document.createElement('div');
    card.className = 'cause-card';
    card.innerHTML = `
      <div class="cause-image">
        <img src="${cause.photo_url || '/img/causa-default.jpg'}" alt="${cause.title}" 
  onerror="if (!this._defaulted) { this._defaulted = true; this.src='/img/causa-default.jpg'; }">
        ${urgentBadge}
        ${pointsBadge}
      </div>
      <div class="cause-content">
        <h3>${cause.title}</h3>
        <p>${cause.short_description || ''}</p>
        <div class="cause-meta">
          <div class="meta-item"><i class="fas fa-map-marker-alt"></i> ${location}</div>
          <div class="meta-item"><i class="fas fa-users"></i> ${cause.donors || 0} donantes</div>
          <div class="beneficiaries-count">
            <i class="fas fa-heart"></i> Beneficia a ${cause.beneficiaries || 0} personas
          </div>
        </div>
        <div class="cause-progress">
          <div class="progress-bar">
            <div class="progress-fill" style="width: ${progress}%"></div>
          </div>
          <div class="progress-info">
            <span>${progress}% completado</span>
            <span>${cause.raised || 0} € de ${cause.goal || 0} €</span>
          </div>
        </div>
        <div class="cause-actions">
          <button class="btn btn-primary view-cause-btn" data-cause-id="${cause.id}">Ver más</button>
          <a href="#" class="btn btn-accent">Donar</a>
        </div>
      </div>
    `;
    causesList.appendChild(card);
  });
  window.causes = causes; // Añade esto después de obtener las causas
}

// Geocodificación automática al cambiar ciudad o país
async function geocodeCityCountry() {
  const city = document.getElementById('city').value.trim();
  const country = document.getElementById('country').value.trim();
  if (!city || !country) return;

  const query = encodeURIComponent(`${city}, ${country}`);
  const url = `https://nominatim.openstreetmap.org/search?q=${query}&format=json&limit=1`;

  try {
    const res = await fetch(url, { headers: { 'Accept-Language': 'es' } });
    const data = await res.json();
    if (data && data.length > 0) {
      document.getElementById('lat').value = data[0].lat;
      document.getElementById('lng').value = data[0].lon;
    } else {
      document.getElementById('lat').value = '';
      document.getElementById('lng').value = '';
    }
  } catch (e) {
    document.getElementById('lat').value = '';
    document.getElementById('lng').value = '';
  }
}

document.getElementById('city').addEventListener('change', geocodeCityCountry);
document.getElementById('country').addEventListener('change', geocodeCityCountry);

// Ver detalles de causa
document.addEventListener('click', async function(e) {
  if (e.target.classList.contains('view-cause-btn')) {
    const causeId = e.target.getAttribute('data-cause-id');
    const cause = window.causes.find(c => c.id == causeId);
    const progress = cause.goal ? Math.min(Math.round((cause.raised / cause.goal) * 100), 100) : 0;
    const createdDate = new Date(cause.created_at).toLocaleDateString('es-ES', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });

    // Rellena el modal con los datos
    document.getElementById('modalBody').innerHTML = `
      <div class="modal-cause-details">
        <div class="modal-cause-header">
          <h2>${cause.title}</h2>
          <span class="modal-cause-category">
            <i class="fas fa-hands-helping"></i> Causa Solidaria
          </span>
        </div>
        
        <div class="modal-cause-image-container">
          <img class="modal-cause-image" src="${cause.photo_url || '/img/causa-default.jpg'}" 
               alt="Imagen de la causa ${cause.title}"
               onerror="this.src='/img/causa-default.jpg'">
          
          <div class="modal-cause-badges">
            ${cause.urgent ? `
            <div class="modal-cause-badge urgent">
              <i class="fas fa-exclamation-circle"></i> Urgente
            </div>` : ''}
            
            <div class="modal-cause-badge points">
              <i class="fas fa-star"></i> +${cause.points || 0} Puntos
            </div>
          </div>
        </div>
        
        <div class="modal-cause-progress-container">
          <div class="progress-bar">
            <div class="progress-fill" style="width: ${progress}%"></div>
          </div>
          <div class="progress-info">
            <span>${progress}% completado</span>
            <span>${cause.raised || 0} € de ${cause.goal || 0} €</span>
          </div>
        </div>
        
        <div class="modal-cause-meta">
          <div class="modal-cause-meta-item">
            <i class="fas fa-map-marker-alt"></i>
            <span>${cause.city || 'Sin ubicación'}${cause.country ? ', ' + cause.country : ''}</span>
          </div>
          
          <div class="modal-cause-meta-item">
            <i class="fas fa-users"></i>
            <span>${cause.donors || 0} donantes</span>
          </div>
          
          <div class="modal-cause-meta-item">
            <i class="fas fa-heart"></i>
            <span>${cause.beneficiaries || 0} beneficiarios</span>
          </div>
          
          <div class="modal-cause-meta-item">
            <i class="fas fa-calendar-alt"></i>
            <span>${createdDate}</span>
          </div>
        </div>
        
        <div class="modal-cause-content">
          <div class="modal-cause-section">
            <h3><i class="fas fa-align-left"></i> Descripción</h3>
            <p>${cause.description || 'No hay descripción disponible para esta causa.'}</p>
          </div>
        </div>
        
        <div class="modal-cause-actions">
          <a href="#" class="btn btn-primary" style="display:flex; align-items:center; justify-content:center; gap:0.7rem;">
            <i class="fas fa-donate"></i> Donar ahora
          </a>
          <a href="#" class="btn btn-accent" style="display:flex; align-items:center; justify-content:center; gap:0.7rem;">
            <i class="fas fa-hands-helping"></i> Colaborar
          </a>
        </div>
        
        <div class="modal-cause-share">
          <h3><i class="fas fa-share-alt"></i> Comparte esta causa</h3>
          
          <div class="share-content">
            <div class="share-title">¡Únete a esta causa solidaria!</div>
            <div class="share-text">
              "${cause.short_description || 'Ayuda a hacer realidad este proyecto solidario'}"<br><br>
              Cada contribución cuenta y nos acerca más a la meta de ${cause.goal || 0}€ para ayudar a ${cause.beneficiaries || 0} personas.
            </div>
            
            <div class="share-meta">
              <div class="share-meta-item">
                <i class="fas fa-bullseye"></i> ${progress}% alcanzado
              </div>
              <div class="share-meta-item">
                <i class="fas fa-users"></i> ${cause.donors || 0} colaboradores
              </div>
              ${cause.urgent ? `
              <div class="share-meta-item">
                <i class="fas fa-exclamation-circle"></i> Necesidad urgente
              </div>` : ''}
            </div>
          </div>
          
          <div class="share-buttons">
            <a href="#" class="share-button facebook" onclick="shareOnPlatform('facebook', '${cause.title}', '${window.location.origin}/causes/${cause.id}')">
              <i class="fab fa-facebook-f"></i> Facebook
            </a>
            <a href="#" class="share-button twitter" onclick="shareOnPlatform('twitter', '${cause.title}', '${window.location.origin}/causes/${cause.id}')">
              <i class="fab fa-twitter"></i> Twitter
            </a>
            <a href="#" class="share-button whatsapp" onclick="shareOnPlatform('whatsapp', '${cause.title}', '${window.location.origin}/causes/${cause.id}')">
              <i class="fab fa-whatsapp"></i> WhatsApp
            </a>
            <a href="#" class="share-button link" onclick="copyCauseLink('${window.location.origin}/causes/${cause.id}')">
              <i class="fas fa-link"></i> Copiar enlace
            </a>
          </div>
        </div>
        
        <div class="modal-cause-linked">
          <h3><i class="fas fa-link"></i> Acciones relacionadas</h3>
          <div class="linked-items" id="linked-items">
            <div class="linked-loading">Cargando tareas y actividades relacionadas...</div>
          </div>
        </div>
      </div>
    `;

    // Cargar elementos vinculados
    loadLinkedItems(cause.id);
    
    // Mostrar modal
    document.getElementById('causeModal').style.display = 'flex';
    document.body.style.overflow = 'hidden';
  }
});

// Función para compartir en plataformas específicas
function shareOnPlatform(platform, title, url) {
  let shareUrl = '';
  const text = `Únete a esta causa solidaria: "${title}" - Cada contribución cuenta!`;
  
  switch(platform) {
    case 'facebook':
      shareUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}`;
      break;
    case 'twitter':
      shareUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}&url=${encodeURIComponent(url)}`;
      break;
    case 'whatsapp':
      shareUrl = `https://wa.me/?text=${encodeURIComponent(text + ' ' + url)}`;
      break;
    default:
      return;
  }
  
  window.open(shareUrl, '_blank', 'width=600,height=400');
}

// Función para copiar enlace
function copyCauseLink(url) {
  navigator.clipboard.writeText(url).then(() => {
    // Mostrar notificación de copiado
    const notification = document.createElement('div');
    notification.style.position = 'fixed';
    notification.style.bottom = '20px';
    notification.style.left = '50%';
    notification.style.transform = 'translateX(-50%)';
    notification.style.backgroundColor = 'var(--accent)';
    notification.style.color = 'white';
    notification.style.padding = '10px 20px';
    notification.style.borderRadius = '50px';
    notification.style.boxShadow = '0 4px 12px rgba(0,0,0,0.15)';
    notification.style.zIndex = '10000';
    notification.style.animation = 'fadeInOut 2.5s ease-in-out';
    notification.innerText = '¡Enlace copiado al portapapeles!';
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
      notification.remove();
    }, 2500);
  }).catch(err => {
    console.error('Error al copiar:', err);
    prompt('Por favor, copia este enlace:', url);
  });
}

// Cerrar modal y restaurar scroll
document.getElementById('closeModal').addEventListener('click', function() {
  document.getElementById('causeModal').style.display = 'none';
  document.body.style.overflow = '';
});

// Cerrar al hacer clic fuera del contenido
document.getElementById('causeModal').addEventListener('click', function(e) {
  if (e.target === this) {
    this.style.display = 'none';
    document.body.style.overflow = '';
  }
});

// Puedes mantener tu función loadLinkedItems aquí
function loadLinkedItems(causeId) {
  const container = document.getElementById('linked-items');
  if (container) {
    container.innerHTML = '<div class="linked-loading">No hay acciones vinculadas aún.</div>';
  }
}

// Ejemplo de funciones para donar/colaborar (puedes personalizar)
function donateToCause(causeId) {
  alert('Funcionalidad de donación próximamente.');
}
function volunteerForCause(causeId) {
  alert('Funcionalidad de voluntariado próximamente.');
}

// Mostrar el modal con los detalles de la causa
async function showCauseModal(causeId) {
  const cause = window.causes.find(c => c.id == causeId);
  const progress = cause.goal ? Math.min(Math.round((cause.raised / cause.goal) * 100), 100) : 0;
  const createdDate = new Date(cause.created_at).toLocaleDateString('es-ES', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });

  document.getElementById('modalBody').innerHTML = `
    <div class="modal-cause-container">
      <div class="modal-cause-header">
        <h1 class="modal-cause-title">${cause.title}</h1>
      </div>
      <div class="modal-cause-image-wrapper">
        <img class="modal-cause-image" src="${cause.photo_url || '/img/causa-default.jpg'}" 
             alt="Imagen de la causa ${cause.title}"
             onerror="this.src='/img/causa-default.jpg'">
        ${cause.urgent ? `
        <div class="modal-cause-badge urgent">
          <i class="fas fa-exclamation-circle"></i> Urgente
        </div>` : ''}
      </div>
      <div class="modal-cause-progress-container">
        <div class="progress-bar">
          <div class="progress-fill" style="width: ${progress}%"></div>
        </div>
        <div class="progress-info">
          <span>${progress}% completado</span>
          <span>${cause.raised || 0} € de ${cause.goal || 0} €</span>
        </div>
      </div>
      <div class="points-notice">
        <i class="fas fa-star" style="color: var(--accent);"></i> Cada euro donado recibirá <strong>${cause.points || 20} puntos</strong> de impacto.
      </div>
      <div class="modal-cause-meta-grid">
        <div class="meta-item">
          <span class="meta-icon"><i class="fas fa-map-marker-alt"></i></span>
          <span>${cause.city || 'Sin ubicación'}${cause.country ? ', ' + cause.country : ''}</span>
        </div>
        <div class="meta-item">
          <span class="meta-icon"><i class="fas fa-users"></i></span>
          <span>${cause.donors || 0} donantes</span>
        </div>
        <div class="meta-item">
          <span class="meta-icon"><i class="fas fa-heart"></i></span>
          <span>${cause.beneficiaries || 0} beneficiarios</span>
        </div>
        <div class="meta-item">
          <span class="meta-icon"><i class="fas fa-calendar-alt"></i></span>
          <span>${createdDate}</span>
        </div>
      </div>
      <div class="modal-cause-content">
        <div class="content-section">
          <h3 class="content-title">
            <i class="fas fa-align-left"></i> Resumen
          </h3>
          <p class="content-text">${cause.short_description || 'No hay resumen disponible para esta causa.'}</p>
        </div>
        <div class="content-section">
          <h3 class="content-title">
            <i class="fas fa-info-circle"></i> Descripción completa
          </h3>
          <p class="content-text">${cause.description || 'No hay descripción detallada disponible para esta causa.'}</p>
        </div>
      </div>
      <div class="modal-cause-actions">
        <button class="action-btn action-btn-primary" onclick="donateToCause('${cause.id}')">
          <i class="fas fa-donate"></i> Donar ahora
        </button>
        <button class="action-btn action-btn-accent" onclick="volunteerForCause('${cause.id}')">
          <i class="fas fa-hands-helping"></i> Colaborar
        </button>
       
{% extends "layout.njk" %}

{% block title %}Causas - Solidarity{% endblock %}

{% block head %}
  {{ super() }}
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
  <style>
    :root {
      --primary: #4a6fa5;
      --primary-dark: #166088;
      --gray: #e2e8f0;
      --white: #fff;
      --accent: #4fc3a1;
      --accent-dark: #3da58a;
      --urgent: #e53e3e;
    }
    body {
      background: #f8fafc;
      font-family: 'Inter', Arial, sans-serif;
      color: #2d3748;
      font-size: 1rem;
    }
    .modal-bg {
      display: none;
      position: fixed;
      top: 0; left: 0; width: 100vw; height: 100vh;
      background: rgba(0,0,0,0.35);
      z-index: 9999;
      align-items: center;
      justify-content: center;
    }
    .modal-bg.active { display: flex; }
    .modal-content {
      background: #fff;
      border-radius: 18px;
      max-width: 540px;
      width: 95vw;
      padding: 2.5rem 1.5rem 2rem 1.5rem;
      box-shadow: 0 8px 32px rgba(0,0,0,0.13);
      position: relative;
      animation: fadeIn 0.3s;
      max-height: 90vh;
      overflow-y: auto;
    }
    .close-modal {
      position: absolute;
      top: 1.1rem; right: 1.3rem;
      background: none;
      border: none;
      font-size: 2rem;
      color: #aaa;
      cursor: pointer;
      transition: color 0.2s;
    }
    .close-modal:hover { color: var(--primary, #4a6fa5); }
    .create-cause-title {
      font-size: 1.5rem;
      font-weight: 800;
      color: var(--primary, #4a6fa5);
      margin-bottom: 1.2rem;
      text-align: center;
    }
    .cause-form .form-group label { font-weight: 600; color: var(--primary, #4a6fa5); }
    .cause-form .form-group input,
    .cause-form .form-group textarea {
      width: 100%;
      padding: 0.7rem 1rem;
      border-radius: 8px;
      border: 1px solid #e5e7eb;
      margin-bottom: 0.2rem;
      font-size: 1rem;
      background: #f8fafc;
      transition: border 0.2s;
    }
    .cause-form .form-group input:focus,
    .cause-form .form-group textarea:focus {
      border: 1.5px solid var(--accent, #4fc3a1);
      outline: none;
      background: #fff;
    }
    .cause-form .form-group textarea {
      min-height: 90px;
      resize: vertical;
    }
    .form-inline-group {
      display: flex;
      gap: 1rem;
    }
    .form-inline-group .form-group { flex: 1; }
    .preview-img {
      width: 100%;
      max-width: 320px;
      height: 180px;
      object-fit: cover;
      border-radius: 10px;
      margin-top: 0.5rem;
      border: 1px solid #e5e7eb;
      display: none;
    }
    .points-info {
      background: var(--accent, #4fc3a1);
      color: #fff;
      border-radius: 8px;
      padding: 0.7rem 1rem;
      margin-top: 0.5rem;
      font-size: 1.05rem;
      display: flex;
      align-items: center;
      gap: 0.7rem;
    }
    .after-create {
      margin-top: 2rem;
      background: var(--primary-light, #e6f0fa);
      color: #444;
      border-radius: 10px;
      padding: 1.5rem 1rem;
      text-align: center;
    }
    @media (max-width: 600px) {
      .modal-content { padding: 1.2rem 0.5rem 1.2rem 0.5rem; }
      .create-cause-title { font-size: 1.1rem; }
      .form-inline-group { flex-direction: column; }
    }
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(-30px);}
      to { opacity: 1; transform: translateY(0);}
    }
    /* SOLO estilos de la página de causas, NO navbar, logo, nav-links, auth-buttons, user-info, footer */
    .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.5);
        z-index: 1000;
        justify-content: center;
        align-items: center;
    }
    .modal-content {
        background: #fff;
        padding: 2rem;
        border-radius: 10px;
        max-width: 500px;
        width: 90%;
        text-align: center;
    }
    .modal-buttons {
        display: flex;
        gap: 1rem;
        justify-content: center;
        margin-top: 1.5rem;
    }
    .main-container {
        max-width: 1200px;
        margin: 2rem auto;
        padding: 0 2rem;
    }
    .causes-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
    }
    .causes-header h1 {
        font-size: 2rem;
        color: var(--primary);
        font-weight: 700;
    }
    .causes-search {
        margin-bottom: 2rem;
        display: flex;
        align-items: center;
        gap: 0.7rem;
    }
    .causes-search input {
        flex: 1;
        padding: 0.6rem 1.2rem;
        border-radius: 7px;
        border: 1.5px solid var(--gray);
        font-size: 1.05rem;
        outline: none;
        transition: border 0.2s;
        background: #fff;
    }
    // Animación para notificaciones
    @keyframes fadeInOut {
      0% { opacity: 0; transform: translateX(-50%) translateY(20px); }
      15% { opacity: 1; transform: translateX(-50%) translateY(0); }
      85% { opacity: 1; transform: translateX(-50%) translateY(0); }
      100% { opacity: 0; transform: translateX(-50%) translateY(-20px); }
    }
    .causes-search input:focus {
        border-color: var(--primary);
    }
    .tabs {
        display: flex;
        border-bottom: 1px solid var(--gray);
        margin-bottom: 2rem;
    }
    .tab {
        padding: 0.75rem 1.5rem;
        cursor: pointer;
        position: relative;
        font-weight: 500;
        color: #6b7280;
        background: none;
        border: none;
        outline: none;
    }
    .tab.active {
        color: var(--primary);
        font-weight: 600;
    }
    .tab.active::after {
        content: '';
        position: absolute;
        bottom: -1px;
        left: 0;
        width: 100%;
        height: 3px;
        background: var(--primary);
    }
    .causes-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 2rem;
    }
    .cause-card {
        background: white;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
        transition: all 0.3s ease;
        border: 1px solid var(--gray);
        display: flex;
        flex-direction: column;
    }
    .cause-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    }
    .cause-image {
        height: 180px;
        overflow: hidden;
        position: relative;
    }
    .cause-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
    }
    .cause-card:hover .cause-image img {
        transform: scale(1.05);
    }
    .cause-badge {
        position: absolute;
        top: 1rem;
        right: 1rem;
        background: rgba(255, 255, 255, 0.9);
        padding: 0.3rem 0.8rem;
        border-radius: 50px;
        font-size: 0.8rem;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }
    .cause-badge.urgent {
        background: var(--urgent);
        color: white;
    }
    .cause-badge.points {
        background: var(--primary);
        color: white;
        left: 1rem;
        right: auto;
    }
    .cause-content {
        padding: 1.5rem;
        display: flex;
        flex-direction: column;
        flex: 1;
    }
    .cause-content h3 {
        font-size: 1.3rem;
        margin-bottom: 0.8rem;
        color: #2d3748;
    }
    .cause-content p {
        color: #6b7280;
        margin-bottom: 1.5rem;
        font-size: 0.95rem;
        line-height: 1.6;
        flex-grow: 1;
    }
    .cause-meta {
        display: flex;
        gap: 1rem;
        margin-bottom: 1.5rem;
        font-size: 0.85rem;
        flex-wrap: wrap;
    }
    .meta-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: #6b7280;
    }
    .meta-item i {
        color: var(--primary);
    }
    .beneficiaries-count {
        display: inline-flex;
        align-items: center;
        background: #f0f9ff;
        color: var(--primary);
        padding: 0.3rem 0.8rem;
        border-radius: 50px;
        font-size: 0.85rem;
        font-weight: 600;
    }
    .beneficiaries-count i {
        margin-right: 0.3rem;
    }
    .cause-progress {
        margin-bottom: 1.5rem;
    }
    .progress-bar {
        height: 8px;
        background: var(--gray);
        border-radius: 4px;
        overflow: hidden;
        margin-bottom: 0.5rem;
    }
    .progress-fill {
        height: 100%;
        background: var(--primary);
        border-radius: 4px;
    }
    .progress-info {
        display: flex;
        justify-content: space-between;
        font-size: 0.9rem;
        color: #6b7280;
    }
    .cause-actions {
        display: flex;
        gap: 0.8rem;
    }
    .cause-actions .btn {
        flex: 1;
        text-align: center;
        justify-content: center;
    }
    .btn-accent {
        background: var(--accent);
        color: white;
    }
    .btn-accent:hover {
        background: var(--accent-dark);
        transform: translateY(-2px);
    }
    .btn-sm {
        padding: 0.4rem 0.8rem;
        font-size: 0.85rem;
    }
    @media (max-width: 900px) {
        .main-container {
            padding: 1.2rem 0.5rem;
        }
    }
    @media (max-width: 768px) {
        .causes-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 1rem;
        }
        .causes-grid {
            grid-template-columns: 1fr;
        }
        .cause-actions {
            flex-direction: column;
        }
    }

    /* Modal de Causa */
    .modal-cause-container {
      font-family: 'Poppins', sans-serif;
      color: #2d3748;
    }
    .modal-cause-header {
      display: flex;
      gap: 2rem;
      margin-bottom: 2rem;
    }
    @media (max-width: 768px) {
      .modal-cause-header { flex-direction: column; }
    }
    .modal-cause-image-wrapper {
      flex: 1;
      min-width: 300px;
      height: 280px;
      border-radius: 12px;
      overflow: hidden;
      position: relative;
      box-shadow: 0 4px 12px rgba(0,0,0,0.08);
    }
    .modal-cause-image {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: transform 0.3s ease;
    }
    .modal-cause-badge {
      position: absolute;
      top: 1.5rem;
      right: 1.5rem;
      background: rgba(255,255,255,0.95);
      padding: 0.5rem 1rem;
      border-radius: 50px;
      font-size: 0.9rem;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 0.6rem;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
      z-index: 2;
    }
    .modal-cause-badge.urgent {
      background: var(--urgent);
      color: white;
    }
    .modal-cause-info {
      flex: 1.5;
      display: flex;
      flex-direction: column;
    }
    .modal-cause-title {
      font-size: 1.8rem;
      font-weight: 700;
      color: var(--primary);
      margin-bottom: 1rem;
      line-height: 1.3;
    }
    .modal-cause-progress-container {
      background: #f8fafc;
      padding: 1.5rem;
      border-radius: 12px;
      margin-bottom: 1.5rem;
      border: 1px solid #e5e7eb;
    }
    .progress-info {
      display: flex;
      justify-content: space-between;
      margin-top: 0.8rem;
      font-size: 0.95rem;
      color: #6b7280;
    }
    .modal-cause-meta-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
      gap: 1.2rem;
      margin-bottom: 1.5rem;
    }
    .meta-item {
      display: flex;
      align-items: center;
      gap: 0.8rem;
      font-size: 0.95rem;
    }
    .meta-icon {
      color: var(--primary);
      font-size: 1.1rem;
      width: 1.5rem;
      text-align: center;
    }
    .points-notice {
      background: #f0f9ff;
      border-left: 4px solid var(--accent);
      padding: 1rem;
      border-radius: 0 8px 8px 0;
      margin: 1rem 0;
      font-size: 0.95rem;
      display: flex;
      align-items: center;
      gap: 0.7rem;
    }
    .modal-cause-content { margin-top: 1.5rem; }
    .content-section { margin-bottom: 2rem; }
    .content-title {
      font-size: 1.3rem;
      font-weight: 600;
      color: var(--primary);
      margin-bottom: 1rem;
      display: flex;
      align-items: center;
      gap: 0.7rem;
    }
    .content-text {
      line-height: 1.7;
      color: #4b5563;
      font-size: 1.05rem;
    }
    .modal-cause-actions {
      display: flex;
      gap: 1rem;
      margin-top: 1.5rem;
      flex-wrap: wrap;
    }
    .action-btn {
      flex: 1;
      min-width: 180px;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.7rem;
      padding: 1rem;
      border-radius: 8px;
      font-weight: 600;
      font-size: 1.05rem;
      transition: all 0.2s ease;
      border: none;
      cursor: pointer;
    }
    .action-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }
    .action-btn-primary {
      background: var(--primary);
      color: white;
    }
    .action-btn-accent {
      background: var(--accent);
      color: white;
    }
    .action-btn-secondary {
      background: #f8fafc;
      color: var(--primary);
      border: 1px solid var(--primary-light);
    }
    .share-section {
      margin-top: 2rem;
      padding-top: 2rem;
      border-top: 1px solid #e5e7eb;
    }
    .share-title {
      font-size: 1.3rem;
      font-weight: 600;
      color: var(--primary);
      margin-bottom: 1.5rem;
      text-align: center;
    }
    .share-content {
      background: #f8fafc;
      border-radius: 12px;
      padding: 1.5rem;
      margin-bottom: 1.5rem;
      position: relative;
    }
    .share-text {
      font-size: 1rem;
      line-height: 1.6;
      color: #4b5563;
      margin-bottom: 1rem;
    }
    .share-highlight {
      color: var(--primary);
      font-weight: 600;
    }
    .share-buttons {
      display: flex;
      justify-content: center;
      gap: 1rem;
      flex-wrap: wrap;
    }
    .share-btn {
      display: flex;
      align-items: center;
      gap: 0.7rem;
      padding: 0.8rem 1.5rem;
      border-radius: 8px;
      font-weight: 600;
      color: white;
      transition: all 0.2s;
      text-decoration: none;
    }
    .share-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    .share-btn-facebook { background: #3b5998; }
    .share-btn-twitter { background: #1da1f2; }
    .share-btn-whatsapp { background: #25d366; }
    .share-btn-link { background: var(--primary); }
  </style>
{% endblock %}

{% block content %}
  <!-- Modal para usuarios no logueados -->
  <div class="modal-bg" id="loginModal">
    <div class="modal-content">
      <h3>Para crear una causa</h3>
      <p>Debes ser un usuario registrado. ¿Deseas iniciar sesión o registrarte ahora?</p>
      <div class="modal-buttons">
        <a href="/login?return=/causes" class="btn btn-primary">Iniciar Sesión</a>
        <a href="/register?return=/causes" class="btn btn-outline">Registrarse</a>
        <button id="cancelModal" class="btn">Cancelar</button>
      </div>
    </div>
  </div>

  <!-- Modal emergente para crear causa -->
  <div id="createCauseModal" class="modal-bg">
    <div class="modal-content">
      <button class="close-modal" id="closeCreateCauseModal" title="Cerrar">&times;</button>
      <div class="create-cause-title">
        <i class="fas fa-plus-circle"></i> Crear Nueva Causa Solidaria
      </div>
      <form class="cause-form" id="causeForm" autocomplete="off">
        <div class="form-group">
          <label for="title">Título de la causa</label>
          <input type="text" id="title" name="title" placeholder="Ej: Agua limpia para todos" required>
        </div>
        <div class="form-group">
          <label for="short_description">Descripción corta (máx. 3 líneas)</label>
          <textarea id="short_description" name="short_description" maxlength="180" placeholder="Resumen breve para mostrar en la tarjeta..." required></textarea>
        </div>
        <div class="form-group">
          <label for="description">Descripción exhaustiva</label>
          <textarea id="description" name="description" placeholder="Describe la causa, el objetivo, contexto, cómo se usará la ayuda..." required></textarea>
        </div>
        <div class="form-group">
          <label for="photo">Foto principal</label>
          <input type="file" id="photo" name="photo" accept="image/*">
          <img id="previewImg" class="preview-img" alt="Vista previa de la foto" style="display:none;">
        </div>
        <div class="form-inline-group">
          <div class="form-group">
            <label for="goal">Meta de recaudación (€)</label>
            <input type="number" id="goal" name="goal" min="1" step="0.01" placeholder="Ej: 5000" required>
          </div>
          <div class="form-group">
            <label for="beneficiaries">Nº de beneficiarios</label>
            <input type="number" id="beneficiaries" name="beneficiaries" min="1" placeholder="Ej: 100" required>
          </div>
        </div>
        <div class="form-inline-group">
          <div class="form-group">
            <label for="city">Ciudad</label>
            <input type="text" id="city" name="city" placeholder="Ej: Madrid" required>
          </div>
          <div class="form-group">
            <label for="country">País</label>
            <input type="text" id="country" name="country" placeholder="Ej: España" required>
          </div>
        </div>
        <div class="form-group">
          <label for="points">Puntos por colaborar</label>
          <input type="number" id="points" name="points" min="1" max="1000" value="50" required>
          <div class="points-info" id="pointsText">
            <i class="fas fa-star"></i>
            Colaborar en esta causa otorgará <strong>50 puntos</strong> a cada participante.
          </div>
        </div>
        <input type="hidden" id="lat" name="lat">
        <input type="hidden" id="lng" name="lng">
        <button type="submit" class="btn btn-primary" style="margin-top:1rem;">
          <i class="fas fa-paper-plane"></i> Crear Causa
        </button>
      </form>
      <div class="after-create" id="afterCreate" style="display:none;">
        <h3>¡Causa creada con éxito!</h3>
        <p>¿Quieres agregar tareas o retos específicos vinculados a esta causa?</p>
        <a href="/tasks/create" class="btn btn-accent">
          <i class="fas fa-tasks"></i> Agregar tareas/retos
        </a>
        <br>
        <a href="/causes" class="btn btn-outline" style="margin-top:1rem;">
          <i class="fas fa-arrow-left"></i> Volver a causas
        </a>
      </div>
    </div>
  </div>

  <!-- Modal de Causa -->
  <div id="causeModal" class="modal" style="display:none; position:fixed; z-index:9999; left:0; top:0; width:100vw; height:100vh; background:rgba(0,0,0,0.35); align-items:center; justify-content:center;">
    <div class="modal-content" style="background:#fff; border-radius:18px; max-width:800px; width:95vw; padding:2rem; box-shadow:0 8px 32px rgba(74,111,165,0.13); position:relative; max-height:90vh; overflow-y:auto;">
      <button id="closeModal" style="position:absolute; top:1.5rem; right:1.5rem; background:none; border:none; font-size:1.8rem; color:#6b7280; cursor:pointer; transition:color 0.2s;" onmouseover="this.style.color='#4a6fa5'" onmouseout="this.style.color='#6b7280'">&times;</button>
      <div id="modalBody" style="padding:0.5rem;">
        <!-- Contenido dinámico -->
      </div>
    </div>
  </div>

  <!-- Contenido principal de la página de causas -->
  <div class="main-container">
    <div class="causes-header">
      <h1>Causas Solidarias</h1>
      <a href="#" id="create-cause-btn" class="btn btn-primary">
        <i class="fas fa-plus"></i> Crear Causa
      </a>
    </div>
    <div class="causes-search">
      <input type="text" id="search-input" placeholder="Buscar por título, país, descripción...">
      <i class="fas fa-search" style="color:#4a6fa5;"></i>
    </div>
    <div class="tabs">
      <button class="tab active" data-filter="all">Todas</button>
      <button class="tab" data-filter="education">Educación</button>
      <button class="tab" data-filter="health">Salud</button>
      <button class="tab" data-filter="environment">Medio Ambiente</button>
      <button class="tab" data-filter="animals">Animales</button>
      <button class="tab" data-filter="community">Comunidad</button>
    </div>
    <div class="causes-grid" id="causesList">
      <!-- Las causas se cargarán dinámicamente desde Supabase -->
    </div>
  </div>
{% endblock %}

{% block scripts %}
{{ super() }}
<script>
let currentFilter = "all";

document.addEventListener('DOMContentLoaded', async function() {
  // Abrir modal de crear causa
  document.getElementById('create-cause-btn').onclick = async function(e) {
    e.preventDefault();
    const { data: { session } } = await supabase.auth.getSession();
    if (session?.user) {
      document.getElementById('createCauseModal').classList.add('active');
      document.body.style.overflow = 'hidden';
    } else {
      document.getElementById('loginModal').classList.add('active');
    }
  };

  // Cerrar modal de crear causa
  document.getElementById('closeCreateCauseModal').onclick = function() {
    document.getElementById('createCauseModal').classList.remove('active');
    document.body.style.overflow = '';
    document.getElementById('causeForm').reset();
    document.getElementById('previewImg').style.display = 'none';
    document.getElementById('causeForm').style.display = 'block';
    document.getElementById('afterCreate').style.display = 'none';
  };

  // Cerrar modal al hacer click fuera del contenido
  document.getElementById('createCauseModal').onclick = function(e) {
    if (e.target === this) {
      this.classList.remove('active');
      document.body.style.overflow = '';
      document.getElementById('causeForm').style.display = 'block';
      document.getElementById('afterCreate').style.display = 'none';
    }
  };

  // Modal login
  document.getElementById('cancelModal').onclick = function() {
    document.getElementById('loginModal').classList.remove('active');
  };
  document.getElementById('loginModal').onclick = function(e) {
    if (e.target === this) this.classList.remove('active');
  };

  // Tabs
  document.querySelectorAll('.tab').forEach(tab => {
    tab.addEventListener('click', function() {
      document.querySelector('.tab.active').classList.remove('active');
      this.classList.add('active');
      loadCausesFromSupabase(this.getAttribute('data-filter'));
    });
  });

  // Búsqueda
  document.getElementById('search-input').addEventListener('input', function() {
    loadCausesFromSupabase(currentFilter, this.value);
  });

  // Vista previa de imagen
  document.getElementById('photo').addEventListener('change', function(e) {
    const file = e.target.files[0];
    const preview = document.getElementById('previewImg');
    if (file) {
      const reader = new FileReader();
      reader.onload = function(evt) {
        preview.src = evt.target.result;
        preview.style.display = 'block';
      };
      reader.readAsDataURL(file);
    } else {
      preview.src = '';
      preview.style.display = 'none';
    }
  });

  // Actualizar texto de puntos
  document.getElementById('points').addEventListener('input', function() {
    const val = this.value || 0;
    document.getElementById('pointsText').innerHTML = `<i class="fas fa-star"></i> Colaborar en esta causa otorgará <strong>${val} puntos</strong> a cada participante.`;
  });

  // Envío del formulario
  document.getElementById('causeForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    // Recoge los datos del formulario
    const title = document.getElementById('title').value.trim();
    const short_description = document.getElementById('short_description').value.trim();
    const description = document.getElementById('description').value.trim();
    const goal = parseFloat(document.getElementById('goal').value);
    const beneficiaries = parseInt(document.getElementById('beneficiaries').value, 10);
    const city = document.getElementById('city').value.trim();
    const country = document.getElementById('country').value.trim();
    const points = parseInt(document.getElementById('points').value, 10);
    const photoFile = document.getElementById('photo').files[0];
    let photo_url = null;

    // Sube la foto a Supabase Storage si existe
    if (photoFile) {
      const fileExt = photoFile.name.split('.').pop();
      const fileName = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}.${fileExt}`;
      const filePath = `public/${fileName}`;
      const { error: uploadError } = await supabase.storage
        .from('causes')
        .upload(filePath, photoFile, { upsert: true });
      if (uploadError) {
        alert('Error subiendo la foto: ' + uploadError.message);
        return;
      }
      const { data } = supabase.storage.from('causes').getPublicUrl(filePath);
      photo_url = data.publicUrl;
    }

    // Guarda la causa en la tabla
    const { data: { session } } = await supabase.auth.getSession();
    const user = session?.user;
    if (!user) {
      alert('Debes iniciar sesión para crear una causa.');
      return;
    }

    const lat = document.getElementById('lat').value;
    const lng = document.getElementById('lng').value;

    const { error } = await supabase
      .from('causes')
      .insert([{
        title,
        short_description,
        description,
        goal,
        beneficiaries,
        city,
        country,
        lat: lat ? parseFloat(lat) : null,
        lng: lng ? parseFloat(lng) : null,
        points,
        photo_url,
        user_id: user.id,
        raised: 0,
        donors: 0,
        urgent: false,
        category: 'community' // Puedes cambiar esto según tu lógica
      }]);

    if (error) {
      alert('Error al crear la causa: ' + error.message);
      return;
    }

    document.getElementById('causeForm').style.display = 'none';
    document.getElementById('afterCreate').style.display = 'block';
    loadCausesFromSupabase();
  });

  // Cargar causas al iniciar
  await loadCausesFromSupabase();
});

async function loadCausesFromSupabase(filter = "all", searchTerm = "") {
  currentFilter = filter;
  let query = supabase
    .from('causes')
    .select('*')
    .order('created_at', { ascending: false });

  if (filter !== "all") {
    query = query.eq('category', filter);
  }
  if (searchTerm && searchTerm.trim() !== "") {
    query = query.or(`title.ilike.%${searchTerm}%,description.ilike.%${searchTerm}%,city.ilike.%${searchTerm}%,country.ilike.%${searchTerm}%`);
  }
  const { data: causes, error } = await query;
  const causesList = document.getElementById('causesList');
  if (error) {
    causesList.innerHTML = '<div style="color:#e53e3e;text-align:center;">Error al cargar las causas.</div>';
    return;
  }
  causesList.innerHTML = '';
  if (!causes || causes.length === 0) {
    causesList.innerHTML = '<div style="color:#6b7280;text-align:center;padding:2rem;grid-column:1/-1;">No se encontraron causas.</div>';
    return;
  }
  causes.forEach(cause => {
    const progress = cause.goal ? Math.min(Math.round((cause.raised / cause.goal) * 100), 100) : 0;
    const urgentBadge = cause.urgent ? `<div class="cause-badge urgent"><i class="fas fa-exclamation-circle"></i> Urgente</div>` : "";
    const pointsBadge = `<div class="cause-badge points"><i class="fas fa-star"></i> +${cause.points || 0} pts</div>`;
    const location = cause.city && cause.country ? `${cause.city}, ${cause.country}` : "";
    const card = document.createElement('div');
    card.className = 'cause-card';
    card.innerHTML = `
      <div class="cause-image">
        <img src="${cause.photo_url || '/img/causa-default.jpg'}" alt="${cause.title}" 
  onerror="if (!this._defaulted) { this._defaulted = true; this.src='/img/causa-default.jpg'; }">
        ${urgentBadge}
        ${pointsBadge}
      </div>
      <div class="cause-content">
        <h3>${cause.title}</h3>
        <p>${cause.short_description || ''}</p>
        <div class="cause-meta">
          <div class="meta-item"><i class="fas fa-map-marker-alt"></i> ${location}</div>
          <div class="meta-item"><i class="fas fa-users"></i> ${cause.donors || 0} donantes</div>
          <div class="beneficiaries-count">
            <i class="fas fa-heart"></i> Beneficia a ${cause.beneficiaries || 0} personas
          </div>
        </div>
        <div class="cause-progress">
          <div class="progress-bar">
            <div class="progress-fill" style="width: ${progress}%"></div>
          </div>
          <div class="progress-info">
            <span>${progress}% completado</span>
            <span>${cause.raised || 0} € de ${cause.goal || 0} €</span>
          </div>
        </div>
        <div class="cause-actions">
          <button class="btn btn-primary view-cause-btn" data-cause-id="${cause.id}">Ver más</button>
          <a href="#" class="btn btn-accent">Donar</a>
        </div>
      </div>
    `;
    causesList.appendChild(card);
  });
  window.causes = causes; // Añade esto después de obtener las causas
}

// Geocodificación automática al cambiar ciudad o país
async function geocodeCityCountry() {
  const city = document.getElementById('city').value.trim();
  const country = document.getElementById('country').value.trim();
  if (!city || !country) return;

  const query = encodeURIComponent(`${city}, ${country}`);
  const url = `https://nominatim.openstreetmap.org/search?q=${query}&format=json&limit=1`;

  try {
    const res = await fetch(url, { headers: { 'Accept-Language': 'es' } });
    const data = await res.json();
    if (data && data.length > 0) {
      document.getElementById('lat').value = data[0].lat;
      document.getElementById('lng').value = data[0].lon;
    } else {
      document.getElementById('lat').value = '';
      document.getElementById('lng').value = '';
    }
  } catch (e) {
    document.getElementById('lat').value = '';
    document.getElementById('lng').value = '';
  }
}

document.getElementById('city').addEventListener('change', geocodeCityCountry);
document.getElementById('country').addEventListener('change', geocodeCityCountry);

// Ver detalles de causa
document.addEventListener('click', async function(e) {
  if (e.target.classList.contains('view-cause-btn')) {
    const causeId = e.target.getAttribute('data-cause-id');
    showCauseModal(causeId); // <-- Usa la función completa
  }
});

// Cerrar el modal
document.getElementById('closeModal').onclick = function() {
  document.getElementById('causeModal').style.display = 'none';
};

// Opcional: cerrar al hacer click fuera del modal
document.getElementById('causeModal').onclick = function(e) {
  if (e.target === this) this.style.display = 'none';
};

// Función para mostrar el modal con los detalles de la causa
async function showCauseModal(causeId) {
  const cause = window.causes.find(c => c.id == causeId);
  const progress = cause.goal ? Math.min(Math.round((cause.raised / cause.goal) * 100), 100) : 0;
  const createdDate = new Date(cause.created_at).toLocaleDateString('es-ES', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });

  document.getElementById('modalBody').innerHTML = `
    <div class="modal-cause-container">
      <!-- Título principal centrado, más espacio abajo -->
      <h1 class="modal-cause-title" style="font-size:2rem; font-weight:800; color:var(--primary); margin-bottom:2.7rem; text-align:center; width:100%;">${cause.title}</h1>
      <div class="modal-cause-header" style="display:flex; gap:2.5rem; margin-bottom:2.7rem;">
        <div class="modal-cause-image-wrapper" style="flex:1; min-width:320px; height:300px; border-radius:12px; overflow:hidden; position:relative; box-shadow:0 4px 12px rgba(0,0,0,0.08);">
          <!-- Badge arriba a la izquierda, verde -->
          <div class="modal-cause-badge" style="top:1.2rem; left:1.2rem; right:auto; background:var(--accent); color:white; position:absolute;">
            <i class="fas fa-hands-helping"></i> Causa Solidaria
          </div>
          <img class="modal-cause-image" src="${cause.photo_url || '/img/causa-default.jpg'}" 
               alt="Imagen de la causa ${cause.title}"
               style="width:100%;height:100%;object-fit:cover;"
               onerror="this.src='/img/causa-default.jpg'">
          ${cause.urgent ? `
          <div class="modal-cause-badge urgent" style="right:1.2rem; left:auto; top:1.2rem; background:var(--urgent); color:white;">
            <i class="fas fa-exclamation-circle"></i> Urgente
          </div>` : ''}
        </div>
        <!-- Info a la derecha de la foto -->
        <div class="modal-cause-info" style="flex:1.5; display:flex; flex-direction:column; justify-content:flex-start;">
          <div class="modal-cause-progress-container" style="background:#f8fafc; padding:1.2rem; border-radius:12px; margin-bottom:1.2rem; border:1px solid #e5e7eb;">
            <div class="progress-bar">
              <div class="progress-fill" style="width: ${progress}%"></div>
            </div>
            <div class="progress-info">
              <span>${progress}% completado</span>
              <span>${cause.raised || 0} € de ${cause.goal || 0} €</span>
            </div>
          </div>
          <!-- Meta compacta en dos columnas -->
          <div class="modal-cause-meta-grid" style="display:grid; grid-template-columns:1fr 1fr; gap:0.7rem 1.2rem; margin-bottom:1.2rem;">
            <div class="meta-item">
              <span class="meta-icon"><i class="fas fa-map-marker-alt"></i></span>
              <span>${cause.city || 'Sin ubicación'}${cause.country ? ', ' + cause.country : ''}</span>
            </div>
            <div class="meta-item">
              <span class="meta-icon"><i class="fas fa-users"></i></span>
              <span>${cause.donors || 0} donantes</span>
            </div>
            <div class="meta-item">
              <span class="meta-icon"><i class="fas fa-heart"></i></span>
              <span>${cause.beneficiaries || 0} beneficiarios</span>
            </div>
            <div class="meta-item">
              <span class="meta-icon"><i class="fas fa-calendar-alt"></i></span>
              <span>${createdDate}</span>
            </div>
          </div>
          <div class="points-notice" style="background:#f0f9ff; border-left:4px solid var(--accent); padding:0.8rem; border-radius:0 8px 8px 0; font-size:0.97rem; display:flex; align-items:center; gap:0.7rem;">
            <i class="fas fa-star" style="color: var(--accent);"></i>
            Cada euro donado recibirá <strong>${cause.points || 20} puntos</strong> de impacto
          </div>
        </div>
      </div>
      <!-- Resumen y descripción debajo, con más espacio entre bloques -->
      <div class="modal-cause-content" style="margin-top:0;">
        <div class="content-section" style="margin-bottom:2.2rem;">
          <h3 class="content-title" style="font-size:1.2rem; font-weight:600; color:var(--primary); margin-bottom:0.9rem; display:flex; align-items:center; gap:0.7rem;">
            <i class="fas fa-align-left"></i> Resumen
          </h3>
          <p class="content-text" style="line-height:1.7; color:#4b5563; font-size:1.05rem; margin-left:0; margin-right:0; text-align:justify;">${cause.short_description || 'No hay resumen disponible para esta causa.'}</p>
        </div>
        <div class="content-section" style="margin-bottom:2.2rem;">
          <h3 class="content-title" style="font-size:1.2rem; font-weight:600; color:var(--primary); margin-bottom:0.9rem; display:flex; align-items:center; gap:0.7rem;">
            <i class="fas fa-info-circle"></i> Descripción completa
          </h3>
          <p class="content-text" style="line-height:1.7; color:#4b5563; font-size:1.05rem; margin-left:0; margin-right:0; text-align:justify;">${cause.description || 'No hay descripción detallada disponible para esta causa.'}</p>
        </div>
      </div>
      <!-- Botones abajo, con más espacio arriba -->
      <div class="cause-actions" style="display:flex; gap:0.8rem; margin-top:2.2rem;">
        <button class="btn btn-primary" style="flex:1;" onclick="donateToCause('${cause.id}')">
          <i class="fas fa-donate"></i> Donar ahora
        </button>
        <button class="btn btn-accent" style="flex:1;" onclick="volunteerForCause('${cause.id}')">
          <i class="fas fa-hands-helping"></i> Colaborar
        </button>
        <button class="btn btn-outline" style="flex:1;" onclick="showShareOptions('${cause.id}')">
          <i class="fas fa-share-alt"></i> Compartir
        </button>
      </div>
      <div class="share-section" id="shareSection"></div>
    </div>
  `;

  document.getElementById('causeModal').style.display = 'flex';
  document.body.style.overflow = 'hidden';
}

// Función para mostrar opciones de compartir
function showShareOptions(causeId) {
  const cause = window.causes.find(c => c.id == causeId);
  const shareSection = document.getElementById('shareSection');
  shareSection.innerHTML = `
    <h3 class="share-title">
      <i class="fas fa-share-alt"></i> Ayuda a difundir esta causa
    </h3>
    <div class="share-content">
      <p class="share-text">
        <span class="share-highlight">"${cause.short_description || 'Únete a esta importante causa solidaria'}"</span><br><br>
        Cada contribución nos acerca más a la meta de <strong>${cause.goal || 0}€</strong> para ayudar a <strong>${cause.beneficiaries || 0} personas</strong>.
      </p>
      <div class="share-buttons">
        <a href="#" class="share-btn share-btn-facebook" onclick="shareOnSocial('facebook', '${cause.id}')">
          <i class="fab fa-facebook-f"></i> Facebook
        </a>
        <a href="#" class="share-btn share-btn-twitter" onclick="shareOnSocial('twitter', '${cause.id}')">
          <i class="fab fa-twitter"></i> Twitter
        </a>
        <a href="#" class="share-btn share-btn-whatsapp" onclick="shareOnSocial('whatsapp', '${cause.id}')">
          <i class="fab fa-whatsapp"></i> WhatsApp
        </a>
        <a href="#" class="share-btn share-btn-link" onclick="copyCauseLink('${cause.id}')">
          <i class="fas fa-link"></i> Copiar enlace
        </a>
      </div>
    </div>
  `;
  shareSection.scrollIntoView({ behavior: 'smooth' });
}

// Función para compartir en redes sociales
function shareOnSocial(platform, causeId) {
  const cause = window.causes.find(c => c.id == causeId);
  const url = `${window.location.origin}/causes/${cause.id}`;
  const text = `Únete a esta causa: "${cause.title}" - ${cause.short_description || 'Ayuda a hacer la diferencia!'} ${url}`;
  let shareUrl;
  switch(platform) {
    case 'facebook':
      shareUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}&quote=${encodeURIComponent(text)}`;
      break;
    case 'twitter':
      shareUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}`;
      break;
    case 'whatsapp':
      shareUrl = `https://wa.me/?text=${encodeURIComponent(text)}`;
      break;
    default:
      return;
  }
  window.open(shareUrl, '_blank', 'width=600,height=400');
}

// Función para copiar enlace de la causa
function copyCauseLink(causeId) {
  const url = `${window.location.origin}/causes/${causeId}`;
  navigator.clipboard.writeText(url).then(() => {
    showNotification('¡Enlace copiado!', 'success');
  }).catch(() => {
    prompt('Por favor, copia este enlace:', url);
  });
}

// Función para mostrar notificación
function showNotification(message, type) {
  const notification = document.createElement('div');
  notification.textContent = message;
  notification.style.position = 'fixed';
  notification.style.bottom = '20px';
  notification.style.left = '50%';
  notification.style.transform = 'translateX(-50%)';
  notification.style.padding = '12px 24px';
  notification.style.borderRadius = '8px';
  notification.style.backgroundColor = type === 'success' ? '#4fc3a1' : '#e53e3e';
  notification.style.color = 'white';
  notification.style.boxShadow = '0 4px 12px rgba(0,0,0,0.15)';
  notification.style.zIndex = '10000';
  notification.style.animation = 'fadeInOut 2.5s ease-in-out';
  document.body.appendChild(notification);
  setTimeout(() => {
    notification.remove();
  }, 2500);
}

// Cerrar modal y restaurar scroll
document.getElementById('closeModal').addEventListener('click', function() {
  document.getElementById('causeModal').style.display = 'none';
  document.body.style.overflow = '';
});
document.getElementById('causeModal').addEventListener('click', function(e) {
  if (e.target === this) {
    this.style.display = 'none';
    document.body.style.overflow = '';
  }
});

// Ejemplo de funciones para donar/colaborar (puedes personalizar)
function donateToCause(causeId) {
  alert('Funcionalidad de donación próximamente.');
}
function volunteerForCause(causeId) {
  alert('Funcionalidad de voluntariado próximamente.');
}
</script>
{% endblock %}
{# filepath: /views/causes/mine.njk #}
{% extends "layout.njk" %}

{% block title %}Mis Causas | Solidarity{% endblock %}

{% block content %}
<section class="causes-section">
  <div class="section-header" style="display:flex;align-items:center;gap:1rem;margin-bottom:2rem;">
    <i class="fas fa-hands-helping" style="font-size:2rem;color:var(--accent,#2dd4bf);"></i>
    <h1 style="margin:0;">Mis Causas Solidarias</h1>
  </div>
  <div id="myCausesList" class="causes-list">
    <div class="loading" style="text-align:center;color:#888;">Cargando tus causas...</div>
  </div>
  <div id="noCausesMsg" style="display:none;text-align:center;color:#888;margin-top:2rem;">
    <i class="fas fa-info-circle"></i> Aún no has creado ninguna causa.
  </div>
</section>
{% endblock %}

{% block scripts %}
{{ super() }}
<script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
<script>

document.addEventListener('DOMContentLoaded', async () => {
  const { data: { user } } = await supabase.auth.getUser();
  if (!user) {
    document.getElementById('myCausesList').innerHTML = '<div style="color:#e53e3e;text-align:center;">Debes iniciar sesión para ver tus causas.</div>';
    return;
  }

  const { data: misCausas, error } = await supabase
    .from('causes')
    .select('*')
    .eq('user_id', user.id)
    .order('created_at', { ascending: false });

  const list = document.getElementById('myCausesList');
  list.innerHTML = '';

  if (error) {
    list.innerHTML = '<div style="color:#e53e3e;text-align:center;">Error al cargar tus causas.</div>';
    return;
  }

  if (!misCausas || misCausas.length === 0) {
    document.getElementById('noCausesMsg').style.display = 'block';
    return;
  }

  misCausas.forEach(causa => {
    const card = document.createElement('div');
    card.className = 'cause-card';
    card.innerHTML = `
      <div class="cause-img-wrap">
        <img src="${causa.photo_url || '/img/causa-default.jpg'}" alt="Foto de la causa" class="cause-img">
      </div>
      <div class="cause-info">
        <h2 class="cause-title">${causa.title}</h2>
        <div class="cause-meta">
          <span class="cause-city"><i class="fas fa-map-marker-alt"></i> ${causa.city}, ${causa.country}</span>
          <span class="cause-beneficiaries"><i class="fas fa-users"></i> ${causa.beneficiaries} beneficiarios</span>
        </div>
        <p class="cause-desc">${causa.description}</p>
        <div class="cause-goal">
          <span class="goal-label"><i class="fas fa-donate"></i> Meta:</span>
          <span class="goal-amount">€${causa.goal}</span>
        </div>
        <div class="cause-points">
          <i class="fas fa-star"></i> ${causa.points} puntos por colaborar
        </div>
        <div class="cause-date">
          <i class="fas fa-calendar-alt"></i> Creada el ${new Date(causa.created_at).toLocaleDateString()}
        </div>
      </div>
    `;
    list.appendChild(card);
  });
});
</script>
<style>
.causes-list {
  display: flex;
  flex-wrap: wrap;
  gap: 2rem;
  justify-content: flex-start;
}
.cause-card {
  background: #fff;
  border-radius: 14px;
  box-shadow: 0 2px 12px rgba(0,0,0,0.07);
  overflow: hidden;
  max-width: 350px;
  width: 100%;
  display: flex;
  flex-direction: column;
  margin-bottom: 1.5rem;
}
.cause-img-wrap {
  width: 100%;
  height: 180px;
  background: #f8fafc;
  display: flex;
  align-items: center;
  justify-content: center;
}
.cause-img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}
.cause-info {
  padding: 1.2rem 1rem 1rem 1rem;
  display: flex;
  flex-direction: column;
  gap: 0.6rem;
}
.cause-title {
  font-size: 1.2rem;
  font-weight: 800;
  color: var(--primary, #2dd4bf);
  margin: 0 0 0.3rem 0;
}
.cause-meta {
  font-size: 0.97rem;
  color: #6b7280;
  display: flex;
  gap: 1.2rem;
  margin-bottom: 0.3rem;
}
.cause-desc {
  color: #444;
  font-size: 1rem;
  margin: 0.2rem 0 0.5rem 0;
  min-height: 48px;
}
.cause-goal, .cause-points, .cause-date {
  font-size: 0.98rem;
  color: var(--accent, #4fc3a1);
  margin-bottom: 0.2rem;
  display: flex;
  align-items: center;
  gap: 0.5rem;
}
.cause-goal .goal-label { color: #444; font-weight: 600; }
.cause-goal .goal-amount { color: var(--primary, #2dd4bf); font-weight: 700; }
@media (max-width: 900px) {
  .causes-list { flex-direction: column; gap: 1.5rem; }
  .cause-card { max-width: 100%; }
}
</style>
{% endblock %}
{% extends "layout.njk" %}

{% block title %}Retos - Solidarity{% endblock %}

{% block head %}
  {{ super() }}
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/choices.js/public/assets/styles/choices.min.css">
  <style>
    :root {
      --primary: #4a6fa5;
      --primary-dark: #166088;
      --gray: #e2e8f0;
      --white: #fff;
      --accent: #4fc3a1;
      --accent-dark: #3da58a;
      --urgent: #e53e3e;
      --gold: #eab308;
      --bronze: #cd7f32;
      --radius: 12px;
    }
    .main-container { max-width: 1200px; margin: 2rem auto; padding: 0 2rem; }
    .challenges-intro {
      background: linear-gradient(135deg, #f0f9ff 0%, #e6f0fa 100%);
      border-radius: var(--radius); padding: 2rem; margin-bottom: 2rem; border: 1px solid var(--gray);
    }
    .challenges-intro h2 { font-size: 1.8rem; color: var(--primary-dark); margin-bottom: 1rem; display: flex; align-items: center; gap: 0.8rem; }
    .challenges-intro h2 i { color: var(--accent); }
    .challenges-intro p { color: #4a6fa5; font-size: 1.1rem; line-height: 1.6; }
    .challenges-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 2rem; }
    .challenges-header h1 { font-size: 2rem; color: var(--primary); font-weight: 700; }
    .challenges-actions .btn { border-radius: var(--radius); }
    .challenges-search { margin-bottom: 1.5rem; position: relative; width: 100%; max-width: none; }
    .challenges-search input { width: 100%; padding-right: 2.5rem; border-radius: var(--radius); border: 1.5px solid var(--gray); font-size: 1.1rem; height: 48px; }
    .challenges-search i { position: absolute; right: 1rem; top: 50%; transform: translateY(-50%); pointer-events: none; }
    .tabs { display: flex; border-bottom: 1px solid var(--gray); margin-bottom: 2rem; flex-wrap: wrap; }
    .tab { padding: 0.75rem 1.5rem; cursor: pointer; position: relative; font-weight: 500; color: #6b7280; background: none; border: none; outline: none; white-space: nowrap; border-radius: var(--radius) var(--radius) 0 0; }
    .tab.active { color: var(--primary); font-weight: 600; background: #f0f9ff; }
    .tab.active::after { content: ''; position: absolute; bottom: -1px; left: 0; width: 100%; height: 3px; background: var(--primary); }
    .challenges-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(350px, 1fr)); gap: 2rem; }
    .challenge-card { background: white; border-radius: var(--radius); overflow: hidden; box-shadow: 0 5px 15px rgba(0,0,0,0.05); border: 1px solid var(--gray); transition: all 0.3s ease; display: flex; flex-direction: column; position: relative; }
    .challenge-card:hover { transform: translateY(-5px); box-shadow: 0 10px 25px rgba(0,0,0,0.1); }
    .challenge-image { height: 180px; overflow: hidden; position: relative; }
    .challenge-image img { width: 100%; height: 100%; object-fit: cover; transition: transform 0.3s ease; }
    .challenge-card:hover .challenge-image img { transform: scale(1.05); }
    .challenge-badge { position: absolute; top: 1rem; right: 1rem; background: rgba(255,255,255,0.9); padding: 0.3rem 0.8rem; border-radius: 50px; font-size: 0.8rem; font-weight: 600; display: flex; align-items: center; gap: 0.5rem; box-shadow: 0 2px 5px rgba(0,0,0,0.1); z-index: 2; }
    .badge-urgent { background: var(--urgent); color: white; }
    .badge-points { background: var(--primary); color: white; left: 1rem; right: auto; }
    .badge-type { position: absolute; top: 1rem; left: 1rem; background: var(--accent); color: white; border-radius: 50px; padding: 0.3rem 0.9rem; font-size: 0.85rem; font-weight: 700; z-index: 3; box-shadow: 0 2px 5px rgba(0,0,0,0.08);}
    .challenge-content { padding: 1.5rem; display: flex; flex-direction: column; flex: 1; }
    .challenge-content h3 { font-size: 1.3rem; margin-bottom: 0.8rem; color: #2d3748; }
    .challenge-content p { color: #6b7280; margin-bottom: 1.5rem; font-size: 0.95rem; line-height: 1.6; flex-grow: 1; }
    .challenge-meta { display: flex; gap: 1rem; margin-bottom: 1.5rem; font-size: 0.85rem; flex-wrap: wrap; }
    .meta-item { display: flex; align-items: center; gap: 0.5rem; color: #6b7280; }
    .meta-item i { color: var(--primary); }
    .linked-cause { display: inline-flex; align-items: center; background: #f0f0ff; color: var(--primary); padding: 0.3rem 0.8rem; border-radius: 50px; font-size: 0.85rem; font-weight: 600; margin-bottom: 1rem; }
    .challenge-actions { display: flex; gap: 0.8rem; }
    .challenge-actions .btn { flex: 1; text-align: center; justify-content: center; border-radius: var(--radius); }
    .modal-bg { display: none; position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background: rgba(0,0,0,0.35); z-index: 9999; align-items: center; justify-content: center; }
    .modal-bg.active { display: flex; }
    .modal-content { background: #fff; border-radius: var(--radius); max-width: 540px; width: 95vw; padding: 2.5rem 1.5rem 2rem 1.5rem; box-shadow: 0 8px 32px rgba(0,0,0,0.13); position: relative; animation: fadeIn 0.3s; max-height: 90vh; overflow-y: auto; }
    .close-modal { position: absolute; top: 1.1rem; right: 1.3rem; background: none; border: none; font-size: 2rem; color: #aaa; cursor: pointer; transition: color 0.2s; border-radius: 50%; }
    .close-modal:hover { color: var(--primary); background: #f0f9ff; }
    .create-task-title { font-size: 1.5rem; font-weight: 800; color: var(--primary); margin-bottom: 1.2rem; text-align: center; }
    .task-form .form-group label { font-weight: 600; color: var(--primary); margin-bottom: 0.5rem; display: block; }
    .task-form .form-group input, .task-form .form-group textarea, .task-form .form-group select { width: 100%; padding: 0.7rem 1rem; border-radius: var(--radius); border: 1px solid #e5e7eb; margin-bottom: 0.2rem; font-size: 1rem; background: #f8fafc; transition: border 0.2s; }
    .task-form .form-group input:focus, .task-form .form-group textarea:focus, .task-form .form-group select:focus { border: 1.5px solid var(--accent); outline: none; background: #fff; }
    .task-form .form-group textarea { min-height: 90px; resize: vertical; }
    .form-inline-group { display: flex; gap: 1rem; }
    .form-inline-group .form-group { flex: 1; }
    .preview-img { width: 100%; max-width: 320px; height: 180px; object-fit: cover; border-radius: var(--radius); margin-top: 0.5rem; border: 1px solid #e5e7eb; display: none; }
    .points-info { background: var(--accent); color: #fff; border-radius: var(--radius); padding: 0.7rem 1rem; margin-top: 0.5rem; font-size: 1.05rem; display: flex; align-items: center; gap: 0.7rem; }
    .after-create { margin-top: 2rem; background: var(--primary-light); color: #444; border-radius: var(--radius); padding: 1.5rem 1rem; text-align: center; }
    @keyframes fadeIn { from { opacity: 0; transform: translateY(-30px);} to { opacity: 1; transform: translateY(0);} }
    .btn { padding: 0.8rem 1.5rem; border-radius: var(--radius); font-weight: 600; cursor: pointer; transition: all 0.2s; border: none; display: inline-flex; align-items: center; justify-content: center; gap: 0.5rem; }
    .btn-primary { background: var(--primary); color: white; }
    .btn-primary:hover { background: var(--primary-dark); transform: translateY(-2px); }
    .btn-accent { background: var(--accent); color: white; }
    .btn-accent:hover { background: var(--accent-dark); transform: translateY(-2px); }
    .btn-outline { background: transparent; color: var(--primary); border: 1px solid var(--primary); }
    .btn-outline:hover { background: rgba(74, 111, 165, 0.1); transform: translateY(-2px); }
    .btn-secondary { background: #f0f9ff; color: var(--primary); border: 1px solid var(--primary); }
    .btn-secondary:hover { background: #e6f0fa; }
    /* Forzar el mismo border-radius en todos los botones, aunque tengan estilos inline */
    button,
    .btn,
    .btn-primary,
    .btn-accent,
    .btn-outline,
    .btn-secondary,
    .modal-content button,
    .challenge-actions .btn,
    .task-actions .btn {
      border-radius: 2rem !important; /* Más redondeado que el valor por defecto */
      /* Puedes ajustar el valor a 1.5rem o 999px si quieres aún más pill */
    }
    @media (max-width: 768px) {
      .challenges-header { flex-direction: column; align-items: flex-start; gap: 1rem; }
      .challenges-grid { grid-template-columns: 1fr; }
      .challenge-actions { flex-direction: column; }
      .challenges-search { max-width: 100%; }
    }
  </style>
{% endblock %}

{% block content %}
  <!-- Modal para usuarios no logueados -->
  <div class="modal-bg" id="loginModal">
    <div class="modal-content">
      <h3>Para crear un reto</h3>
      <p>Debes ser un usuario registrado. ¿Deseas iniciar sesión o registrarte ahora?</p>
      <div class="modal-buttons">
        <a href="/login?return=/challenges" class="btn btn-primary">Iniciar Sesión</a>
        <a href="/register?return=/challenges" class="btn btn-outline">Registrarse</a>
        <button id="cancelModal" class="btn">Cancelar</button>
      </div>
    </div>
  </div>

  <!-- Modal emergente para crear reto -->
  <div id="createChallengeModal" class="modal-bg">
    <div class="modal-content">
      <button class="close-modal" id="closeCreateChallengeModal" title="Cerrar">&times;</button>
      <div class="create-task-title">
        <i class="fas fa-plus-circle"></i> Crear Nuevo Reto Solidario
      </div>
      <form class="task-form" id="challengeForm" autocomplete="off">
        <div class="form-group">
          <label for="title">Título del reto</label>
          <input type="text" id="title" name="title" placeholder="Ej: Corre 5km por la educación" required>
        </div>
        <div class="form-group">
          <label for="photo">Foto principal</label>
          <input type="file" id="photo" name="photo" accept="image/*">
          <img id="previewImg" class="preview-img" alt="Vista previa de la foto" style="display:none;">
        </div>
        <div class="form-group">
          <label for="summary">Resumen breve</label>
          <input type="text" id="summary" name="summary" maxlength="120" placeholder="Un resumen breve del reto (máx 120 caracteres)" required>
        </div>
        <div class="form-group">
          <label for="description">Descripción</label>
          <textarea id="description" name="description" placeholder="Describe el reto, cómo completarlo y qué impacto tendrá..." required></textarea>
        </div>
        <div class="form-group">
          <label for="challenge_type">Tipo de reto</label>
          <select id="challenge_type" name="challenge_type" required>
            <option value="duel">Duelo 1vs1</option>
            <option value="open">Reto abierto</option>
            <option value="community">Reto de comunidad</option>
            <option value="creative">Reto creativo</option>
          </select>
        </div>
        <div class="form-group" id="opponentGroup" style="display:none;">
          <label for="opponent-select">¿A quién quieres retar?</label>
          <select id="opponent-select" name="opponent_id">
            <option value="">Selecciona un usuario</option>
          </select>
        </div>
        <div class="form-group">
          <label for="cause_id">Vinculado a causa (opcional)</label>
          <select id="cause-select" name="cause_id">
            <option value="">Selecciona una causa</option>
          </select>
        </div>
        <div class="form-inline-group">
          <div class="form-group">
            <label for="city">Ciudad</label>
            <input type="text" id="city" name="city" placeholder="Ej: Madrid" required>
          </div>
          <div class="form-group">
            <label for="country">País</label>
            <input type="text" id="country" name="country" placeholder="Ej: España" required>
          </div>
        </div>
        <div class="form-group">
          <label for="points">Puntos por completar</label>
          <input type="number" id="points" name="points" min="10" max="1000" value="50" required>
          <div class="points-info" id="pointsText">
            <i class="fas fa-star"></i>
            Completar este reto otorgará <strong>50 puntos</strong> al ganador.
          </div>
        </div>
        <div class="form-group">
          <label for="deadline">Fecha límite</label>
          <input type="date" id="deadline" name="deadline" required>
        </div>
        <div class="form-group">
          <label for="is_urgent">
            <input type="checkbox" id="is_urgent" name="is_urgent"> Marcar como urgente
          </label>
        </div>
        <input type="hidden" id="lat" name="lat">
        <input type="hidden" id="lng" name="lng">
        <button type="submit" class="btn btn-primary" style="margin-top:1rem;">
          <i class="fas fa-paper-plane"></i> Crear Reto
        </button>
      </form>
      <div class="after-create" id="afterCreate" style="display:none;">
        <h3>¡Reto creado con éxito!</h3>
        <p>¿Quieres ver todos los retos o crear otro?</p>
        <a href="/challenges" class="btn btn-accent">
          <i class="fas fa-trophy"></i> Ver retos
        </a>
        <br>
        <a href="#" id="createAnother" class="btn btn-outline" style="margin-top:1rem;">
          <i class="fas fa-plus"></i> Crear otro reto
        </a>
      </div>
    </div>
  </div>

  <!-- Modal de Reto (detalle, igual que tasks, mismo estilo y botones) -->
  <div id="challengeModal" class="modal" style="display:none; position:fixed; z-index:9999; left:0; top:0; width:100vw; height:100vh; background:rgba(0,0,0,0.35); align-items:center; justify-content:center;">
    <div class="modal-content" style="background:#fff; border-radius:18px; max-width:800px; width:95vw; padding:2rem; box-shadow:0 8px 32px rgba(74,111,165,0.13); position:relative; max-height:90vh; overflow-y:auto;">
      <button id="closeChallengeModal" class="close-modal" style="position:absolute; top:1.5rem; right:1.5rem;">&times;</button>
      <div id="challengeModalBody" style="padding:0.5rem;">
        <!-- Contenido dinámico -->
      </div>
    </div>
  </div>

  <!-- Contenido principal -->
  <div class="main-container">
    <div class="challenges-intro">
      <div class="challenges-intro-content">
        <h2><i class="fas fa-bolt"></i> ¡Transforma la solidaridad en una aventura!</h2>
        <p>Lanza retos, compite con amigos, gana puntos de impacto y desbloquea logros. Cada acción cuenta para construir un mundo mejor de la manera más divertida.</p>
      </div>
    </div>
    <div class="challenges-header">
      <h1>Retos Solidarios</h1>
      <div class="challenges-actions">
        <a href="#" id="create-challenge-btn" class="btn btn-primary">
          <i class="fas fa-plus"></i> Crear Reto
        </a>
      </div>
    </div>
    <div class="challenges-search">
      <input type="text" id="search-input" placeholder="Buscar por título, país, descripción...">
      <i class="fas fa-search" style="color:#4a6fa5;"></i>
    </div>
    <div class="tabs">
      <button class="tab active" data-filter="all">Todos los retos</button>
      <button class="tab" data-filter="duel">Duelos 1vs1</button>
      <button class="tab" data-filter="open">Retos abiertos</button>
      <button class="tab" data-filter="community">Retos comunitarios</button>
      <button class="tab" data-filter="creative">Retos creativos</button>
    </div>
    <div class="challenges-grid" id="challengesList">
      <!-- Aquí se cargarán los retos desde Supabase -->
    </div>
  </div>
{% endblock %}

{% block scripts %}
{{ super() }}
<script src="https://cdn.jsdelivr.net/npm/choices.js/public/assets/scripts/choices.min.js"></script>
<script>
let currentFilter = "all";
let causeChoices = null;
let opponentChoices = null;
let causesMap = {};
let currentUserId = null;

document.addEventListener('DOMContentLoaded', async function() {
  // Obtener usuario actual para lógica de botones
  const { data: { session } } = await supabase.auth.getSession();
  currentUserId = session?.user?.id || null;

  // Abrir modal de crear reto
  document.getElementById('create-challenge-btn').onclick = async function(e) {
    e.preventDefault();
    const { data: { session } } = await supabase.auth.getSession();
    if (session?.user) {
      await loadCausesForSelect();
      await loadUsersForSelect();
      document.getElementById('createChallengeModal').classList.add('active');
      document.body.style.overflow = 'hidden';
    } else {
      document.getElementById('loginModal').classList.add('active');
    }
  };

  // Cerrar modal de crear reto
  document.getElementById('closeCreateChallengeModal').onclick = function() {
    document.getElementById('createChallengeModal').classList.remove('active');
    document.body.style.overflow = '';
    document.getElementById('challengeForm').reset();
    document.getElementById('previewImg').style.display = 'none';
    document.getElementById('challengeForm').style.display = 'block';
    document.getElementById('afterCreate').style.display = 'none';
    document.getElementById('opponentGroup').style.display = 'none';
  };
  document.getElementById('createChallengeModal').onclick = function(e) {
    if (e.target === this) {
      this.classList.remove('active');
      document.body.style.overflow = '';
      document.getElementById('challengeForm').style.display = 'block';
      document.getElementById('afterCreate').style.display = 'none';
    }
  };

  // Modal login
  document.getElementById('cancelModal').onclick = function() {
    document.getElementById('loginModal').classList.remove('active');
  };
  document.getElementById('loginModal').onclick = function(e) {
    if (e.target === this) this.classList.remove('active');
  };

  // Mostrar/ocultar campo de oponente según tipo de reto
  document.getElementById('challenge_type').addEventListener('change', function() {
    const opponentGroup = document.getElementById('opponentGroup');
    opponentGroup.style.display = this.value === 'duel' ? 'block' : 'none';
  });

  // Vista previa de imagen
  document.getElementById('photo').addEventListener('change', function(e) {
    const file = e.target.files[0];
    const preview = document.getElementById('previewImg');
    if (file) {
      const reader = new FileReader();
      reader.onload = function(evt) {
        preview.src = evt.target.result;
        preview.style.display = 'block';
      };
      reader.readAsDataURL(file);
    } else {
      preview.src = '';
      preview.style.display = 'none';
    }
  });

  // Actualizar texto de puntos
  document.getElementById('points').addEventListener('input', function() {
    const val = this.value || 0;
    document.getElementById('pointsText').innerHTML = `<i class="fas fa-star"></i> Completar este reto otorgará <strong>${val} puntos</strong> al ganador.`;
  });

  // Crear otro reto tras éxito
  document.getElementById('createAnother').onclick = function(e) {
    e.preventDefault();
    document.getElementById('challengeForm').reset();
    document.getElementById('previewImg').style.display = 'none';
    document.getElementById('challengeForm').style.display = 'block';
    document.getElementById('afterCreate').style.display = 'none';
    document.getElementById('opponentGroup').style.display = 'none';
  };

  // Envío del formulario
  document.getElementById('challengeForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    const title = document.getElementById('title').value.trim();
    const summary = document.getElementById('summary').value.trim();
    const description = document.getElementById('description').value.trim();
    const challenge_type = document.getElementById('challenge_type').value;
    const opponent_id = document.getElementById('opponent-select').value || null;
    const cause_id = document.getElementById('cause-select').value || null;
    const city = document.getElementById('city').value.trim();
    const country = document.getElementById('country').value.trim();
    const points = parseInt(document.getElementById('points').value, 10);
    const deadline = document.getElementById('deadline').value;
    const is_urgent = document.getElementById('is_urgent').checked;
    const photoFile = document.getElementById('photo').files[0];
    let photo_url = null;

    if (challenge_type === 'duel' && !opponent_id) {
      alert('Debes seleccionar un oponente para un reto 1 VS 1 o cambiar a reto abierto');
      return;
    }

    if (photoFile) {
      const fileExt = photoFile.name.split('.').pop();
      const fileName = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}.${fileExt}`;
      const filePath = `public/${fileName}`;
      const { error: uploadError } = await supabase.storage
        .from('challenges')
        .upload(filePath, photoFile, { upsert: true });
      if (uploadError) {
        alert('Error subiendo la foto: ' + uploadError.message);
        return;
      }
      const { data } = supabase.storage.from('challenges').getPublicUrl(filePath);
      photo_url = data.publicUrl;
    }

    const { data: { session } } = await supabase.auth.getSession();
    const user = session?.user;
    if (!user) {
      alert('Debes iniciar sesión para crear un reto.');
      return;
    }

    const lat = document.getElementById('lat').value;
    const lng = document.getElementById('lng').value;

    const { error } = await supabase
      .from('challenges')
      .insert([{
        title,
        summary,
        description,
        challenge_type,
        creator_id: user.id,
        opponent_id,
        cause_id,
        city,
        country,
        points,
        deadline,
        is_urgent,
        photo_url,
        status: opponent_id ? 'pending' : 'active',
        lat: lat ? parseFloat(lat) : null,
        lng: lng ? parseFloat(lng) : null,
      }]);

    if (error) {
      alert('Error al crear el reto: ' + error.message);
      return;
    }

    document.getElementById('challengeForm').style.display = 'none';
    document.getElementById('afterCreate').style.display = 'block';
    loadChallengesFromSupabase();
  });

  // Tabs
  document.querySelectorAll('.tab').forEach(tab => {
    tab.addEventListener('click', function() {
      document.querySelector('.tab.active').classList.remove('active');
      this.classList.add('active');
      loadChallengesFromSupabase(this.getAttribute('data-filter'));
    });
  });

  // Búsqueda
  document.getElementById('search-input').addEventListener('input', function() {
    loadChallengesFromSupabase(currentFilter, this.value);
  });

  // Cerrar modal de reto
  document.getElementById('closeChallengeModal').addEventListener('click', function() {
    document.getElementById('challengeModal').style.display = 'none';
    document.body.style.overflow = '';
  });
  document.getElementById('challengeModal').addEventListener('click', function(e) {
    if (e.target === this) {
      this.style.display = 'none';
      document.body.style.overflow = '';
    }
  });

  // Geocodificación automática al cambiar ciudad o país
  document.getElementById('city').addEventListener('change', geocodeCityCountry);
  document.getElementById('country').addEventListener('change', geocodeCityCountry);

  // Cargar causas en el mapa
  await loadCausesMap();

  // Cargar retos al inicio
  loadChallengesFromSupabase();
});

// Cargar causas en el select al abrir el modal de crear reto
async function loadCausesForSelect() {
  const select = document.getElementById('cause-select');
  if (causeChoices) {
    causeChoices.destroy();
    causeChoices = null;
  }
  select.innerHTML = '<option value="">Selecciona una causa</option>';
  const { data: causes, error } = await supabase.from('causes').select('id, title');
  if (error) {
    alert('Error cargando causas: ' + error.message);
    return;
  }
  if (causes && causes.length > 0) {
    causes.forEach(cause => {
      const option = document.createElement('option');
      option.value = cause.id;
      option.textContent = cause.title;
      select.appendChild(option);
    });
  }
  causeChoices = new Choices(select, {
    searchEnabled: true,
    itemSelectText: '',
    shouldSort: false,
    placeholder: true,
    placeholderValue: 'Selecciona una causa',
    removeItemButton: true,
    noResultsText: 'No se encontraron causas',
  });
}
async function loadUsersForSelect() {
  const select = document.getElementById('opponent-select');
  if (opponentChoices) {
    opponentChoices.destroy();
    opponentChoices = null;
  }
  select.innerHTML = '<option value="">Selecciona un usuario</option>';
  const { data: users, error } = await supabase
    .from('profiles')
    .select('id, first_name, last_name, username, photo_url');
  if (error) {
    alert('Error cargando usuarios: ' + error.message);
    return;
  }
  if (users && users.length > 0) {
    users.forEach(user => {
      const option = document.createElement('option');
      option.value = user.id;
      option.textContent = (user.first_name && user.last_name)
        ? `${user.first_name} ${user.last_name}`
        : (user.username || 'Usuario');
      select.appendChild(option);
    });
  }
  opponentChoices = new Choices(select, {
    searchEnabled: true,
    itemSelectText: '',
    shouldSort: false,
    placeholder: true,
    placeholderValue: 'Selecciona un usuario',
    removeItemButton: true,
    noResultsText: 'No se encontraron usuarios',
  });
}

// Geocodificación automática al cambiar ciudad o país
async function geocodeCityCountry() {
  const city = document.getElementById('city').value.trim();
  const country = document.getElementById('country').value.trim();
  if (!city || !country) return;

  const query = encodeURIComponent(`${city}, ${country}`);
  const url = `https://nominatim.openstreetmap.org/search?q=${query}&format=json&limit=1`;

  try {
    const res = await fetch(url, { headers: { 'Accept-Language': 'es' } });
    const data = await res.json();
    if (data && data.length > 0) {
      document.getElementById('lat').value = data[0].lat;
      document.getElementById('lng').value = data[0].lon;
    } else {
      document.getElementById('lat').value = '';
      document.getElementById('lng').value = '';
    }
  } catch (e) {
    document.getElementById('lat').value = '';
    document.getElementById('lng').value = '';
  }
}

// Cargar causas en el mapa
async function loadCausesMap() {
  const { data: causes } = await supabase.from('causes').select('id, title');
  if (causes) {
    causes.forEach(c => causesMap[c.id] = c.title);
  }
}

// Cargar retos desde Supabase
async function loadChallengesFromSupabase(filter = "all", searchTerm = "") {
  currentFilter = filter;
  let query = supabase
    .from('challenges')
    .select('*')
    .order('created_at', { ascending: false });

  if (filter !== "all") {
    query = query.eq('challenge_type', filter);
  }
  if (searchTerm && searchTerm.trim() !== "") {
    query = query.or(`title.ilike.%${searchTerm}%,description.ilike.%${searchTerm}%,city.ilike.%${searchTerm}%,country.ilike.%${searchTerm}%`);
  }
  const { data: challenges, error } = await query;
  const challengesList = document.getElementById('challengesList');
  if (error) {
    challengesList.innerHTML = '<div style="color:#e53e3e;text-align:center;">Error al cargar los retos.</div>';
    return;
  }
  challengesList.innerHTML = '';
  if (!challenges || challenges.length === 0) {
    challengesList.innerHTML = '<div style="color:#6b7280;text-align:center;padding:2rem;grid-column:1/-1;">No se encontraron retos.</div>';
    return;
  }

  window.challenges = challenges;

  challenges.forEach(challenge => {
    const urgentBadge = challenge.is_urgent ? `<div class="challenge-badge badge-urgent"><i class="fas fa-exclamation-circle"></i> Urgente</div>` : "";
    const pointsBadge = `<div class="challenge-badge badge-points"><i class="fas fa-star"></i> +${challenge.points || 0} pts</div>`;
    const typeBadge = challenge.challenge_type === 'duel'
      ? `<div class="badge-type"><i class="fas fa-user-friends"></i> 1vs1</div>`
      : `<div class="badge-type"><i class="fas fa-users"></i> Reto abierto</div>`;
    const location = challenge.city && challenge.country ? `${challenge.city}, ${challenge.country}` : "";
    const deadline = challenge.deadline ? new Date(challenge.deadline).toLocaleDateString('es-ES', { day: 'numeric', month: 'short' }) : "";
    let causeHtml = '';
    if (challenge.cause_id && causesMap[challenge.cause_id]) {
      causeHtml = `
        <div class="linked-cause" style="display:flex;align-items:center;gap:0.5rem;">
          <i class="fas fa-link" style="color:var(--primary);"></i>
          <span style="color:var(--primary);font-weight:600;">${causesMap[challenge.cause_id]}</span>
        </div>
      `;
    }

    // Botones según tipo y usuario
    let actionsHtml = '';
    if (challenge.challenge_type === 'open') {
      actionsHtml = `
        <button class="btn btn-primary btn-vermas" data-challenge-id="${challenge.id}"><i class="fas fa-eye"></i> Ver más</button>
        <button class="btn btn-accent btn-aceptar" data-challenge-id="${challenge.id}"><i class="fas fa-hand-holding-heart"></i> Aceptar reto</button>
      `;
    } else if (challenge.challenge_type === 'duel') {
      if (currentUserId && (currentUserId === challenge.creator_id || currentUserId === challenge.opponent_id)) {
        actionsHtml = `<button class="btn btn-primary btn-vermas" data-challenge-id="${challenge.id}"><i class="fas fa-eye"></i> Ver más</button>`;
      } else {
        actionsHtml = `
          <button class="btn btn-primary btn-vermas" data-challenge-id="${challenge.id}"><i class="fas fa-eye"></i> Ver más</button>
          <button class="btn btn-accent btn-retar" data-challenge-id="${challenge.id}"><i class="fas fa-user-plus"></i> Retar</button>
        `;
      }
    } else {
      actionsHtml = `<button class="btn btn-primary btn-vermas" data-challenge-id="${challenge.id}"><i class="fas fa-eye"></i> Ver más</button>`;
    }

    const card = document.createElement('div');
    card.className = 'challenge-card';
    card.innerHTML = `
      <div class="challenge-image">
        ${typeBadge}
        <img src="${challenge.photo_url || '/img/challenge-default.jpg'}" alt="${challenge.title}" onerror="this.src='/img/challenge-default.jpg'">
        ${urgentBadge}
        ${pointsBadge}
      </div>
      <div class="challenge-content">
        <h3>${challenge.title}</h3>
        <p style="font-weight:600;color:#4a6fa5;">${challenge.summary || ''}</p>
        <p>${challenge.description ? challenge.description.substring(0, 100) + (challenge.description.length > 100 ? '...' : '') : ''}</p>
        ${causeHtml}
        <div class="challenge-meta">
          <div class="meta-item"><i class="fas fa-map-marker-alt"></i> ${location}</div>
          <div class="meta-item"><i class="fas fa-calendar-alt"></i> ${deadline}</div>
        </div>
        <div class="challenge-actions">
          ${actionsHtml}
        </div>
      </div>
    `;

    card.querySelectorAll('.btn-vermas').forEach(btn => {
      btn.addEventListener('click', function(e) {
        e.preventDefault();
        showChallengeModal(challenge.id);
      });
    });
    card.querySelectorAll('.btn-aceptar').forEach(btn => {
      btn.addEventListener('click', function(e) {
        e.preventDefault();
        alert('Funcionalidad de aceptar reto próximamente.');
      });
    });
    card.querySelectorAll('.btn-retar').forEach(btn => {
      btn.addEventListener('click', function(e) {
        e.preventDefault();
        alert('Funcionalidad de retar próximamente.');
      });
    });

    challengesList.appendChild(card);
  });
}

// Modal de detalle de reto (idéntico a tasks, con resumen y compartir)
async function showChallengeModal(challengeId) {
  const { data: challenge, error } = await supabase
    .from('challenges')
    .select('*')
    .eq('id', challengeId)
    .single();

  if (error) {
    alert('Error al cargar el reto: ' + error.message);
    return;
  }

  // Causa vinculada
  let causeInfo = '';
  if (challenge.cause_id) {
    const { data: cause } = await supabase
      .from('causes')
      .select('title, photo_url')
      .eq('id', challenge.cause_id)
      .single();
    if (cause) {
      causeInfo = `
        <div class="linked-cause-section" style="margin-bottom:1.5rem;">
          <h3 class="content-title" style="font-size:1.2rem; font-weight:600; color:var(--primary); margin-bottom:0.9rem; display:flex; align-items:center; gap:0.7rem;">
            <i class="fas fa-link"></i> Vinculado a la causa
          </h3>
          <div style="display:flex; align-items:center; gap:1rem; background:#f8fafc; padding:1rem; border-radius:8px; border:1px solid #e5e7eb;">
            <img src="${cause.photo_url || '/img/causa-default.jpg'}"
                 alt="Imagen de la causa vinculada"
                 style="width:80px; height:80px; object-fit:cover; border-radius:6px;"
                 onerror="this.src='/img/causa-default.jpg'">
            <div>
              <strong style="color:var(--primary);">${cause.title}</strong>
              <p style="margin-top:0.3rem; font-size:0.9rem; color:#6b7280;">Causa #${challenge.cause_id}</p>
              <a href="/causes/${challenge.cause_id}" class="btn btn-sm" style="margin-top:0.5rem; padding:0.3rem 0.8rem; font-size:0.85rem;"
                 onclick="showCauseModal('${challenge.cause_id}'); return false;">
                <i class="fas fa-external-link-alt"></i> Ver causa
              </a>
            </div>
          </div>
        </div>
      `;
    }
  }

  const createdDate = new Date(challenge.created_at).toLocaleDateString('es-ES', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
  const deadline = challenge.deadline ? new Date(challenge.deadline).toLocaleDateString('es-ES', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  }) : 'Sin fecha límite';

  // Badge tipo
  let tipo = 'Reto general';
  let tipoIcon = 'fa-bolt';
  if (challenge.challenge_type === 'duel') {
    tipo = 'Duelo 1vs1';
    tipoIcon = 'fa-user-friends';
  } else if (challenge.challenge_type === 'open') {
    tipo = 'Reto abierto';
    tipoIcon = 'fa-users';
  } else if (challenge.challenge_type === 'community') {
    tipo = 'Comunitario';
    tipoIcon = 'fa-people-group';
  } else if (challenge.challenge_type === 'creative') {
    tipo = 'Creativo';
    tipoIcon = 'fa-lightbulb';
  }

  document.getElementById('challengeModalBody').innerHTML = `
    <div class="modal-task-container">
      <h1 class="modal-task-title" style="font-size:2rem; font-weight:800; color:var(--primary); margin-bottom:2.7rem; text-align:center; width:100%;">${challenge.title}</h1>
      <div class="modal-task-header" style="display:flex; gap:2.5rem; margin-bottom:2.7rem;">
        <div class="modal-task-image-wrapper" style="flex:1; min-width:320px; height:300px; border-radius:12px; overflow:hidden; position:relative; box-shadow:0 4px 12px rgba(0,0,0,0.08);">
          <div class="modal-cause-badge" style="top:1.2rem; left:1.2rem; right:auto; background:var(--accent); color:white; position:absolute; border-radius:50px; padding:0.5rem 1rem; font-size:0.9rem; font-weight:600; display:flex; align-items:center; gap:0.6rem; box-shadow:0 2px 8px rgba(0,0,0,0.1); z-index:2;">
            <i class="fas ${tipoIcon}"></i> ${tipo}
          </div>
          <img class="modal-task-image" src="${challenge.photo_url || '/img/challenge-default.jpg'}"
               alt="Imagen del reto ${challenge.title}"
               style="width:100%;height:100%;object-fit:cover;"
               onerror="this.src='/img/challenge-default.jpg'">
          ${challenge.is_urgent ? `
          <div class="modal-cause-badge urgent" style="right:1.2rem; left:auto; top:1.2rem; background:var(--urgent); color:white; border-radius:50px; padding:0.5rem 1rem; font-size:0.9rem; font-weight:600; display:flex; align-items:center; gap:0.6rem; box-shadow:0 2px 8px rgba(0,0,0,0.1); z-index:2;">
            <i class="fas fa-exclamation-circle"></i> Urgente
          </div>` : ''}
        </div>
        <div class="modal-task-info" style="flex:1.5; display:flex; flex-direction:column; justify-content:flex-start;">
          <div class="modal-task-meta-grid" style="display:grid; grid-template-columns:1fr 1fr; gap:0.7rem 1.2rem; margin-bottom:1.2rem;">
            <div class="meta-item">
              <span class="meta-icon"><i class="fas fa-map-marker-alt"></i></span>
              <span>${challenge.city || 'Sin ubicación'}${challenge.country ? ', ' + challenge.country : ''}</span>
            </div>
            <div class="meta-item">
              <span class="meta-icon"><i class="fas fa-star"></i></span>
              <span>${challenge.points || 0} puntos</span>
            </div>
            <div class="meta-item">
              <span class="meta-icon"><i class="fas fa-calendar-alt"></i></span>
              <span>${deadline}</span>
            </div>
            <div class="meta-item">
              <span class="meta-icon"><i class="fas fa-bolt"></i></span>
              <span>${tipo}</span>
            </div>
          </div>
          <div class="points-notice" style="background:#f0f9ff; border-left:4px solid var(--accent); padding:0.8rem; border-radius:0 8px 8px 0; font-size:0.97rem; display:flex; align-items:center; gap:0.7rem;">
            <i class="fas fa-star" style="color: var(--accent);"></i>
            Completar este reto otorga <strong>${challenge.points || 0} puntos</strong>
          </div>
        </div>
      </div>
      ${causeInfo}
      <div class="modal-task-content" style="margin-top:0;">
        <div class="content-section" style="margin-bottom:2.2rem;">
          <h3 class="content-title" style="font-size:1.2rem; font-weight:600; color:var(--primary); margin-bottom:0.9rem; display:flex; align-items:center; gap:0.7rem;">
            <i class="fas fa-align-left"></i> Descripción
          </h3>
          <p class="content-text" style="line-height:1.7; color:#4b5563; font-size:1.05rem; margin-left:0; margin-right:0; text-align:justify;">${challenge.description || 'No hay descripción disponible para este reto.'}</p>
        </div>
        <div class="content-section" style="margin-bottom:2.2rem;">
          <h3 class="content-title" style="font-size:1.2rem; font-weight:600; color:var(--primary); margin-bottom:0.9rem; display:flex; align-items:center; gap:0.7rem;">
            <i class="fas fa-info-circle"></i> Detalles adicionales
          </h3>
          <div style="display:grid; grid-template-columns:1fr 1fr; gap:1rem;">
            <div>
              <p style="font-weight:600; color:#4b5563; margin-bottom:0.3rem;">Fecha de creación</p>
              <p style="color:#6b7280;">${createdDate}</p>
            </div>
            <div>
              <p style="font-weight:600; color:#4b5563; margin-bottom:0.3rem;">Estado</p>
              <p style="color:#6b7280;">${challenge.status === 'completed' ? 'Completado' : 'En progreso'}</p>
            </div>
            <div>
              <p style="font-weight:600; color:#4b5563; margin-bottom:0.3rem;">Prioridad</p>
              <p style="color:#6b7280;">${challenge.is_urgent ? 'Alta prioridad' : 'Prioridad normal'}</p>
            </div>
            <div>
              <p style="font-weight:600; color:#4b5563; margin-bottom:0.3rem;">Tipo</p>
              <p style="color:#6b7280;">${tipo}</p>
            </div>
          </div>
        </div>
      </div>
      <div class="task-actions" style="display:flex; gap:0.8rem; margin-top:2.2rem;">
        <button class="btn btn-primary" style="flex:1; border-radius: var(--radius); font-weight:600; font-size:1.08rem; padding:0.9rem 0;" onclick="participateInChallenge('${challenge.id}')">
          <i class="fas fa-hand-holding-heart"></i> Participar
        </button>
        <button class="btn btn-accent" style="flex:1; border-radius: var(--radius); font-weight:600; font-size:1.08rem; padding:0.9rem 0;" onclick="showShareOptionsChallenge('${challenge.id}')">
          <i class="fas fa-share-alt"></i> Compartir
        </button>
      </div>
      <div class="share-section" id="shareSectionChallenge"></div>
    </div>
  `;

  document.getElementById('challengeModal').style.display = 'flex';
  document.body.style.overflow = 'hidden';
}

// Compartir reto: igual que tareas
function showShareOptionsChallenge(challengeId) {
  // Busca el reto en la lista global si la tienes, si no, recarga el reto
  let challenge = window.challenges?.find(c => c.id == challengeId);
  if (!challenge) return;
  const shareSection = document.getElementById('shareSectionChallenge');
  shareSection.innerHTML = `
    <h3 class="share-title">
      <i class="fas fa-share-alt"></i> Ayuda a difundir este reto
    </h3>
    <div class="share-content">
      <p class="share-text">
        <span class="share-highlight">"${challenge.description ? challenge.description.substring(0, 120) + '...' : 'Únete a este reto solidario'}"</span><br><br>
        ¡Cada participante suma impacto!
      </p>
      <div class="share-buttons">
        <a href="#" class="share-btn share-btn-facebook" onclick="shareOnSocialChallenge('facebook', '${challenge.id}')">
          <i class="fab fa-facebook-f"></i> Facebook
        </a>
        <a href="#" class="share-btn share-btn-twitter" onclick="shareOnSocialChallenge('twitter', '${challenge.id}')">
          <i class="fab fa-twitter"></i> Twitter
        </a>
        <a href="#" class="share-btn share-btn-whatsapp" onclick="shareOnSocialChallenge('whatsapp', '${challenge.id}')">
          <i class="fab fa-whatsapp"></i> WhatsApp
        </a>
        <a href="#" class="share-btn share-btn-link" onclick="copyChallengeLink('${challenge.id}')">
          <i class="fas fa-link"></i> Copiar enlace
        </a>
      </div>
    </div>
  `;
  shareSection.scrollIntoView({ behavior: 'smooth' });
}

function shareOnSocialChallenge(platform, challengeId) {
  let challenge = window.challenges?.find(c => c.id == challengeId);
  const url = `${window.location.origin}/challenges/${challenge.id}`;
  const text = `¡Participa en el reto: "${challenge.title}"! ${challenge.description ? challenge.description.substring(0, 100) + '...' : ''} ${url}`;
  let shareUrl;
  switch(platform) {
    case 'facebook':
      shareUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}&quote=${encodeURIComponent(text)}`;
      break;
    case 'twitter':
      shareUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}`;
      break;
    case 'whatsapp':
      shareUrl = `https://wa.me/?text=${encodeURIComponent(text)}`;
      break;
    default:
      return;
  }
  window.open(shareUrl, '_blank', 'width=600,height=400');
}

function copyChallengeLink(challengeId) {
  const url = `${window.location.origin}/challenges/${challengeId}`;
  navigator.clipboard.writeText(url).then(() => {
    // Puedes usar tu propio sistema de notificaciones
    alert('¡Enlace copiado!');
  }).catch(() => {
    prompt('Por favor, copia este enlace:', url);
  });
}

// Cerrar modal y restaurar scroll
document.getElementById('closeChallengeModal').addEventListener('click', function() {
  document.getElementById('challengeModal').style.display = 'none';
  document.body.style.overflow = '';
});
document.getElementById('challengeModal').addEventListener('click', function(e) {
  if (e.target === this) {
    this.style.display = 'none';
    document.body.style.overflow = '';
  }
});

// Participar en reto (puedes personalizar la lógica)
function participateInChallenge(challengeId) {
  alert('Funcionalidad de participación próximamente.');
}
</script>
{% endblock %}
<!-- filepath: c:\Users\gabi2\Desktop\Solidarity-web\views\maps\index.njk -->
{% extends "layout.njk" %}

{% block title %}Mapa de Ayudas - Solidarity{% endblock %}

{% block head %}
  {{ super() }}
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
  <style>
    /* SOLO estilos específicos del mapa, el resto en layout */
    .map-main-container {
        max-width: 1100px;
        margin: 3rem auto 0 auto;
        background: #fff;
        border-radius: 18px;
        box-shadow: 0 8px 32px rgba(0,0,0,0.07);
        padding: 2.5rem 2rem 2.5rem 2rem;
    }
    .map-title {
        font-size: 2rem;
        font-weight: 800;
        color: var(--primary, #3182ce);
        margin-bottom: 0.7rem;
        letter-spacing: -1px;
    }
    .map-filters {
        display: flex;
        gap: 1rem;
        margin-bottom: 1.2rem;
        flex-wrap: wrap;
    }
    .map-filter-btn {
        background: #f4f8fb;
        border: none;
        border-radius: 8px;
        padding: 0.6rem 1.5rem;
        font-size: 1.05rem;
        font-weight: 600;
        color: var(--primary, #3182ce);
        cursor: pointer;
        transition: background 0.2s, color 0.2s;
    }
    .map-filter-btn.active, .map-filter-btn:hover {
        background: #e6f0fa;
        color: var(--primary-dark, #174e85);
    }
    #community-map {
        width: 100%;
        height: 420px;
        border-radius: 12px;
        border: 1.5px solid #e5e7eb;
        box-shadow: 0 2px 12px rgba(49,130,206,0.06);
        margin-bottom: 2.2rem;
    }
    .leaflet-control-zoom {
        box-shadow: 0 2px 8px rgba(49,130,206,0.10);
        border-radius: 10px;
        overflow: hidden;
    }
    .popup-photo {
        width: 38px;
        height: 38px;
        border-radius: 50%;
        object-fit: cover;
        margin-bottom: 7px;
        border: 2px solid #3182ce;
        box-shadow: 0 1px 4px rgba(49,130,206,0.10);
        display: block;
        margin-left: auto;
        margin-right: auto;
    }
    .map-stats-section {
        display: flex;
        flex-wrap: wrap;
        gap: 2.5rem;
        margin-bottom: 2.2rem;
        justify-content: space-between;
        background: #f8fafc;
        border-radius: 14px;
        padding: 1.5rem 1rem;
    }
    .map-stat-block {
        text-align: center;
        flex: 1 1 180px;
        min-width: 150px;
    }
    .map-stat-block .number {
        font-size: 2.1rem;
        font-weight: 900;
        color: var(--primary, #3182ce);
        margin-bottom: 0.2rem;
        min-height: 2.1rem;
        letter-spacing: -1px;
    }
    .map-stat-block .label {
        color: #6b7280;
        font-size: 1.08rem;
    }
    @media (max-width: 900px) {
        .map-main-container {
            padding: 1.2rem 0.5rem;
        }
        .map-stats-section {
            flex-direction: column;
            gap: 1.2rem;
        }
    }
  </style>
{% endblock %}

{% block content %}
<div class="map-main-container">
    <div class="map-title">
        <i class="fas fa-globe-europe"></i> Mapa de Ayudas de la Comunidad
    </div>
    <div class="map-filters">
        <button class="map-filter-btn active" data-type="all">Todos</button>
        <button class="map-filter-btn" data-type="causa">Causas</button>
        <button class="map-filter-btn" data-type="tarea">Tareas</button>
        <button class="map-filter-btn" data-type="reto">Retos</button>
        <button class="map-filter-btn" data-type="voluntariado">Voluntariados</button>
        <button class="map-filter-btn" data-type="miembro">Miembros</button>
    </div>
    <div id="community-map"></div>
    <div class="map-stats-section">
        <div class="map-stat-block">
            <div class="number" id="stat-people">0</div>
            <div class="label">Personas ayudadas</div>
        </div>
        <div class="map-stat-block">
            <div class="number" id="stat-causes">0</div>
            <div class="label">Causas</div>
        </div>
        <div class="map-stat-block">
            <div class="number" id="stat-volunteering">0</div>
            <div class="label">Voluntariados</div>
        </div>
        <div class="map-stat-block">
            <div class="number" id="stat-tasks">0</div>
            <div class="label">Tareas</div>
        </div>
        <div class="map-stat-block">
            <div class="number" id="stat-challenges">0</div>
            <div class="label">Retos</div>
        </div>
        <div class="map-stat-block">
            <div class="number" id="stat-donations">0 €</div>
            <div class="label">Donaciones totales</div>
        </div>
        <div class="map-stat-block">
            <div class="number" id="stat-countries">0</div>
            <div class="label">Países ayudados</div>
        </div>
        <div class="map-stat-block">
            <div class="number" id="stat-cities">0</div>
            <div class="label">Ciudades impactadas</div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
  {{ super() }}
  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
  <script>

    // Iconos de marcadores
    const markerIcons = {
      causa:    new L.Icon({iconUrl: 'https://cdn.jsdelivr.net/gh/pointhi/leaflet-color-markers@master/img/marker-icon-red.png',    shadowUrl: 'https://cdn.jsdelivr.net/gh/pointhi/leaflet-color-markers@master/img/marker-shadow.png', iconSize: [18,30], iconAnchor: [9,30], popupAnchor: [1,-24], shadowSize: [30,30]}),
      tarea:    new L.Icon({iconUrl: 'https://cdn.jsdelivr.net/gh/pointhi/leaflet-color-markers@master/img/marker-icon-blue.png',   shadowUrl: 'https://cdn.jsdelivr.net/gh/pointhi/leaflet-color-markers@master/img/marker-shadow.png', iconSize: [18,30], iconAnchor: [9,30], popupAnchor: [1,-24], shadowSize: [30,30]}),
      voluntariado: new L.Icon({iconUrl: 'https://cdn.jsdelivr.net/gh/pointhi/leaflet-color-markers@master/img/marker-icon-green.png', shadowUrl: 'https://cdn.jsdelivr.net/gh/pointhi/leaflet-color-markers@master/img/marker-shadow.png', iconSize: [18,30], iconAnchor: [9,30], popupAnchor: [1,-24], shadowSize: [30,30]}),
      reto: new L.Icon({iconUrl: 'https://cdn.jsdelivr.net/gh/pointhi/leaflet-color-markers@master/img/marker-icon-yellow.png', shadowUrl: 'https://cdn.jsdelivr.net/gh/pointhi/leaflet-color-markers@master/img/marker-shadow.png', iconSize: [18,30], iconAnchor: [9,30], popupAnchor: [1,-24], shadowSize: [30,30]}),
      miembro: new L.Icon({iconUrl: 'https://cdn.jsdelivr.net/gh/pointhi/leaflet-color-markers@master/img/marker-icon-violet.png', shadowUrl: 'https://cdn.jsdelivr.net/gh/pointhi/leaflet-color-markers@master/img/marker-shadow.png', iconSize: [18,30], iconAnchor: [9,30], popupAnchor: [1,-24], shadowSize: [30,30]})
    };

    let currentFilter = "all";
    let markers = [];

    // Función para traer y unificar datos reales
    async function fetchMapData() {
      const { data: causes } = await supabase.from('causes').select('*');
      const { data: tasks } = await supabase.from('tasks').select('*');
      const { data: challenges } = await supabase.from('challenges').select('*');
      const { data: volunteering } = await supabase.from('volunteering').select('*');
      const { data: members } = await supabase.from('profiles').select('*');

      const communityActions = [
  ...(causes || []).map(c => ({
    type: "causa",
    title: c.title,
    desc: c.description,
    city: c.city,
    country: c.country,
    lat: c.lat,
    lng: c.lng,
    link: `/causes/${c.id}`,
    photo: c.photo_url || '/img/causa-default.jpg'
  })),
  ...(tasks || []).map(t => ({
    type: "tarea",
    title: t.title,
    desc: t.description,
    city: t.city,
    country: t.country,
    lat: t.lat,
    lng: t.lng,
    link: `/tasks/${t.id}`,
    photo: t.photo_url || '/img/task-default.jpg'
  })),
  ...(challenges || []).map(r => ({
    type: "reto",
    title: r.title,
    desc: r.description,
    city: r.city,
    country: r.country,
    lat: r.lat,
    lng: r.lng,
    link: `/challenges/${r.id}`,
    photo: r.photo_url || '/img/challenge-default.jpg'
  })),
  ...(volunteering || []).map(v => ({
    type: "voluntariado",
    title: v.title,
    desc: v.description,
    city: v.city,
    country: v.country,
    lat: v.lat,
    lng: v.lng,
    link: `/volunteering/${v.id}`,
    photo: v.photo_url || '/img/volunteer-default.jpg'
  }))
];  

      const communityMembers = (members || []).map(m => ({
        name: m.name,
        city: m.city,
        country: m.country,
        lat: m.lat,
        lng: m.lng,
        photo: m.photo,
        profile: `/profile/${m.id}`
      }));

      // Estadísticas reales
      const stats = {
        people: (causes || []).reduce((sum, c) => sum + (c.beneficiaries || 0), 0),
        causes: (causes || []).length,
        volunteering: (volunteering || []).length,
        tasks: (tasks || []).length,
        challenges: (challenges || []).length,
        donations: (causes || []).reduce((sum, c) => sum + (c.raised || 0), 0),
        cities: new Set(communityActions.map(a => a.city)).size,
        countries: new Set(communityActions.map(a => a.country)).size
      };

      return { communityActions, communityMembers, stats };
    }

    function sleep(ms) {
      return new Promise(resolve => setTimeout(resolve, ms));
    }

    // Renderiza marcadores según filtro
    async function renderMapMarkers(type, communityActions, communityMembers) {
      markers.forEach(m => m.remove());
      markers = [];
      let filtered = [];
      if (type === "miembro") {
        filtered = communityMembers;
        for (const m of filtered) {
          if (m.lat && m.lng) {
            const marker = L.marker([m.lat, m.lng], {icon: markerIcons.miembro}).addTo(map)
              .bindPopup(`
                <img src="${m.photo}" class="popup-photo" alt="Foto miembro">
                <strong>${m.name}</strong><br>
                <span style="color:#6b7280;">${m.city}, ${m.country}</span><br>
                <a href="${m.profile}" class="action-link" target="_blank" style="color:#3182ce;font-weight:600;">Ver perfil</a>
              `);
            markers.push(marker);
          }
        }
      } else {
        filtered = (type === "all") ? communityActions : communityActions.filter(a => a.type === type);
        for (const action of filtered) {
          let lat = action.lat, lng = action.lng;
          if (!lat || !lng) {
            // Espera un poco entre peticiones para no saturar Nominatim
            await sleep(300);
            const coords = await geocodeCity(action.city, action.country);
            if (coords) {
              lat = coords.lat;
              lng = coords.lng;
            }
          }
          if (lat && lng) {
            const marker = L.marker([lat, lng], {icon: markerIcons[action.type]}).addTo(map)
              .bindPopup(`
                <img src="${action.photo}" class="popup-photo" alt="Foto acción">
                <strong>${action.title}</strong><br>
                <span style="color:#6b7280;">${action.city}, ${action.country}</span><br>
                <span style="font-size:0.97rem;">${action.desc}</span><br>
                <a href="${action.link}" class="action-link" target="_blank" style="color:#3182ce;font-weight:600;">Ver acción</a>
              `);
            markers.push(marker);
          }
        }
      }
      // Ajustar vista
      const validMarkers = markers.map(m => m.getLatLng());
      if (validMarkers.length > 0) {
        const bounds = L.latLngBounds(validMarkers);
        if (bounds.isValid()) map.fitBounds(bounds, { padding: [30, 30] });
      }
    }

    // Animar los números
    function animateCounter(id, target, prefix = '', suffix = '', duration = 1200) {
      const el = document.getElementById(id);
      let count = 0;
      const steps = 50;
      const step = Math.max(1, Math.ceil(target / steps));
      const intervalTime = Math.max(10, Math.floor(duration / (target / step)));
      const interval = setInterval(() => {
        count += step;
        if (count >= target) {
          el.textContent = prefix + target + suffix;
          clearInterval(interval);
        } else {
          el.textContent = prefix + count + suffix;
        }
      }, intervalTime);
    }

    // Geocodificación de ciudad y país
    async function geocodeCity(city, country) {
      const url = `https://nominatim.openstreetmap.org/search?city=${encodeURIComponent(city)}&country=${encodeURIComponent(country)}&format=json&limit=1`;
      const res = await fetch(url, { headers: { 'Accept-Language': 'es' } });
      const data = await res.json();
      if (data && data.length > 0) {
        return { lat: parseFloat(data[0].lat), lng: parseFloat(data[0].lon) };
      }
      return null;
    }

    // Mapa
    const map = L.map('community-map', { zoomControl: true, dragging: true, scrollWheelZoom: false }).setView([20, 0], 2.1);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '&copy; OpenStreetMap contributors'
    }).addTo(map);
    map.zoomControl.setPosition('topright');

    // Al cargar la página
    document.addEventListener('DOMContentLoaded', async function() {
      const { communityActions, communityMembers, stats } = await fetchMapData();

      // Filtros
      document.querySelectorAll('.map-filter-btn').forEach(btn => {
        btn.addEventListener('click', async function() {
          document.querySelector('.map-filter-btn.active').classList.remove('active');
          this.classList.add('active');
          currentFilter = this.getAttribute('data-type');
          await renderMapMarkers(currentFilter, communityActions, communityMembers);
        });
      });

      // Inicial
      await renderMapMarkers(currentFilter, communityActions, communityMembers);

      // Estadísticas reales
      animateCounter('stat-people', stats.people);
      animateCounter('stat-causes', stats.causes);
      animateCounter('stat-volunteering', stats.volunteering);
      animateCounter('stat-tasks', stats.tasks);
      animateCounter('stat-challenges', stats.challenges);
      animateCounter('stat-donations', stats.donations, '', ' €');
      animateCounter('stat-cities', stats.cities);
      animateCounter('stat-countries', stats.countries);
    });

    // Cabecera dinámica usuario logueado (si tu layout.njk lo soporta)
    window.addEventListener('DOMContentLoaded', function() {
      if (document.getElementById('auth-buttons') && document.getElementById('user-info')) {
        fetch('/me', { credentials: 'include' })
          .then(res => res.json())
          .then(data => {
            if (data.logged) {
              document.getElementById('auth-buttons').style.display = 'none';
              document.getElementById('user-info').style.display = 'flex';
              document.getElementById('user-photo').src = data.user.photo || '/img/default-user.png';
              document.getElementById('user-name').textContent = data.user.name;
            } else {
              document.getElementById('auth-buttons').style.display = 'flex';
              document.getElementById('user-info').style.display = 'none';
            }
          });

        // Logout
        document.getElementById('logoutBtn').onclick = function() {
          fetch('/logout', { method: 'POST', credentials: 'include' })
            .then(() => window.location.reload());
        };
      }
    });
    console.log('Actividades para el mapa:', allActivities);
    allActivities.forEach(a => console.log(a.title, a.lat, a.lng));
  </script>
{% endblock %}
<footer>
  <div class="footer-content" style="max-width:1200px;margin:0 auto;padding:2.5rem 1rem;display:flex;flex-wrap:wrap;gap:2.5rem;justify-content:space-between;">
    <!-- Logo y descripción -->
    <div style="flex:1 1 220px;min-width:220px;">
      <div class="footer-logo" style="display:flex;align-items:center;gap:0.7rem;margin-bottom:1rem;">
        <i class="fas fa-hands-helping" style="font-size:2rem;color:var(--primary);"></i>
        <h3 style="font-size:1.5rem;font-weight:700;color:var(--primary);margin:0;">Solidarity</h3>
      </div>
      <div style="color:#6b7280;font-size:1rem;margin-bottom:1.2rem;">
        Plataforma para transformar tu solidaridad en impacto real. Únete, participa y haz la diferencia en tu comunidad y el mundo.
      </div>
      <div class="social-links" style="display:flex;gap:1rem;">
        <a href="#" aria-label="Twitter" style="color:var(--accent);font-size:1.3rem;"><i class="fab fa-twitter"></i></a>
        <a href="#" aria-label="Facebook" style="color:var(--accent);font-size:1.3rem;"><i class="fab fa-facebook-f"></i></a>
        <a href="#" aria-label="Instagram" style="color:var(--accent);font-size:1.3rem;"><i class="fab fa-instagram"></i></a>
        <a href="#" aria-label="LinkedIn" style="color:var(--accent);font-size:1.3rem;"><i class="fab fa-linkedin"></i></a>
      </div>
    </div>
    <!-- Enlaces útiles -->
    <div style="flex:1 1 160px;min-width:160px;">
      <h4 style="font-size:1.1rem;font-weight:600;margin-bottom:0.7rem;color:var(--primary);">Solidarity</h4>
      <div class="footer-links" style="display:flex;flex-direction:column;gap:0.5rem;">
        <a href="/about">Acerca de</a>
      </div>
    </div>
    <!-- Recursos legales -->
    <div style="flex:1 1 160px;min-width:160px;">
      <h4 style="font-size:1.1rem;font-weight:600;margin-bottom:0.7rem;color:var(--primary);">Legal</h4>
      <div style="display:flex;flex-direction:column;gap:0.5rem;">
        <a href="/privacy">Política de Privacidad</a>
        <a href="/terms">Términos y Condiciones</a>
        <a href="/cookies">Política de Cookies</a>
        <a href="/contact">Contacto</a>
      </div>
    </div>
    <!-- Newsletter -->
    <div style="flex:1 1 260px;min-width:260px;">
      <h4 style="font-size:1.1rem;font-weight:600;margin-bottom:0.7rem;color:var(--primary);">Newsletter</h4>
      <div style="color:#6b7280;font-size:0.98rem;margin-bottom:0.7rem;">
        Recibe novedades, historias inspiradoras y oportunidades de acción directamente en tu correo.
      </div>
      <form id="newsletter-form" style="display:flex;gap:0.5rem;">
        <input type="email" name="newsletter-email" placeholder="Tu email" required style="flex:1;padding:0.5rem 1rem;border-radius:50px;border:1px solid var(--gray);font-size:1rem;">
        <button type="submit" class="btn btn-accent" style="border-radius:50px;padding:0.5rem 1.2rem;">Suscribirse</button>
      </form>
      <div id="newsletter-msg" style="font-size:0.95rem;color:var(--accent);margin-top:0.5rem;display:none;"></div>
    </div>
  </div>
  <div class="footer-bottom" style="text-align:center;padding:1.2rem 0 0 0;margin-top:1.5rem;border-top:1px solid #e5e7eb;color:#6b7280;font-size:0.98rem;">
    &copy; 2025 Solidarity. Todos los derechos reservados.
  </div>
</footer>

<script>
  // Newsletter simple feedback (no backend)
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('newsletter-form');
    if (form) {
      form.addEventListener('submit', function(e) {
        e.preventDefault();
        document.getElementById('newsletter-msg').textContent = "¡Gracias por suscribirte!";
        document.getElementById('newsletter-msg').style.display = "block";
        form.reset();
      });
    }
  });
</script>
<nav class="navbar">
  <a href="/" class="logo">
    <i class="fas fa-hands-helping logo-icon"></i>
    <span class="logo-text">Solidarity</span>
  </a>
  <div class="nav-links">
    <a href="/">Home</a>
    <div class="dropdown">
      <a href="/takeaction" class="dropbtn btn-accent">Take Action! <i class="fas fa-caret-down"></i></a>
      <div class="dropdown-content">
        <a href="/causes">Causas</a>
        <a href="/tasks">Tareas</a>
        <a href="/challenges">Retos</a>
        <a href="/volunteering">Voluntariado</a>
      </div>
    </div>
    <a href="/teams">Equipos</a>
    <a href="/maps">Mapa de Ayudas</a>
    <a href="/ranking">Ranking</a>
    <a href="/profile">Mi Perfil</a>
  </div>
  <div id="auth-buttons">
    <a href="/login" class="btn btn-outline">Iniciar Sesión</a>
    <a href="/register" class="btn btn-primary">Registrarse</a>
  </div>
  <div id="user-menu" style="display: none;">
    <img id="user-avatar" src="" class="avatar" style="width:36px;height:36px;border-radius:50%;object-fit:cover;">
    <span id="user-name"></span>
    <button id="logout-btn" class="btn btn-outline">
      <i class="fas fa-sign-out-alt"></i> Cerrar sesión
    </button>
  </div>
</nav>

<style>
.navbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    max-width: 1800px;
    margin: 0 auto;
    padding: 0 2rem;
}

.nav-links {
    display: flex;
    align-items: center;
    gap: 2rem;
}

.dropdown {
    position: relative;
    display: flex;
    align-items: center;
}
</style>
<nav class="navbar">
  <a href="/" class="logo">
    <i class="fas fa-hands-helping logo-icon"></i>
    <span class="logo-text">Solidarity</span>
  </a>
  <!-- Menú principal solo desktop -->
  <div class="nav-links" id="nav-links">
    <a href="/">Home</a>
    <div class="dropdown">
      <a href="/takeaction" class="dropbtn btn-accent">
        Take Action! <i class="fas fa-caret-down"></i>
      </a>
      <div class="dropdown-content">
        <a href="/causes">Causas</a>
        <a href="/tasks">Tareas</a>
        <a href="/challenges">Retos</a>
        <a href="/volunteering">Voluntariado</a>
      </div>
    </div>
    <a href="/teams">Equipos</a>
    <a href="/maps">Mapa de Ayudas</a>
    <a href="/ranking">Ranking</a>
    <a href="/profile">Mi Perfil</a>
  </div>

  <div id="auth-buttons">
    <a href="/login" class="btn btn-outline">Iniciar Sesión</a>
    <a href="/register" class="btn btn-primary">Registrarse</a>
  </div>

  <div id="user-menu" style="display:none;">
    <div id="user-trigger">
      <img id="user-avatar" src="{{ user.photo_url or '/img/default-user.png' }}" alt="Foto de perfil" class="user-avatar">
      <span id="user-name" class="user-name"></span>
      <i class="fas fa-caret-down dropdown-icon"></i>
    </div>
    <div id="user-dropdown" class="user-dropdown-content">
      <a href="/profile"><i class="fas fa-user icon-profile"></i> Mi Perfil</a>
      <a href="/teams/myteams">
        <i class="fas fa-users icon-teams" style="color: #8e44ad;"></i> Mis Comunidades
      </a>
      <a href="/messages"><i class="fas fa-envelope icon-messages"></i> Mensajes</a>
      <a href="/settings"><i class="fas fa-cog icon-settings"></i> Configuración</a>
      <a href="/help"><i class="fas fa-question-circle icon-help"></i> Ayuda</a>
      <a href="#" id="logout-btn-link"><i class="fas fa-sign-out-alt icon-logout"></i> Cerrar sesión</a>
    </div>
  </div>
</nav>
{% extends "layout.njk" %}

{% block title %}Mapa de Ayudas Solidarity{% endblock %}

{% block head %}
  {{ super() }}
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
  <style>
/* Barra de progreso para causas (activity cards) */
.progress-bar {
  height: 8px;
  background: var(--gray, #e2e8f0);
  border-radius: 4px;
  overflow: hidden;
  margin-bottom: 0.5rem;
}
.progress-fill {
  height: 100%;
  background: var(--primary, #4a6fa5);
  border-radius: 4px;
  transition: width 0.3s;
}
.progress-info {
  display: flex;
  justify-content: space-between;
  font-size: 0.93rem;
  color: #6b7280;
  margin-bottom: 0.7rem;
}

/* Perfil */
.profile-main-container {
  max-width: 1100px;
  margin: 2rem auto;
  background: #fff;
  border-radius: 18px;
  box-shadow: 0 5px 24px rgba(76,163,161,0.08);
  padding: 2.5rem 2rem;
}
.profile-header {
  display: flex;
  gap: 2.5rem;
  align-items: center;
  margin-bottom: 2.2rem;
  flex-wrap: wrap;
}
.profile-photo-wrapper { flex-shrink: 0; position: relative; }
.profile-photo {
  width: 120px;
  height: 120px;
  border-radius: 50%;
  object-fit: cover;
  border: 4px solid #4fc3a1;
  box-shadow: 0 2px 8px rgba(0,0,0,0.07);
}
.profile-info h2 {
  font-size: 2rem;
  margin-bottom: 0.5rem;
  color: #4a6fa5;
  font-weight: 800;
}
.profile-location {
  color: #6b7280;
  margin-bottom: 0.7rem;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-size: 1.05rem;
}
.profile-bio { color: #444; margin-bottom: 1.2rem; font-size: 1.07rem; }
.social-links a {
  color: #4fc3a1;
  margin-right: 0.7em;
  font-size: 1.2em;
  transition: color 0.18s;
}
.social-links a:hover { color: #166088; }

.stats-section {
  display: flex;
  gap: 2.5rem;
  margin-bottom: 2.2rem;
  flex-wrap: wrap;
  justify-content: flex-start;
}
.stats-card {
  background: #f8fafc;
  border-radius: 14px;
  box-shadow: 0 2px 10px rgba(76,163,161,0.07);
  padding: 1.2rem 2.2rem;
  display: flex;
  align-items: center;
  gap: 1.1rem;
  min-width: 180px;
  flex: 1 1 180px;
  border: 1.5px solid #e2e8f0;
  transition: box-shadow 0.18s, border 0.18s;
}
.stats-card.highlight {
  background: #e6f0fa;
  border-color: #4a6fa5;
}
.stats-icon {
  font-size: 2.1rem;
  color: #4a6fa5;
  background: #e6f0fa;
  border-radius: 50%;
  width: 48px;
  height: 48px;
  display: flex;
  align-items: center;
  justify-content: center;
}
.stats-content .number {
  font-size: 1.7rem;
  font-weight: 700;
  color: #4a6fa5;
}
.stats-content .label {
  color: #6b7280;
  font-size: 1.01rem;
  margin-top: 0.2rem;
}

.impact-score-section {
  margin: 2rem 0 2.5rem 0;
  background: #e6f0fa;
  border-radius: 14px;
  padding: 1.7rem 1.2rem;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 1.2rem;
  box-shadow: 0 2px 10px rgba(76,163,161,0.07);
}
.impact-score-main {
  display: flex;
  align-items: center;
  gap: 1.2rem;
}
.score {
  font-size: 2.5rem;
  font-weight: 700;
  color: #4a6fa5;
}
.score-label {
  font-size: 1.1rem;
  color: #4fc3a1;
  font-weight: 600;
}
.impact-badge {
  display: inline-block;
  background: #4a6fa5;
  color: #fff;
  font-size: 0.95rem;
  font-weight: 700;
  padding: 0.18em 0.9em;
  border-radius: 999px;
  box-shadow: 0 2px 8px rgba(76,163,161,0.09);
  margin-left: 0.7em;
  letter-spacing: 0.02em;
  position: static;
  margin-top: 0;
  margin-bottom: 0;
  vertical-align: middle;
  min-width: 70px;
  text-align: center;
}
.impact-score-bar-bg {
  width: 220px;
  height: 12px;
  background: #f0f0f0;
  border-radius: 8px;
  margin: 0.5rem 0;
  overflow: hidden;
  position: relative;
}
.impact-score-bar {
  height: 100%;
  background: linear-gradient(90deg, #4a6fa5, #4fc3a1);
  border-radius: 8px;
  transition: width 0.5s;
  position: absolute;
  top: 0;
  left: 0;
}
.impact-level-info {
  color: #6b7280;
  font-size: 1.01rem;
  margin-top: 0.2rem;
  display: flex;
  gap: 1.2rem;
  flex-wrap: wrap;
  justify-content: center;
}

.activities-filter {
  display: flex;
  gap: 0.7rem;
  margin: 2.2rem 0 1.2rem 0;
  flex-wrap: wrap;
}
.filter-btn {
  background: #f1f5f9;
  color: #4a6fa5;
  border-radius: 999px;
  padding: 0.5rem 1.3rem;
  font-size: 1rem;
  font-weight: 600;
  border: none;
  cursor: pointer;
  transition: background 0.18s, color 0.18s;
  outline: none;
}
.filter-btn.active, .filter-btn:hover {
  background: #4fc3a1;
  color: #fff;
}

.activities-section .section-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1.2rem;
  gap: 1.2rem;
}
.sort-options {
  display: flex;
  align-items: center;
  gap: 0.7rem;
  font-size: 1rem;
  color: #4a6fa5;
}
.activities-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
  gap: 1.5rem;
}

/* Tarjetas de actividad (idénticas a causas Solidarity) */
.activity-card {
  background: #fff;
  border-radius: 12px;
  overflow: hidden;
  box-shadow: 0 5px 15px rgba(44, 62, 80, 0.07);
  border: 1px solid #e2e8f0;
  display: flex;
  flex-direction: column;
  font-family: 'Poppins', 'Segoe UI', Arial, sans-serif;
  transition: box-shadow 0.2s, border 0.2s, transform 0.2s;
}
.activity-card:hover {
  box-shadow: 0 10px 25px rgba(44, 62, 80, 0.13);
  border-color: #4a6fa5;
  transform: translateY(-4px);
}
.activity-image {
  height: 180px;
  overflow: hidden;
  position: relative;
  background-size: cover;
  background-position: center;
}
.activity-image img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: transform 0.3s;
}
.activity-card:hover .activity-image img {
  transform: scale(1.05);
}
.activity-badge {
  position: absolute;
  top: 1rem;
  left: 1rem;
  background: #e74c3c;
  color: #fff;
  padding: 0.22em 1em;
  border-radius: 999px;
  font-size: 0.93em;
  font-weight: 600;
  box-shadow: 0 2px 8px rgba(44,62,80,0.08);
  display: flex;
  align-items: center;
  gap: 0.4em;
  z-index: 2;
  letter-spacing: 0.01em;
  text-transform: capitalize;
}
.activity-badge.cause { background: #e74c3c; }
.activity-badge.task { background: #4a6fa5; }
.activity-badge.challenge { background: #f39c12; }
.activity-badge.volunteering { background: #2ecc71; }

.activity-content {
  padding: 1.3rem 1.2rem 1.2rem 1.2rem;
  display: flex;
  flex-direction: column;
  flex: 1;
}
.activity-header {
  font-size: 1.15rem;
  margin-bottom: 0.7rem;
  color: #2d3748;
  font-weight: 700;
  letter-spacing: 0.01em;
}
.activity-content p {
  color: #6b7280;
  margin-bottom: 1.2rem;
  font-size: 0.97rem;
  line-height: 1.6;
  flex-grow: 1;
}
.activity-meta {
  display: flex;
  gap: 1rem;
  margin-bottom: 1.1rem;
  font-size: 0.89rem;
  flex-wrap: wrap;
}
.meta-item {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  color: #6b7280;
}
.meta-item i {
  color: #4a6fa5;
}
.activity-impact {
  display: inline-flex;
  align-items: center;
  background: #f0f9ff;
  color: #4a6fa5;
  padding: 0.3rem 0.8rem;
  border-radius: 50px;
  font-size: 0.92em;
  font-weight: 600;
  margin-bottom: 1rem;
}
.activity-impact i {
  margin-right: 0.3rem;
}
.custom-map-marker {
  display: flex;
  justify-content: center;
  align-items: center;
}

/* Tarjeta de comunidad (usa los mismos estilos que activity-card) */
.community-badge {
  background: #4a6fa5;
  color: #fff;
  padding: 0.22em 1em;
  border-radius: 999px;
  font-size: 0.93em;
  font-weight: 600;
  box-shadow: 0 2px 8px rgba(44,62,80,0.08);
  display: flex;
  align-items: center;
  gap: 0.4em;
  z-index: 2;
  letter-spacing: 0.01em;
  text-transform: capitalize;
  position: absolute;
  top: 1rem;
  left: 1rem;
}

/* MAPA Y LEYENDA */
#profile-map {
  width: 100%;
  height: 400px;
  border-radius: 12px;
  margin-bottom: 1.5rem;
  box-shadow: 0 2px 10px rgba(0,0,0,0.08);
  background: #f8fafc;
  border: 1px solid #e2e8f0;
}
.map-section .section-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1.2rem;
  gap: 1.2rem;
}
.map-stats {
  display: flex;
  gap: 1.2rem;
  font-size: 1rem;
  color: #4a6fa5;
}
.map-legend {
  display: flex;
  gap: 1.2rem;
  margin-top: 1rem;
  font-size: 0.97rem;
}
.legend-item {
  display: flex;
  align-items: center;
  gap: 0.4rem;
}
.legend-color {
  display: inline-block;
  width: 16px;
  height: 16px;
  border-radius: 50%;
  margin-right: 0.3em;
}
.legend-color.cause { background: #e74c3c; }
.legend-color.task { background: #3498db; }
.legend-color.challenge { background: #f39c12; }
.legend-color.volunteering { background: #2ecc71; }
/* Marcador personalizado para el mapa */
.map-marker {
  display: flex;
  justify-content: center;
  align-items: center;
}

/* Responsive */
@media (max-width: 900px) {
  .profile-header { flex-direction: column; gap: 1.2rem; text-align: center; }
  .stats-section { flex-direction: column; gap: 1.2rem; }
  .activities-grid { grid-template-columns: 1fr; }
  .map-section { margin-top: 2rem; }
}
@media (max-width: 600px) {
  .profile-main-container { padding: 1.1rem 0.3rem; }
  .impact-score-section { padding: 1rem 0.3rem; }
  .stats-card { padding: 1rem 1.1rem; }
}
.section-header h3 {
  color: #4a6fa5;
  font-weight: 800;
  font-size: 1.45em; /* aumentado */
  letter-spacing: 0.01em;
  margin-bottom: 0;
}

/* Margen inferior para separar las tarjetas del mapa */
.activities-section {
  margin-bottom: 1cm;
}
  </style>
{% endblock %}

{% block content %}
<div class="profile-main-container">
  <!-- Header con foto y datos básicos -->
  <div class="profile-header">
    <div class="profile-photo-wrapper">
      <img class="profile-photo" src="/img/avatar-default.jpg" alt="Foto de perfil">
    </div>
    <div class="profile-info">
      <h2>Nombre Apellido</h2>
      <div class="profile-location"></div>
      <div class="profile-bio"></div>
      <div class="social-links">
        <a href="#"><i class="fab fa-linkedin"></i></a>
        <a href="#"><i class="fab fa-twitter"></i></a>
        <a href="#"><i class="fab fa-instagram"></i></a>
      </div>
    </div>
  </div>

  <!-- Sección de estadísticas principales -->
  <div class="stats-section">
    <div class="stats-card">
      <div class="stats-icon"><i class="fas fa-project-diagram"></i></div>
      <div class="stats-content">
        <div class="number" id="projects-counter">0</div>
        <div class="label">Proyectos</div>
      </div>
    </div>
    <div class="stats-card highlight">
      <div class="stats-icon"><i class="fas fa-users"></i></div>
      <div class="stats-content">
        <div class="number" id="impacted-counter">0</div>
        <div class="label">Personas impactadas</div>
      </div>
    </div>
    <div class="stats-card">
      <div class="stats-icon"><i class="fas fa-hand-holding-heart"></i></div>
      <div class="stats-content">
        <div class="number" id="donated-counter">0</div>
        <div class="label">Donado</div>
      </div>
    </div>
  </div>

  <!-- Barra de progreso de impacto -->
  <div class="impact-score-section">
    <div class="section-header">
      <h3>Tu impacto social</h3>
      <div class="impact-score-main">
        <span class="score" id="impact-score">0</span>
        <span class="score-label">Puntos</span>
        <span class="impact-badge" id="impact-level-badge">
          <i class="fas fa-tree" style="margin-right:0.4em;color:#fff;"></i>
          Forest
        </span>
      </div>
    </div>
    <div class="impact-score-bar-bg">
      <div class="impact-score-bar" id="impact-score-bar" style="width:0%"></div>
    </div>
    <div class="impact-level-info">
      <span id="impact-level">Nivel 1 - Seed</span>
      <span id="impact-score-details-text">0/500 puntos para el siguiente nivel</span>
    </div>
  </div>

  <!-- Filtros de actividades -->
  <div class="activities-filter">
    <button class="filter-btn active" data-filter="all">Todas</button>
    <button class="filter-btn" data-filter="cause"><i class="fas fa-heart"></i> Causas</button>
    <button class="filter-btn" data-filter="task"><i class="fas fa-tasks"></i> Tareas</button>
    <button class="filter-btn" data-filter="challenge"><i class="fas fa-bolt"></i> Retos</button>
    <button class="filter-btn" data-filter="volunteering"><i class="fas fa-hands-helping"></i> Voluntariados</button>
    <button class="filter-btn" data-filter="community"><i class="fas fa-users"></i> Comunidades</button>
  </div>

  <!-- Listado de actividades -->
  <div class="activities-section">
    <div class="section-header with-action">
      <h3>Tus actividades</h3>
      <div class="sort-options">
        <span>Ordenar por:</span>
        <select id="activities-sort">
          <option value="recent">Más recientes</option>
          <option value="oldest">Más antiguas</option>
          <option value="impact">Mayor impacto</option>
        </select>
      </div>
    </div>
    <div class="activities-grid" id="activities-grid"></div>
  </div>

   <!-- Mapa de impacto -->
  <div class="map-section">
    <div class="section-header with-stats">
      <h3>Tu mapa de impacto</h3>
      <div class="map-stats">
        <div class="stat-item"><i class="fas fa-city"></i> <span id="city-count">0</span> ciudades</div>
        <div class="stat-item"><i class="fas fa-globe"></i> <span id="country-count">0</span> países</div>
      </div>
    </div>
    <div id="profile-map"></div>
    <div class="map-legend">
      <div class="legend-item"><span class="legend-color cause"></span> Causas</div>
      <div class="legend-item"><span class="legend-color task"></span> Tareas</div>
      <div class="legend-item"><span class="legend-color challenge"></span> Retos</div>
      <div class="legend-item"><span class="legend-color volunteering"></span> Voluntariados</div>
    </div>
  </div>
</div>
{% endblock %}

{% block scripts %}
  {{ super() }}
  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
  <script>
    function waitForSupabase(callback) {
      if (window.supabase) {
        callback(window.supabase);
      } else {
        setTimeout(() => waitForSupabase(callback), 30);
      }
    }

    // --- Funciones auxiliares mejoradas ---
    function animateCounter(id, target, prefix = '', suffix = '', duration = 1200) {
      const el = document.getElementById(id);
      if (!el) return;
      let count = 0;
      const steps = 50;
      const step = Math.max(1, Math.ceil(target / steps));
      const intervalTime = Math.max(10, Math.floor(duration / (target / step)));
      const interval = setInterval(() => {
        count += step;
        if (count >= target) {
          el.textContent = prefix + target + suffix;
          clearInterval(interval);
        } else {
          el.textContent = prefix + count + suffix;
        }
      }, intervalTime);
    }

    const levels = [
      { name: "Seed", min: 0, max: 499, color: "#4CAF50", icon: "fa-seedling" },
      { name: "Sprout", min: 500, max: 999, color: "#8BC34A", icon: "fa-leaf" },
      { name: "Tree", min: 1000, max: 1999, color: "#FFC107", icon: "fa-tree" },
      { name: "Forest", min: 2000, max: 4999, color: "#FF9800", icon: "fa-forest" },
      { name: "Legend", min: 5000, max: 99999, color: "#F44336", icon: "fa-trophy" }
    ];

    function getLevel(score) {
      for (let i = levels.length - 1; i >= 0; i--) {
        if (score >= levels[i].min) {
          return { ...levels[i], idx: i };
        }
      }
      return { ...levels[0], idx: 0 };
    }

    function updateImpactScore(score) {
      const scoreElement = document.getElementById('impact-score');
      const levelElement = document.getElementById('impact-level');
      const badgeElement = document.getElementById('impact-level-badge');
      const barElement = document.getElementById('impact-score-bar');
      const detailsElement = document.getElementById('impact-score-details-text');
      
      if (!scoreElement || !levelElement || !barElement || !detailsElement) return;
      
      scoreElement.textContent = score;
      const level = getLevel(score);
      
      // Actualizar nivel y badge
      levelElement.innerHTML = `<i class="fas ${level.icon}"></i> Nivel ${level.idx + 1} - ${level.name}`;
      if (badgeElement) {
        badgeElement.textContent = level.name;
        badgeElement.style.background = level.name === "Forest"
          ? "linear-gradient(90deg,#FF9800,#4fc3a1)"
          : level.color;
        badgeElement.innerHTML = level.name === "Forest"
          ? '<i class="fas fa-tree" style="margin-right:0.4em;color:#fff;"></i>Forest'
          : level.name;
      }
      
      // Actualizar barra de progreso
      let percent = 100;
      if (level.max) {
        percent = Math.round(((score - level.min) / (level.max - level.min)) * 100);
        percent = Math.max(0, Math.min(percent, 100));
      }
      barElement.style.width = percent + '%';
      barElement.style.backgroundColor = level.color;
      
      // Actualizar texto de detalles
      detailsElement.textContent = percent >= 100
        ? `¡Has alcanzado el máximo de este nivel!`
        : `Te faltan ${level.max - score} puntos para el siguiente nivel.`;
    }

    function formatDate(dateString) {
      const options = { year: 'numeric', month: 'short', day: 'numeric' };
      return new Date(dateString).toLocaleDateString('es-ES', options);
    }

    // --- Fin funciones auxiliares ---

    waitForSupabase(async function(supabase) {
      try {
        // 1. Obtener usuario logueado
        const { data: { user }, error: authError } = await supabase.auth.getUser();
        if (authError || !user) {
          window.location.href = '/login?return=/profile';
          return;
        }

        // 2. Cargar perfil
        const { data: profile, error: profileError } = await supabase
          .from('profiles')
          .select('*')
          .eq('id', user.id)
          .single();

        if (!profileError && profile) {
          document.querySelector('.profile-photo').src = profile.photo_url || '/img/avatar-default.jpg';
          document.querySelector('.profile-info h2').textContent = `${profile.first_name || ''} ${profile.last_name || ''}`.trim();
          
          if (profile.country) {
            document.querySelector('.profile-location').innerHTML = `
              <i class="fas fa-map-marker-alt"></i> 
              ${[profile.city, profile.country].filter(Boolean).join(', ')}
            `;
          }
          
          document.querySelector('.profile-bio').textContent = profile.bio || '';
        }

        // 3. Cargar todas las acciones del usuario
        const [
          causesPromise, 
          tasksPromise, 
          challengesPromise, 
          volunteeringPromise
        ] = await Promise.allSettled([
          supabase.from('causes').select('id,title,description,city,country,lat,lng,photo_url,beneficiaries,raised,goal,created_at').eq('user_id', user.id),
          supabase.from('tasks').select('id,title,description,city,country,lat,lng,photo_url,beneficiaries,created_at').eq('user_id', user.id),
          supabase.from('challenges').select('id,title,description,city,country,lat,lng,photo_url,created_at').eq('user_id', user.id),
          supabase.from('volunteering').select('id,title,description,city,country,lat,lng,photo_url,volunteers_needed,created_at').eq('user_id', user.id)
        ]);

        // Procesar resultados
        const causes = Array.isArray(causesPromise.value?.data) ? causesPromise.value.data : [];
        const tasks = Array.isArray(tasksPromise.value?.data) ? tasksPromise.value.data : [];
        const challenges = Array.isArray(challengesPromise.value?.data) ? challengesPromise.value.data : [];
        const volunteering = Array.isArray(volunteeringPromise.value?.data) ? volunteeringPromise.value.data : [];

        // 3b. Cargar comunidades del usuario (miembro)
        const { data: memberCommunities } = await supabase
          .from('communities_members')
          .select('community_id')
          .eq('user_id', user.id);

        // 3c. Cargar comunidades creadas por el usuario
        const { data: createdCommunities } = await supabase
          .from('communities')
          .select('id,name,description,photo_url')
          .eq('creator_id', user.id);

        // Unir y eliminar duplicados por id
        const allCommunities = [
          ...(memberCommunities?.map(c => c.community) || []),
          ...(createdCommunities || [])
        ].filter((c, i, arr) => c && arr.findIndex(x => x.id === c.id) === i);

        // Renderizar comunidades
        function renderCommunities() {
          const grid = document.getElementById('communities-grid');
          if (!grid) return;
          if (!allCommunities || allCommunities.length === 0) {
            grid.innerHTML = `<div class="no-activities" style="grid-column:1/-1;">
              <i class="fas fa-users"></i>
              </div>`;
            return;
          }
          grid.innerHTML = allCommunities.map(c => `
            <div class="activity-card">
              <div class="activity-image" style="background-image: url('${c.photo_url || '/img/community-default.jpg'}')">
                <span class="community-badge">
                  <i class="fas fa-users"></i> Comunidad
                </span>
              </div>
              <div class="activity-content">
                <h3 class="activity-header">${c.name || 'Sin nombre'}</h3>
                <p>${c.description || 'Sin descripción'}</p>
              </div>
              <a href="/communities/${c.id}" class="activity-link">Ver detalles</a>
            </div>
          `).join('');
        }
        renderCommunities();

        // 4. Calcular estadísticas
        const totalProjects = causes.length + tasks.length + challenges.length + volunteering.length;
        const totalImpacted = [...causes, ...tasks, ...volunteering].reduce((sum, item) => sum + (item.beneficiaries || item.volunteers_needed || 0), 0);
        const totalDonated = causes.reduce((sum, c) => sum + (c.raised || 0), 0);

        // Actualizar contadores con animación
        animateCounter('projects-counter', totalProjects);
        animateCounter('impacted-counter', totalImpacted);
        animateCounter('donated-counter', totalDonated, '', ' €');

        // Calcular y mostrar puntuación de impacto
        const impactScore = totalImpacted + totalProjects * 10 + totalDonated;
        updateImpactScore(impactScore);

        // 5. Preparar datos para actividades y mapa
        const allActivities = [
          ...causes.map(c => ({
            type: 'cause',
            icon: 'fa-heart',
            color: '#e74c3c',
            ...c,
            impact: (c.beneficiaries || 0) + (c.raised || 0),
            formattedDate: formatDate(c.created_at)
          })),
          ...tasks.map(t => ({
            type: 'task',
            icon: 'fa-tasks',
            color: '#3498db',
            ...t,
            impact: t.beneficiaries || 0,
            formattedDate: formatDate(t.created_at)
          })),
          ...challenges.map(ch => ({
            type: 'challenge',
            icon: 'fa-bolt',
            color: '#f39c12',
            ...ch,
            impact: 50, // Valor base para retos
            formattedDate: formatDate(ch.created_at)
          })),
          ...volunteering.map(v => ({
            type: 'volunteering',
            icon: 'fa-hands-helping',
            color: '#2ecc71',
            ...v,
            impact: v.volunteers_needed || 0,
            formattedDate: formatDate(v.created_at)
          }))
        ].sort((a, b) => new Date(b.created_at) - new Date(a.created_at));

        console.log('Actividades para el mapa:', allActivities);
        allActivities.forEach(a => console.log(a.title, a.lat, a.lng));

        // 6. Renderizar actividades
        function renderActivities(filter = 'all', sort = 'recent') {
          const grid = document.getElementById('activities-grid');
          if (!grid) return;

          let activitiesToShow = [...allActivities];

          // Si el filtro es "community", muestra solo comunidades
          if (filter === 'community') {
            if (!allCommunities || allCommunities.length === 0) {
              grid.innerHTML = `
                <div class="no-activities" style="grid-column:1/-1; text-align:center; padding:2.5em 1em;">
                  <i class="fas fa-users" style="font-size:2.5em; color:#4a6fa5; margin-bottom:0.5em;"></i>
                  <h4 style="color:#4a6fa5; font-size:1.3em; margin-bottom:0.3em;">Aún no formas parte de ninguna comunidad</h4>
                  <p style="color:#6b7280; font-size:1em;">Únete a una comunidad para conectar con personas afines y participar en proyectos colectivos.</p>
                </div>
              `;
              return;
            }
            grid.innerHTML = allCommunities.map(c => `
              <div class="activity-card">
                <div class="activity-image" style="background-image: url('${c.photo_url || '/img/community-default.jpg'}')">
                  <span class="community-badge">
                    <i class="fas fa-users"></i> Comunidad
                  </span>
                </div>
                <div class="activity-content">
                  <h3 class="activity-header">${c.name || 'Sin nombre'}</h3>
                  <p>${c.description || 'Sin descripción'}</p>
                </div>
                <a href="/communities/${c.id}" class="activity-link">Ver más</a>
              </div>
            `).join('');
            return;
          }

          // En "Todas", no mostrar mensaje si no hay comunidades
          if (filter === 'all') {
            // No filtrar nada, muestra todo lo que haya en allActivities (incluidas comunidades si existen)
          } else if (filter !== 'all') {
            activitiesToShow = activitiesToShow.filter(a => a.type === filter);
          }

          grid.innerHTML = activitiesToShow.map(activity => {
            const location = activity.city && activity.country ? `${activity.city}${activity.country ? ', ' + activity.country : ''}` : 'Sin ubicación';

            // Causa
            if (activity.type === 'cause') {
              const meta = Number(activity.goal) > 0 ? Number(activity.goal) : 1000;
              const recaudado = Number(activity.raised) >= 0 ? Number(activity.raised) : 0;
              const porcentaje = meta ? Math.min(100, Math.round((recaudado / meta) * 100)) : 0;

              return `
                <div class="activity-card" data-type="cause">
                  <div class="activity-image" style="background-image: url('${activity.photo_url || '/img/causa-default.jpg'}')">
                    <span class="activity-badge cause">
                      <i class="fas fa-heart"></i> Causa
                    </span>
                  </div>
                  <div class="activity-content">
                    <h3 class="activity-header">${activity.title || 'Sin título'}</h3>
                    <p>${activity.description || 'No hay descripción disponible'}</p>
                    <div class="activity-meta">
                      <span class="meta-item"><i class="fas fa-map-marker-alt"></i> ${location}</span>
                      <span class="meta-item"><i class="fas fa-calendar-alt"></i> ${activity.formattedDate}</span>
                    </div>
                    <div class="activity-impact">
                      <i class="fas fa-users"></i> ${activity.beneficiaries || 0} beneficiarios
                    </div>
                    <div class="progress-bar">
                      <div class="progress-fill" style="width:${porcentaje}%"></div>
                    </div>
                    <div class="progress-info">
                      <span>${porcentaje}% completado</span>
                      <span>${recaudado} € de ${meta} €</span>
                    </div>
                  </div>
                  <a href="/causes/${activity.id}" class="activity-link">Ver más</a>
                </div>
              `;
            }

            // Tarea
            if (activity.type === 'task') {
              return `
                <div class="activity-card" data-type="task">
                  <div class="activity-image" style="background-image: url('${activity.photo_url || '/img/task-default.jpg'}')">
                    <span class="activity-badge task">
                      <i class="fas fa-tasks"></i> Tarea
                    </span>
                  </div>
                  <div class="activity-content">
                    <h3 class="activity-header">${activity.title || 'Sin título'}</h3>
                    <p>${activity.description || 'No hay descripción disponible'}</p>
                    <div class="activity-meta">
                      <span class="meta-item"><i class="fas fa-map-marker-alt"></i> ${location}</span>
                      <span class="meta-item"><i class="fas fa-calendar-alt"></i> ${activity.formattedDate}</span>
                    </div>
                    <div class="activity-impact">
                      <i class="fas fa-users"></i> ${activity.beneficiaries || 0} beneficiarios
                    </div>
                  </div>
                  <a href="/tasks/${activity.id}" class="activity-link">Ver más</a>
                </div>
              `;
            }

            // Reto
            if (activity.type === 'challenge') {
              return `
                <div class="activity-card" data-type="challenge">
                  <div class="activity-image" style="background-image: url('${activity.photo_url || '/img/challenge-default.jpg'}')">
                    <span class="activity-badge challenge">
                      <i class="fas fa-bolt"></i> Reto
                    </span>
                  </div>
                  <div class="activity-content">
                    <h3 class="activity-header">${activity.title || 'Sin título'}</h3>
                    <p>${activity.description || 'No hay descripción disponible'}</p>
                    <div class="activity-meta">
                      <span class="meta-item"><i class="fas fa-map-marker-alt"></i> ${location}</span>
                      <span class="meta-item"><i class="fas fa-calendar-alt"></i> ${activity.formattedDate}</span>
                    </div>
                    <div class="activity-impact">
                      <i class="fas fa-bullseye"></i> Impacto: 50 pts
                    </div>
                  </div>
                  <a href="/challenges/${activity.id}" class="activity-link">Ver más</a>
                </div>
              `;
            }

            // Voluntariado
            if (activity.type === 'volunteering') {
              return `
                <div class="activity-card" data-type="volunteering">
                  <div class="activity-image" style="background-image: url('${activity.photo_url || '/img/volunteer-default.jpg'}')">
                    <span class="activity-badge volunteering">
                      <i class="fas fa-hands-helping"></i> Voluntariado
                    </span>
                  </div>
                  <div class="activity-content">
                    <h3 class="activity-header">${activity.title || 'Sin título'}</h3>
                    <p>${activity.description || 'No hay descripción disponible'}</p>
                    <div class="activity-meta">
                      <span class="meta-item"><i class="fas fa-map-marker-alt"></i> ${location}</span>
                      <span class="meta-item"><i class="fas fa-calendar-alt"></i> ${activity.formattedDate}</span>
                    </div>
                    <div class="activity-impact">
                      <i class="fas fa-users"></i> ${activity.volunteers_needed || 0} voluntarios necesarios
                    </div>
                  </div>
                  <a href="/volunteering/${activity.id}" class="activity-link">Ver más</a>
                </div>
              `;
            }

            // Comunidad
            if (activity.type === 'community') {
              return `
                <div class="activity-card">
                  <div class="activity-image" style="background-image: url('${activity.photo_url || '/img/community-default.jpg'}')">
                    <span class="community-badge">
                      <i class="fas fa-users"></i> Comunidad
                    </span>
                  </div>
                  <div class="activity-content">
                    <h3 class="activity-header">${activity.name || 'Sin nombre'}</h3>
                    <p>${activity.description || 'Sin descripción'}</p>
                  </div>
                  <a href="/communities/${activity.id}" class="activity-link">Ver más</a>
                </div>
              `;
            }

            return '';
          }).join('');

          if (activitiesToShow.length === 0) {
            grid.innerHTML = `
              <div class="no-activities" style="grid-column:1/-1;">
                <i class="fas fa-inbox"></i>
                <p>No hay actividades para mostrar</p>
              </div>
            `;
          }
        }

        // Event listeners para filtros
        document.querySelectorAll('.filter-btn').forEach(btn => {
          btn.addEventListener('click', function() {
            document.querySelector('.filter-btn.active').classList.remove('active');
            this.classList.add('active');
            renderActivities(this.dataset.filter, document.getElementById('activities-sort').value);
          });
        });

        // Event listener para ordenar
        document.getElementById('activities-sort')?.addEventListener('change', function() {
          const activeFilter = document.querySelector('.filter-btn.active').dataset.filter;
          renderActivities(activeFilter, this.value);
        });

        // Renderizar inicialmente
        renderActivities();

        // 7. Configurar mapa de impacto
        const markerIcons = {
          cause: new L.Icon({
            iconUrl: 'https://cdn.jsdelivr.net/gh/pointhi/leaflet-color-markers@master/img/marker-icon-red.png',
            shadowUrl: 'https://cdn.jsdelivr.net/gh/pointhi/leaflet-color-markers@master/img/marker-shadow.png',
            iconSize: [18, 30],
            iconAnchor: [9, 30],
            popupAnchor: [1, -24],
            shadowSize: [30, 30]
          }),
          task: new L.Icon({
            iconUrl: 'https://cdn.jsdelivr.net/gh/pointhi/leaflet-color-markers@master/img/marker-icon-blue.png',
            shadowUrl: 'https://cdn.jsdelivr.net/gh/pointhi/leaflet-color-markers@master/img/marker-shadow.png',
            iconSize: [18, 30],
            iconAnchor: [9, 30],
            popupAnchor: [1, -24],
            shadowSize: [30, 30]
          }),
          challenge: new L.Icon({
            iconUrl: 'https://cdn.jsdelivr.net/gh/pointhi/leaflet-color-markers@master/img/marker-icon-yellow.png',
            shadowUrl: 'https://cdn.jsdelivr.net/gh/pointhi/leaflet-color-markers@master/img/marker-shadow.png',
            iconSize: [18, 30],
            iconAnchor: [9, 30],
            popupAnchor: [1, -24],
            shadowSize: [30, 30]
          }),
          volunteering: new L.Icon({
            iconUrl: 'https://cdn.jsdelivr.net/gh/pointhi/leaflet-color-markers@master/img/marker-icon-green.png',
            shadowUrl: 'https://cdn.jsdelivr.net/gh/pointhi/leaflet-color-markers@master/img/marker-shadow.png',
            iconSize: [18, 30],
            iconAnchor: [9, 30],
            popupAnchor: [1, -24],
            shadowSize: [30, 30]
          })
        };
     
        const mapElement = document.getElementById('profile-map');
        if (mapElement) {
          // Estadísticas de ubicación
          const allLocations = [
            ...causes.map(c => ({ city: c.city, country: c.country })),
            ...tasks.map(t => ({ city: t.city, country: t.country })),
            ...challenges.map(ch => ({ city: ch.city, country: ch.country })),
            ...volunteering.map(v => ({ city: v.city, country: v.country }))
          ].filter(loc => loc.city || loc.country);

          const uniqueCities = [...new Set(allLocations.map(loc => loc.city).filter(Boolean))];
          const uniqueCountries = [...new Set(allLocations.map(loc => loc.country).filter(Boolean))];
          
          document.getElementById('city-count').textContent = uniqueCities.length;
          document.getElementById('country-count').textContent = uniqueCountries.length;

          // Inicializar mapa
          const map = L.map('profile-map').setView([30, 0], 2);
          L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; OpenStreetMap contributors'
          }).addTo(map);

          // Agregar marcadores para todas las actividades con ubicación
          const markers = [];
          
          allActivities.forEach(activity => {
            // Convertir lat/lng a números si son strings
            const lat = typeof activity.lat === 'string' ? parseFloat(activity.lat) : activity.lat;
            const lng = typeof activity.lng === 'string' ? parseFloat(activity.lng) : activity.lng;

            // Verificar que sean números válidos
            if (typeof lat === 'number' && typeof lng === 'number' && !isNaN(lat) && !isNaN(lng)) {
              const marker = L.marker([lat, lng], {
                icon: markerIcons[activity.type] || markerIcons.cause
              }).addTo(map);

              marker.bindPopup(`
                <div class="map-popup">
                  <div class="popup-header" style="background-color: ${activity.color}">
                    <i class="fas ${activity.icon}"></i>
                    <span>${
                      activity.type === 'cause' ? 'Causa' :
                      activity.type === 'task' ? 'Tarea' :
                      activity.type === 'challenge' ? 'Reto' : 'Voluntariado'
                    }</span>
                  </div>
                  <div class="popup-content">
                    <h4>${activity.title || 'Sin título'}</h4>
                    <p><i class="fas fa-map-marker-alt"></i> ${activity.city || 'Sin ubicación'}${activity.country ? ', ' + activity.country : ''}</p>
                    <p><i class="fas fa-calendar-alt"></i> ${activity.formattedDate}</p>
                    <a href="/${activity.type}s/${activity.id}" class="popup-link">Ver detalles</a>
                  </div>
                </div>
              `);
            }
          });

          // Ajustar vista del mapa si hay marcadores
          if (markers.length > 0) {
            const group = new L.featureGroup(markers);
            map.fitBounds(group.getBounds().pad(0.2));
          }
        }

      } catch (error) {
        console.error('Error cargando perfil:', error);
        const container = document.querySelector('.profile-main-container');
        if (container) {
          container.innerHTML = `
            <div class="error-message">
              <i class="fas fa-exclamation-triangle"></i>
              <h2>Error al cargar el perfil</h2>
              <p>Por favor, intenta recargar la página o contacta con soporte.</p>
              <button onclick="window.location.reload()">Recargar página</button>
            </div>
          `;
        }
      }
    });
  </script>
{% endblock %}
<!-- filepath: c:\Users\gabi2\Desktop\Solidarity-web\views\ranking\index.njk -->
{% extends "layout.njk" %}

{% block title %}Ranking Solidario | Solidarity{% endblock %}

{% block head %}
  {{ super() }}
  <style>
    /* SOLO estilos específicos de ranking, no navbar ni footer */
    .ranking-container {
      max-width: 1200px;
      margin: 2rem auto;
      padding: 0 1rem;
    }
    .ranking-header {
      text-align: center;
      margin-bottom: 2rem;
    }
    .ranking-header h1 {
      font-size: 2.2rem;
      color: var(--primary, #4a6fa5);
      margin-bottom: 0.5rem;
    }
    .ranking-header p {
      color: #666;
      max-width: 700px;
      margin: 0 auto;
    }
    .league-system {
      display: flex;
      justify-content: center;
      gap: 1rem;
      margin-bottom: 2rem;
      flex-wrap: wrap;
    }
    .league-card {
      background: white;
      border-radius: 10px;
      padding: 1.5rem;
      width: 180px;
      text-align: center;
      box-shadow: 0 4px 6px rgba(0,0,0,0.05);
      transition: transform 0.3s, box-shadow 0.3s;
      cursor: pointer;
      border: 3px solid transparent;
    }
    .league-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 15px rgba(0,0,0,0.1);
    }
    .league-card.active {
      border-color: var(--accent, #eab308);
    }
    .league-icon {
      font-size: 2.5rem;
      margin-bottom: 0.5rem;
    }
    .league-1 .league-icon { color: var(--gold, #ffd700); }
    .league-2 .league-icon { color: var(--silver, #c0c0c0); }
    .league-3 .league-icon { color: var(--bronze, #cd7f32); }
    .league-4 .league-icon { color: #4a6fa5; }
    .league-5 .league-icon { color: #6b7280; }
    .league-card h3 {
      margin-bottom: 0.5rem;
      color: var(--text, #333);
    }
    .league-card p {
      font-size: 0.9rem;
      color: #666;
    }
    .ranking-tabs {
      display: flex;
      justify-content: center;
      margin-bottom: 1.5rem;
      border-bottom: 1px solid #eee;
    }
    .ranking-tab {
      padding: 0.8rem 1.5rem;
      cursor: pointer;
      font-weight: 500;
      color: #666;
      border-bottom: 3px solid transparent;
      transition: all 0.3s;
      background: none;
      border: none;
      outline: none;
    }
    .ranking-tab.active {
      color: var(--primary, #4a6fa5);
      border-bottom-color: var(--primary, #4a6fa5);
    }
    .subranking-tabs {
      display: flex;
      gap: 0.7rem;
      margin-bottom: 1.2rem;
      justify-content: center;
    }
    .subranking-tab {
      background: #f1f5f9;
      color: var(--primary, #4a6fa5);
      border-radius: 999px;
      padding: 0.4rem 1.1rem;
      font-size: 1rem;
      font-weight: 600;
      border: none;
      cursor: pointer;
      transition: background 0.18s, color 0.18s;
      outline: none;
    }
    .subranking-tab.active, .subranking-tab:hover {
      background: var(--accent, #eab308);
      color: #fff;
    }
    .ranking-info {
      font-size: 1.05rem;
      color: #4b5563;
      margin-bottom: 1.2rem;
      background: #f8fafc;
      border-radius: 8px;
      padding: 0.7rem 1.1rem;
      text-align: center;
    }
    .ranking-table {
      background: white;
      border-radius: 10px;
      overflow: hidden;
      box-shadow: 0 4px 6px rgba(0,0,0,0.05);
      margin-bottom: 2rem;
    }
    table {
      width: 100%;
      border-collapse: collapse;
    }
    th {
      background-color: var(--primary, #4a6fa5);
      color: white;
      padding: 1rem;
      text-align: left;
    }
    td {
      padding: 1rem;
      border-bottom: 1px solid #eee;
    }
    tr:last-child td {
      border-bottom: none;
    }
    tr:hover {
      background-color: #f8f9fa;
    }
    .user-cell {
      display: flex;
      align-items: center;
      gap: 0.8rem;
    }
    .user-avatar-sm, .team-avatar-sm {
      width: 36px;
      height: 36px;
      border-radius: 50%;
      object-fit: cover;
      background-color: #f0f0f0;
      display: flex;
      align-items: center;
      justify-content: center;
      color: var(--primary, #4a6fa5);
      font-size: 1rem;
    }
    .rank {
      font-weight: 700;
      color: var(--primary, #4a6fa5);
      width: 30px;
      display: inline-block;
      text-align: center;
    }
    .rank-1 { color: var(--gold, #ffd700); }
    .rank-2 { color: var(--silver, #c0c0c0); }
    .rank-3 { color: var(--bronze, #cd7f32); }
    .score {
      font-weight: 600;
      color: var(--secondary, #3da58a);
    }
    .movement {
      display: inline-block;
      width: 20px;
      text-align: center;
    }
    .up { color: #4CAF50; }
    .down { color: #e74c3c; }
    .same { color: #666; }
    .league-info {
      background: white;
      border-radius: 10px;
      padding: 2.2rem 1.5rem 2.2rem 1.5rem;
      margin-top: 2rem;
      box-shadow: 0 4px 16px rgba(0,0,0,0.07);
      text-align: center;
      max-width: 420px;
      margin-left: auto;
      margin-right: auto;
    }
    .league-info .user-cell {
      flex-direction: column;
      align-items: center;
      gap: 0.7rem;
      display: flex;
      margin-bottom: 1.1rem;
    }
    .user-avatar-lg {
      width: 80px;
      height: 80px;
      border-radius: 50%;
      object-fit: cover;
      border: 4px solid var(--primary, #4a6fa5);
      box-shadow: 0 2px 8px rgba(74,111,165,0.10);
      background: #f0f0f0;
      margin-bottom: 0.5rem;
    }
    #user-league {
      font-size: 1.05rem;
      color: #374151;
      margin-bottom: 0.4rem;
    }
    #user-progress {
      font-size: 1.08rem;
      color: #3da58a;
      margin-bottom: 0.7rem;
    }
    .progreso-title {
      color: var(--primary, #4a6fa5);
      font-size: 1.5rem;
      font-weight: 800;
      margin-bottom: 1.2rem;
      margin-top: 0.5rem;
      text-align: center;
      letter-spacing: 0.01em;
    }
    .user-avatar-xl {
      width: 100px;
      height: 100px;
      border-radius: 50%;
      object-fit: cover;
      border: 4px solid var(--primary, #4a6fa5);
      box-shadow: 0 2px 8px rgba(74,111,165,0.10);
      background: #f0f0f0;
      margin-bottom: 0.5rem;
    }
    .user-league-badge {
      display: inline-block;
      margin-top: 0.5rem;
      padding: 0.35em 1em;
      border-radius: 999px;
      font-weight: 700;
      font-size: 1.08em;
      color: #fff;
      background: linear-gradient(90deg, #4a6fa5 60%, #3da58a 100%);
      box-shadow: 0 2px 8px rgba(74,111,165,0.08);
    }
    .user-league-badge.bronce {
      background: linear-gradient(90deg, #cd7f32 60%, #b87333 100%);
    }
    .user-league-badge.plata {
      background: linear-gradient(90deg, #bfc1c2 60%, #e0e0e0 100%);
      color: #374151;
    }
    .user-league-badge.oro {
      background: linear-gradient(90deg, #ffd700 60%, #ffec8b 100%);
      color: #7c6f00;
    }
    .user-league-badge.platino {
      background: linear-gradient(90deg, #b3e0ff 60%, #c0c0c0 100%);
      color: #2a4a5c;
    }
    .user-league-badge.diamante {
      background: linear-gradient(90deg, #00c3ff 60%, #ffff1c 100%);
      color: #1a3a4a;
    }
    .progress-container {
      margin: 1.2rem 0 0.7rem 0;
      width: 100%;
    }
    .progress-bar-bg {
      background: #e5e7eb;
      border-radius: 20px;
      height: 18px;
      position: relative;
      width: 100%;
      margin: 0 auto;
      overflow: hidden;
    }
    .progress-bar {
      height: 100%;
      background: linear-gradient(90deg, var(--secondary, #3da58a), var(--primary, #4a6fa5));
      border-radius: 20px;
      transition: width 0.5s;
    }
    .progress-label {
      position: absolute;
      top: 0;
      left: 50%;
      transform: translateX(-50%);
      font-size: 0.98em;
      color: #222;
      font-weight: 600;
      height: 100%;
      display: flex;
      align-items: center;
    }
    .modal {
      display: none;
      position: fixed;
      z-index: 9999;
      left: 0; top: 0;
      width: 100vw; height: 100vh;
      background: rgba(0,0,0,0.35);
      align-items: center;
      justify-content: center;
    }
    .modal.active, .modal[style*="display: block"] {
      display: flex !important;
    }
    .modal-content {
      background: #fff;
      border-radius: 18px;
      max-width: 480px;
      width: 95vw;
      padding: 2.5rem 2.5rem 2rem 2.5rem;
      box-shadow: 0 8px 32px rgba(74,111,165,0.13);
      position: relative;
      border: 2.5px solid var(--primary,#4a6fa5);
      font-family: inherit;
      animation: fadeIn 0.2s;
    }
    @keyframes fadeIn {
      from { opacity: 0; transform: scale(0.97);}
      to { opacity: 1; transform: scale(1);}
    }
    @media (max-width: 600px) {
      .league-info {
        max-width: 98vw;
        padding: 1.2rem 0.5rem;
      }
      .user-avatar-lg {
        width: 60px;
        height: 60px;
      }
      .user-avatar-xl { width: 70px; height: 70px; }
    }
    @media (max-width: 768px) {
      .league-system { flex-direction: column; align-items: center; }
      .league-card { width: 100%; max-width: 300px; }
      table { display: block; overflow-x: auto; }
    }
  </style>
{% endblock %}

{% block content %}
<main class="ranking-container">
    <div class="ranking-header">
        <h1><i class="fas fa-trophy"></i> Ranking Solidario</h1>
        <p>Descubre tu posición y compite por alcanzar la cima. Los rankings se actualizan semanalmente según tu impacto social.</p>
    </div>
    <!-- League System -->
    <div class="league-system">
        <div class="league-card league-1 active" onclick="showLeague(1)">
            <i class="fas fa-crown league-icon"></i>
            <h3>Liga Diamante</h3>
            <p>4,000+ pts</p>
        </div>
        <div class="league-card league-2" onclick="showLeague(2)">
            <i class="fas fa-gem league-icon"></i>
            <h3>Liga Platino</h3>
            <p>3,000-3,999 pts</p>
        </div>
        <div class="league-card league-3" onclick="showLeague(3)">
            <i class="fas fa-award league-icon"></i>
            <h3>Liga Oro</h3>
            <p>2,000-2,999 pts</p>
        </div>
        <div class="league-card league-4" onclick="showLeague(4)">
            <i class="fas fa-star league-icon"></i>
            <h3>Liga Plata</h3>
            <p>1,000-1,999 pts</p>
        </div>
        <div class="league-card league-5" onclick="showLeague(5)">
            <i class="fas fa-seedling league-icon"></i>
            <h3>Liga Bronce</h3>
            <p>0-999 pts</p>
        </div>
    </div>
    <!-- Ranking Tabs -->
    <div class="ranking-tabs">
        <button class="ranking-tab active" data-tab="individual">Individual</button>
        <button class="ranking-tab" data-tab="comunidades">Comunidades</button>
        <button class="btn btn-info" id="open-score-system" type="button" style="margin-left:1rem;">
            <i class="fas fa-info-circle"></i> Sistema de puntuación
        </button>
    </div>
    <!-- Subtabs para Individual -->
    <div id="subranking-tabs" style="display:block;">
      <div class="subranking-tabs">
        <button class="subranking-tab active" data-type="historico">Ranking histórico</button>
        <button class="subranking-tab" data-type="dinamico">Ranking dinámico semanal</button>
      </div>
      <div class="ranking-info" id="ranking-info">
        <b>Ranking histórico:</b> Acumula todos los puntos de impacto desde que te registraste.<br>
        <b>Ranking dinámico:</b> Se reinicia cada semana. Sube o baja de liga según tu puntuación semanal. ¡Los 10 mejores de cada liga ascienden y los 10 últimos descienden!
      </div>
    </div>
    <!-- Individual Ranking Table -->
    <div class="ranking-table" id="individual-table">
        <table>
            <thead>
                <tr>
                    <th>#</th>
                    <th>Usuario</th>
                    <th>Puntos</th>
                    <th>Cambio</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody id="individual-ranking">
                <!-- Filled by JavaScript -->
            </tbody>
        </table>
    </div>
    <!-- Communities Ranking Table (hidden by default) -->
    <div class="ranking-table" id="comunidades-table" style="display: none;">
        <table>
            <thead>
                <tr>
                    <th>#</th>
                    <th>Comunidad</th>
                    <th>Puntos</th>
                    <th>Beneficiarios</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody id="communities-ranking">
                <!-- Filled by JavaScript -->
            </tbody>
        </table>
    </div>
    <!-- Your League Info -->
    <div class="league-info">
        <h3 class="progreso-title"><i class="fas fa-shield-alt"></i> Tu Progreso</h3>
        <div class="user-cell">
            <img id="user-photo" src="/img/avatar-default.jpg" class="user-avatar-xl">
            <div style="margin-top: 0.7rem;">
                <span id="user-name"></span>
                <div id="user-league" class="user-league-badge"></div>
            </div>
        </div>
        <div class="progress-container">
            <div class="progress-bar-bg">
                <div class="progress-bar" style="width: 0%"></div>
                <div id="progress-label" class="progress-label"></div>
            </div>
        </div>
        <p id="user-progress"></p>
        <p style="color:#666;">Próxima actualización del ranking: <strong id="next-update"></strong></p>
        <div style="margin-top: 1.5rem;">
            <button class="btn btn-primary"><i class="fas fa-bullhorn"></i> Compartir</button>
            <button class="btn btn-outline"><i class="fas fa-trophy"></i> Ver Logros</button>
        </div>
    </div>
</main>

<!-- Modal Sistema de Puntuación -->
<div id="score-system-modal" class="modal" style="display:none;">
  <div class="modal-content" style="padding:2.5rem 2.5rem 2rem 2.5rem; border-radius:18px; max-width:480px; border:2.5px solid var(--primary,#4a6fa5); box-shadow:0 8px 32px rgba(74,111,165,0.13); font-family:inherit;">
    <span class="close-modal" id="close-score-system" style="top:16px; right:22px; color:var(--primary,#4a6fa5); font-size:2.2rem;">&times;</span>
    <div style="text-align:center;">
      <i class="fas fa-star" style="color:var(--accent,#eab308); font-size:2.3rem; margin-bottom:0.5rem;"></i>
      <h2 style="color:var(--primary,#4a6fa5); font-size:1.6rem; margin-bottom:1.2rem; font-weight:800;">Sistema de Puntuación Solidarity</h2>
    </div>
    <ul style="font-size:1.13em;line-height:1.8; color:#374151; margin-bottom:1.2rem; padding-left:1.2em;">
      <li><b style="color:var(--accent,#eab308);">+100 puntos</b> al registrarte por primera vez.</li>
      <li><b style="color:var(--accent,#eab308);">+5 puntos</b> por cada día que hagas login.</li>
      <li><b style="color:var(--accent,#eab308);">+50 puntos</b> por hacer login 7 días seguidos.</li>
      <li><b style="color:var(--accent,#eab308);">+50 puntos</b> por cada causa, tarea, reto o voluntariado que publiques.</li>
      <li><b style="color:var(--accent,#eab308);">Puntos variables</b> al unirte a una causa, reto, tarea o voluntariado (según lo definido al crearla).</li>
      <li><b style="color:var(--accent,#eab308);">+5 puntos</b> por cada euro donado a una causa.</li>
      <li><b style="color:var(--accent,#eab308);">+5 puntos</b> cada vez que compartas una causa, tarea, reto, voluntariado o comunidad en redes sociales o apps externas.</li>
    </ul>
    <div style="background:#f8fafc; border-radius:8px; padding:0.8em 1em; color:#4a6fa5; font-size:1em; display:flex; align-items:center; gap:0.7em;">
      <i class="fas fa-info-circle" style="font-size:1.2em; color:var(--primary,#4a6fa5);"></i>
      <span>Los puntos se suman automáticamente y afectan tu posición en el ranking.</span>
    </div>
  </div>
</div>
{% endblock %}

{% block scripts %}
{{ super() }}
<script>
async function fetchRankingData() {
  // Ranking histórico: suma total de puntos de impacto
  const { data: usersHistorico, error: errorHistorico } = await supabase
    .from('profiles')
    .select('id, username, photo_url, impact_points, actions_count')
    .order('impact_points', { ascending: false })
    .limit(100);

  // Ranking dinámico: puntos de la semana (requiere campo semanal en tu BD)
  const { data: usersDinamico, error: errorDinamico } = await supabase
    .from('profiles')
    .select('id, username, photo_url, weekly_points, actions_count')
    .order('weekly_points', { ascending: false })
    .limit(100);

  return { usersHistorico, usersDinamico };
}

function getLeague(points) {
  if (points >= 4000) return { name: "Diamante", idx: 1 };
  if (points >= 3000) return { name: "Platino", idx: 2 };
  if (points >= 2000) return { name: "Oro", idx: 3 };
  if (points >= 1000) return { name: "Plata", idx: 4 };
  return { name: "Bronce", idx: 5 };
}

function renderIndividualRanking(users, type = "historico", currentUserId = null) {
  const tbody = document.getElementById('individual-ranking');
  tbody.innerHTML = '';
  if (!Array.isArray(users)) return;
  users.forEach((user, index) => {
    const points = type === "dinamico"
      ? (user.weekly_points ?? 0)
      : (user.impact_points ?? 0);
    const name = user.username ?? 'Usuario';
    const avatar = user.photo_url || '/img/avatar-default.jpg';
    const actions = user.actions_count ?? 0;
    tbody.innerHTML += `
      <tr${user.id === currentUserId ? ' style="background:#e6f7f1;"' : ''}>
        <td><span class="rank">${index + 1}</span></td>
        <td>
          <div class="user-cell">
            <img src="${avatar}" class="user-avatar-sm">
            <span>${name}</span>
          </div>
        </td>
        <td class="score">${points.toLocaleString()}</td>
        <td>-</td>
        <td>${actions}</td>
      </tr>
    `;
  });
}

function renderUserLeague(user) {
  const userPhoto = document.getElementById('user-photo');
  const userName = document.getElementById('user-name');
  const userLeague = document.getElementById('user-league');
  const progressBar = document.querySelector('.progress-bar');
  const progressLabel = document.getElementById('progress-label');
  const userProgress = document.getElementById('user-progress');

  if (!userPhoto || !userName || !userLeague || !progressBar || !progressLabel || !userProgress) return;

  if (!user) {
    userPhoto.src = '/img/avatar-default.jpg';
    userName.textContent = 'Inicia sesión para ver tu progreso';
    userLeague.textContent = '';
    userLeague.className = 'user-league-badge';
    progressBar.style.width = '0%';
    progressLabel.textContent = '';
    userProgress.innerHTML = '';
    return;
  }

  const points = user.impact_points ?? 0;
  const league = getLeague(points);
  const avatar = user.photo_url || '/img/avatar-default.jpg';
  const name = user.username ?? 'Usuario';

  userPhoto.src = avatar;
  userName.textContent = name;

  // Liga visual
  let leagueClass = '';
  switch (league.name.toLowerCase()) {
    case 'bronce': leagueClass = 'bronce'; break;
    case 'plata': leagueClass = 'plata'; break;
    case 'oro': leagueClass = 'oro'; break;
    case 'platino': leagueClass = 'platino'; break;
    case 'diamante': leagueClass = 'diamante'; break;
  }
  userLeague.textContent = `Liga ${league.name} | ${points} pts`;
  userLeague.className = `user-league-badge ${leagueClass}`;

  // Barra de progreso y texto
  const nextLevel = (Math.floor(points / 1000) + 1) * 1000;
  const progress = Math.min(100, ((points % 1000) / 1000) * 100);
  progressBar.style.width = `${progress}%`;
  progressLabel.textContent = ''; // Elimina el texto dentro de la barra

  userProgress.innerHTML =
    points >= 4000
      ? '¡Estás en la liga más alta! Sigue ayudando.'
      : `Te faltan <strong>${nextLevel - points}</strong> puntos para ascender de liga.`;
}

// Cuenta atrás vistosa hasta el próximo domingo a medianoche
function updateCountdown() {
  const now = new Date();
  // Domingo = 0, pero getDay() devuelve 0 para domingo, 1 para lunes, etc.
  let daysUntilSunday = (7 - now.getDay()) % 7;
  if (daysUntilSunday === 0 && (now.getHours() >= 24 || (now.getHours() === 0 && now.getMinutes() === 0 && now.getSeconds() === 0))) {
    daysUntilSunday = 7;
  }
  // Próximo domingo a medianoche
  const nextSunday = new Date(now);
  nextSunday.setDate(now.getDate() + daysUntilSunday);
  nextSunday.setHours(0, 0, 0, 0);

  // Si hoy es domingo pero aún no es medianoche, apunta a la próxima medianoche
  if (daysUntilSunday === 0 && now < nextSunday) {
    // ya está bien
  } else if (daysUntilSunday === 0) {
    nextSunday.setDate(nextSunday.getDate() + 7);
  }

  const diff = nextSunday - now;
  const totalSeconds = Math.floor(diff / 1000);
  const days = Math.floor(totalSeconds / (60 * 60 * 24));
  const hours = Math.floor((totalSeconds % (60 * 60 * 24)) / (60 * 60));
  const minutes = Math.floor((totalSeconds % (60 * 60)) / 60);
  const seconds = totalSeconds % 60;

  // Formato vistoso
  document.getElementById('next-update').innerHTML =
    `<span style="color:#4a6fa5;font-weight:700;font-size:1.1em;">
      ${days}d&nbsp;${hours}h&nbsp;${minutes}m&nbsp;${seconds}s
    </span>`;
}
setInterval(updateCountdown, 1000);
updateCountdown();

// Función para obtener el usuario currente y su perfil
async function fetchCurrentUser() {
  const { data: { user }, error } = await supabase.auth.getUser();
  if (error || !user) return null;

  const { data: profile, error: profileError } = await supabase
    .from('profiles')
    .select('id, username, photo_url, impact_points, weekly_points, actions_count')
    .eq('id', user.id)
    .single();

  return profileError ? null : profile;
}

document.addEventListener('DOMContentLoaded', async function() {
  const currentUser = await fetchCurrentUser();
  const currentUserId = currentUser?.id;
  const { usersHistorico, usersDinamico } = await fetchRankingData();
  renderIndividualRanking(usersHistorico, "historico", currentUserId);
  renderUserLeague(currentUser); // <-- PASA EL USUARIO, NO EL ARRAY

  document.querySelectorAll('.subranking-tab').forEach(tab => {
    tab.addEventListener('click', function() {
      document.querySelector('.subranking-tab.active').classList.remove('active');
      this.classList.add('active');
      const type = this.getAttribute('data-type');
      if (type === "dinamico") {
        document.getElementById('ranking-info').innerHTML = `
          <b>Ranking dinámico:</b> Se reinicia cada semana. Sube o baja de liga según tu puntuación semanal.<br>
          Los 10 mejores de cada liga ascienden, los 10 últimos descienden. ¡Sigue sumando puntos para subir!
        `;
        renderIndividualRanking(usersDinamico, "dinamico", currentUserId);
      } else {
        document.getElementById('ranking-info').innerHTML = `
          <b>Ranking histórico:</b> Acumula todos los puntos de impacto desde que te registraste.<br>
          ¡Compite por estar en el top histórico de Solidarity!
        `;
        renderIndividualRanking(usersHistorico, "historico", currentUserId);
      }
    });
  });

  document.querySelectorAll('.ranking-tab').forEach(tab => {
    tab.addEventListener('click', function () {
      document.querySelectorAll('.ranking-tab').forEach(t => t.classList.remove('active'));
      this.classList.add('active');
      // Oculta todas las secciones
      document.getElementById('individual-table').style.display = 'none';
      document.getElementById('comunidades-table').style.display = 'none';
      document.getElementById('subranking-tabs').style.display = 'none';

      // Muestra la sección correspondiente
      const tabType = this.getAttribute('data-tab');
      if (tabType === "individual") {
        document.getElementById('individual-table').style.display = '';
        document.getElementById('subranking-tabs').style.display = 'block';
      }
      if (tabType === "comunidades") {
        document.getElementById('comunidades-table').style.display = '';
      }
    });
  });

  // Modal sistema de puntuación
  const openBtn = document.getElementById('open-score-system');
  const closeBtn = document.getElementById('close-score-system');
  const modal = document.getElementById('score-system-modal');
  if (openBtn && closeBtn && modal) {
    openBtn.addEventListener('click', function() {
      modal.classList.add('active');
      modal.style.display = 'flex';
    });
    closeBtn.addEventListener('click', function() {
      modal.classList.remove('active');
      modal.style.display = 'none';
    });
    window.addEventListener('click', function(e) {
      if (e.target === modal) {
        modal.classList.remove('active');
        modal.style.display = 'none';
      }
    });
  }
});

function showLeague(leagueNumber) {
  document.querySelectorAll('.league-card').forEach(card => {
    card.classList.remove('active');
  });
  document.querySelector(`.league-${leagueNumber}`).classList.add('active');
}

const typeLabels = {
  cause: 'Causa',
  task: 'Tarea',
  challenge: 'Reto',
  volunteering: 'Voluntariado'
};
const badge = `<div class="activity-badge ${activity.type}">
  <i class="fas ${activity.icon}"></i> ${typeLabels[activity.type] || 'Otro'}
</div>`;
</script>
{% endblock %}
{% extends "layout.njk" %}

{% block title %}Take Action | Solidarity{% endblock %}

{% block head %}
  {{ super() }}
  <style>
    /* Variables y estilos base */
    :root {
      --primary: #4a6fa5;
      --secondary: #166088;
      --accent: #4fc3a1;
      --light: #f8f9fa;
      --dark: #2d3748;
      --gray: #e2e8f0;
    }
    
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      line-height: 1.6;
      color: var(--dark);
      margin: 0;
      padding: 0;
    }
    
    .main-content {
      max-width: 1400px;
      margin: 0 auto;
      padding: 0 2rem;
    }
    
    /* Hero Section (manteniendo tu versión favorita) */
    .hero {
      background: linear-gradient(135deg, var(--primary), var(--secondary));
      color: white;
      padding: 6rem 2rem;
      text-align: center;
      margin: 0 -2rem 2rem;
    }
    
    .hero h1 {
      font-size: 2.8rem;
      margin-bottom: 1.5rem;
      font-weight: 800;
    }
    
    .hero p {
      font-size: 1.3rem;
      max-width: 700px;
      margin: 0 auto 3rem;
      font-weight: 400;
    }
    
    .hero-buttons {
      display: flex;
      justify-content: center;
      gap: 1.5rem;
      margin-top: 2rem;
    }
    
    /* Stats Section mejorada */
    .stats-bar {
      display: grid;
      grid-template-columns: repeat(5, 1fr);
      gap: 1.5rem;
      padding: 3rem 0;
      margin: 0 auto;
      max-width: 1200px;
      text-align: center;
    }
    
    .stat-item {
      padding: 1rem;
    }
    
    .stat-number {
      font-size: 2.4rem;
      font-weight: 800;
      margin-bottom: 0.5rem;
      line-height: 1;
    }
    
    .stat-label {
      font-size: 1rem;
      color: var(--dark);
      opacity: 0.8;
    }
    
    /* Action Cards (2 columnas con imágenes) */
    .action-section {
      padding: 4rem 0;
    }
    
    .section-header {
      text-align: center;
      margin-bottom: 3rem;
    }
    
    .section-header h2 {
      font-size: 2.2rem;
      margin-bottom: 1rem;
      color: var(--primary);
    }
    
    .section-header p {
      font-size: 1.1rem;
      color: #666;
      max-width: 700px;
      margin: 0 auto;
    }
    
    .action-grid {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 2.5rem;
      margin: 0 auto;
      max-width: 1200px;
    }
    
    .action-card {
      background: white;
      border-radius: 12px;
      overflow: hidden;
      box-shadow: 0 5px 15px rgba(0,0,0,0.08);
      transition: all 0.3s ease;
    }
    
    .action-card:hover {
      transform: translateY(-10px);
      box-shadow: 0 15px 30px rgba(0,0,0,0.12);
    }
    
    .card-image {
      width: 100%;
      height: 220px;
      object-fit: cover;
    }
    
    .card-content {
      padding: 1.8rem;
    }
    
    .card-header {
      display: flex;
      align-items: center;
      margin-bottom: 1.2rem;
    }
    
    .card-icon {
      width: 50px;
      height: 50px;
      background: rgba(74, 111, 165, 0.1);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-right: 1.2rem;
    }
    
    .card-icon i {
      font-size: 1.5rem;
      color: var(--primary);
    }
    
    .card-icon.accent {
      background: rgba(79, 195, 161, 0.1);
    }
    
    .card-icon.accent i {
      color: var(--accent);
    }
    
    .card-icon.secondary {
      background: rgba(22, 96, 136, 0.1);
    }
    
    .card-icon.secondary i {
      color: var(--secondary);
    }
    
    .card-title {
      font-size: 1.5rem;
      margin: 0;
      color: var(--dark);
    }
    
    .card-text {
      color: #666;
      margin-bottom: 1.8rem;
      line-height: 1.6;
    }
    
    .card-features {
      margin-bottom: 2rem;
    }
    
    .feature-item {
      display: flex;
      align-items: center;
      margin-bottom: 0.8rem;
    }
    
    .feature-dot {
      width: 10px;
      height: 10px;
      background: var(--accent);
      border-radius: 50%;
      margin-right: 0.8rem;
    }
    
    .feature-text {
      font-size: 0.95rem;
    }
    
    .card-button {
      display: inline-block;
      padding: 0.8rem 1.8rem;
      background: var(--primary);
      color: white;
      border-radius: 6px;
      text-decoration: none;
      font-weight: 600;
      transition: all 0.3s ease;
    }
    
    .card-button:hover {
      background: var(--secondary);
      transform: translateY(-2px);
    }
    
    .card-button.accent {
      background: var(--accent);
    }
    
    .card-button.accent:hover {
      background: #3da58a;
    }
    
    .card-button.secondary {
      background: var(--secondary);
    }
    
    .card-button.secondary:hover {
      background: #0f4d6e;
    }
    
    /* Gamification Section mejorada */
    .gamification-section {
      background: var(--light);
      padding: 5rem 0;
      margin: 0 -2rem;
      padding-left: 2rem;
      padding-right: 2rem;
    }
    
    .gamification-container {
      max-width: 1200px;
      margin: 0 auto;
    }
    
    .gamification-header {
      text-align: center;
      margin-bottom: 3rem;
    }
    
    .gamification-header h2 {
      font-size: 2.2rem;
      color: var(--primary);
      margin-bottom: 1rem;
    }
    
    .gamification-header p {
      font-size: 1.1rem;
      color: #666;
      max-width: 700px;
      margin: 0 auto;
    }
    
    .gamification-cards {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 2rem;
    }
    
    .gamification-card {
      background: white;
      border-radius: 12px;
      padding: 2rem;
      box-shadow: 0 5px 15px rgba(0,0,0,0.05);
      text-align: center;
      transition: all 0.3s ease;
    }
    
    .gamification-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 25px rgba(0,0,0,0.1);
    }
    
    .gamification-card h3 {
      font-size: 1.4rem;
      margin-top: 1.5rem;
      margin-bottom: 1rem;
      color: var(--dark);
    }
    
    .gamification-card p {
      color: #666;
      margin-bottom: 1.5rem;
    }
    
    .progress-container {
      margin-bottom: 1.5rem;
    }
    
    .progress-bar {
      height: 8px;
      background: var(--gray);
      border-radius: 4px;
      overflow: hidden;
      margin-bottom: 0.5rem;
    }
    
    .progress {
      height: 100%;
      background: var(--accent);
      width: 65%;
    }
    
    .progress-info {
      display: flex;
      justify-content: space-between;
      font-size: 0.9rem;
      color: #666;
    }
    
    .badges-container {
      display: flex;
      justify-content: center;
      gap: 1.5rem;
      margin: 2rem 0;
    }
    
    .badge {
      width: 80px;
      height: 80px;
      border-radius: 50%;
      background: white;
      display: flex;
      align-items: center;
      justify-content: center;
      box-shadow: 0 5px 15px rgba(0,0,0,0.1);
      transition: all 0.3s ease;
    }
    
    .badge:hover {
      transform: scale(1.1);
    }
    
    .badge i {
      font-size: 2rem;
      color: var(--accent);
    }
    
    .ranking-container {
      background: white;
      border-radius: 12px;
      padding: 2rem;
      margin-top: 3rem;
      box-shadow: 0 5px 15px rgba(0,0,0,0.05);
    }
    
    .ranking-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1.5rem;
    }
    
    .ranking-header h3 {
      font-size: 1.4rem;
      color: var(--dark);
      margin: 0;
    }
    
    .user-rank {
      background: var(--accent);
      color: white;
      padding: 0.3rem 1rem;
      border-radius: 20px;
      font-weight: 600;
    }
    
    .ranking-grid {
      display: grid;
      grid-template-columns: repeat(5, 1fr);
      gap: 1.5rem;
      text-align: center;
    }
    
    .ranking-item {
      background: var(--light);
      padding: 1rem;
      border-radius: 8px;
    }
    
    .ranking-avatar {
      width: 50px;
      height: 50px;
      border-radius: 50%;
      margin: 0 auto 0.5rem;
      overflow: hidden;
    }
    
    .ranking-avatar img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
    
    .ranking-name {
      font-weight: 600;
      margin-bottom: 0.3rem;
    }
    
    .ranking-points {
      color: var(--accent);
      font-weight: 700;
    }
    
    .cta-section {
      background: linear-gradient(135deg, var(--primary), var(--secondary));
      color: white;
      padding: 5rem 2rem;
      text-align: center;
      margin: 0 -2rem;
      margin-top: 4rem;
    }
    
    .cta-content {
      max-width: 700px;
      margin: 0 auto;
    }
    
    .cta-content h2 {
      font-size: 2.2rem;
      margin-bottom: 1.5rem;
    }
    
    .cta-content p {
      font-size: 1.2rem;
      margin-bottom: 2rem;
      opacity: 0.9;
    }
    
    .cta-buttons {
      display: flex;
      justify-content: center;
      gap: 1.5rem;
    }
    
    .btn {
      padding: 1rem 2rem;
      border-radius: 6px;
      font-weight: 600;
      text-decoration: none;
      transition: all 0.3s ease;
    }
    
    .btn-accent {
      background: var(--accent);
      color: white;
    }
    
    .btn-accent:hover {
      background: #3da58a;
      transform: translateY(-3px);
    }
    
    .btn-outline-white {
      border: 2px solid white;
      color: white;
      background: transparent;
    }
    
    .btn-outline-white:hover {
      background: rgba(255,255,255,0.1);
      transform: translateY(-3px);
    }
    
    /* Responsive */
    @media (max-width: 1024px) {
      .action-grid {
        grid-template-columns: 1fr;
        max-width: 600px;
      }
      
      .gamification-cards {
        grid-template-columns: 1fr;
        max-width: 600px;
        margin: 0 auto;
      }
      
      .ranking-grid {
        grid-template-columns: repeat(3, 1fr);
      }
    }
    
    @media (max-width: 768px) {
      .stats-bar {
        grid-template-columns: repeat(2, 1fr);
      }
      
      .hero {
        padding: 4rem 1rem;
      }
      
      .hero h1 {
        font-size: 2.2rem;
      }
      
      .hero-buttons {
        flex-direction: column;
        gap: 1rem;
      }
      
      .btn {
        width: 100%;
        text-align: center;
      }
      
      .ranking-grid {
        grid-template-columns: repeat(2, 1fr);
      }
      
      .cta-buttons {
        flex-direction: column;
      }
    }
    
    @media (max-width: 480px) {
      .stats-bar {
        grid-template-columns: 1fr;
      }
      
      .ranking-grid {
        grid-template-columns: 1fr;
      }
    }
  </style>
{% endblock %}

{% block content %}
  <!-- Hero Section (mantenido como te gusta) -->
  <section class="hero">
    <div class="main-content">
      <h1>¡Tu Acción Genera Impacto!</h1>
      <p>Cada clic, cada participación y cada esfuerzo suma. Descubre cómo convertir tu solidaridad en cambios reales.</p>
      <div class="hero-buttons">
        <a href="#action-sections" class="btn btn-accent">
          <i class="fas fa-play-circle"></i> Cómo funciona
        </a>
        <a href="#cta" class="btn btn-outline-white">
          <i class="fas fa-rocket"></i> Empezar ahora
        </a>
      </div>
    </div>
  </section>

  <!-- Stats Section mejorada -->
  <div class="stats-bar">
    <div class="stat-item">
      <div class="stat-number">1,250+</div>
      <div class="stat-label">Causas activas</div>
    </div>
    <div class="stat-item">
      <div class="stat-number">58K+</div>
      <div class="stat-label">Tareas completadas</div>
    </div>
    <div class="stat-item">
      <div class="stat-number">3.2M+</div>
      <div class="stat-label">Puntos de impacto</div>
    </div>
    <div class="stat-item">
      <div class="stat-number">42K+</div>
      <div class="stat-label">Voluntarios</div>
    </div>
    <div class="stat-item">
      <div class="stat-number">250K+</div>
      <div class="stat-label">Beneficiarios</div>
    </div>
  </div>

  <!-- Action Section con 2 columnas -->
  <section id="action-sections" class="action-section">
    <div class="main-content">
      <div class="section-header">
        <h2>Transforma tu solidaridad en acción</h2>
        <p>Elige cómo quieres contribuir y comienza a generar impacto hoy mismo</p>
      </div>
      
      <div class="action-grid">
        <!-- Causas -->
        <div class="action-card">
          <img src="https://images.unsplash.com/photo-1522202176988-66273c2fd55f?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&q=80" alt="Causas sociales" class="card-image">
          <div class="card-content">
            <div class="card-header">
              <div class="card-icon">
                <i class="fas fa-hand-holding-heart"></i>
              </div>
              <h3 class="card-title">Causas</h3>
            </div>
            <p class="card-text">Apoya proyectos verificados con objetivos claros y medibles. Cada contribución suma puntos y avances visibles.</p>
            <div class="card-features">
              <div class="feature-item">
                <div class="feature-dot"></div>
                <span class="feature-text">+10 pts por cada €1 donado</span>
              </div>
              <div class="feature-item">
                <div class="feature-dot"></div>
                <span class="feature-text">Impacto directo en comunidades</span>
              </div>
              <div class="feature-item">
                <div class="feature-dot"></div>
                <span class="feature-text">Progreso visible hacia la meta</span>
              </div>
            </div>
            <a href="/causas" class="card-button">Explorar causas</a>
          </div>
        </div>
        
        <!-- Tareas -->
        <div class="action-card">
          <img src="https://images.unsplash.com/photo-1507679799987-c73779587ccf?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&q=80" alt="Tareas solidarias" class="card-image">
          <div class="card-content">
            <div class="card-header">
              <div class="card-icon accent">
                <i class="fas fa-tasks"></i>
              </div>
              <h3 class="card-title">Tareas</h3>
            </div>
            <p class="card-text">Acciones concretas que puedes hacer hoy mismo, desde tu casa o en tu comunidad local.</p>
            <div class="card-features">
              <div class="feature-item">
                <div class="feature-dot"></div>
                <span class="feature-text">+20 a +100 pts por tarea</span>
              </div>
              <div class="feature-item">
                <div class="feature-dot"></div>
                <span class="feature-text">Filtros por tiempo y dificultad</span>
              </div>
              <div class="feature-item">
                <div class="feature-dot"></div>
                <span class="feature-text">Resultados inmediatos</span>
              </div>
            </div>
            <a href="/tareas" class="card-button accent">Ver tareas</a>
          </div>
        </div>
        
        <!-- Retos -->
        <div class="action-card">
          <img src="https://images.unsplash.com/photo-1542601906990-b4d3fb778b09?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&q=80" alt="Retos comunitarios" class="card-image">
          <div class="card-content">
            <div class="card-header">
              <div class="card-icon secondary">
                <i class="fas fa-trophy"></i>
              </div>
              <h3 class="card-title">Retos</h3>
            </div>
            <p class="card-text">Supera objetivos junto a otros voluntarios. La competencia sana multiplica el impacto colectivo.</p>
            <div class="card-features">
              <div class="feature-item">
                <div class="feature-dot"></div>
                <span class="feature-text">+200 pts por reto completado</span>
              </div>
              <div class="feature-item">
                <div class="feature-dot"></div>
                <span class="feature-text">Premios especiales para los primeros</span>
              </div>
              <div class="feature-item">
                <div class="feature-dot"></div>
                <span class="feature-text">Tabla de posiciones en tiempo real</span>
              </div>
            </div>
            <a href="/retos" class="card-button secondary">Aceptar retos</a>
          </div>
        </div>
        
        <!-- Voluntariado -->
        <div class="action-card">
          <img src="https://images.unsplash.com/photo-1521791136064-7986c2920216?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&q=80" alt="Voluntariado" class="card-image">
          <div class="card-content">
            <div class="card-header">
              <div class="card-icon">
                <i class="fas fa-hands-helping"></i>
              </div>
              <h3 class="card-title">Voluntariado</h3>
            </div>
            <p class="card-text">Conecta con oportunidades presenciales o remotas que necesitan tus habilidades específicas.</p>
            <div class="card-features">
              <div class="feature-item">
                <div class="feature-dot"></div>
                <span class="feature-text">+50 pts por hora de voluntariado</span>
              </div>
              <div class="feature-item">
                <div class="feature-dot"></div>
                <span class="feature-text">Certificados verificables</span>
              </div>
              <div class="feature-item">
                <div class="feature-dot"></div>
                <span class="feature-text">Experiencias transformadoras</span>
              </div>
            </div>
            <a href="/voluntariado" class="card-button">Ser voluntario</a>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Gamification Section mejorada -->
  <section class="gamification-section">
    <div class="gamification-container">
      <div class="gamification-header">
        <h2>Convierte tu impacto en logros</h2>
        <p>Gana reconocimiento y recompensas mientras haces el bien</p>
      </div>
      
      <div class="gamification-cards">
        <!-- Puntos -->
        <div class="gamification-card">
          <div class="card-icon" style="margin: 0 auto;">
            <i class="fas fa-star" style="font-size: 2rem;"></i>
          </div>
          <h3>Puntos de Impacto</h3>
          <p>Cada acción suma puntos que reflejan tu contribución real al cambio social.</p>
          <div class="progress-container">
            <div class="progress-bar">
              <div class="progress" style="width: 75%;"></div>
            </div>
            <div class="progress-info">
              <span>2,450 pts</span>
              <span>75%</span>
            </div>
          </div>
          <p>Próximo nivel: 3,000 pts</p>
        </div>
        
        <!-- Insignias -->
        <div class="gamification-card">
          <div class="badges-container">
            <div class="badge">
              <i class="fas fa-leaf"></i>
            </div>
            <div class="badge">
              <i class="fas fa-heart"></i>
            </div>
            <div class="badge">
              <i class="fas fa-medal"></i>
            </div>
          </div>
          <h3>Insignias</h3>
          <p>Desbloquea logros especiales al alcanzar hitos importantes en tu viaje solidario.</p>
          <a href="#" class="card-button" style="display: inline-block; margin-top: 1rem;">Ver mis insignias</a>
        </div>
        
        <!-- Ranking -->
        <div class="gamification-card">
          <div class="card-icon" style="margin: 0 auto;">
            <i class="fas fa-trophy" style="font-size: 2rem;"></i>
          </div>
          <h3>Ranking Global</h3>
          <p>Compite sanamente con otros voluntarios y llega a lo más alto.</p>
          <div style="margin-top: 1.5rem;">
            <div style="display: flex; justify-content: center; align-items: center;">
              <span style="font-weight: 600; margin-right: 0.5rem;">Tu posición:</span>
              <span style="background: var(--accent); color: white; padding: 0.3rem 1rem; border-radius: 20px;">#1,245</span>
            </div>
          </div>
          <a href="#" class="card-button" style="display: inline-block; margin-top: 1.5rem;">Ver ranking completo</a>
        </div>
      </div>
      
      <div class="ranking-container">
        <div class="ranking-header">
          <h3>Top Contribuidores este Mes</h3>
          <div class="user-rank">Tú: #1,245</div>
        </div>
        <div class="ranking-grid">
          <div class="ranking-item">
            <div class="ranking-avatar">
              <img src="https://randomuser.me/api/portraits/women/44.jpg" alt="Top 1">
            </div>
            <div class="ranking-name">Ana M.</div>
            <div class="ranking-points">8,450 pts</div>
          </div>
          <div class="ranking-item">
            <div class="ranking-avatar">
              <img src="https://randomuser.me/api/portraits/men/32.jpg" alt="Top 2">
            </div>
            <div class="ranking-name">Carlos R.</div>
            <div class="ranking-points">7,890 pts</div>
          </div>
          <div class="ranking-item">
            <div class="ranking-avatar">
              <img src="https://randomuser.me/api/portraits/women/68.jpg" alt="Top 3">
            </div>
            <div class="ranking-name">María L.</div>
            <div class="ranking-points">7,450 pts</div>
          </div>
          <div class="ranking-item">
            <div class="ranking-avatar">
              <img src="https://randomuser.me/api/portraits/men/75.jpg" alt="Top 4">
            </div>
            <div class="ranking-name">Juan P.</div>
            <div class="ranking-points">6,920 pts</div>
          </div>
          <div class="ranking-item">
            <div class="ranking-avatar">
              <img src="https://randomuser.me/api/portraits/women/63.jpg" alt="Top 5">
            </div>
            <div class="ranking-name">Laura S.</div>
            <div class="ranking-points">6,780 pts</div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- CTA Section -->
  <section id="cta" class="cta-section">
    <div class="cta-content">
      <h2>¿Listo para marcar la diferencia?</h2>
      <p>Únete a miles de personas que están transformando realidades con sus acciones diarias.</p>
      <div class="cta-buttons">
        <a href="/registro" class="btn btn-accent">
          <i class="fas fa-user-plus"></i> Crear cuenta gratis
        </a>
        <a href="/login" class="btn btn-outline-white">
          <i class="fas fa-sign-in-alt"></i> Iniciar sesión
        </a>
      </div>
    </div>
  </section>
{% endblock %}

{% block scripts %}
  {{ super() }}
  <script>
    // Animaciones simples
    document.addEventListener('DOMContentLoaded', function() {
      // Scroll suave
      document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function(e) {
          e.preventDefault();
          document.querySelector(this.getAttribute('href')).scrollIntoView({
            behavior: 'smooth'
          });
        });
      });
      
      // Efecto hover en tarjetas
      const cards = document.querySelectorAll('.action-card, .gamification-card');
      cards.forEach(card => {
        card.addEventListener('mouseenter', function() {
          this.style.transform = 'translateY(-10px)';
        });
        card.addEventListener('mouseleave', function() {
          this.style.transform = 'translateY(0)';
        });
      });
    });

    document.addEventListener('DOMContentLoaded', async () => {
      const { data: { user } } = await supabase.auth.getUser();
      if (user) {
        const pendingProfile = localStorage.getItem('pendingProfile');
        if (pendingProfile) {
          // Verifica si el perfil ya existe antes de insertar
          const { data: existingProfile } = await supabase
            .from('profiles')
            .select('id')
            .eq('id', user.id)
            .single();

          if (!existingProfile) {
            const profile = JSON.parse(pendingProfile);
            let photo_url = '';

            // Si hay foto pendiente, súbela ahora
            const pendingPhoto = localStorage.getItem('pendingPhoto');
            if (pendingPhoto) {
              function base64ToBlob(base64, mime) {
                const byteChars = atob(base64.split(',')[1]);
                const byteNumbers = new Array(byteChars.length);
                for (let i = 0; i < byteChars.length; i++) {
                  byteNumbers[i] = byteChars.charCodeAt(i);
                }
                const byteArray = new Uint8Array(byteNumbers);
                return new Blob([byteArray], { type: mime });
              }
              const mime = pendingPhoto.match(/^data:(.*);base64,/)[1];
              const photoBlob = base64ToBlob(pendingPhoto, mime);
              const fileExt = mime.split('/')[1];
              const filePath = `${user.id}.${fileExt}`;
              const { error: uploadError } = await supabase.storage.from('avatars').upload(filePath, photoBlob, { upsert: true });
              if (!uploadError) {
                const { data: publicUrl } = supabase.storage.from('avatars').getPublicUrl(filePath);
                photo_url = publicUrl.publicUrl;
              }
            }

            // Inserta el perfil en la tabla profiles
            await supabase.from('profiles').insert([{
              id: user.id,
              email: user.email,
              username: profile.username,
              first_name: profile.firstName,
              last_name: profile.lastName,
              birthdate: profile.birthdate,
              photo_url,
              country: profile.country,
              slogan: profile.slogan,
              bio: profile.bio,
              interests: profile.interests
            }]);
          }

          // Limpia los datos temporales siempre, para que no se repita
          localStorage.removeItem('pendingProfile');
          localStorage.removeItem('pendingPhoto');
        }
      }
    });
  </script>
{% endblock %}
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Crear Tarea o Reto | Solidarity</title>
    <link rel="stylesheet" href="/styles.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
    <style>
        .create-task-container {
            max-width: 600px;
            margin: 4rem auto 0 auto;
            background: var(--white);
            border-radius: 16px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.07);
            border: 1px solid var(--gray);
            padding: 2.5rem 2rem 2rem 2rem;
        }
        .create-task-title {
            font-size: 2rem;
            font-weight: 700;
            color: var(--primary);
            margin-bottom: 1.2rem;
            text-align: center;
        }
        .create-task-desc {
            color: #6b7280;
            font-size: 1.05rem;
            margin-bottom: 2rem;
            text-align: center;
        }
        .task-form {
            display: flex;
            flex-direction: column;
            gap: 1.3rem;
        }
        .form-group {
            display: flex;
            flex-direction: column;
            gap: 0.4rem;
        }
        .form-group label {
            font-weight: 500;
            color: var(--darker);
        }
        .form-group input,
        .form-group textarea,
        .form-group select {
            padding: 0.75rem 1rem;
            border-radius: 8px;
            border: 1px solid var(--gray);
            font-size: 1rem;
            background: var(--light);
            transition: border 0.2s;
        }
        .form-group input:focus,
        .form-group textarea:focus,
        .form-group select:focus {
            border: 1.5px solid var(--primary);
            outline: none;
            background: #fff;
        }
        .form-group textarea {
            min-height: 90px;
            resize: vertical;
        }
        .form-group input[type="file"] {
            padding: 0.5rem 0.2rem;
            background: none;
        }
        .preview-img {
            width: 100%;
            max-width: 320px;
            height: 180px;
            object-fit: cover;
            border-radius: 10px;
            margin-top: 0.5rem;
            border: 1px solid var(--gray);
            display: none;
        }
        .task-form .btn {
            margin-top: 0.5rem;
            width: 100%;
            font-size: 1.1rem;
        }
        .deadline-info {
            background: var(--accent);
            color: #fff;
            border-radius: 8px;
            padding: 0.7rem 1rem;
            margin-bottom: 1.2rem;
            font-size: 1.05rem;
            display: flex;
            align-items: center;
            gap: 0.7rem;
        }
        .progress-section {
            margin: 1.5rem 0 1rem 0;
            display: none;
        }
        .progress-label {
            font-size: 1rem;
            color: var(--darker);
            margin-bottom: 0.3rem;
        }
        .progress-bar-bg {
            background: var(--gray);
            border-radius: 8px;
            height: 14px;
            width: 100%;
            overflow: hidden;
        }
        .progress-bar {
            background: var(--primary);
            height: 100%;
            border-radius: 8px;
            width: 0%;
            transition: width 0.5s;
        }
        .after-create {
            display: none;
            margin-top: 2rem;
            background: var(--primary-light);
            color: #fff;
            border-radius: 10px;
            padding: 1.5rem 1rem;
            text-align: center;
        }
        .after-create .btn {
            margin-top: 1.2rem;
        }
        @media (max-width: 600px) {
            .create-task-container {
                margin: 2rem 0 0 0;
                border-radius: 10px;
                padding: 1.5rem 0.7rem 1.2rem 0.7rem;
            }
        }
    </style>
</head>
<body>
    <header>
        <nav class="navbar">
            <a href="/" class="logo">
                <i class="fas fa-hands-helping logo-icon"></i>
                <span class="logo-text">Solidarity</span>
            </a>
            <div class="nav-links">
                <a href="/">Home</a>
                <a href="/causes">Causas</a>
                <a href="/tasks">Tareas</a>
                <a href="/profile">Perfil</a>
                <a href="/contact">Contacto</a>
            </div>
            <div class="auth-buttons">
                <a href="/login" class="btn btn-outline">Iniciar Sesión</a>
                <a href="/register" class="btn btn-primary">Registrarse</a>
            </div>
        </nav>
    </header>

    <main>
        <div class="create-task-container">
            <div class="create-task-title">
                <i class="fas fa-tasks"></i> Crear Nueva Tarea o Reto
            </div>
            <div class="create-task-desc">
                Define una tarea solidaria o un reto para la comunidad.<br>
                ¡Motiva a otros a participar y suma impacto positivo!
            </div>
            <form class="task-form" id="taskForm" autocomplete="off">
                <div class="form-group">
                    <label for="title">Título de la tarea/reto</label>
                    <input type="text" id="title" name="title" placeholder="Ej: Recolecta 10 abrigos" required>
                </div>
                <div class="form-group">
                    <label for="photo">Foto principal</label>
                    <input type="file" id="photo" name="photo" accept="image/*">
                    <img id="previewImg" class="preview-img" alt="Vista previa de la foto">
                </div>
                <div class="form-group">
                    <label for="description">Descripción</label>
                    <textarea id="description" name="description" placeholder="Explica en qué consiste la tarea o reto..." required></textarea>
                </div>
                <div class="form-group">
                    <label for="type">Tipo de tarea</label>
                    <select id="type" name="type" required>
                        <option value="comunitaria">Comunitaria</option>
                        <option value="reto">Reto</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="deadline">Fecha límite</label>
                    <input type="datetime-local" id="deadline" name="deadline" required>
                </div>
                <div class="deadline-info" id="deadlineInfo" style="display:none;">
                    <i class="fas fa-hourglass-half"></i>
                    <span id="countdownText"></span>
                </div>
                <div class="form-group">
                    <label for="participants">Nº de participantes objetivo</label>
                    <input type="number" id="participants" name="participants" min="1" placeholder="Ej: 20" required>
                </div>
                <div class="form-group">
                    <label for="points">Puntos por completar</label>
                    <input type="number" id="points" name="points" min="1" max="1000" value="30" required>
                </div>
                <div class="progress-section" id="progressSection">
                    <div class="progress-label">
                        Progreso de la tarea: <span id="progressPercent">0%</span>
                    </div>
                    <div class="progress-bar-bg">
                        <div class="progress-bar" id="progressBar"></div>
                    </div>
                </div>
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-paper-plane"></i> Crear Tarea/Reto
                </button>
            </form>
            <div class="after-create" id="afterCreate">
                <h3>¡Tarea/Reto creado con éxito!</h3>
                <div style="margin:1rem 0;">
                    <strong>Título:</strong> <span id="summaryTitle"></span><br>
                    <strong>Tipo:</strong> <span id="summaryType"></span><br>
                    <strong>Participantes objetivo:</strong> <span id="summaryParticipants"></span><br>
                    <strong>Puntos por completar:</strong> <span id="summaryPoints"></span>
                </div>
                <a href="/tasks" class="btn btn-accent">
                    <i class="fas fa-arrow-left"></i> Volver a tareas
                </a>
            </div>
        </div>
    </main>

    <footer>
        <div class="footer-content">
            <div class="footer-logo">
                <i class="fas fa-hands-helping"></i>
                <h3>Solidarity</h3>
            </div>
            <div class="footer-links">
                <a href="/about">Acerca de</a>
                <a href="/contact">Contacto</a>
                <a href="/privacy">Privacidad</a>
            </div>
            <div class="social-links">
                <a href="#"><i class="fab fa-twitter"></i></a>
                <a href="#"><i class="fab fa-facebook-f"></i></a>
                <a href="#"><i class="fab fa-instagram"></i></a>
            </div>
            <div class="footer-bottom">
                &copy; 2025 Solidarity. Todos los derechos reservados.
            </div>
        </div>
    </footer>
    <script>
        // Vista previa de la imagen
        document.getElementById('photo').addEventListener('change', function(e) {
            const file = e.target.files[0];
            const preview = document.getElementById('previewImg');
            if (file) {
                const reader = new FileReader();
                reader.onload = function(evt) {
                    preview.src = evt.target.result;
                    preview.style.display = 'block';
                };
                reader.readAsDataURL(file);
            } else {
                preview.src = '';
                preview.style.display = 'none';
            }
        });

        // Deadline y cuenta atrás dinámica
        const deadlineInput = document.getElementById('deadline');
        const deadlineInfo = document.getElementById('deadlineInfo');
        const countdownText = document.getElementById('countdownText');
        let countdownInterval;

        deadlineInput.addEventListener('change', function() {
            updateCountdown();
            deadlineInfo.style.display = 'flex';
            if (countdownInterval) clearInterval(countdownInterval);
            countdownInterval = setInterval(updateCountdown, 1000);
        });

        function updateCountdown() {
            const deadline = new Date(deadlineInput.value);
            const now = new Date();
            let diff = deadline - now;
            if (isNaN(deadline.getTime()) || diff <= 0) {
                countdownText.textContent = "¡Deadline alcanzado!";
                clearInterval(countdownInterval);
                return;
            }
            const days = Math.floor(diff / (1000 * 60 * 60 * 24));
            diff -= days * (1000 * 60 * 60 * 24);
            const hours = Math.floor(diff / (1000 * 60 * 60));
            diff -= hours * (1000 * 60 * 60);
            const minutes = Math.floor(diff / (1000 * 60));
            diff -= minutes * (1000 * 60);
            const seconds = Math.floor(diff / 1000);
            countdownText.textContent = `Faltan ${days}d ${hours}h ${minutes}m ${seconds}s`;
        }

        // Barra de progreso dinámica (simulación)
        const progressSection = document.getElementById('progressSection');
        const progressBar = document.getElementById('progressBar');
        const progressPercent = document.getElementById('progressPercent');
        let progress = 0;

        // Simulación: muestra la barra al cambiar participantes
        document.getElementById('participants').addEventListener('input', function() {
            progressSection.style.display = 'block';
            progress = 0;
            updateProgressBar();
        });

        // Simulación: clic en la barra para aumentar progreso
        progressBar.addEventListener('click', function() {
            if (progress < 100) {
                progress += 10;
                if (progress > 100) progress = 100;
                updateProgressBar();
            }
        });

        function updateProgressBar() {
            progressBar.style.width = progress + '%';
            progressPercent.textContent = progress + '%';
        }

        // Simulación de envío de formulario
        document.getElementById('taskForm').addEventListener('submit', function(e) {
            e.preventDefault();
            document.getElementById('taskForm').style.display = 'none';
            document.getElementById('afterCreate').style.display = 'block';
            document.getElementById('summaryTitle').textContent = document.getElementById('title').value;
            document.getElementById('summaryType').textContent = document.getElementById('type').value.charAt(0).toUpperCase() + document.getElementById('type').value.slice(1);
            document.getElementById('summaryParticipants').textContent = document.getElementById('participants').value;
            document.getElementById('summaryPoints').textContent = document.getElementById('points').value;
            window.scrollTo({ top: 0, behavior: 'smooth' });
        });
    </script>
</body>
</html>
{% extends "layout.njk" %}

{% block title %}Tareas - Solidarity{% endblock %}

{% block head %}
  {{ super() }}
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/choices.js/public/assets/styles/choices.min.css" />
  <style>
    :root {
      --primary: #4a6fa5;
      --primary-dark: #166088;
      --gray: #e2e8f0;
      --white: #fff;
      --accent: #4fc3a1;
      --accent-dark: #3da58a;
      --urgent: #e53e3e;
    }
    body {
      background: #f8fafc;
      font-family: 'Inter', Arial, sans-serif;
      color: #2d3748;
      font-size: 1rem;
    }
    .modal-bg {
      display: none;
      position: fixed;
      top: 0; left: 0; width: 100vw; height: 100vh;
      background: rgba(0,0,0,0.35);
      z-index: 9999;
      align-items: center;
      justify-content: center;
    }
    .modal-bg.active { display: flex; }
    .modal-content {
      background: #fff;
      border-radius: 18px;
      max-width: 540px;
      width: 95vw;
      padding: 2.5rem 1.5rem 2rem 1.5rem;
      box-shadow: 0 8px 32px rgba(0,0,0,0.13);
      position: relative;
      animation: fadeIn 0.3s;
      max-height: 90vh;
      overflow-y: auto;
    }
    .close-modal {
      position: absolute;
      top: 1.1rem; right: 1.3rem;
      background: none;
      border: none;
      font-size: 2rem;
      color: #aaa;
      cursor: pointer;
      transition: color 0.2s;
    }
    .close-modal:hover { color: var(--primary, #4a6fa5); }
    .create-task-title {
      font-size: 1.5rem;
      font-weight: 800;
      color: var(--primary, #4a6fa5);
      margin-bottom: 1.2rem;
      text-align: center;
    }
    .task-form .form-group label { font-weight: 600; color: var(--primary, #4a6fa5); }
    .task-form .form-group input,
    .task-form .form-group textarea {
      width: 100%;
      padding: 0.7rem 1rem;
      border-radius: 8px;
      border: 1px solid #e5e7eb;
      margin-bottom: 0.2rem;
      font-size: 1rem;
      background: #f8fafc;
      transition: border 0.2s;
    }
    .task-form .form-group input:focus,
    .task-form .form-group textarea:focus {
      border: 1.5px solid var(--accent, #4fc3a1);
      outline: none;
      background: #fff;
    }
    .task-form .form-group textarea {
      min-height: 90px;
      resize: vertical;
    }
    .form-inline-group {
      display: flex;
      gap: 1rem;
    }
    .form-inline-group .form-group { flex: 1; }
    .preview-img {
      width: 100%;
      max-width: 320px;
      height: 180px;
      object-fit: cover;
      border-radius: 10px;
      margin-top: 0.5rem;
      border: 1px solid #e5e7eb;
      display: none;
    }
    .points-info {
      background: var(--accent, #4fc3a1);
      color: #fff;
      border-radius: 8px;
      padding: 0.7rem 1rem;
      margin-top: 0.5rem;
      font-size: 1.05rem;
      display: flex;
      align-items: center;
      gap: 0.7rem;
    }
    .after-create {
      margin-top: 2rem;
      background: var(--primary-light, #e6f0fa);
      color: #444;
      border-radius: 10px;
      padding: 1.5rem 1rem;
      text-align: center;
    }
    @media (max-width: 600px) {
      .modal-content { padding: 1.2rem 0.5rem 1.2rem 0.5rem; }
      .create-task-title { font-size: 1.1rem; }
      .form-inline-group { flex-direction: column; }
    }
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(-30px);}
      to { opacity: 1; transform: translateY(0);}
    }
    /* SOLO estilos de la página de tareas */
    .main-container {
        max-width: 1200px;
        margin: 2rem auto;
        padding: 0 2rem;
    }
    .tasks-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
    }
    .tasks-header h1 {
        font-size: 2rem;
        color: var(--primary);
        font-weight: 700;
    }
    .tasks-search {
        margin-bottom: 2rem;
        display: flex;
        align-items: center;
        gap: 0.7rem;
    }
    .tasks-search input {
        flex: 1;
        padding: 0.6rem 1.2rem;
        border-radius: 7px;
        border: 1.5px solid var(--gray);
        font-size: 1.05rem;
        outline: none;
        transition: border 0.2s;
        background: #fff;
    }
    .tasks-search input:focus {
        border-color: var(--primary);
    }
    .tabs {
        display: flex;
        border-bottom: 1px solid var(--gray);
        margin-bottom: 2rem;
    }
    .tab {
        padding: 0.75rem 1.5rem;
        cursor: pointer;
        position: relative;
        font-weight: 500;
        color: #6b7280;
        background: none;
        border: none;
        outline: none;
    }
    .tab.active {
        color: var(--primary);
        font-weight: 600;
    }
    .tab.active::after {
        content: '';
        position: absolute;
        bottom: -1px;
        left: 0;
        width: 100%;
        height: 3px;
        background: var(--primary);
    }
    .tasks-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 2rem;
    }
    .task-card {
        background: white;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
        transition: all 0.3s ease;
        border: 1px solid var(--gray);
        display: flex;
        flex-direction: column;
    }
    .task-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    }
    .task-image {
        height: 180px;
        overflow: hidden;
        position: relative;
    }
    .task-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
    }
    .task-card:hover .task-image img {
        transform: scale(1.05);
    }
    .task-badge {
        position: absolute;
        top: 1rem;
        right: 1rem;
        background: rgba(255, 255, 255, 0.9);
        padding: 0.3rem 0.8rem;
        border-radius: 50px;
        font-size: 0.8rem;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }
    .task-badge.urgent {
        background: var(--urgent);
        color: white;
    }
    .task-badge.points {
        background: var(--primary);
        color: white;
        left: 1rem;
        right: auto;
    }
    .task-content {
        padding: 1.5rem;
        display: flex;
        flex-direction: column;
        flex: 1;
    }
    .task-content h3 {
        font-size: 1.3rem;
        margin-bottom: 0.8rem;
        color: #2d3748;
    }
    .task-content p {
        color: #6b7280;
        margin-bottom: 1.5rem;
        font-size: 0.95rem;
        line-height: 1.6;
        flex-grow: 1;
    }
    .task-meta {
        display: flex;
        gap: 1rem;
        margin-bottom: 1.5rem;
        font-size: 0.85rem;
        flex-wrap: wrap;
    }
    .meta-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: #6b7280;
    }
    .meta-item i {
        color: var(--primary);
    }
    .beneficiaries-count {
        display: inline-flex;
        align-items: center;
        background: #f0f9ff;
        color: var(--primary);
        padding: 0.3rem 0.8rem;
        border-radius: 50px;
        font-size: 0.85rem;
        font-weight: 600;
    }
    .beneficiaries-count i {
        margin-right: 0.3rem;
    }
    .linked-cause {
        display: inline-flex;
        align-items: center;
        background: #f0f0ff;
        color: var(--primary);
        padding: 0.3rem 0.8rem;
        border-radius: 50px;
        font-size: 0.85rem;
        font-weight: 600;
        margin-bottom: 1rem;
    }
    .linked-cause img {
      width: 22px;
      height: 22px;
      object-fit: cover;
      border-radius: 50%;
      border: 1px solid #e5e7eb;
      margin-right: 0.4em;
    }
    .task-progress {
        margin-bottom: 1.5rem;
    }
    .progress-bar {
        height: 8px;
        background: var(--gray);
        border-radius: 4px;
        overflow: hidden;
        margin-bottom: 0.5rem;
    }
    .progress-fill {
        height: 100%;
        background: var(--primary);
        border-radius: 4px;
    }
    .progress-info {
        display: flex;
        justify-content: space-between;
        font-size: 0.9rem;
        color: #6b7280;
    }
    .task-actions {
        display: flex;
        gap: 0.8rem;
    }
    .task-actions .btn {
        flex: 1;
        text-align: center;
        justify-content: center;
    }
    .btn-accent {
        background: var(--accent);
        color: white;
    }
    .btn-accent:hover {
        background: var(--accent-dark);
        transform: translateY(-2px);
    }
    @media (max-width: 900px) {
        .main-container {
            padding: 1.2rem 0.5rem;
        }
    }
    @media (max-width: 768px) {
        .tasks-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 1rem;
        }
        .tasks-grid {
            grid-template-columns: 1fr;
        }
        .task-actions {
            flex-direction: column;
        }
    }
  </style>
{% endblock %}

{% block content %}
  <!-- Modal para usuarios no logueados -->
  <div class="modal-bg" id="loginModal">
    <div class="modal-content">
      <h3>Para crear una tarea</h3>
      <p>Debes ser un usuario registrado. ¿Deseas iniciar sesión o registrarte ahora?</p>
      <div class="modal-buttons">
        <a href="/login?return=/tasks" class="btn btn-primary">Iniciar Sesión</a>
        <a href="/register?return=/tasks" class="btn btn-outline">Registrarse</a>
        <button id="cancelModal" class="btn">Cancelar</button>
      </div>
    </div>
  </div>

  <!-- Modal emergente para crear tarea -->
  <div id="createTaskModal" class="modal-bg">
    <div class="modal-content">
      <button class="close-modal" id="closeCreateTaskModal" title="Cerrar">&times;</button>
      <div class="create-task-title">
        <i class="fas fa-plus-circle"></i> Crear Nueva Tarea Solidaria
      </div>
      <form class="task-form" id="taskForm" autocomplete="off">
        <div class="form-group">
          <label for="title">Título de la tarea</label>
          <input type="text" id="title" name="title" placeholder="Ej: Limpieza de playa" required>
        </div>
        <div class="form-group">
          <label for="photo">Foto principal</label>
          <input type="file" id="photo" name="photo" accept="image/*">
          <img id="previewImg" class="preview-img" alt="Vista previa de la foto" style="display:none;">
        </div>
        <div class="form-group">
          <label for="description">Descripción</label>
          <textarea id="description" name="description" placeholder="Describe la tarea, qué se necesita y cómo pueden ayudar los voluntarios..." required></textarea>
        </div>
        <div class="form-group">
          <label for="cause_id">Vinculado a causa (opcional)</label>
          <select id="cause-select" name="cause_id">
            <option value="">Selecciona una causa</option>
            <!-- Las opciones se cargan dinámicamente -->
          </select>
        </div>
        <div class="form-inline-group">
          <div class="form-group">
            <label for="city">Ciudad</label>
            <input type="text" id="city" name="city" placeholder="Ej: Madrid" required>
          </div>
          <div class="form-group">
            <label for="country">País</label>
            <input type="text" id="country" name="country" placeholder="Ej: España" required>
          </div>
        </div>
        <div class="form-group">
          <label for="points">Puntos por participar</label>
          <input type="number" id="points" name="points" min="1" max="1000" value="50" required>
          <div class="points-info" id="pointsText">
            <i class="fas fa-star"></i>
            Participar en esta tarea otorgará <strong>50 puntos</strong> a cada voluntario.
          </div>
        </div>
        <div class="form-group">
          <label for="beneficiaries">Nº de beneficiarios</label>
          <input type="number" id="beneficiaries" name="beneficiaries" min="1" placeholder="Ej: 100" required>
        </div>
        <div class="form-group">
          <label for="is_urgent">
            <input type="checkbox" id="is_urgent" name="is_urgent"> Marcar como urgente
          </label>
        </div>
        <div class="form-group">
          <label for="end_date">Fecha de finalización (opcional)</label>
          <input type="date" id="end_date" name="end_date">
        </div>
        <input type="hidden" id="lat" name="lat">
        <input type="hidden" id="lng" name="lng">
        <button type="submit" class="btn btn-primary" style="margin-top:1rem;">
          <i class="fas fa-paper-plane"></i> Crear Tarea
        </button>
      </form>
      <div class="after-create" id="afterCreate" style="display:none;">
        <h3>¡Tarea creada con éxito!</h3>
        <p>¿Quieres ver todas las tareas disponibles o crear otra?</p>
        <a href="/tasks" class="btn btn-accent">
          <i class="fas fa-tasks"></i> Ver todas las tareas
        </a>
        <br>
        <a href="#" id="createAnother" class="btn btn-outline" style="margin-top:1rem;">
          <i class="fas fa-plus"></i> Crear otra tarea
        </a>
      </div>
    </div>
  </div>

  <!-- Modal de Tarea -->
  <div id="taskModal" class="modal" style="display:none; position:fixed; z-index:9999; left:0; top:0; width:100vw; height:100vh; background:rgba(0,0,0,0.35); align-items:center; justify-content:center;">
    <div class="modal-content" style="background:#fff; border-radius:18px; max-width:800px; width:95vw; padding:2rem; box-shadow:0 8px 32px rgba(74,111,165,0.13); position:relative; max-height:90vh; overflow-y:auto;">
      <button id="closeTaskModal" style="position:absolute; top:1.5rem; right:1.5rem; background:none; border:none; font-size:1.8rem; color:#6b7280; cursor:pointer; transition:color 0.2s;" onmouseover="this.style.color='#4a6fa5'" onmouseout="this.style.color='#6b7280'">&times;</button>
      <div id="taskModalBody" style="padding:0.5rem;">
        <!-- Contenido dinámico -->
      </div>
    </div>
  </div>

  <!-- Modal de Causa (reutilizable) -->
  <div id="causeModal" class="modal-bg">
    <div class="modal-content" id="causeModalContent" style="max-width:500px;">
      <button class="close-modal" id="closeCauseModal" title="Cerrar">&times;</button>
      <div id="causeModalBody"></div>
    </div>
  </div>

  <!-- Contenido principal de la página de tareas -->
  <div class="main-container">
    <div class="tasks-header">
      <h1>Tareas Solidarias</h1>
      <a href="#" id="create-task-btn" class="btn btn-primary">
        <i class="fas fa-plus"></i> Crear Tarea
      </a>
    </div>
    <div class="tasks-search">
      <input type="text" id="search-input" placeholder="Buscar por título, país, descripción...">
      <i class="fas fa-search" style="color:#4a6fa5;"></i>
    </div>
    <div class="tabs">
      <button class="tab active" data-filter="all">Todas</button>
      <button class="tab" data-filter="education">Educación</button>
      <button class="tab" data-filter="health">Salud</button>
      <button class="tab" data-filter="environment">Medio Ambiente</button>
      <button class="tab" data-filter="animals">Animales</button>
      <button class="tab" data-filter="community">Comunidad</button>
    </div>
    <div class="tasks-grid" id="tasksList">
      <!-- Las tareas se cargarán dinámicamente desde Supabase -->
    </div>
  </div>
{% endblock %}

{% block scripts %}
{{ super() }}
<script src="https://cdn.jsdelivr.net/npm/choices.js/public/assets/scripts/choices.min.js"></script>
<script>
let currentFilter = "all";
let causeChoices = null;

document.addEventListener('DOMContentLoaded', async function() {
  // Abrir modal de crear tarea
  document.getElementById('create-task-btn').onclick = async function(e) {
    e.preventDefault();
    const { data: { session } } = await supabase.auth.getSession();
    if (session?.user) {
      await loadCausesForSelect();
      document.getElementById('createTaskModal').classList.add('active');
      document.body.style.overflow = 'hidden';
    } else {
      document.getElementById('loginModal').classList.add('active');
    }
  };

  // Cerrar modal de crear tarea
  document.getElementById('closeCreateTaskModal').onclick = function() {
    document.getElementById('createTaskModal').classList.remove('active');
    document.body.style.overflow = '';
    document.getElementById('taskForm').reset();
    document.getElementById('previewImg').style.display = 'none';
    document.getElementById('taskForm').style.display = 'block';
    document.getElementById('afterCreate').style.display = 'none';
  };

  // Cerrar modal al hacer click fuera del contenido
  document.getElementById('createTaskModal').onclick = function(e) {
    if (e.target === this) {
      this.classList.remove('active');
      document.body.style.overflow = '';
      document.getElementById('taskForm').style.display = 'block';
      document.getElementById('afterCreate').style.display = 'none';
    }
  };

  // Modal login
  document.getElementById('cancelModal').onclick = function() {
    document.getElementById('loginModal').classList.remove('active');
  };
  document.getElementById('loginModal').onclick = function(e) {
    if (e.target === this) this.classList.remove('active');
  };

  // Tabs
  document.querySelectorAll('.tab').forEach(tab => {
    tab.addEventListener('click', function() {
      document.querySelector('.tab.active').classList.remove('active');
      this.classList.add('active');
      loadTasksFromSupabase(this.getAttribute('data-filter'));
    });
  });

  // Búsqueda
  document.getElementById('search-input').addEventListener('input', function() {
    loadTasksFromSupabase(currentFilter, this.value);
  });

  // Vista previa de imagen
  document.getElementById('photo').addEventListener('change', function(e) {
    const file = e.target.files[0];
    const preview = document.getElementById('previewImg');
    if (file) {
      const reader = new FileReader();
      reader.onload = function(evt) {
        preview.src = evt.target.result;
        preview.style.display = 'block';
      };
      reader.readAsDataURL(file);
    } else {
      preview.src = '';
      preview.style.display = 'none';
    }
  });

  // Actualizar texto de puntos
  document.getElementById('points').addEventListener('input', function() {
    const val = this.value || 0;
    document.getElementById('pointsText').innerHTML = `<i class="fas fa-star"></i> Participar en esta tarea otorgará <strong>${val} puntos</strong> a cada voluntario.`;
  });

  // Crear otra tarea tras éxito
  document.getElementById('createAnother').onclick = function(e) {
    e.preventDefault();
    document.getElementById('taskForm').reset();
    document.getElementById('previewImg').style.display = 'none';
    document.getElementById('taskForm').style.display = 'block';
    document.getElementById('afterCreate').style.display = 'none';
  };

  // Envío del formulario
  document.getElementById('taskForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    // Recoge los datos del formulario
    const title = document.getElementById('title').value.trim();
    const description = document.getElementById('description').value.trim();
    const city = document.getElementById('city').value.trim();
    const country = document.getElementById('country').value.trim();
    const points = parseInt(document.getElementById('points').value, 10);
    const beneficiaries = parseInt(document.getElementById('beneficiaries').value, 10);
    const is_urgent = document.getElementById('is_urgent').checked;
    const cause_id = document.getElementById('cause-select').value || null;
    const photoFile = document.getElementById('photo').files[0];
    let photo_url = null;
    const end_date_input = document.getElementById('end_date').value;
    // Si el usuario no pone fecha, envía null
    const end_date = end_date_input ? end_date_input : null;

    // Sube la foto a Supabase Storage si existe
    if (photoFile) {
      const fileExt = photoFile.name.split('.').pop();
      const fileName = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}.${fileExt}`;
      const filePath = `public/${fileName}`;
      const { error: uploadError } = await supabase.storage
        .from('tasks')
        .upload(filePath, photoFile, { upsert: true });
      if (uploadError) {
        alert('Error subiendo la foto: ' + uploadError.message);
        return;
      }
      const { data } = supabase.storage.from('tasks').getPublicUrl(filePath);
      photo_url = data.publicUrl;
    }

    // Guarda la tarea en la tabla
    const { data: { session } } = await supabase.auth.getSession();
    const user = session?.user;
    if (!user) {
      alert('Debes iniciar sesión para crear una tarea.');
      return;
    }

    const lat = document.getElementById('lat').value;
    const lng = document.getElementById('lng').value;

    const { error } = await supabase
      .from('tasks')
      .insert([{
        title,
        description,
        city,
        country,
        points,
        beneficiaries,
        is_urgent,
        photo_url,
        user_id: user.id,
        participants: 0,
        cause_id,
        type: 'tarea',
        lat: lat ? parseFloat(lat) : null,
        lng: lng ? parseFloat(lng) : null,
        end_date, // ahora puede ser null o una fecha
      }]);

    if (error) {
      alert('Error al crear la tarea: ' + error.message);
      return;
    }

    document.getElementById('taskForm').style.display = 'none';
    document.getElementById('afterCreate').style.display = 'block';
    loadTasksFromSupabase();
  });

  // Cargar tareas al iniciar
  await loadTasksFromSupabase();
});

async function loadTasksFromSupabase(filter = "all", searchTerm = "") {
  currentFilter = filter;
  let query = supabase
    .from('tasks')
    .select('*')
    .order('created_at', { ascending: false });

  if (filter !== "all") {
    query = query.eq('category', filter);
  }
  if (searchTerm && searchTerm.trim() !== "") {
    query = query.or(`title.ilike.%${searchTerm}%,description.ilike.%${searchTerm}%,city.ilike.%${searchTerm}%,country.ilike.%${searchTerm}%`);
  }
  const { data: tasks, error } = await query;
  const tasksList = document.getElementById('tasksList');
  if (error) {
    tasksList.innerHTML = '<div style="color:#e53e3e;text-align:center;">Error al cargar las tareas.</div>';
    return;
  }
  tasksList.innerHTML = '';
  if (!tasks || tasks.length === 0) {
    tasksList.innerHTML = '<div style="color:#6b7280;text-align:center;padding:2rem;grid-column:1/-1;">No se encontraron tareas.</div>';
    return;
  }
  
  // 1. Carga todas las causas una sola vez antes de renderizar las tareas
  const { data: causes } = await supabase.from('causes').select('id, title, photo_url');
  const causesMap = {};
  if (causes) {
    causes.forEach(c => causesMap[c.id] = c);
  }

  // Guardar las tareas en una variable global para acceder desde el modal
  window.tasks = tasks;
  
  tasks.forEach(task => {
    const urgentBadge = task.is_urgent ? `<div class="task-badge urgent"><i class="fas fa-exclamation-circle"></i> Urgente</div>` : "";
    const pointsBadge = `<div class="task-badge points"><i class="fas fa-star"></i> +${task.points || 0} pts</div>`;
    const location = task.city && task.country ? `${task.city}, ${task.country}` : "";
    let causeHtml = '';
    if (task.cause_id && causesMap[task.cause_id]) {
      const cause = causesMap[task.cause_id];
      causeHtml = `
        <div class="linked-cause" style="display:flex;align-items:center;gap:0.5rem;">
          <i class="fas fa-link" style="color:var(--primary);"></i>
          <img src="${cause.photo_url || '/img/causa-default.jpg'}" alt="${cause.title}" style="width:22px;height:22px;object-fit:cover;border-radius:50%;border:1px solid #e5e7eb;">
          <span style="color:var(--primary);font-weight:600;">${cause.title}</span>
        </div>
      `;
    }
    const card = document.createElement('div');
    card.className = 'task-card';
    card.innerHTML = `
      <div class="task-image">
        <img src="${task.photo_url || '/img/task-default.jpg'}" alt="${task.title}" onerror="this.src='/img/task-default.jpg'">
        ${urgentBadge}
        ${pointsBadge}
      </div>
      <div class="task-content">
        <h3>${task.title}</h3>
        <p>${task.description.substring(0, 100)}${task.description.length > 100 ? '...' : ''}</p>
        ${causeHtml}
        <div class="task-meta">
          <div class="meta-item"><i class="fas fa-map-marker-alt"></i> ${location}</div>
          <div class="meta-item"><i class="fas fa-users"></i> ${task.participants || 0} participantes</div>
          <div class="beneficiaries-count">
            <i class="fas fa-heart"></i> Beneficia a ${task.beneficiaries || 0} personas
          </div>
        </div>
        <div class="task-progress">
          <div class="progress-bar">
            <div class="progress-fill" style="width: ${Math.min(Math.round((task.participants / task.beneficiaries) * 100), 100)}%"></div>
          </div>
          <div class="progress-info">
            <span>${task.participants || 0} participantes</span>
            <span>Meta: ${task.beneficiaries || 0}</span>
          </div>
        </div>
        <div class="task-actions">
          <button class="btn btn-primary view-task-btn" data-task-id="${task.id}">Ver más</button>
          <button class="btn btn-accent participate-btn" data-task-id="${task.id}">Participar</button>
        </div>
      </div>
    `;
    tasksList.appendChild(card);
  });
  
  // Agregar event listeners para los botones de ver más
  document.querySelectorAll('.view-task-btn').forEach(btn => {
    btn.addEventListener('click', function(e) {
      e.preventDefault();
      const taskId = this.getAttribute('data-task-id');
      showTaskModal(taskId);
    });
  });
  
  // Agregar event listeners para los botones de participar
  document.querySelectorAll('.participate-btn').forEach(btn => {
    btn.addEventListener('click', function(e) {
      e.preventDefault();
      const taskId = this.getAttribute('data-task-id');
      participateInTask(taskId);
    });
  });
}

// Función para mostrar el modal con los detalles de la tarea
async function showTaskModal(taskId) {
  const { data: task, error } = await supabase
    .from('tasks')
    .select('*')
    .eq('id', taskId)
    .single();

  if (error) {
    alert('Error al cargar la tarea: ' + error.message);
    return;
  }

  // Si tu tarea tiene un campo "goal" y "raised" como en causas, usa esos para la barra de progreso
  // Si no, puedes dejarlo en 0/goal o adaptar según tu modelo
  const progress = task.goal
    ? Math.min(Math.round((task.raised / task.goal) * 100), 100)
    : 0;

  const createdDate = new Date(task.created_at).toLocaleDateString('es-ES', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });

  const endDate = task.end_date ? new Date(task.end_date).toLocaleDateString('es-ES', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  }) : 'Sin fecha límite';

  // Obtener información de la causa vinculada si existe
  let causeInfo = '';
  if (task.cause_id) {
    const { data: cause } = await supabase
      .from('causes')
      .select('title, photo_url')
      .eq('id', task.cause_id)
      .single();
    
    if (cause) {
      causeInfo = `
        <div class="linked-cause-section" style="margin-bottom:1.5rem;">
          <h3 class="content-title" style="font-size:1.2rem; font-weight:600; color:var(--primary); margin-bottom:0.9rem; display:flex; align-items:center; gap:0.7rem;">
            <i class="fas fa-link"></i> Vinculado a la causa
          </h3>
          <div style="display:flex; align-items:center; gap:1rem; background:#f8fafc; padding:1rem; border-radius:8px; border:1px solid #e5e7eb;">
            <img src="${cause.photo_url || '/img/causa-default.jpg'}" 
                 alt="Imagen de la causa vinculada"
                 style="width:80px; height:80px; object-fit:cover; border-radius:6px;"
                 onerror="this.src='/img/causa-default.jpg'">
            <div>
              <strong style="color:var(--primary);">${cause.title}</strong>
              <p style="margin-top:0.3rem; font-size:0.9rem; color:#6b7280;">Causa #${task.cause_id}</p>
              <a href="/causes/${task.cause_id}" class="btn btn-sm" style="margin-top:0.5rem; padding:0.3rem 0.8rem; font-size:0.85rem;"
                 onclick="showCauseModal('${task.cause_id}'); return false;">
                <i class="fas fa-external-link-alt"></i> Ver causa
              </a>
            </div>
          </div>
        </div>
      `;
    }
  }

  document.getElementById('taskModalBody').innerHTML = `
    <div class="modal-task-container">
      <!-- Título principal centrado, más espacio abajo -->
      <h1 class="modal-task-title" style="font-size:2rem; font-weight:800; color:var(--primary); margin-bottom:2.7rem; text-align:center; width:100%;">${task.title}</h1>
      <div class="modal-task-header" style="display:flex; gap:2.5rem; margin-bottom:2.7rem;">
        <div class="modal-task-image-wrapper" style="flex:1; min-width:320px; height:300px; border-radius:12px; overflow:hidden; position:relative; box-shadow:0 4px 12px rgba(0,0,0,0.08);">
          <!-- Badge arriba a la izquierda, verde y redondeado igual que causas -->
          <div class="modal-cause-badge" style="top:1.2rem; left:1.2rem; right:auto; background:var(--accent); color:white; position:absolute; border-radius:50px; padding:0.5rem 1rem; font-size:0.9rem; font-weight:600; display:flex; align-items:center; gap:0.6rem; box-shadow:0 2px 8px rgba(0,0,0,0.1); z-index:2;">
            <i class="fas fa-tasks"></i> Tarea Solidaria
          </div>
          <img class="modal-task-image" src="${task.photo_url || '/img/task-default.jpg'}" 
               alt="Imagen de la tarea ${task.title}"
               style="width:100%;height:100%;object-fit:cover;"
               onerror="this.src='/img/task-default.jpg'">
          ${task.is_urgent ? `
          <div class="modal-cause-badge urgent" style="right:1.2rem; left:auto; top:1.2rem; background:var(--urgent); color:white; border-radius:50px; padding:0.5rem 1rem; font-size:0.9rem; font-weight:600; display:flex; align-items:center; gap:0.6rem; box-shadow:0 2px 8px rgba(0,0,0,0.1); z-index:2;">
            <i class="fas fa-exclamation-circle"></i> Urgente
          </div>` : ''}
        </div>
        <!-- Info a la derecha de la foto -->
        <div class="modal-task-info" style="flex:1.5; display:flex; flex-direction:column; justify-content:flex-start;">
          <!-- Barra de progreso igual que causas -->
          <div class="modal-cause-progress-container" style="background:#f8fafc; padding:1.5rem; border-radius:12px; margin-bottom:1.5rem; border:1px solid #e5e7eb;">
            <div class="progress-bar">
              <div class="progress-fill" style="width: ${progress}%"></div>
            </div>
            <div class="progress-info">
              <span>${progress}% completado</span>
              <span>${task.raised || 0} € de ${task.goal || 0} €</span>
            </div>
          </div>
          <!-- Meta compacta en dos columnas -->
          <div class="modal-task-meta-grid" style="display:grid; grid-template-columns:1fr 1fr; gap:0.7rem 1.2rem; margin-bottom:1.2rem;">
            <div class="meta-item">
              <span class="meta-icon"><i class="fas fa-map-marker-alt"></i></span>
              <span>${task.city || 'Sin ubicación'}${task.country ? ', ' + task.country : ''}</span>
            </div>
            <div class="meta-item">
              <span class="meta-icon"><i class="fas fa-users"></i></span>
              <span>${task.participants || 0} participantes</span>
            </div>
            <div class="meta-item">
              <span class="meta-icon"><i class="fas fa-heart"></i></span>
              <span>${task.beneficiaries || 0} beneficiarios</span>
            </div>
            <div class="meta-item">
              <span class="meta-icon"><i class="fas fa-calendar-alt"></i></span>
              <span>${endDate}</span>
            </div>
          </div>
          <div class="points-notice" style="background:#f0f9ff; border-left:4px solid var(--accent); padding:0.8rem; border-radius:0 8px 8px 0; font-size:0.97rem; display:flex; align-items:center; gap:0.7rem;">
            <i class="fas fa-star" style="color: var(--accent);"></i>
            Participar en esta tarea otorgará <strong>${task.points || 20} puntos</strong> de impacto
          </div>
        </div>
      </div>
      ${causeInfo}
      <!-- Resumen y descripción debajo, con más espacio entre bloques -->
      <div class="modal-task-content" style="margin-top:0;">
        <div class="content-section" style="margin-bottom:2.2rem;">
          <h3 class="content-title" style="font-size:1.2rem; font-weight:600; color:var(--primary); margin-bottom:0.9rem; display:flex; align-items:center; gap:0.7rem;">
            <i class="fas fa-align-left"></i> Descripción
          </h3>
          <p class="content-text" style="line-height:1.7; color:#4b5563; font-size:1.05rem; margin-left:0; margin-right:0; text-align:justify;">${task.description || 'No hay descripción disponible para esta tarea.'}</p>
        </div>
        <div class="content-section" style="margin-bottom:2.2rem;">
          <h3 class="content-title" style="font-size:1.2rem; font-weight:600; color:var(--primary); margin-bottom:0.9rem; display:flex; align-items:center; gap:0.7rem;">
            <i class="fas fa-info-circle"></i> Detalles adicionales
          </h3>
          <div style="display:grid; grid-template-columns:1fr 1fr; gap:1rem;">
            <div>
              <p style="font-weight:600; color:#4b5563; margin-bottom:0.3rem;">Fecha de creación</p>
              <p style="color:#6b7280;">${createdDate}</p>
            </div>
            <div>
              <p style="font-weight:600; color:#4b5563; margin-bottom:0.3rem;">Estado</p>
              <p style="color:#6b7280;">${task.is_completed ? 'Completada' : 'En progreso'}</p>
            </div>
            <div>
              <p style="font-weight:600; color:#4b5563; margin-bottom:0.3rem;">Prioridad</p>
              <p style="color:#6b7280;">${task.is_urgent ? 'Alta prioridad' : 'Prioridad normal'}</p>
            </div>
            <div>
              <p style="font-weight:600; color:#4b5563; margin-bottom:0.3rem;">Tipo</p>
              <p style="color:#6b7280;">${task.type || 'Tarea general'}</p>
            </div>
          </div>
        </div>
      </div>
      <!-- Botones abajo, con más espacio arriba -->
      <div class="task-actions" style="display:flex; gap:0.8rem; margin-top:2.2rem;">
        <button class="btn btn-primary" style="flex:1;" onclick="participateInTask('${task.id}')">
          <i class="fas fa-hand-holding-heart"></i> Participar
        </button>
        <button class="btn btn-accent" style="flex:1;" onclick="showShareOptionsTask('${task.id}')">
          <i class="fas fa-share-alt"></i> Compartir
        </button>
      </div>
      <div class="share-section" id="shareSectionTask"></div>
    </div>
  `;

  document.getElementById('taskModal').style.display = 'flex';
  document.body.style.overflow = 'hidden';
}

// Función para mostrar opciones de compartir para tareas (idéntico a causas)
function showShareOptionsTask(taskId) {
  const task = window.tasks.find(t => t.id == taskId);
  const shareSection = document.getElementById('shareSectionTask');
  shareSection.innerHTML = `
    <h3 class="share-title">
      <i class="fas fa-share-alt"></i> Ayuda a difundir esta tarea
    </h3>
    <div class="share-content">
      <p class="share-text">
        <span class="share-highlight">"${task.description ? task.description.substring(0, 120) + '...' : 'Únete a esta importante tarea solidaria'}"</span><br><br>
        Cada participante nos acerca más a la meta de ayudar a <strong>${task.beneficiaries || 0} personas</strong>.
      </p>
      <div class="share-buttons">
        <a href="#" class="share-btn share-btn-facebook" onclick="shareOnSocialTask('facebook', '${task.id}')">
          <i class="fab fa-facebook-f"></i> Facebook
        </a>
        <a href="#" class="share-btn share-btn-twitter" onclick="shareOnSocialTask('twitter', '${task.id}')">
          <i class="fab fa-twitter"></i> Twitter
        </a>
        <a href="#" class="share-btn share-btn-whatsapp" onclick="shareOnSocialTask('whatsapp', '${task.id}')">
          <i class="fab fa-whatsapp"></i> WhatsApp
        </a>
        <a href="#" class="share-btn share-btn-link" onclick="copyTaskLink('${task.id}')">
          <i class="fas fa-link"></i> Copiar enlace
        </a>
      </div>
    </div>
  `;
  shareSection.scrollIntoView({ behavior: 'smooth' });
}

// Función para compartir tareas en redes sociales
function shareOnSocialTask(platform, taskId) {
  const task = window.tasks.find(t => t.id == taskId);
  const url = `${window.location.origin}/tasks/${task.id}`;
  const text = `Únete a esta tarea: "${task.title}" - ${task.description ? task.description.substring(0, 100) + '...' : 'Ayuda a hacer la diferencia!'} ${url}`;
  let shareUrl;
  switch(platform) {
    case 'facebook':
      shareUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}&quote=${encodeURIComponent(text)}`;
      break;
    case 'twitter':
      shareUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}`;
      break;
    case 'whatsapp':
      shareUrl = `https://wa.me/?text=${encodeURIComponent(text)}`;
      break;
    default:
      return;
  }
  window.open(shareUrl, '_blank', 'width=600,height=400');
}

// Función para copiar enlace de la tarea
function copyTaskLink(taskId) {
  const url = `${window.location.origin}/tasks/${taskId}`;
  navigator.clipboard.writeText(url).then(() => {
    showNotification('¡Enlace copiado!', 'success');
  }).catch(() => {
    prompt('Por favor, copia este enlace:', url);
  });
}

// Cerrar modal y restaurar scroll
document.getElementById('closeTaskModal').addEventListener('click', function() {
  document.getElementById('taskModal').style.display = 'none';
  document.body.style.overflow = '';
});
document.getElementById('taskModal').addEventListener('click', function(e) {
  if (e.target === this) {
    this.style.display = 'none';
    document.body.style.overflow = '';
  }
});

// Ejemplo de función para participar en tarea
function participateInTask(taskId) {
  alert('Funcionalidad de participación próximamente.');
}

// Modifica loadTasksFromSupabase para usar el modal y listeners
async function loadTasksFromSupabase(filter = "all", searchTerm = "") {
  currentFilter = filter;
  let query = supabase
    .from('tasks')
    .select('*')
    .order('created_at', { ascending: false });

  if (filter !== "all") {
    query = query.eq('category', filter);
  }
  if (searchTerm && searchTerm.trim() !== "") {
    query = query.or(`title.ilike.%${searchTerm}%,description.ilike.%${searchTerm}%,city.ilike.%${searchTerm}%,country.ilike.%${searchTerm}%`);
  }
  const { data: tasks, error } = await query;
  const tasksList = document.getElementById('tasksList');
  if (error) {
    tasksList.innerHTML = '<div style="color:#e53e3e;text-align:center;">Error al cargar las tareas.</div>';
    return;
  }
  tasksList.innerHTML = '';
  if (!tasks || tasks.length === 0) {
    tasksList.innerHTML = '<div style="color:#6b7280;text-align:center;padding:2rem;grid-column:1/-1;">No se encontraron tareas.</div>';
    return;
  }
  
  // 1. Carga todas las causas una sola vez antes de renderizar las tareas
  const { data: causes } = await supabase.from('causes').select('id, title, photo_url');
  const causesMap = {};
  if (causes) {
    causes.forEach(c => causesMap[c.id] = c);
  }

  // Guardar las tareas en una variable global para acceder desde el modal
  window.tasks = tasks;
  
  tasks.forEach(task => {
    const urgentBadge = task.is_urgent ? `<div class="task-badge urgent"><i class="fas fa-exclamation-circle"></i> Urgente</div>` : "";
    const pointsBadge = `<div class="task-badge points"><i class="fas fa-star"></i> +${task.points || 0} pts</div>`;
    const location = task.city && task.country ? `${task.city}, ${task.country}` : "";
    let causeHtml = '';
    if (task.cause_id && causesMap[task.cause_id]) {
      const cause = causesMap[task.cause_id];
      causeHtml = `
        <div class="linked-cause" style="display:flex;align-items:center;gap:0.5rem;">
          <i class="fas fa-link" style="color:var(--primary);"></i>
          <img src="${cause.photo_url || '/img/causa-default.jpg'}" alt="${cause.title}" style="width:22px;height:22px;object-fit:cover;border-radius:50%;border:1px solid #e5e7eb;">
          <span style="color:var(--primary);font-weight:600;">${cause.title}</span>
        </div>
      `;
    }
    const card = document.createElement('div');
    card.className = 'task-card';
    card.innerHTML = `
      <div class="task-image">
        <img src="${task.photo_url || '/img/task-default.jpg'}" alt="${task.title}" onerror="this.src='/img/task-default.jpg'">
        ${urgentBadge}
        ${pointsBadge}
      </div>
      <div class="task-content">
        <h3>${task.title}</h3>
        <p>${task.description.substring(0, 100)}${task.description.length > 100 ? '...' : ''}</p>
        ${causeHtml}
        <div class="task-meta">
          <div class="meta-item"><i class="fas fa-map-marker-alt"></i> ${location}</div>
          <div class="meta-item"><i class="fas fa-users"></i> ${task.participants || 0} participantes</div>
          <div class="beneficiaries-count">
            <i class="fas fa-heart"></i> Beneficia a ${task.beneficiaries || 0} personas
          </div>
        </div>
        <div class="task-progress">
          <div class="progress-bar">
            <div class="progress-fill" style="width: ${Math.min(Math.round((task.participants / task.beneficiaries) * 100), 100)}%"></div>
          </div>
          <div class="progress-info">
            <span>${task.participants || 0} participantes</span>
            <span>Meta: ${task.beneficiaries || 0}</span>
          </div>
        </div>
        <div class="task-actions">
          <button class="btn btn-primary view-task-btn" data-task-id="${task.id}">Ver más</button>
          <button class="btn btn-accent participate-btn" data-task-id="${task.id}">Participar</button>
        </div>
      </div>
    `;
    tasksList.appendChild(card);
  });
  
  // Agregar event listeners para los botones de ver más
  document.querySelectorAll('.view-task-btn').forEach(btn => {
    btn.addEventListener('click', function(e) {
      e.preventDefault();
      const taskId = this.getAttribute('data-task-id');
      showTaskModal(taskId);
    });
  });
  
  // Agregar event listeners para los botones de participar
  document.querySelectorAll('.participate-btn').forEach(btn => {
    btn.addEventListener('click', function(e) {
      e.preventDefault();
      const taskId = this.getAttribute('data-task-id');
      participateInTask(taskId);
    });
  });
}

// Cargar causas en el select al abrir el modal de crear tarea
async function loadCausesForSelect() {
  const select = document.getElementById('cause-select');
  // Destruye Choices antes de modificar el select
  if (causeChoices) {
    causeChoices.destroy();
    causeChoices = null;
  }
  select.innerHTML = '<option value="">Selecciona una causa</option>';
  const { data: causes, error } = await supabase.from('causes').select('id, title');
  console.log('Causas encontradas:', causes);
  if (error) {
    alert('Error cargando causas: ' + error.message);
    return;
  }
  if (causes && causes.length > 0) {
    causes.forEach(cause => {
      const option = document.createElement('option');
      option.value = cause.id;
      option.textContent = cause.title; // <-- usa title aquí
      select.appendChild(option);
    });
  }
  causeChoices = new Choices(select, {
    searchEnabled: true,
    itemSelectText: '',
    shouldSort: false,
    placeholder: true,
    placeholderValue: 'Selecciona una causa',
    removeItemButton: true,
    noResultsText: 'No se encontraron causas',
  });
}

// Geocodificación automática al cambiar ciudad o país
async function geocodeCityCountry() {
  const city = document.getElementById('city').value.trim();
  const country = document.getElementById('country').value.trim();
  if (!city || !country) return;

  const query = encodeURIComponent(`${city}, ${country}`);
  const url = `https://nominatim.openstreetmap.org/search?q=${query}&format=json&limit=1`;

  try {
    const res = await fetch(url, { headers: { 'Accept-Language': 'es' } });
    const data = await res.json();
    if (data && data.length > 0) {
      document.getElementById('lat').value = data[0].lat;
      document.getElementById('lng').value = data[0].lon;
    } else {
      document.getElementById('lat').value = '';
      document.getElementById('lng').value = '';
    }
  } catch (e) {
    document.getElementById('lat').value = '';
    document.getElementById('lng').value = '';
  }
}

document.getElementById('city').addEventListener('change', geocodeCityCountry);
document.getElementById('country').addEventListener('change', geocodeCityCountry);

// Función para mostrar el modal de causa
async function showCauseModal(causeId) {
  const { data: cause, error } = await supabase
    .from('causes')
    .select('*')
    .eq('id', causeId)
    .single();

  if (error || !cause) {
    alert('No se pudo cargar la causa.');
    return;
  }

  document.getElementById('causeModalBody').innerHTML = `
    <h2 style="color:var(--primary);margin-bottom:1rem;">${cause.title}</h2>
    <img src="${cause.photo_url || '/img/causa-default.jpg'}" alt="${cause.title}" style="width:100%;max-width:320px;border-radius:8px;margin-bottom:1rem;">
    <p style="color:#4b5563;">${cause.description || 'Sin descripción.'}</p>
  `;
  document.getElementById('causeModal').classList.add('active');
  document.body.style.overflow = 'hidden';
}

document.getElementById('closeCauseModal').onclick = function() {
  document.getElementById('causeModal').classList.remove('active');
  document.body.style.overflow = '';
};
document.getElementById('causeModal').onclick = function(e) {
  if (e.target === this) {
    this.classList.remove('active');
    document.body.style.overflow = '';
  }
};
</script>
{% endblock %}
{% extends "layout.njk" %}

{% block title %}Solidarity - Comunidades{% endblock %}

{% block head %}
  {{ super() }}
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
  <style>
    :root {
      --primary: #4a6fa5;
      --primary-dark: #166088;
      --gray: #e2e8f0;
      --white: #fff;
      --accent: #4fc3a1;
      --accent-dark: #3da58a;
      --urgent: #e53e3e;
      --radius: 1.7rem;
    }

    .main-container {
      max-width: 1200px;
      margin: 2rem auto;
      padding: 0 2rem;
    }

    .section-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;
    }

    .section-header h1 {
      font-size: 2rem;
      color: var(--primary);
      font-weight: 700;
    }

    .search-container {
      margin-bottom: 2rem;
      display: flex;
      align-items: center;
      gap: 0.7rem;
    }

    .search-container input {
      flex: 1;
      padding: 0.6rem 1.2rem;
      border-radius: 7px;
      border: 1.5px solid var(--gray);
      font-size: 1.05rem;
      outline: none;
      transition: border 0.2s;
      background: #fff;
    }

    .search-container input:focus {
      border-color: var(--primary);
    }

    .tabs {
      display: flex;
      border-bottom: 1px solid var(--gray);
      margin-bottom: 2rem;
    }

    .tab {
      padding: 0.75rem 1.5rem;
      cursor: pointer;
      position: relative;
      font-weight: 500;
      color: #6b7280;
      background: none;
      border: none;
      outline: none;
    }

    .tab.active {
      color: var(--primary);
      font-weight: 600;
    }

    .tab.active::after {
      content: '';
      position: absolute;
      bottom: -1px;
      left: 0;
      width: 100%;
      height: 3px;
      background: var(--primary);
    }

    /* Intro y destacados */
    .teams-intro {
      background: linear-gradient(135deg, #f0f7ff 0%, #e6f0fa 100%);
      border-radius: 16px;
      padding: 2.5rem;
      margin-bottom: 3rem;
      display: flex;
      align-items: center;
      gap: 2rem;
      border: 1px solid var(--gray);
    }

    .teams-intro-icon {
      font-size: 3.5rem;
      color: var(--accent);
    }

    .teams-intro-content h2 {
      font-size: 1.8rem;
      color: var(--primary);
      margin-bottom: 0.5rem;
    }

    .teams-intro-content p {
      color: #4a5568;
      line-height: 1.6;
    }

    .teams-highlights {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
      gap: 1.5rem;
      margin-bottom: 3rem;
    }

    .highlight-card {
      background: white;
      border-radius: 10px;
      padding: 1.5rem;
      box-shadow: 0 5px 15px rgba(0,0,0,0.05);
      border: 1px solid var(--gray);
      transition: all 0.3s ease;
    }

    .highlight-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 25px rgba(0,0,0,0.1);
      border-color: var(--accent);
    }

    .highlight-icon {
      font-size: 1.8rem;
      color: var(--accent);
      margin-bottom: 1rem;
    }

    .highlight-title {
      font-size: 1.1rem;
      font-weight: 600;
      color: var(--primary);
      margin-bottom: 0.5rem;
    }

    .highlight-desc {
      color: #6b7280;
      font-size: 0.95rem;
      line-height: 1.5;
    }

    /* Modal y formulario */
    .modal-bg {
      display: none;
      position: fixed;
      top: 0; left: 0; width: 100vw; height: 100vh;
      background: rgba(0,0,0,0.35);
      z-index: 9999;
      align-items: center;
      justify-content: center;
    }
    .modal-bg.active { display: flex; }
    .modal-content {
      background: #fff;
      border-radius: 18px;
      max-width: 540px;
      width: 95vw;
      padding: 2.5rem 1.5rem 2rem 1.5rem;
      box-shadow: 0 8px 32px rgba(0,0,0,0.13);
      position: relative;
      animation: fadeIn 0.3s;
      max-height: 90vh;
      overflow-y: auto;
    }
    .close-modal {
      position: absolute;
      top: 1.1rem; right: 1.3rem;
      background: none;
      border: none;
      font-size: 2rem;
      color: #aaa;
      cursor: pointer;
      transition: color 0.2s;
    }
    .close-modal:hover { color: var(--primary, #4a6fa5); }
    .create-team-title {
      font-size: 1.5rem;
      font-weight: 800;
      color: var(--primary, #4a6fa5);
      margin-bottom: 1.2rem;
      text-align: center;
    }
    .team-form .form-group label { 
      font-weight: 600; 
      color: var(--primary, #4a6fa5); 
      margin-bottom: 0.5rem;
      display: block;
    }
    .team-form .form-group input,
    .team-form .form-group textarea,
    .team-form .form-group select {
      width: 100%;
      padding: 0.7rem 1rem;
      border-radius: 8px;
      border: 1px solid #e5e7eb;
      margin-bottom: 0.2rem;
      font-size: 1rem;
      background: #f8fafc;
      transition: border 0.2s;
    }
    .team-form .form-group input:focus,
    .team-form .form-group textarea:focus,
    .team-form .form-group select:focus {
      border: 1.5px solid var(--accent, #4fc3a1);
      outline: none;
      background: #fff;
    }
    .team-form .form-group textarea {
      min-height: 90px;
      resize: vertical;
    }
    .form-inline-group {
      display: flex;
      gap: 1rem;
    }
    .form-inline-group .form-group { flex: 1; }
    .preview-img {
      width: 100%;
      max-width: 320px;
      height: 180px;
      object-fit: cover;
      border-radius: 10px;
      margin-top: 0.5rem;
      border: 1px solid #e5e7eb;
      display: none;
    }
    .after-create {
      margin-top: 2rem;
      background: var(--primary-light, #e6f0fa);
      color: #444;
      border-radius: 10px;
      padding: 1.5rem 1rem;
      text-align: center;
    }

    /* Grid clásico de comunidades */
    .teams-grid-classic {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
      gap: 2rem;
    }
    .team-card-classic {
      background: white;
      border-radius: 12px;
      overflow: hidden;
      box-shadow: 0 5px 15px rgba(0,0,0,0.05);
      transition: all 0.3s ease;
      border: 1px solid var(--gray);
    }
    .team-card-classic:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 25px rgba(0,0,0,0.1);
    }
    .team-image-classic {
      height: 180px;
      overflow: hidden;
      position: relative;
    }
    .team-image-classic img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: transform 0.3s ease;
    }
    .team-card-classic:hover .team-image-classic img {
      transform: scale(1.05);
    }
    .team-badge-classic {
      position: absolute;
      top: 1rem;
      right: 1rem;
      background: rgba(255, 255, 255, 0.9);
      padding: 0.3rem 0.8rem;
      border-radius: 50px;
      font-size: 0.8rem;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
      z-index: 2;
    }
    .team-badge-classic.points {
      background: var(--primary);
      color: white;
      left: 1rem;
      right: auto;
    }
    .team-badge-classic[style*="background:#ffe066"] {
      background: #ffe066 !important;
      color: #b8860b !important;
    }
    .team-badge-classic[style*="background:var(--gray)"] {
      background: var(--gray) !important;
      color: var(--primary-dark) !important;
    }
    .team-badge-classic[style*="background:#ffd600"] {
      background: #ffd600 !important;
      color: #a67c00 !important;
    }
    .team-content-classic {
      padding: 1.5rem;
    }
    .team-content-classic h3 {
      font-size: 1.3rem;
      margin-bottom: 0.8rem;
      color: #2d3748;
    }
    .team-content-classic p {
      color: #6b7280;
      margin-bottom: 1.5rem;
      font-size: 0.95rem;
      line-height: 1.6;
    }
    .team-meta-classic {
      display: flex;
      gap: 1rem;
      margin-bottom: 1.5rem;
      font-size: 0.85rem;
      flex-wrap: wrap;
    }
    .meta-item-classic {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      color: #6b7280;
    }
    .meta-item-classic i {
      color: var(--primary);
    }
    .members-count-classic {
      display: inline-flex;
      align-items: center;
      background: #f0f9ff;
      color: var(--primary);
      padding: 0.3rem 0.8rem;
      border-radius: 50px;
      font-size: 0.85rem;
      font-weight: 600;
    }
    .members-count-classic i {
      margin-right: 0.3rem;
    }
    .team-progress-classic {
      margin-bottom: 1.5rem;
    }
    .team-actions-classic {
      display: flex;
      gap: 0.8rem;
    }

    /* Barra de progreso y tags (si no están en tu style.css) */
    /* Barra de progreso igual que causas */
    .progress-bar {
      width: 100%;
      background: var(--gray);
      border-radius: 4px;
      height: 8px;
      position: relative;
      overflow: hidden;
      margin-bottom: 0.5rem;
      box-shadow: none;
    }
    .progress-fill {
      height: 100%;
      background: var(--primary);
      border-radius: 4px;
      transition: width 0.4s cubic-bezier(.4,1,.7,1);
      color: #fff;
      font-size: 0.95em;
      font-weight: 700;
      display: flex;
      align-items: center;
      justify-content: flex-end;
      padding-right: 8px;
      box-shadow: none;
    }
    .progress-info {
      display: flex;
      justify-content: space-between;
      font-size: 0.9rem;
      color: #6b7280;
    }
    .team-badge-classic[style*="background:#ffe600"] {
      background: #ffe600 !important;
      color: #b8860b !important;
    }

    .pagination {
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 1.2rem;
      margin: 3rem 0 1.5rem 0;
    }
    .pagination .btn {
      min-width: 40px;
      height: 40px;
      border-radius: 50%;
      padding: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.15rem;
    }
    #pageInfo {
      font-weight: 600;
      color: var(--primary);
      font-size: 1.1rem;
      min-width: 38px;
      text-align: center;
      letter-spacing: 0.03em;
    }

    .team-tags-classic {
      display: flex;
      flex-wrap: wrap;
      gap: 0.3em;
      margin-bottom: 0.7em;
    }
    .team-tag-classic {
      background: #e6f0fa;
      color: var(--primary);
      border-radius: 50px;
      padding: 0.22em 0.95em;
      font-size: 0.92em;
      font-weight: 600;
      margin-bottom: 0.2em;
      margin-right: 0.3em;
      transition: background 0.2s, color 0.2s;
      border: 1px solid #dbeafe;
      letter-spacing: 0.01em;
      white-space: nowrap;
    }
    .team-tag-classic.tag-more {
      background: #ffe600;
      color: #a67c00;
      border: 1px solid #ffe600;
    }

    @media (max-width: 768px) {
      .teams-intro {
        flex-direction: column;
        text-align: center;
        padding: 1.5rem;
      }
      .teams-highlights {
        grid-template-columns: 1fr;
      }
      .team-card-classic {
        margin-bottom: 1.5rem;
      }
    }
    /* Forzar el mismo border-radius en todos los botones, aunque tengan estilos inline */
    button,
    .btn,
    .btn-primary,
    .btn-accent,
    .btn-outline,
    .btn-secondary,
    .modal-content button,
    .team-actions-classic .btn {
      border-radius: 2rem !important;
      font-weight: 600;
    }
  </style>
{% endblock %}

{% block content %}
  <!-- Modal para usuarios no logueados -->
  <div class="modal-bg" id="loginModal">
    <div class="modal-content">
      <h3>Para crear una comunidad</h3>
      <p>Debes ser un usuario registrado. ¿Deseas iniciar sesión o registrarte ahora?</p>
      <div class="modal-buttons">
        <a href="/login?return=/teams" class="btn btn-primary">Iniciar Sesión</a>
        <a href="/register?return=/teams" class="btn btn-outline">Registrarse</a>
        <button id="cancelModal" class="btn">Cancelar</button>
      </div>
    </div>
  </div>

  <!-- Modal CREAR COMUNIDAD (idéntico a tareas, solo cambia el contenido específico) -->
  <div class="modal-bg" id="createTeamModal">
    <div class="modal-content">
      <button class="close-modal" id="closeCreateTeamModal" title="Cerrar">&times;</button>
      <div class="create-task-title" style="font-size:1.5rem; font-weight:800; color:var(--primary,#4a6fa5); margin-bottom:1.2rem; text-align:center;">
        <i class="fas fa-users"></i> Crear Nueva Comunidad
      </div>
      <form class="team-form" id="teamForm" autocomplete="off" enctype="multipart/form-data">
        <div class="form-group">
          <label for="teamName">Nombre de la comunidad</label>
          <input type="text" id="teamName" name="name" placeholder="Ej: Voluntarios por el Bosque" required>
        </div>
        <div class="form-group">
          <label for="teamPhoto">Foto o logo</label>
          <input type="file" id="teamPhoto" name="photo" accept="image/*">
          <img id="previewTeamImg" class="preview-img" alt="Vista previa de la foto" style="display:none;">
        </div>
        <div class="form-group">
          <label for="teamSummary">Resumen (opcional)</label>
          <input type="text" id="teamSummary" name="summary" maxlength="120" placeholder="Breve resumen visible en la tarjeta">
        </div>
        <div class="form-group">
          <label for="teamDesc">Descripción</label>
          <textarea id="teamDesc" name="description" rows="4" required placeholder="Describe la misión, valores y objetivos de la comunidad"></textarea>
        </div>
        <div class="form-group">
          <label for="teamCategory">Categoría</label>
          <select id="teamCategory" name="category" required>
            <option value="">Selecciona una</option>
            <option value="medio_ambiente">Medio Ambiente</option>
            <option value="educacion">Educación</option>
            <option value="salud">Salud</option>
            <option value="animales">Animales</option>
            <option value="comunidad">Comunidad</option>
            <option value="otros">Otros</option>
          </select>
        </div>
        <div class="form-inline-group">
          <div class="form-group">
            <label for="teamPrivacy">Privacidad</label>
            <select id="teamPrivacy" name="privacy" required>
              <option value="public">Pública (cualquiera puede unirse)</option>
              <option value="private">Privada (requiere invitación)</option>
            </select>
          </div>
          <div class="form-group">
            <label for="teamGoal">Meta de recaudación (€) (opcional)</label>
            <input type="number" id="teamGoal" name="goal" min="0" placeholder="Ej: 1000">
          </div>
        </div>
        <div class="form-group">
          <label for="teamTags">Etiquetas (separadas por comas)</label>
          <input type="text" id="teamTags" name="tags" placeholder="ej: reciclaje, voluntariado, jóvenes">
        </div>
        <button type="submit" class="btn btn-primary" style="margin-top:1rem;">
          <i class="fas fa-plus"></i> Crear Comunidad
        </button>
      </form>
      <div class="after-create" id="afterCreateTeam" style="display:none;">
        <h3>¡Comunidad creada con éxito!</h3>
        <p>¿Quieres invitar miembros o ver todas las comunidades?</p>
        <a href="#" id="inviteMembersBtn" class="btn btn-accent">
          <i class="fas fa-user-plus"></i> Invitar miembros
        </a>
        <br>
        <a href="/teams" class="btn btn-outline" style="margin-top:1rem;">
          <i class="fas fa-users"></i> Ver comunidades
        </a>
      </div>
    </div>
  </div>

  <!-- Modal de ver más comunidad (idéntico a tareas, solo cambia textos/campos) -->
  <div id="teamModal" class="modal-bg">
    <div class="modal-content" style="background:#fff; border-radius:18px; max-width:800px; width:95vw; padding:2rem; box-shadow:0 8px 32px rgba(74,111,165,0.13); position:relative; max-height:90vh; overflow-y:auto;">
      <button id="closeTeamModal" style="position:absolute; top:1.5rem; right:1.5rem; background:none; border:none; font-size:1.8rem; color:#6b7280; cursor:pointer; transition:color 0.2s;" onmouseover="this.style.color='#4a6fa5'" onmouseout="this.style.color='#6b7280'">&times;</button>
      <div id="teamModalBody" style="padding:0.5rem;">
        <!-- Contenido dinámico -->
      </div>
    </div>
  </div>

  <!-- Contenido principal de la página de comunidades -->
  <div class="main-container">
    <!-- Sección introductoria -->
    <div class="teams-intro">
      <div class="teams-intro-icon">
        <i class="fas fa-people-group"></i>
      </div>
      <div class="teams-intro-content">
        <h2>Comunidades Solidarias</h2>
        <p>Únete a grupos de personas que trabajan juntas para generar impacto positivo. Colabora en causas, tareas y retos compartidos, y multiplica tu capacidad de ayudar a quienes más lo necesitan.</p>
      </div>
    </div>
    
    <!-- Destacados -->
    <div class="teams-highlights">
      <div class="highlight-card">
        <div class="highlight-icon"><i class="fas fa-layer-group"></i></div>
        <div class="highlight-title">Multi-actividad</div>
        <div class="highlight-desc">Cada comunidad gestiona múltiples acciones simultáneas: causas, tareas, retos y voluntariados.</div>
      </div>
      <div class="highlight-card">
        <div class="highlight-icon"><i class="fas fa-comments"></i></div>
        <div class="highlight-title">Coordinación</div>
        <div class="highlight-desc">Organizaos mediante el chat interno, calendario compartido y tableros de progreso.</div>
      </div>
      <div class="highlight-card">
        <div class="highlight-icon"><i class="fas fa-heart"></i></div>
        <div class="highlight-title">Impacto colectivo</div>
        <div class="highlight-desc">Suma tus puntos individuales al impacto total de la comunidad.</div>
      </div>
      <div class="highlight-card">
        <div class="highlight-icon"><i class="fas fa-hands-helping"></i></div>
        <div class="highlight-title">Beneficiarios</div>
        <div class="highlight-desc">Visualiza el número total de personas y causas beneficiadas por vuestro equipo.</div>
      </div>
    </div>
    
    <!-- Cabecera con búsqueda y creación -->
    <div class="section-header">
      <h1>Explora Comunidades</h1>
      <a href="#" id="create-team-btn" class="btn btn-primary">
        <i class="fas fa-plus"></i> Crear Comunidad
      </a>
    </div>
    
    <div class="search-container">
      <input type="text" id="search-input" placeholder="Buscar por nombre, descripción, etiquetas...">
      <i class="fas fa-search" style="color:#4a6fa5;"></i>
    </div>
    
    <!-- Tabs de categorías -->
    <div class="tabs">
      <button class="tab active" data-filter="all">Todas</button>
      <button class="tab" data-filter="medio_ambiente">Medio Ambiente</button>
      <button class="tab" data-filter="educacion">Educación</button>
      <button class="tab" data-filter="salud">Salud</button>
      <button class="tab" data-filter="animales">Animales</button>
      <button class="tab" data-filter="comunidad">Comunidad</button>
    </div>
    
    <!-- Grid de comunidades -->
    <div class="teams-grid" id="teamsGrid">
      <!-- Las comunidades se cargarán dinámicamente -->
    </div>
    
    <!-- Paginación -->
    <div class="pagination" id="pagination">
      <button id="prevPage" class="btn btn-outline" disabled>
        <i class="fas fa-chevron-left"></i>
      </button>
      <span id="pageInfo">1</span>
      <button id="nextPage" class="btn btn-outline" disabled>
        <i class="fas fa-chevron-right"></i>
      </button>
    </div>
  </div>
{% endblock %}

{% block scripts %}
  {{ super() }}
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Variables para paginación
      let currentPage = 1;
      const itemsPerPage = 9;
      let allTeams = [];
      let filteredTeams = [];
      
      // Inicializar
      loadTeams();
      
      // Modal para crear equipo
      document.getElementById('create-team-btn').onclick = async function(e) {
        e.preventDefault();
        const { data: { session } } = await supabase.auth.getSession();
        if (session?.user) {
          document.getElementById('createTeamModal').classList.add('active');
          document.body.style.overflow = 'hidden';
        } else {
          document.getElementById('loginModal').classList.add('active');
        }
      };
      document.getElementById('closeCreateTeamModal').onclick = function() {
        document.getElementById('createTeamModal').classList.remove('active');
        document.body.style.overflow = '';
        document.getElementById('teamForm').reset();
        document.getElementById('previewTeamImg').style.display = 'none';
        document.getElementById('teamForm').style.display = 'block';
        document.getElementById('afterCreateTeam').style.display = 'none';
      };
      document.getElementById('createTeamModal').onclick = function(e) {
        if (e.target === this) {
          this.classList.remove('active');
          document.body.style.overflow = '';
          document.getElementById('teamForm').style.display = 'block';
          document.getElementById('afterCreateTeam').style.display = 'none';
        }
      };
      document.getElementById('cancelModal').onclick = function() {
        document.getElementById('loginModal').classList.remove('active');
      };
      document.getElementById('loginModal').onclick = function(e) {
        if (e.target === this) this.classList.remove('active');
      };
      // Vista previa de imagen
      document.getElementById('teamPhoto').addEventListener('change', function(e) {
        const file = e.target.files[0];
        const preview = document.getElementById('previewTeamImg');
        if (file) {
          const reader = new FileReader();
          reader.onload = function(evt) {
            preview.src = evt.target.result;
            preview.style.display = 'block';
          };
          reader.readAsDataURL(file);
        } else {
          preview.src = '';
          preview.style.display = 'none';
        }
      });

      // Envío del formulario de creación de comunidad
      document.getElementById('teamForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        const { data: { session } } = await supabase.auth.getSession();
        if (!session?.user) {
          alert('Debes iniciar sesión para crear una comunidad');
          return;
        }

        const name = document.getElementById('teamName').value;
        const description = document.getElementById('teamDesc').value;
        const summary = document.getElementById('teamSummary').value;
        const category = document.getElementById('teamCategory').value;
        const privacy = document.getElementById('teamPrivacy').value;
        const tags = document.getElementById('teamTags').value
          .split(',')
          .map(t => t.trim())
          .filter(Boolean);
        const goal = document.getElementById('teamGoal').value || null;
        // Si usas ciudad, país, beneficiarios:
        // const city = document.getElementById('teamCity').value;
        // const country = document.getElementById('teamCountry').value;
        // const beneficiaries = parseInt(document.getElementById('teamBeneficiaries').value) || 0;

        const fileInput = document.getElementById('teamPhoto');
        let photo = null;

        try {
          // Subir imagen si existe
          if (fileInput.files && fileInput.files[0]) {
            const file = fileInput.files[0];
            const fileExt = file.name.split('.').pop();
            const fileName = `${Date.now()}_${Math.random().toString(36).substring(2)}.${fileExt}`;
            const filePath = `teams/${fileName}`;
            const { error: uploadError } = await supabase.storage
              .from('teams')
              .upload(filePath, file);
            if (uploadError) throw uploadError;
            const { data: urlData } = supabase.storage
              .from('teams')
              .getPublicUrl(filePath);
            photo = urlData.publicUrl;
          }

          // Crear la comunidad
          const { data, error } = await supabase
            .from('teams')
            .insert([{
              name,
              description,
              summary,
              category,
              privacy,
              tags,
              photo,
              goal,
              creator_id: session.user.id,
              created_at: new Date().toISOString()
              // city,
              // country,
              // beneficiaries
            }])
            .select();

          if (error) throw error;

          // Añadir al usuario como admin de la comunidad
          await supabase
            .from('team_members')
            .insert([{
              team_id: data[0].id,
              user_id: session.user.id,
              role: 'admin',
              joined_at: new Date().toISOString()
            }]);

          document.getElementById('teamForm').style.display = 'none';
          document.getElementById('afterCreateTeam').style.display = 'block';
          document.getElementById('inviteMembersBtn').href = `/teams/${data[0].id}/invite`;
          await loadTeams(); // O la función que recarga los equipos desde Supabase

        } catch (error) {
          console.error('Error creating team:', error);
          alert(`Error al crear la comunidad: ${error.message}`);
        }
      });

      // Tabs de categorías
      document.querySelectorAll('.tab').forEach(tab => {
        tab.addEventListener('click', function() {
          document.querySelector('.tab.active').classList.remove('active');
          this.classList.add('active');
          currentPage = 1; // Resetear a primera página
          filterAndRenderTeams();
        });
      });

      // Búsqueda
      document.getElementById('search-input').addEventListener('input', function() {
        currentPage = 1; // Resetear a primera página
        filterAndRenderTeams();
      });

      // Paginación
      document.getElementById('prevPage').addEventListener('click', function() {
        if (currentPage > 1) {
          currentPage--;
          renderTeams();
        }
      });

      document.getElementById('nextPage').addEventListener('click', function() {
        const totalPages = Math.ceil(filteredTeams.length / itemsPerPage);
        if (currentPage < totalPages) {
          currentPage++;
          renderTeams();
        }
      });

      // Función para cargar equipos desde Supabase
      async function loadTeams() {
        try {
          const { data: teams, error } = await supabase
            .from('teams')
            .select('*, team_members(user_id)')
            .order('created_at', { ascending: false });

          if (error) throw error;

          allTeams = teams || [];
          filteredTeams = [...allTeams];
          currentPage = 1;
          renderTeams();

        } catch (error) {
          console.error('Error loading teams:', error);
          allTeams = [];
          filteredTeams = [];
          renderTeams();
        }
      }

      // Función para cargar equipos del usuario
      async function loadUserTeams() {
        try {
          // 1. Obtener los equipos donde el usuario es miembro
          const { data: memberships, error: membershipsError } = await supabase
            .from('team_members')
            .select('team_id, role')
            .eq('user_id', session.user.id);

          if (membershipsError) throw membershipsError;

          // 2. Obtener los equipos donde el usuario es el creador
          const { data: createdTeams, error: createdTeamsError } = await supabase
            .from('teams')
            .select('*')
            .eq('created_by', session.user.id); // Asegúrate de tener este campo en tu tabla teams

          if (createdTeamsError) throw createdTeamsError;

          // 3. Obtener los detalles de los equipos donde es miembro
          const teamIds = memberships.map(m => m.team_id);
          let { data: teams, error: teamsError } = await supabase
            .from('teams')
            .select('*')
            .in('id', teamIds)
            .order('created_at', { ascending: false });

          if (teamsError) throw teamsError;

          // 4. Combinar y eliminar duplicados (si el creador también es miembro)
          let allTeams = [
            ...teams.map(team => ({
              ...team,
              user_role: memberships.find(m => m.team_id === team.id)?.role,
              is_admin: memberships.find(m => m.team_id === team.id)?.role === 'admin',
              is_moderator: memberships.find(m => m.team_id === team.id)?.role === 'moderator'
            })),
            ...createdTeams
              .filter(team => !teamIds.includes(team.id))
              .map(team => ({
                ...team,
                user_role: 'founder',
                is_admin: true,
                is_moderator: false
              }))
          ]; // <-- CORRECTO

          filteredTeams = [...allTeams];
          currentPage = 1;
          renderTeams();

        } catch (error) {
          console.error('Error loading user teams:', error);
          showEmptyState();
        }
      }

      // Función para filtrar equipos
      function filterAndRenderTeams() {
        const activeFilter = document.querySelector('.tab.active').getAttribute('data-filter');
        const searchTerm = document.getElementById('search-input').value.toLowerCase();
        
        filteredTeams = allTeams.filter(team => {
          // Filtrar por categoría
          if (activeFilter !== 'all' && team.category !== activeFilter) {
            return false;
          }
          
          // Filtrar por búsqueda
          if (searchTerm) {
            const matchesName = team.name && team.name.toLowerCase().includes(searchTerm);
            const matchesDesc = team.description && team.description.toLowerCase().includes(searchTerm);
            const matchesTags = team.tags && team.tags.some(tag => tag && tag.toLowerCase().includes(searchTerm));
            return matchesName || matchesDesc || matchesTags;
          }
          
          return true;
        });
        
        renderTeams();
      }

      // Función para renderizar equipos con paginación
      async function renderTeams() {
        const { data: { session } } = await supabase.auth.getSession();
        const userId = session?.user?.id;

        const startIdx = (currentPage - 1) * itemsPerPage;
        const endIdx = startIdx + itemsPerPage;
        const paginatedTeams = filteredTeams.slice(startIdx, endIdx);

        const container = document.getElementById('teamsGrid');
        container.className = 'teams-grid-classic';
        container.innerHTML = '';

        if (paginatedTeams.length === 0) {
          container.innerHTML = `
            <div class="empty-state">
              <i class="fas fa-users-slash"></i>
              <h3>No se encontraron comunidades</h3>
              <p>No hay comunidades que coincidan con tu búsqueda.</p>
              <button id="createTeamEmptyBtn" class="btn btn-primary">
                <i class="fas fa-plus"></i> Crear primera comunidad
              </button>
            </div>
          `;
          document.getElementById('createTeamEmptyBtn').addEventListener('click', () => {
            document.getElementById('create-team-btn').click();
          });
          document.getElementById('pagination').style.display = 'none';
          return;
        }

        document.getElementById('pagination').style.display = 'flex';

        paginatedTeams.forEach(team => {
          // Calcula badges y tags
          const membersCount = team.members_count || 0;
          const tagsHtml = team.tags?.length
            ? `<div class="team-tags-classic" style="margin-bottom:0.8em;">${team.tags.slice(0, 4).map(tag => `<span class="team-tag-classic">${tag}</span>`).join('')}${team.tags.length > 4 ? `<span class="team-tag-classic tag-more">+${team.tags.length - 4}</span>` : ''}</div>`
            : '';
          const isTrending = membersCount >= 20 || (team.impact || 0) >= 1000;
          const recaudado = team.funds_raised || 0;
          const meta = team.goal || 1000;
          const porcentaje = meta ? Math.min(100, Math.round((recaudado / meta) * 100)) : 0;
          let badgePrivada = team.privacy === 'private'
            ? `<div class="team-badge-classic" style="top:1rem;right:1rem;background:var(--gray);color:var(--primary-dark);"><i class="fas fa-lock"></i> Privada</div>`
            : '';
          let badgeTrending = isTrending
            ? `<div class="team-badge-classic" style="top:${team.privacy === 'private' ? '3.2rem' : '1rem'};right:1rem;background:#ffe600;color:#b8860b;"><i class="fas fa-arrow-trend-up"></i> Trending</div>`
            : '';

          // ¿Es miembro?
          const isMember = team.team_members?.some(m => m.user_id === userId);

          const joinBtnHtml = isMember
            ? `<button class="btn btn-outline join-team-btn" data-team-id="${team.id}" disabled>
                <i class="fas fa-user-check"></i> Miembro
              </button>`
            : `<button class="btn btn-accent join-team-btn" data-team-id="${team.id}">
                <i class="fas fa-user-plus"></i> Unirse
              </button>`;

          const card = document.createElement('div');
          card.className = 'team-card-classic';
          card.innerHTML = `
            <div class="team-image-classic">
              <img src="${team.photo || 'https://via.placeholder.com/350x180?text=Comunidad'}" alt="${team.name}">
              <div class="team-badge-classic points" style="top:1rem;left:1rem;right:auto;background:var(--primary);color:#fff;">
                <i class="fas fa-bolt"></i> +${team.impact || 0} pts
              </div>
              ${badgePrivada}${badgeTrending}
            </div>
            <div class="team-content-classic">
              <h3>${team.name}</h3>
              <p>${team.summary || 'Esta comunidad no tiene resumen aún.'}</p>
              <div class="team-meta-classic" style="margin-bottom:1em;">
                <div class="meta-item-classic"><i class="fas fa-layer-group"></i> ${getCategoryName(team.category)}</div>
                <div class="meta-item-classic"><i class="fas fa-tasks"></i> ${team.activities_count || 0} actividades</div>
                <div class="meta-item-classic"><i class="fas fa-heart"></i> ${team.beneficiaries || 0} beneficiarios</div>
                <div class="meta-item-classic"><i class="fas fa-users"></i> <span class="members-count-classic">${membersCount}</span> miembros</div>
              </div>
              ${tagsHtml}
              <div class="team-progress-classic" style="margin-bottom:1.2em;">
                <div class="progress-bar">
                  <div class="progress-fill" style="width:${porcentaje}%;">${porcentaje > 10 ? porcentaje + '%' : ''}</div>
                </div>
                <div class="progress-info">
                  <span>${porcentaje}% completado</span>
                  <span>${recaudado} € de ${meta} €</span>
                </div>
              </div>
              <div class="team-actions-classic" style="margin-top:1.2em;">
                <button class="btn btn-primary btn-vermas-team" data-team-id="${team.id}">
                  <i class="fas fa-eye"></i> Ver más
                </button>
                ${joinBtnHtml}
              </div>
            </div>
          `;
          container.appendChild(card);
        });
        
        // Configurar botones de unirse
        document.querySelectorAll('.join-team-btn').forEach(btn => {
          btn.addEventListener('click', async function() {
            const teamId = this.getAttribute('data-team-id');
            const { data: { session } } = await supabase.auth.getSession();

            if (!session?.user) {
              document.getElementById('loginModal').classList.add('active');
              return;
            }

            // Bloquear UI
            this.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
            this.disabled = true;

            try {
              // 1. Insertar membresía (solo si no existe)
              const { data: existing, error: checkError } = await supabase
                .from('team_members')
                .select('id')
                .eq('team_id', teamId)
                .eq('user_id', session.user.id);

              if (checkError) throw checkError;
              if (existing && existing.length > 0) throw new Error('Ya eres miembro');

              const { error: insertError } = await supabase
                .from('team_members')
                .insert({
                  team_id: teamId,
                  user_id: session.user.id,
                  role: 'member'
                });

              if (insertError) throw insertError;

              // 2. Actualizar contador en la base de datos (RPC)
              const { error: updateError } = await supabase
                .rpc('increment_team_counter', {
                  team_id_input: teamId,
                  field_name: 'members_count'
                });

              if (updateError) throw updateError;

              // 3. Leer el número real de miembros desde Supabase
              const { data: teamData, error: fetchError } = await supabase
                .from('teams')
                .select('members_count')
                .eq('id', teamId)
                .single();

              if (fetchError) throw fetchError;

              // 4. Actualizar el número en la tarjeta SOLO con el valor real
              const card = this.closest('.team-card-classic');
              const countElement = card.querySelector('.members-count-classic');
              if (countElement) {
                countElement.textContent = teamData.members_count;
              }

              // 5. Cambiar el botón a "Miembro" y desactivar
              this.innerHTML = '<i class="fas fa-user-check"></i> Miembro';
              this.classList.remove('btn-accent');
              this.classList.add('btn-outline');
              this.disabled = true;

            } catch (error) {
              console.error('Error joining team:', error);
              this.innerHTML = '<i class="fas fa-user-plus"></i> Unirse';
              this.disabled = false;
              alert(error.message || 'Error al unirse');
            }
          });
        });

        updatePagination();
      }
      
      // Función para actualizar controles de paginación
      function updatePagination() {
        const totalPages = Math.max(1, Math.ceil(filteredTeams.length / itemsPerPage));
        document.getElementById('pageInfo').textContent = `${currentPage} / ${totalPages}`;
        document.getElementById('prevPage').disabled = currentPage <= 1;
        document.getElementById('nextPage').disabled = currentPage >= totalPages;
      }
      
      // Función auxiliar para nombres de categoría
      function getCategoryName(category) {
        const categories = {
          'medio_ambiente': 'Medio Ambiente',
          'educacion': 'Educación',
          'salud': 'Salud',
          'animales': 'Animales',
          'comunidad': 'Comunidad',
          'otros': 'Otros'
        };
        return categories[category] || 'General';
      }

      // Crear causa asociada a una comunidad y actualizar contador
      async function crearCausa({ title, description, teamId }) {
        // 1. Crear la causa con el team_id
        const { data, error } = await supabase
          .from('causes')
          .insert([{ title, description, team_id: teamId }]);
        if (error) {
          alert('Error al crear causa');
          return;
        }

        // 2. Incrementar el contador solo en esa comunidad
        await supabase.rpc('increment_team_counter', {
          team_id_input: teamId,
          field_name: 'causes_count'
        });
      }

      // Crear tarea asociada a una comunidad y actualizar contador
      async function crearTarea({ title, description, teamId }) {
        // 1. Crear la tarea con el team_id
        await supabase
          .from('tasks')
          .insert([{ title, description, team_id: teamId }]);
        // 2. Incrementar el contador de tareas en esa comunidad
        await supabase.rpc('increment_team_counter', {
          team_id_input: teamId,
          field_name: 'tasks_count'
        });
      }

      // Crear reto asociado a una comunidad y actualizar contador
      async function crearReto({ title, description, teamId }) {
        // 1. Crear el reto con el team_id
        await supabase
          .from('challenges')
          .insert([{ title, description, team_id: teamId }]);
        // 2. Incrementar el contador de retos en esa comunidad
        await supabase.rpc('increment_team_counter', {
          team_id_input: teamId,
          field_name: 'challenges_count'
        });
      }

      // Crear voluntariado asociado a una comunidad y actualizar contador
      async function crearVoluntariado({ title, description, teamId }) {
        // 1. Crear el voluntariado con el team_id
        await supabase
          .from('volunteering')
          .insert([{ title, description, team_id: teamId }]);
        // 2. Incrementar el contador de voluntariados en esa comunidad
        await supabase.rpc('increment_team_counter', {
          team_id_input: teamId,
          field_name: 'volunteering_count'
        });
      }

      // Crear o actualizar el contador de beneficiarios en una comunidad
      async function actualizarBeneficiarios(teamId, delta) {
        // 1. Actualizar el campo beneficiaries de la comunidad
        await supabase
          .from('teams')
          .update({ beneficiaries: supabase.raw(`beneficiaries + ${delta}`) })
          .eq('id', teamId);

        // 2. Llamar a la función RPC para actualizar el contador
        await supabase.rpc('increment_team_counter', {
          team_id_input: teamId,
          field_name: 'beneficiaries'
        });
      }

      // Abrir modal de ver más comunidad
      document.addEventListener('click', function(e) {
        const verMasBtn = e.target.closest('.btn-vermas-team');
        if (verMasBtn) {
          e.preventDefault();
          e.stopPropagation();
          const teamId = verMasBtn.dataset.teamId;
          showTeamModal(teamId);
        }
      });

      // Cerrar modal de ver más
      document.getElementById('closeTeamModal').onclick = function() {
        document.getElementById('teamModal').classList.remove('active');
        document.body.style.overflow = '';
      };
      document.getElementById('teamModal').onclick = function(e) {
        if (e.target === this) {
          this.classList.remove('active');
          document.body.style.overflow = '';
        }
      };

      // Modal de detalle de comunidad (igual que tasks/challenges)
      async function showTeamModal(teamId) {
        // 1. Carga la comunidad
        const { data: team, error } = await supabase
          .from('teams')
          .select('*')
          .eq('id', teamId)
          .single();

        if (error || !team) {
          alert('Error al cargar la comunidad');
          return;
        }

        // 2. Prepara datos
        const createdDate = new Date(team.created_at).toLocaleDateString('es-ES', {
          year: 'numeric',
          month: 'long',
          day: 'numeric'
        });
        const recaudado = team.funds_raised || 0;
        const meta = team.goal || 0;
        const porcentaje = meta ? Math.min(100, Math.round((recaudado / meta) * 100)) : 0;
        const beneficiaries = team.beneficiaries || 0;
        const membersCount = team.members?.length || 1;
        const impact = team.impact || 0;
        const category = getCategoryName(team.category);
        const privacy = team.privacy === 'private' ? 'Privada' : 'Pública';

        // 3. Renderiza el modal (estructura igual que tareas)
        document.getElementById('teamModalBody').innerHTML = `
          <div class="modal-task-container" style="padding:0;">
            <h1 class="modal-task-title" style="font-size:2rem; font-weight:800; color:var(--primary); margin-bottom:1.2rem; text-align:center; width:100%;">${team.name}</h1>
            <div style="display:flex; flex-wrap:wrap; gap:2.2rem; margin-bottom:1.5rem;">
              <div style="flex:1; min-width:320px; max-width:350px; position:relative;">
                <img src="${team.photo || 'https://via.placeholder.com/350x180?text=Comunidad'}" alt="Imagen de la comunidad" style="width:100%;height:200px;object-fit:cover;border-radius:12px;box-shadow:0 4px 12px rgba(0,0,0,0.08);">
                <div style="position:absolute;top:1rem;left:1rem;background:var(--primary);color:#fff;padding:0.4rem 1rem;border-radius:50px;font-size:0.95rem;font-weight:600;display:flex;align-items:center;gap:0.6rem;">
                  <i class="fas fa-users"></i> Comunidad
                </div>
                ${team.privacy === 'private' ? `
                <div style="position:absolute;top:1rem;right:1rem;background:var(--gray);color:var(--primary-dark);padding:0.4rem 1rem;border-radius:50px;font-size:0.95rem;font-weight:600;display:flex;align-items:center;gap:0.6rem;">
                  <i class="fas fa-lock"></i> Privada
                </div>` : ''}
              </div>
              <div style="flex:2;min-width:260px;display:flex;flex-direction:column;gap:1.2rem;justify-content:flex-start;">
                <div class="modal-cause-progress-container" style="background:#f8fafc;padding:1.2rem 1.2rem 1rem 1.2rem;border-radius:12px;margin-bottom:0.5rem;border:1px solid #e5e7eb;">
                  <div class="progress-bar">
                    <div class="progress-fill" style="width:${porcentaje}%"></div>
                  </div>
                  <div class="progress-info">
                    <span>${porcentaje}% completado</span>
                    <span>${recaudado} € de ${meta} €</span>
                  </div>
                </div>
                <div style="display:grid;grid-template-columns:1fr 1fr;gap:0.5rem 1.2rem;margin-bottom:0.7rem;">
                  <div style="color:var(--primary);font-size:0.98rem;"><i class="fas fa-calendar-alt"></i> Creada el ${createdDate}</div>
                  <div style="color:var(--primary);font-size:0.98rem;"><i class="fas fa-users"></i> ${membersCount} miembros</div>
                  <div style="color:var(--primary);font-size:0.98rem;"><i class="fas fa-heart"></i> ${beneficiaries} beneficiarios</div>
                  <div style="color:var(--primary);font-size:0.98rem;"><i class="fas fa-layer-group"></i> ${category}</div>
                </div>
                <div style="background:#f0f9ff;border-left:4px solid var(--accent);padding:0.8rem;border-radius:0 8px 8px 0;font-size:0.97rem;display:flex;align-items:center;gap:0.7rem;color:var(--primary);">
                  <i class="fas fa-bolt" style="color:var(--accent);"></i>
                  Participar en esta comunidad otorgará <strong>${impact} puntos</strong> de impacto
                </div>
              </div>
            </div>
            <div style="margin-bottom:1.2rem;">
              <h3 class="content-title" style="font-size:1.1rem;font-weight:600;color:var(--primary);margin-bottom:0.5rem;display:flex;align-items:center;gap:0.7rem;">
                <i class="fas fa-quote-left"></i> Resumen
              </h3>
              <p class="content-text" style="line-height:1.6;color:#4b5563;font-size:1.05rem;margin-left:0;margin-right:0;text-align:justify;">${team.summary || 'Sin resumen.'}</p>
            </div>
            <div class="content-section" style="margin-bottom:1.7rem;">
              <h3 class="content-title" style="font-size:1.1rem;font-weight:600;color:var(--primary);margin-bottom:0.5rem;display:flex;align-items:center;gap:0.7rem;">
                <i class="fas fa-align-left"></i> Descripción
              </h3>
              <p class="content-text" style="line-height:1.7;color:#4b5563;font-size:1.05rem;margin-left:0;margin-right:0;text-align:justify;">${team.description || 'Esta comunidad no tiene descripción.'}</p>
            </div>
            <div class="content-section" style="margin-bottom:2.2rem;">
              <h3 class="content-title" style="font-size:1.1rem;font-weight:600;color:var(--primary);margin-bottom:0.5rem;display:flex;align-items:center;gap:0.7rem;">
                <i class="fas fa-info-circle"></i> Detalles adicionales
              </h3>
              <div style="display:grid;grid-template-columns:1fr 1fr;gap:1rem;">
                <div>
                  <p style="font-weight:600;color:var(--primary);margin-bottom:0.3rem;">Privacidad</p>
                  <p style="color:#6b7280;">${privacy}</p>
                </div>
                <div>
                  <p style="font-weight:600;color:var(--primary);margin-bottom:0.3rem;">Meta de recaudación</p>
                  <p style="color:#6b7280;">${meta} €</p>
                </div>
                <div>
                  <p style="font-weight:600;color:var(--primary);margin-bottom:0.3rem;">ID</p>
                  <p style="color:#6b7280;">${team.id}</p>
                </div>
              </div>
            </div>
            <div class="task-actions" style="display:flex;gap:0.8rem;margin-top:2.2rem;">
              <button class="btn btn-primary" style="flex:1;" id="joinTeamBtn">
                <i class="fas fa-user-plus"></i> Unirse
              </button>
              <button class="btn btn-accent" style="flex:1;" id="shareTeamBtn">
                <i class="fas fa-share-alt"></i> Compartir
              </button>
            </div>
            <div class="share-section" id="shareSectionTeam"></div>
          </div>
        `;

        document.getElementById('teamModal').classList.add('active');
        document.body.style.overflow = 'hidden';

        // Botón Unirse
        document.getElementById('joinTeamBtn').onclick = async function() {
          const { data: { session } } = await supabase.auth.getSession();
          if (!session?.user) {
            alert('Debes iniciar sesión para unirte a la comunidad.');
            return;
          }
          alert('¡Solicitud de unión enviada! (Aquí puedes poner tu lógica real)');
        };

        // Botón Compartir
        document.getElementById('shareTeamBtn').onclick = function() {
          showShareOptionsTeam(team.id, team);
        };
      }

      // Compartir comunidad (idéntico a tareas, botones con fondo de color y letras blancas)
      function showShareOptionsTeam(teamId, teamObj) {
        let team = teamObj || (window.allTeams || []).find(t => t.id == teamId);
        if (!team) return;
        const shareSection = document.getElementById('shareSectionTeam');
        shareSection.innerHTML = `
          <h3 class="share-title" style="color:var(--primary);font-size:1.1rem;">
            <i class="fas fa-share-alt"></i> Ayuda a difundir esta comunidad
          </h3>
          <div class="share-content">
            <p class="share-text" style="color:#4b5563;">
              <span class="share-highlight" style="color:var(--primary);font-weight:600;">"${team.summary ? team.summary.substring(0, 120) + '...' : 'Únete a esta comunidad solidaria'}"</span><br><br>
              Cada nuevo miembro suma impacto colectivo.
            </p>
            <div class="share-buttons" style="display:flex;gap:0.7rem;flex-wrap:wrap;">
              <a href="#" class="share-btn btn btn-primary" onclick="shareOnSocialTeam('facebook', '${team.id}')" style="background:#1877f2;color:#fff;">
                <i class="fab fa-facebook-f"></i> Facebook
              </a>
              <a href="#" class="share-btn btn btn-primary" onclick="shareOnSocialTeam('twitter', '${team.id}')" style="background:#1da1f2;color:#fff;">
                <i class="fab fa-twitter"></i> Twitter
              </a>
              <a href="#" class="share-btn btn btn-primary" onclick="shareOnSocialTeam('whatsapp', '${team.id}')" style="background:#25d366;color:#fff;">
                <i class="fab fa-whatsapp"></i> WhatsApp
              </a>
              <a href="#" class="share-btn btn btn-outline" onclick="copyTeamLink('${team.id}')" style="background:#fff;color:var(--primary);border:1px solid var(--primary);">
                <i class="fas fa-link"></i> Copiar enlace
              </a>
            </div>
          </div>
        `;
      }

      // Función para compartir en redes sociales
      function shareOnSocialTeam(platform, teamId) {
        let team = (window.allTeams || []).find(t => t.id == teamId);
        if (!team) return;
        const url = `${window.location.origin}/teams/${team.id}`;
        const text = `Únete a la comunidad: "${team.name}" - ${team.summary ? team.summary.substring(0, 100) + '...' : 'Haz la diferencia en equipo!'} ${url}`;
        let shareUrl;
        switch(platform) {
          case 'facebook':
            shareUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}&quote=${encodeURIComponent(text)}`;
            break;
          case 'twitter':
            shareUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}`;
            break;
          case 'whatsapp':
            shareUrl = `https://wa.me/?text=${encodeURIComponent(text)}`;
            break;
          default:
            return;
        }
        window.open(shareUrl, '_blank', 'width=600,height=400');
      }

      function copyTeamLink(teamId) {
        const url = `${window.location.origin}/teams/${teamId}`;
        navigator.clipboard.writeText(url).then(() => {
          alert('¡Enlace copiado!');
        }).catch(() => {
          prompt('Por favor, copia este enlace:', url);
        });
      }

      // Unirse a la comunidad
      function joinTeam(teamId) {
        // Puedes reutilizar tu lógica de unirse aquí
        alert('Funcionalidad de unirse próximamente.');
      }

      // --- Gestión centralizada de canales realtime ---
      if (!window.teamChannels) window.teamChannels = {};

      document.addEventListener('click', async (e) => {
        const joinBtn = e.target.closest('.join-team-btn');
        if (!joinBtn) return;

        const teamId = joinBtn.dataset.teamId;
        const { data: { session } } = await supabase.auth.getSession();

        if (!session?.user) {
          document.getElementById('loginModal').classList.add('active');
          return;
        }

        // Bloquear UI
        joinBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
        joinBtn.disabled = true;

        try {
          // 1. Verificar membresía real en Supabase
          const { count, error: checkError } = await supabase
            .from('team_members')
            .select('*', { count: 'exact', head: true })
            .eq('team_id', teamId)
            .eq('user_id', session.user.id);

          console.log('Check membership:', { count, checkError });
          if (checkError) throw checkError;
          if (count > 0) throw new Error('Ya eres miembro');

          // 2. Insertar membresía real en Supabase
          const { error: insertError } = await supabase
            .from('team_members')
            .insert({
              team_id: teamId,
              user_id: session.user.id,
              role: 'member'
            });

          if (insertError) throw insertError;

          // 3. Actualizar contador en la base de datos (RPC)
          const { error: updateError } = await supabase
            .rpc('increment_team_counter', {
              team_id_input: teamId,
              field_name: 'members_count'
            });

          if (updateError) throw updateError;

          // 4. Leer el contador real desde Supabase
          const { data: teamData, error: fetchError } = await supabase
            .from('teams')
            .select('members_count')
            .eq('id', teamId)
            .single();

          if (fetchError) throw fetchError;

          // Actualiza el contador en la tarjeta SOLO con el valor real de Supabase
          const card = joinBtn.closest('.team-card-classic');
          const countElement = card.querySelector('.members-count-classic') ||
                               card.querySelector('.meta-item-classic:nth-child(4)');
          if (countElement) {
            countElement.textContent = `${teamData.members_count} miembros`;
          }

          // Tras unirse correctamente:
          joinBtn.innerHTML = '<i class="fas fa-user-check"></i> Miembro';
          joinBtn.classList.remove('btn-accent');
          joinBtn.classList.add('btn-outline');
          joinBtn.disabled = true;

        } catch (error) {
          console.error('Error joining team:', error);
          joinBtn.innerHTML = '<i class="fas fa-user-plus"></i> Unirse';
          joinBtn.disabled = false;
          alert(error.message || 'Error al unirse');
        }
      });

      // --- Limpieza automática de canales realtime ---
      window.addEventListener('beforeunload', () => {
        if (window.teamChannels) {
          Object.values(window.teamChannels).forEach(channel => {
            if (channel) supabase.removeChannel(channel);
          });
          window.teamChannels = {};
        }
      });
    });
  </script>
{% endblock %}
{% extends "layout.njk" %}

{% block title %}Solidarity - Comunidades{% endblock %}

{% block head %}
  {{ super() }}
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
  <style>
    :root {
      --primary: #4a6fa5;
      --primary-dark: #166088;
      --gray: #e2e8f0;
      --white: #fff;
      --accent: #4fc3a1;
      --accent-dark: #3da58a;
      --urgent: #e53e3e;
      --radius: 1.7rem;
    }

    .main-container {
      max-width: 1200px;
      margin: 2rem auto;
      padding: 0 2rem;
    }

    .section-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;
    }

    .section-header h1 {
      font-size: 2rem;
      color: var(--primary);
      font-weight: 700;
    }

    .search-container {
      margin-bottom: 2rem;
      display: flex;
      align-items: center;
      gap: 0.7rem;
    }

    .search-container input {
      flex: 1;
      padding: 0.6rem 1.2rem;
      border-radius: 7px;
      border: 1.5px solid var(--gray);
      font-size: 1.05rem;
      outline: none;
      transition: border 0.2s;
      background: #fff;
    }

    .search-container input:focus {
      border-color: var(--primary);
    }

    .tabs {
      display: flex;
      border-bottom: 1px solid var(--gray);
      margin-bottom: 2rem;
    }

    .tab {
      padding: 0.75rem 1.5rem;
      cursor: pointer;
      position: relative;
      font-weight: 500;
      color: #6b7280;
      background: none;
      border: none;
      outline: none;
    }

    .tab.active {
      color: var(--primary);
      font-weight: 600;
    }

    .tab.active::after {
      content: '';
      position: absolute;
      bottom: -1px;
      left: 0;
      width: 100%;
      height: 3px;
      background: var(--primary);
    }

    /* Intro y destacados */
    .teams-intro {
      background: linear-gradient(135deg, #f0f7ff 0%, #e6f0fa 100%);
      border-radius: 16px;
      padding: 2.5rem;
      margin-bottom: 3rem;
      display: flex;
      align-items: center;
      gap: 2rem;
      border: 1px solid var(--gray);
    }

    .teams-intro-icon {
      font-size: 3.5rem;
      color: var(--accent);
    }

    .teams-intro-content h2 {
      font-size: 1.8rem;
      color: var(--primary);
      margin-bottom: 0.5rem;
    }

    .teams-intro-content p {
      color: #4a5568;
      line-height: 1.6;
    }

    .teams-highlights {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
      gap: 1.5rem;
      margin-bottom: 3rem;
    }

    .highlight-card {
      background: white;
      border-radius: 10px;
      padding: 1.5rem;
      box-shadow: 0 5px 15px rgba(0,0,0,0.05);
      border: 1px solid var(--gray);
      transition: all 0.3s ease;
    }

    .highlight-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 25px rgba(0,0,0,0.1);
      border-color: var(--accent);
    }

    .highlight-icon {
      font-size: 1.8rem;
      color: var(--accent);
      margin-bottom: 1rem;
    }

    .highlight-title {
      font-size: 1.1rem;
      font-weight: 600;
      color: var(--primary);
      margin-bottom: 0.5rem;
    }

    .highlight-desc {
      color: #6b7280;
      font-size: 0.95rem;
      line-height: 1.5;
    }

    /* Modal y formulario */
    .modal-bg {
      display: none;
      position: fixed;
      top: 0; left: 0; width: 100vw; height: 100vh;
      background: rgba(0,0,0,0.35);
      z-index: 9999;
      align-items: center;
      justify-content: center;
    }
    .modal-bg.active { display: flex; }
    .modal-content {
      background: #fff;
      border-radius: 18px;
      max-width: 540px;
      width: 95vw;
      padding: 2.5rem 1.5rem 2rem 1.5rem;
      box-shadow: 0 8px 32px rgba(0,0,0,0.13);
      position: relative;
      animation: fadeIn 0.3s;
      max-height: 90vh;
      overflow-y: auto;
    }
    .close-modal {
      position: absolute;
      top: 1.1rem; right: 1.3rem;
      background: none;
      border: none;
      font-size: 2rem;
      color: #aaa;
      cursor: pointer;
      transition: color 0.2s;
    }
    .close-modal:hover { color: var(--primary, #4a6fa5); }
    .create-team-title {
      font-size: 1.5rem;
      font-weight: 800;
      color: var(--primary, #4a6fa5);
      margin-bottom: 1.2rem;
      text-align: center;
    }
    .team-form .form-group label { 
      font-weight: 600; 
      color: var(--primary, #4a6fa5); 
      margin-bottom: 0.5rem;
      display: block;
    }
    .team-form .form-group input,
    .team-form .form-group textarea,
    .team-form .form-group select {
      width: 100%;
      padding: 0.7rem 1rem;
      border-radius: 8px;
      border: 1px solid #e5e7eb;
      margin-bottom: 0.2rem;
      font-size: 1rem;
      background: #f8fafc;
      transition: border 0.2s;
    }
    .team-form .form-group input:focus,
    .team-form .form-group textarea:focus,
    .team-form .form-group select:focus {
      border: 1.5px solid var(--accent, #4fc3a1);
      outline: none;
      background: #fff;
    }
    .team-form .form-group textarea {
      min-height: 90px;
      resize: vertical;
    }
    .form-inline-group {
      display: flex;
      gap: 1rem;
    }
    .form-inline-group .form-group { flex: 1; }
    .preview-img {
      width: 100%;
      max-width: 320px;
      height: 180px;
      object-fit: cover;
      border-radius: 10px;
      margin-top: 0.5rem;
      border: 1px solid #e5e7eb;
      display: none;
    }
    .after-create {
      margin-top: 2rem;
      background: var(--primary-light, #e6f0fa);
      color: #444;
      border-radius: 10px;
      padding: 1.5rem 1rem;
      text-align: center;
    }

    /* Grid clásico de comunidades */
    .teams-grid-classic {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
      gap: 2rem;
    }
    .team-card-classic {
      background: white;
      border-radius: 12px;
      overflow: hidden;
      box-shadow: 0 5px 15px rgba(0,0,0,0.05);
      transition: all 0.3s ease;
      border: 1px solid var(--gray);
    }
    .team-card-classic:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 25px rgba(0,0,0,0.1);
    }
    .team-image-classic {
      height: 180px;
      overflow: hidden;
      position: relative;
    }
    .team-image-classic img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: transform 0.3s ease;
    }
    .team-card-classic:hover .team-image-classic img {
      transform: scale(1.05);
    }
    .team-badge-classic {
      position: absolute;
      top: 1rem;
      right: 1rem;
      background: rgba(255, 255, 255, 0.9);
      padding: 0.3rem 0.8rem;
      border-radius: 50px;
      font-size: 0.8rem;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
      z-index: 2;
    }
    .team-badge-classic.points {
      background: var(--primary);
      color: white;
      left: 1rem;
      right: auto;
    }
    .team-badge-classic[style*="background:#ffe066"] {
      background: #ffe066 !important;
      color: #b8860b !important;
    }
    .team-badge-classic[style*="background:var(--gray)"] {
      background: var(--gray) !important;
      color: var(--primary-dark) !important;
    }
    .team-badge-classic[style*="background:#ffd600"] {
      background: #ffd600 !important;
      color: #a67c00 !important;
    }
    .team-content-classic {
      padding: 1.5rem;
    }
    .team-content-classic h3 {
      font-size: 1.3rem;
      margin-bottom: 0.8rem;
      color: #2d3748;
    }
    .team-content-classic p {
      color: #6b7280;
      margin-bottom: 1.5rem;
      font-size: 0.95rem;
      line-height: 1.6;
    }
    .team-meta-classic {
      display: flex;
      gap: 1rem;
      margin-bottom: 1.5rem;
      font-size: 0.85rem;
      flex-wrap: wrap;
    }
    .meta-item-classic {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      color: #6b7280;
    }
    .meta-item-classic i {
      color: var(--primary);
    }
    .members-count-classic {
      display: inline-flex;
      align-items: center;
      background: #f0f9ff;
      color: var(--primary);
      padding: 0.3rem 0.8rem;
      border-radius: 50px;
      font-size: 0.85rem;
      font-weight: 600;
    }
    .members-count-classic i {
      margin-right: 0.3rem;
    }
    .team-progress-classic {
      margin-bottom: 1.5rem;
    }
    .team-actions-classic {
      display: flex;
      gap: 0.8rem;
    }

    /* Barra de progreso y tags (si no están en tu style.css) */
    /* Barra de progreso igual que causas */
    .progress-bar {
      width: 100%;
      background: var(--gray);
      border-radius: 4px;
      height: 8px;
      position: relative;
      overflow: hidden;
      margin-bottom: 0.5rem;
      box-shadow: none;
    }
    .progress-fill {
      height: 100%;
      background: var(--primary);
      border-radius: 4px;
      transition: width 0.4s cubic-bezier(.4,1,.7,1);
      color: #fff;
      font-size: 0.95em;
      font-weight: 700;
      display: flex;
      align-items: center;
      justify-content: flex-end;
      padding-right: 8px;
      box-shadow: none;
    }
    .progress-info {
      display: flex;
      justify-content: space-between;
      font-size: 0.9rem;
      color: #6b7280;
    }
    .team-badge-classic[style*="background:#ffe600"] {
      background: #ffe600 !important;
      color: #b8860b !important;
    }

    .pagination {
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 1.2rem;
      margin: 3rem 0 1.5rem 0;
    }
    .pagination .btn {
      min-width: 40px;
      height: 40px;
      border-radius: 50%;
      padding: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.15rem;
    }
    #pageInfo {
      font-weight: 600;
      color: var(--primary);
      font-size: 1.1rem;
      min-width: 38px;
      text-align: center;
      letter-spacing: 0.03em;
    }

    .team-tags-classic {
      display: flex;
      flex-wrap: wrap;
      gap: 0.3em;
      margin-bottom: 0.7em;
    }
    .team-tag-classic {
      background: #e6f0fa;
      color: var(--primary);
      border-radius: 50px;
      padding: 0.22em 0.95em;
      font-size: 0.92em;
      font-weight: 600;
      margin-bottom: 0.2em;
      margin-right: 0.3em;
      transition: background 0.2s, color 0.2s;
      border: 1px solid #dbeafe;
      letter-spacing: 0.01em;
      white-space: nowrap;
    }
    .team-tag-classic.tag-more {
      background: #ffe600;
      color: #a67c00;
      border: 1px solid #ffe600;
    }

    @media (max-width: 768px) {
      .teams-intro {
        flex-direction: column;
        text-align: center;
        padding: 1.5rem;
      }
      .teams-highlights {
        grid-template-columns: 1fr;
      }
      .team-card-classic {
        margin-bottom: 1.5rem;
      }
    }
    /* Forzar el mismo border-radius en todos los botones, aunque tengan estilos inline */
    button,
    .btn,
    .btn-primary,
    .btn-accent,
    .btn-outline,
    .btn-secondary,
    .modal-content button,
    .team-actions-classic .btn {
      border-radius: 2rem !important;
      font-weight: 600;
    }
  </style>
{% endblock %}

{% block content %}
  <!-- Modal para usuarios no logueados -->
  <div class="modal-bg" id="loginModal">
    <div class="modal-content">
      <h3>Para crear una comunidad</h3>
      <p>Debes ser un usuario registrado. ¿Deseas iniciar sesión o registrarte ahora?</p>
      <div class="modal-buttons">
        <a href="/login?return=/teams" class="btn btn-primary">Iniciar Sesión</a>
        <a href="/register?return=/teams" class="btn btn-outline">Registrarse</a>
        <button id="cancelModal" class="btn">Cancelar</button>
      </div>
    </div>
  </div>

  <!-- Modal CREAR COMUNIDAD (idéntico a tareas, solo cambia el contenido específico) -->
  <div class="modal-bg" id="createTeamModal">
    <div class="modal-content">
      <button class="close-modal" id="closeCreateTeamModal" title="Cerrar">&times;</button>
      <div class="create-task-title" style="font-size:1.5rem; font-weight:800; color:var(--primary,#4a6fa5); margin-bottom:1.2rem; text-align:center;">
        <i class="fas fa-users"></i> Crear Nueva Comunidad
      </div>
      <form class="team-form" id="teamForm" autocomplete="off" enctype="multipart/form-data">
        <div class="form-group">
          <label for="teamName">Nombre de la comunidad</label>
          <input type="text" id="teamName" name="name" placeholder="Ej: Voluntarios por el Bosque" required>
        </div>
        <div class="form-group">
          <label for="teamPhoto">Foto o logo</label>
          <input type="file" id="teamPhoto" name="photo" accept="image/*">
          <img id="previewTeamImg" class="preview-img" alt="Vista previa de la foto" style="display:none;">
        </div>
        <div class="form-group">
          <label for="teamSummary">Resumen (opcional)</label>
          <input type="text" id="teamSummary" name="summary" maxlength="120" placeholder="Breve resumen visible en la tarjeta">
        </div>
        <div class="form-group">
          <label for="teamDesc">Descripción</label>
          <textarea id="teamDesc" name="description" rows="4" required placeholder="Describe la misión, valores y objetivos de la comunidad"></textarea>
        </div>
        <div class="form-group">
          <label for="teamCategory">Categoría</label>
          <select id="teamCategory" name="category" required>
            <option value="">Selecciona una</option>
            <option value="medio_ambiente">Medio Ambiente</option>
            <option value="educacion">Educación</option>
            <option value="salud">Salud</option>
            <option value="animales">Animales</option>
            <option value="comunidad">Comunidad</option>
            <option value="otros">Otros</option>
          </select>
        </div>
        <div class="form-inline-group">
          <div class="form-group">
            <label for="teamPrivacy">Privacidad</label>
            <select id="teamPrivacy" name="privacy" required>
              <option value="public">Pública (cualquiera puede unirse)</option>
              <option value="private">Privada (requiere invitación)</option>
            </select>
          </div>
          <div class="form-group">
            <label for="teamGoal">Meta de recaudación (€) (opcional)</label>
            <input type="number" id="teamGoal" name="goal" min="0" placeholder="Ej: 1000">
          </div>
        </div>
        <div class="form-group">
          <label for="teamTags">Etiquetas (separadas por comas)</label>
          <input type="text" id="teamTags" name="tags" placeholder="ej: reciclaje, voluntariado, jóvenes">
        </div>
        <button type="submit" class="btn btn-primary" style="margin-top:1rem;">
          <i class="fas fa-plus"></i> Crear Comunidad
        </button>
      </form>
      <div class="after-create" id="afterCreateTeam" style="display:none;">
        <h3>¡Comunidad creada con éxito!</h3>
        <p>¿Quieres invitar miembros o ver todas las comunidades?</p>
        <a href="#" id="inviteMembersBtn" class="btn btn-accent">
          <i class="fas fa-user-plus"></i> Invitar miembros
        </a>
        <br>
        <a href="/teams" class="btn btn-outline" style="margin-top:1rem;">
          <i class="fas fa-users"></i> Ver comunidades
        </a>
      </div>
    </div>
  </div>

  <!-- Modal de ver más comunidad (idéntico a tareas, solo cambia textos/campos) -->
  <div id="teamModal" class="modal-bg">
    <div class="modal-content" style="background:#fff; border-radius:18px; max-width:800px; width:95vw; padding:2rem; box-shadow:0 8px 32px rgba(74,111,165,0.13); position:relative; max-height:90vh; overflow-y:auto;">
      <button id="closeTeamModal" style="position:absolute; top:1.5rem; right:1.5rem; background:none; border:none; font-size:1.8rem; color:#6b7280; cursor:pointer; transition:color 0.2s;" onmouseover="this.style.color='#4a6fa5'" onmouseout="this.style.color='#6b7280'">&times;</button>
      <div id="teamModalBody" style="padding:0.5rem;">
        <!-- Contenido dinámico -->
      </div>
    </div>
  </div>

  <!-- Contenido principal de la página de comunidades -->
  <div class="main-container">
    <!-- Sección introductoria -->
    <div class="teams-intro">
      <div class="teams-intro-icon">
        <i class="fas fa-people-group"></i>
      </div>
      <div class="teams-intro-content">
        <h2>Comunidades Solidarias</h2>
        <p>Únete a grupos de personas que trabajan juntas para generar impacto positivo. Colabora en causas, tareas y retos compartidos, y multiplica tu capacidad de ayudar a quienes más lo necesitan.</p>
      </div>
    </div>
    
    <!-- Destacados -->
    <div class="teams-highlights">
      <div class="highlight-card">
        <div class="highlight-icon"><i class="fas fa-layer-group"></i></div>
        <div class="highlight-title">Multi-actividad</div>
        <div class="highlight-desc">Cada comunidad gestiona múltiples acciones simultáneas: causas, tareas, retos y voluntariados.</div>
      </div>
      <div class="highlight-card">
        <div class="highlight-icon"><i class="fas fa-comments"></i></div>
        <div class="highlight-title">Coordinación</div>
        <div class="highlight-desc">Organizaos mediante el chat interno, calendario compartido y tableros de progreso.</div>
      </div>
      <div class="highlight-card">
        <div class="highlight-icon"><i class="fas fa-heart"></i></div>
        <div class="highlight-title">Impacto colectivo</div>
        <div class="highlight-desc">Suma tus puntos individuales al impacto total de la comunidad.</div>
      </div>
      <div class="highlight-card">
        <div class="highlight-icon"><i class="fas fa-hands-helping"></i></div>
        <div class="highlight-title">Beneficiarios</div>
        <div class="highlight-desc">Visualiza el número total de personas y causas beneficiadas por vuestro equipo.</div>
      </div>
    </div>
    
    <!-- Cabecera con búsqueda y creación -->
    <div class="section-header">
      <h1>Explora Comunidades</h1>
      <a href="#" id="create-team-btn" class="btn btn-primary">
        <i class="fas fa-plus"></i> Crear Comunidad
      </a>
    </div>
    
    <div class="search-container">
      <input type="text" id="search-input" placeholder="Buscar por nombre, descripción, etiquetas...">
      <i class="fas fa-search" style="color:#4a6fa5;"></i>
    </div>
    
    <!-- Tabs de categorías -->
    <div class="tabs">
      <button class="tab active" data-filter="all">Todas</button>
      <button class="tab" data-filter="medio_ambiente">Medio Ambiente</button>
      <button class="tab" data-filter="educacion">Educación</button>
      <button class="tab" data-filter="salud">Salud</button>
      <button class="tab" data-filter="animales">Animales</button>
      <button class="tab" data-filter="comunidad">Comunidad</button>
    </div>
    
    <!-- Grid de comunidades -->
    <div class="teams-grid" id="teamsGrid">
      <!-- Las comunidades se cargarán dinámicamente -->
    </div>
    
    <!-- Paginación -->
    <div class="pagination" id="pagination">
      <button id="prevPage" class="btn btn-outline" disabled>
        <i class="fas fa-chevron-left"></i>
      </button>
      <span id="pageInfo">1</span>
      <button id="nextPage" class="btn btn-outline" disabled>
        <i class="fas fa-chevron-right"></i>
      </button>
    </div>
  </div>
{% endblock %}

{% block scripts %}
  {{ super() }}
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Variables para paginación
      let currentPage = 1;
      const itemsPerPage = 9;
      let allTeams = [];
      let filteredTeams = [];
      
      // Inicializar
      loadTeams();
      
      // Modal para crear equipo
      document.getElementById('create-team-btn').onclick = async function(e) {
        e.preventDefault();
        const { data: { session } } = await supabase.auth.getSession();
        if (session?.user) {
          document.getElementById('createTeamModal').classList.add('active');
          document.body.style.overflow = 'hidden';
        } else {
          document.getElementById('loginModal').classList.add('active');
        }
      };
      document.getElementById('closeCreateTeamModal').onclick = function() {
        document.getElementById('createTeamModal').classList.remove('active');
        document.body.style.overflow = '';
        document.getElementById('teamForm').reset();
        document.getElementById('previewTeamImg').style.display = 'none';
        document.getElementById('teamForm').style.display = 'block';
        document.getElementById('afterCreateTeam').style.display = 'none';
      };
      document.getElementById('createTeamModal').onclick = function(e) {
        if (e.target === this) {
          this.classList.remove('active');
          document.body.style.overflow = '';
          document.getElementById('teamForm').style.display = 'block';
          document.getElementById('afterCreateTeam').style.display = 'none';
        }
      };
      document.getElementById('cancelModal').onclick = function() {
        document.getElementById('loginModal').classList.remove('active');
      };
      document.getElementById('loginModal').onclick = function(e) {
        if (e.target === this) this.classList.remove('active');
      };
      // Vista previa de imagen
      document.getElementById('teamPhoto').addEventListener('change', function(e) {
        const file = e.target.files[0];
        const preview = document.getElementById('previewTeamImg');
        if (file) {
          const reader = new FileReader();
          reader.onload = function(evt) {
            preview.src = evt.target.result;
            preview.style.display = 'block';
          };
          reader.readAsDataURL(file);
        } else {
          preview.src = '';
          preview.style.display = 'none';
        }
      });

      // Envío del formulario de creación de comunidad
      document.getElementById('teamForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        const { data: { session } } = await supabase.auth.getSession();
        if (!session?.user) {
          alert('Debes iniciar sesión para crear una comunidad');
          return;
        }

        const name = document.getElementById('teamName').value;
        const description = document.getElementById('teamDesc').value;
        const summary = document.getElementById('teamSummary').value;
        const category = document.getElementById('teamCategory').value;
        const privacy = document.getElementById('teamPrivacy').value;
        const tags = document.getElementById('teamTags').value
          .split(',')
          .map(t => t.trim())
          .filter(Boolean);
        const goal = document.getElementById('teamGoal').value || null;
        // Si usas ciudad, país, beneficiarios:
        // const city = document.getElementById('teamCity').value;
        // const country = document.getElementById('teamCountry').value;
        // const beneficiaries = parseInt(document.getElementById('teamBeneficiaries').value) || 0;

        const fileInput = document.getElementById('teamPhoto');
        let photo = null;

        try {
          // Subir imagen si existe
          if (fileInput.files && fileInput.files[0]) {
            const file = fileInput.files[0];
            const fileExt = file.name.split('.').pop();
            const fileName = `${Date.now()}_${Math.random().toString(36).substring(2)}.${fileExt}`;
            const filePath = `teams/${fileName}`;
            const { error: uploadError } = await supabase.storage
              .from('teams')
              .upload(filePath, file);
            if (uploadError) throw uploadError;
            const { data: urlData } = supabase.storage
              .from('teams')
              .getPublicUrl(filePath);
            photo = urlData.publicUrl;
          }

          // Crear la comunidad
          const { data, error } = await supabase
            .from('teams')
            .insert([{
              name,
              description,
              summary,
              category,
              privacy,
              tags,
              photo,
              goal,
              creator_id: session.user.id,
              created_at: new Date().toISOString()
              // city,
              // country,
              // beneficiaries
            }])
            .select();

          if (error) throw error;

          // Añadir al usuario como admin de la comunidad
          await supabase
            .from('team_members')
            .insert([{
              team_id: data[0].id,
              user_id: session.user.id,
              role: 'admin',
              joined_at: new Date().toISOString()
            }]);

          document.getElementById('teamForm').style.display = 'none';
          document.getElementById('afterCreateTeam').style.display = 'block';
          document.getElementById('inviteMembersBtn').href = `/teams/${data[0].id}/invite`;
          await loadTeams(); // O la función que recarga los equipos desde Supabase

        } catch (error) {
          console.error('Error creating team:', error);
          alert(`Error al crear la comunidad: ${error.message}`);
        }
      });

      // Tabs de categorías
      document.querySelectorAll('.tab').forEach(tab => {
        tab.addEventListener('click', function() {
          document.querySelector('.tab.active').classList.remove('active');
          this.classList.add('active');
          currentPage = 1; // Resetear a primera página
          filterAndRenderTeams();
        });
      });

      // Búsqueda
      document.getElementById('search-input').addEventListener('input', function() {
        currentPage = 1; // Resetear a primera página
        filterAndRenderTeams();
      });

      // Paginación
      document.getElementById('prevPage').addEventListener('click', function() {
        if (currentPage > 1) {
          currentPage--;
          renderTeams();
        }
      });

      document.getElementById('nextPage').addEventListener('click', function() {
        const totalPages = Math.ceil(filteredTeams.length / itemsPerPage);
        if (currentPage < totalPages) {
          currentPage++;
          renderTeams();
        }
      });

      // Función para cargar equipos desde Supabase
      async function loadTeams() {
        try {
          const { data: teams, error } = await supabase
            .from('teams')
            .select('*, team_members(user_id)')
            .order('created_at', { ascending: false });

          if (error) throw error;

          allTeams = teams || [];
          filteredTeams = [...allTeams];
          currentPage = 1;
          renderTeams();

        } catch (error) {
          console.error('Error loading teams:', error);
          allTeams = [];
          filteredTeams = [];
          renderTeams();
        }
      }

      // Función para cargar equipos del usuario
      async function loadUserTeams() {
        try {
          // 1. Obtener los equipos donde el usuario es miembro
          const { data: memberships, error: membershipsError } = await supabase
            .from('team_members')
            .select('team_id, role')
            .eq('user_id', session.user.id);

          if (membershipsError) throw membershipsError;

          // 2. Obtener los equipos donde el usuario es el creador
          const { data: createdTeams, error: createdTeamsError } = await supabase
            .from('teams')
            .select('*')
            .eq('created_by', session.user.id); // Asegúrate de tener este campo en tu tabla teams

          if (createdTeamsError) throw createdTeamsError;

          // 3. Obtener los detalles de los equipos donde es miembro
          const teamIds = memberships.map(m => m.team_id);
          let { data: teams, error: teamsError } = await supabase
            .from('teams')
            .select('*')
            .in('id', teamIds)
            .order('created_at', { ascending: false });

          if (teamsError) throw teamsError;

          // 4. Combinar y eliminar duplicados (si el creador también es miembro)
          let allTeams = [
            ...teams.map(team => ({
              ...team,
              user_role: memberships.find(m => m.team_id === team.id)?.role,
              is_admin: memberships.find(m => m.team_id === team.id)?.role === 'admin',
              is_moderator: memberships.find(m => m.team_id === team.id)?.role === 'moderator'
            })),
            ...createdTeams
              .filter(team => !teamIds.includes(team.id))
              .map(team => ({
                ...team,
                user_role: 'founder',
                is_admin: true,
                is_moderator: false
              }))
          ]; // <-- CORRECTO

          filteredTeams = [...allTeams];
          currentPage = 1;
          renderTeams();

        } catch (error) {
          console.error('Error loading user teams:', error);
          showEmptyState();
        }
      }

      // Función para filtrar equipos
      function filterAndRenderTeams() {
        const activeFilter = document.querySelector('.tab.active').getAttribute('data-filter');
        const searchTerm = document.getElementById('search-input').value.toLowerCase();
        
        filteredTeams = allTeams.filter(team => {
          // Filtrar por categoría
          if (activeFilter !== 'all' && team.category !== activeFilter) {
            return false;
          }
          
          // Filtrar por búsqueda
          if (searchTerm) {
            const matchesName = team.name && team.name.toLowerCase().includes(searchTerm);
            const matchesDesc = team.description && team.description.toLowerCase().includes(searchTerm);
            const matchesTags = team.tags && team.tags.some(tag => tag && tag.toLowerCase().includes(searchTerm));
            return matchesName || matchesDesc || matchesTags;
          }
          
          return true;
        });
        
        renderTeams();
      }

      // Función para renderizar equipos con paginación
      async function renderTeams() {
        const { data: { session } } = await supabase.auth.getSession();
        const userId = session?.user?.id;

        const startIdx = (currentPage - 1) * itemsPerPage;
        const endIdx = startIdx + itemsPerPage;
        const paginatedTeams = filteredTeams.slice(startIdx, endIdx);

        const container = document.getElementById('teamsGrid');
        container.className = 'teams-grid-classic';
        container.innerHTML = '';

        if (paginatedTeams.length === 0) {
          container.innerHTML = `
            <div class="empty-state">
              <i class="fas fa-users-slash"></i>
              <h3>No se encontraron comunidades</h3>
              <p>No hay comunidades que coincidan con tu búsqueda.</p>
              <button id="createTeamEmptyBtn" class="btn btn-primary">
                <i class="fas fa-plus"></i> Crear primera comunidad
              </button>
            </div>
          `;
          document.getElementById('createTeamEmptyBtn').addEventListener('click', () => {
            document.getElementById('create-team-btn').click();
          });
          document.getElementById('pagination').style.display = 'none';
          return;
        }

        document.getElementById('pagination').style.display = 'flex';

        paginatedTeams.forEach(team => {
          // Calcula badges y tags
          const membersCount = team.members_count || 0;
          const tagsHtml = team.tags?.length
            ? `<div class="team-tags-classic" style="margin-bottom:0.8em;">${team.tags.slice(0, 4).map(tag => `<span class="team-tag-classic">${tag}</span>`).join('')}${team.tags.length > 4 ? `<span class="team-tag-classic tag-more">+${team.tags.length - 4}</span>` : ''}</div>`
            : '';
          const isTrending = membersCount >= 20 || (team.impact || 0) >= 1000;
          const recaudado = team.funds_raised || 0;
          const meta = team.goal || 1000;
          const porcentaje = meta ? Math.min(100, Math.round((recaudado / meta) * 100)) : 0;
          let badgePrivada = team.privacy === 'private'
            ? `<div class="team-badge-classic" style="top:1rem;right:1rem;background:var(--gray);color:var(--primary-dark);"><i class="fas fa-lock"></i> Privada</div>`
            : '';
          let badgeTrending = isTrending
            ? `<div class="team-badge-classic" style="top:${team.privacy === 'private' ? '3.2rem' : '1rem'};right:1rem;background:#ffe600;color:#b8860b;"><i class="fas fa-arrow-trend-up"></i> Trending</div>`
            : '';

          // ¿Es miembro?
          const isMember = team.team_members?.some(m => m.user_id === userId);

          const joinBtnHtml = isMember
            ? `<button class="btn btn-outline join-team-btn" data-team-id="${team.id}" disabled>
                <i class="fas fa-user-check"></i> Miembro
              </button>`
            : `<button class="btn btn-accent join-team-btn" data-team-id="${team.id}">
                <i class="fas fa-user-plus"></i> Unirse
              </button>`;

          const card = document.createElement('div');
          card.className = 'team-card-classic';
          card.setAttribute('data-team-id', team.id);
          card.innerHTML = `
            <div class="team-image-classic">
              <img src="${team.photo || 'https://via.placeholder.com/350x180?text=Comunidad'}" alt="${team.name}">
              <div class="team-badge-classic points" style="top:1rem;left:1rem;right:auto;background:var(--primary);color:#fff;">
                <i class="fas fa-bolt"></i> +${team.impact || 0} pts
              </div>
              ${badgePrivada}${badgeTrending}
            </div>
            <div class="team-content-classic">
              <h3>${team.name}</h3>
              <p>${team.summary || 'Esta comunidad no tiene resumen aún.'}</p>
              <div class="team-meta-classic" style="margin-bottom:1em;">
                <div class="meta-item-classic"><i class="fas fa-layer-group"></i> ${getCategoryName(team.category)}</div>
                <div class="meta-item-classic"><i class="fas fa-tasks"></i> ${team.activities_count || 0} actividades</div>
                <div class="meta-item-classic"><i class="fas fa-heart"></i> ${team.beneficiaries || 0} beneficiarios</div>
                <div class="meta-item-classic"><i class="fas fa-users"></i> <span class="members-count-classic">${membersCount}</span> miembros</div>
              </div>
              ${tagsHtml}
              <div class="team-progress-classic" style="margin-bottom:1.2em;">
                <div class="progress-bar">
                  <div class="progress-fill" style="width:${porcentaje}%;">${porcentaje > 10 ? porcentaje + '%' : ''}</div>
                </div>
                <div class="progress-info">
                  <span>${porcentaje}% completado</span>
                  <span>${recaudado} € de ${meta} €</span>
                </div>
              </div>
              <div class="team-actions-classic" style="margin-top:1.2em;">
                <button class="btn btn-primary btn-vermas-team" data-team-id="${team.id}">
                  <i class="fas fa-eye"></i> Ver más
                </button>
                ${joinBtnHtml}
              </div>
            </div>
          `;
          container.appendChild(card);
        });
        
        // Configurar botones de unirse
        document.querySelectorAll('.join-team-btn').forEach(btn => {
          btn.addEventListener('click', async function() {
            const teamId = this.getAttribute('data-team-id');
            const { data: { session } } = await supabase.auth.getSession();

            if (!session?.user) {
              document.getElementById('loginModal').classList.add('active');
              return;
            }

            // Bloquear UI
            this.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
            this.disabled = true;

            try {
              // Intentar insertar membresía directamente
              const { error: insertError } = await supabase
                .from('team_members')
                .insert({
                  team_id: teamId,
                  user_id: session.user.id,
                  role: 'member'
                });

              // Si hay error de clave duplicada, lo tratamos como "ya es miembro"
              if (insertError && insertError.code === '23505') {
                // Ya es miembro, solo actualiza UI y contador
              } else if (insertError) {
                throw insertError;
              } else {
                // Si insertó bien, incrementa el contador
                const { error: updateError } = await supabase
                  .rpc('increment_team_counter', {
                    team_id_input: teamId,
                    field_name: 'members_count'
                  });
                if (updateError) throw updateError;
              }

              // En ambos casos, lee el contador real y actualiza UI
              const { data: teamData, error: fetchError } = await supabase
                .from('teams')
                .select('members_count')
                .eq('id', teamId)
                .single();
              if (fetchError) throw fetchError;

              const card = this.closest('.team-card-classic');
              const countElement = card.querySelector('.members-count-classic');
              if (countElement) {
                countElement.textContent = teamData.members_count;
              }

              this.innerHTML = '<i class="fas fa-user-check"></i> Miembro';
              this.classList.remove('btn-accent');
              this.classList.add('btn-outline');
              this.disabled = true;

            } catch (error) {
              console.error('Error joining team:', error);
              this.innerHTML = '<i class="fas fa-user-plus"></i> Unirse';
              this.disabled = false;
              alert(error.message || 'Error al unirse');
            }
          });
        });

        updatePagination();
      }
      
      // Función para actualizar controles de paginación
      function updatePagination() {
        const totalPages = Math.max(1, Math.ceil(filteredTeams.length / itemsPerPage));
        document.getElementById('pageInfo').textContent = `${currentPage} / ${totalPages}`;
        document.getElementById('prevPage').disabled = currentPage <= 1;
        document.getElementById('nextPage').disabled = currentPage >= totalPages;
      }
      
      // Función auxiliar para nombres de categoría
      function getCategoryName(category) {
        const categories = {
          'medio_ambiente': 'Medio Ambiente',
          'educacion': 'Educación',
          'salud': 'Salud',
          'animales': 'Animales',
          'comunidad': 'Comunidad',
          'otros': 'Otros'
        };
        return categories[category] || 'General';
      }

      // Crear causa asociada a una comunidad y actualizar contador
      async function crearCausa({ title, description, teamId }) {
        // 1. Crear la causa con el team_id
        const { data, error } = await supabase
          .from('causes')
          .insert([{ title, description, team_id: teamId }]);
        if (error) {
          alert('Error al crear causa');
          return;
        }

        // 2. Incrementar el contador solo en esa comunidad
        await supabase.rpc('increment_team_counter', {
          team_id_input: teamId,
          field_name: 'causes_count'
        });
      }

      // Crear tarea asociada a una comunidad y actualizar contador
      async function crearTarea({ title, description, teamId }) {
        // 1. Crear la tarea con el team_id
        await supabase
          .from('tasks')
          .insert([{ title, description, team_id: teamId }]);
        // 2. Incrementar el contador de tareas en esa comunidad
        await supabase.rpc('increment_team_counter', {
          team_id_input: teamId,
          field_name: 'tasks_count'
        });
      }

      // Crear reto asociado a una comunidad y actualizar contador
      async function crearReto({ title, description, teamId }) {
        // 1. Crear el reto con el team_id
        await supabase
          .from('challenges')
          .insert([{ title, description, team_id: teamId }]);
        // 2. Incrementar el contador de retos en esa comunidad
        await supabase.rpc('increment_team_counter', {
          team_id_input: teamId,
          field_name: 'challenges_count'
        });
      }

      // Crear voluntariado asociado a una comunidad y actualizar contador
      async function crearVoluntariado({ title, description, teamId }) {
        // 1. Crear el voluntariado con el team_id
        await supabase
          .from('volunteering')
          .insert([{ title, description, team_id: teamId }]);
        // 2. Incrementar el contador de voluntariados en esa comunidad
        await supabase.rpc('increment_team_counter', {
          team_id_input: teamId,
          field_name: 'volunteering_count'
        });
      }

      // Crear o actualizar el contador de beneficiarios en una comunidad
      async function actualizarBeneficiarios(teamId, delta) {
        // 1. Actualizar el campo beneficiaries de la comunidad
        await supabase
          .from('teams')
          .update({ beneficiaries: supabase.raw(`beneficiaries + ${delta}`) })
          .eq('id', teamId);

        // 2. Llamar a la función RPC para actualizar el contador
        await supabase.rpc('increment_team_counter', {
          team_id_input: teamId,
          field_name: 'beneficiaries'
        });
      }

      // Abrir modal de ver más comunidad
      document.addEventListener('click', function(e) {
        const verMasBtn = e.target.closest('.btn-vermas-team');
        if (verMasBtn) {
          e.preventDefault();
          e.stopPropagation();
          const teamId = verMasBtn.dataset.teamId;
          showTeamModal(teamId);
        }
      });

      // Cerrar modal de ver más
      document.getElementById('closeTeamModal').onclick = function() {
        document.getElementById('teamModal').classList.remove('active');
        document.body.style.overflow = '';
      };
      document.getElementById('teamModal').onclick = function(e) {
        if (e.target === this) {
          this.classList.remove('active');
          document.body.style.overflow = '';
        }
      };

      // Modal de detalle de comunidad (igual que tasks/challenges)
      async function showTeamModal(teamId) {
        // 1. Carga la comunidad
        const { data: team, error } = await supabase
          .from('teams')
          .select('*')
          .eq('id', teamId)
          .single();

        if (error || !team) {
          alert('Error al cargar la comunidad');
          return;
        }

        // 2. Prepara datos
        const createdDate = new Date(team.created_at).toLocaleDateString('es-ES', {
          year: 'numeric',
          month: 'long',
          day: 'numeric'
        });
        const recaudado = team.funds_raised || 0;
        const meta = team.goal || 0;
        const porcentaje = meta ? Math.min(100, Math.round((recaudado / meta) * 100)) : 0;
        const beneficiaries = team.beneficiaries || 0;
        const membersCount = team.members?.length || 1;
        const impact = team.impact || 0;
        const category = getCategoryName(team.category);
        const privacy = team.privacy === 'private' ? 'Privada' : 'Pública';

        // 3. Renderiza el modal (estructura igual que tareas)
        document.getElementById('teamModalBody').innerHTML = `
          <div class="modal-task-container" style="padding:0;">
            <h1 class="modal-task-title" style="font-size:2rem; font-weight:800; color:var(--primary); margin-bottom:1.2rem; text-align:center; width:100%;">${team.name}</h1>
            <div style="display:flex; flex-wrap:wrap; gap:2.2rem; margin-bottom:1.5rem;">
              <div style="flex:1; min-width:320px; max-width:350px; position:relative;">
                <img src="${team.photo || 'https://via.placeholder.com/350x180?text=Comunidad'}" alt="Imagen de la comunidad" style="width:100%;height:200px;object-fit:cover;border-radius:12px;box-shadow:0 4px 12px rgba(0,0,0,0.08);">
                <div style="position:absolute;top:1rem;left:1rem;background:var(--primary);color:#fff;padding:0.4rem 1rem;border-radius:50px;font-size:0.95rem;font-weight:600;display:flex;align-items:center;gap:0.6rem;">
                  <i class="fas fa-users"></i> Comunidad
                </div>
                ${team.privacy === 'private' ? `
                <div style="position:absolute;top:1rem;right:1rem;background:var(--gray);color:var(--primary-dark);padding:0.4rem 1rem;border-radius:50px;font-size:0.95rem;font-weight:600;display:flex;align-items:center;gap:0.6rem;">
                  <i class="fas fa-lock"></i> Privada
                </div>` : ''}
              </div>
              <div style="flex:2;min-width:260px;display:flex;flex-direction:column;gap:1.2rem;justify-content:flex-start;">
                <div class="modal-cause-progress-container" style="background:#f8fafc;padding:1.2rem 1.2rem 1rem 1.2rem;border-radius:12px;margin-bottom:0.5rem;border:1px solid #e5e7eb;">
                  <div class="progress-bar">
                    <div class="progress-fill" style="width:${porcentaje}%"></div>
                  </div>
                  <div class="progress-info">
                    <span>${porcentaje}% completado</span>
                    <span>${recaudado} € de ${meta} €</span>
                  </div>
                </div>
                <div style="display:grid;grid-template-columns:1fr 1fr;gap:0.5rem 1.2rem;margin-bottom:0.7rem;">
                  <div style="color:var(--primary);font-size:0.98rem;"><i class="fas fa-calendar-alt"></i> Creada el ${createdDate}</div>
                  <div style="color:var(--primary);font-size:0.98rem;"><i class="fas fa-users"></i> ${membersCount} miembros</div>
                  <div style="color:var(--primary);font-size:0.98rem;"><i class="fas fa-heart"></i> ${beneficiaries} beneficiarios</div>
                  <div style="color:var(--primary);font-size:0.98rem;"><i class="fas fa-layer-group"></i> ${category}</div>
                </div>
                <div style="background:#f0f9ff;border-left:4px solid var(--accent);padding:0.8rem;border-radius:0 8px 8px 0;font-size:0.97rem;display:flex;align-items:center;gap:0.7rem;color:var(--primary);">
                  <i class="fas fa-bolt" style="color:var(--accent);"></i>
                  Participar en esta comunidad otorgará <strong>${impact} puntos</strong> de impacto
                </div>
              </div>
            </div>
            <div style="margin-bottom:1.2rem;">
              <h3 class="content-title" style="font-size:1.1rem;font-weight:600;color:var(--primary);margin-bottom:0.5rem;display:flex;align-items:center;gap:0.7rem;">
                <i class="fas fa-quote-left"></i> Resumen
              </h3>
              <p class="content-text" style="line-height:1.6;color:#4b5563;font-size:1.05rem;margin-left:0;margin-right:0;text-align:justify;">${team.summary || 'Sin resumen.'}</p>
            </div>
            <div class="content-section" style="margin-bottom:1.7rem;">
              <h3 class="content-title" style="font-size:1.1rem;font-weight:600;color:var(--primary);margin-bottom:0.5rem;display:flex;align-items:center;gap:0.7rem;">
                <i class="fas fa-align-left"></i> Descripción
              </h3>
              <p class="content-text" style="line-height:1.7;color:#4b5563;font-size:1.05rem;margin-left:0;margin-right:0;text-align:justify;">${team.description || 'Esta comunidad no tiene descripción.'}</p>
            </div>
            <div class="content-section" style="margin-bottom:2.2rem;">
              <h3 class="content-title" style="font-size:1.1rem;font-weight:600;color:var(--primary);margin-bottom:0.5rem;display:flex;align-items:center;gap:0.7rem;">
                <i class="fas fa-info-circle"></i> Detalles adicionales
              </h3>
              <div style="display:grid;grid-template-columns:1fr 1fr;gap:1rem;">
                <div>
                  <p style="font-weight:600;color:var(--primary);margin-bottom:0.3rem;">Privacidad</p>
                  <p style="color:#6b7280;">${privacy}</p>
                </div>
                <div>
                  <p style="font-weight:600;color:var(--primary);margin-bottom:0.3rem;">Meta de recaudación</p>
                  <p style="color:#6b7280;">${meta} €</p>
                </div>
                <div>
                  <p style="font-weight:600;color:var(--primary);margin-bottom:0.3rem;">ID</p>
                  <p style="color:#6b7280;">${team.id}</p>
                </div>
              </div>
            </div>
            <div class="task-actions" style="display:flex;gap:0.8rem;margin-top:2.2rem;">
              <button class="btn btn-primary" style="flex:1;" id="joinTeamBtn">
                <i class="fas fa-user-plus"></i> Unirse
              </button>
              <button class="btn btn-accent" style="flex:1;" id="shareTeamBtn">
                <i class="fas fa-share-alt"></i> Compartir
              </button>
            </div>
            <div class="share-section" id="shareSectionTeam"></div>
          </div>
        `;

        document.getElementById('teamModal').classList.add('active');
        document.body.style.overflow = 'hidden';

        // Botón Unirse
        document.getElementById('joinTeamBtn').onclick = async function() {
          const { data: { session } } = await supabase.auth.getSession();
          if (!session?.user) {
            alert('Debes iniciar sesión para unirte a la comunidad.');
            return;
          }
          alert('¡Solicitud de unión enviada! (Aquí puedes poner tu lógica real)');
        };

        // Botón Compartir
        document.getElementById('shareTeamBtn').onclick = function() {
          showShareOptionsTeam(team.id, team);
        };
      }

      // Compartir comunidad (idéntico a tareas, botones con fondo de color y letras blancas)
      function showShareOptionsTeam(teamId, teamObj) {
        let team = teamObj || (window.allTeams || []).find(t => t.id == teamId);
        if (!team) return;
        const shareSection = document.getElementById('shareSectionTeam');
        shareSection.innerHTML = `
          <h3 class="share-title" style="color:var(--primary);font-size:1.1rem;">
            <i class="fas fa-share-alt"></i> Ayuda a difundir esta comunidad
          </h3>
          <div class="share-content">
            <p class="share-text" style="color:#4b5563;">
              <span class="share-highlight" style="color:var(--primary);font-weight:600;">"${team.summary ? team.summary.substring(0, 120) + '...' : 'Únete a esta comunidad solidaria'}"</span><br><br>
              Cada nuevo miembro suma impacto colectivo.
            </p>
            <div class="share-buttons" style="display:flex;gap:0.7rem;flex-wrap:wrap;">
              <a href="#" class="share-btn btn btn-primary" onclick="shareOnSocialTeam('facebook', '${team.id}')" style="background:#1877f2;color:#fff;">
                <i class="fab fa-facebook-f"></i> Facebook
              </a>
              <a href="#" class="share-btn btn btn-primary" onclick="shareOnSocialTeam('twitter', '${team.id}')" style="background:#1da1f2;color:#fff;">
                <i class="fab fa-twitter"></i> Twitter
              </a>
              <a href="#" class="share-btn btn btn-primary" onclick="shareOnSocialTeam('whatsapp', '${team.id}')" style="background:#25d366;color:#fff;">
                <i class="fab fa-whatsapp"></i> WhatsApp
              </a>
              <a href="#" class="share-btn btn btn-outline" onclick="copyTeamLink('${team.id}')" style="background:#fff;color:var(--primary);border:1px solid var(--primary);">
                <i class="fas fa-link"></i> Copiar enlace
              </a>
            </div>
          </div>
        `;
      }

      // Función para compartir en redes sociales
      function shareOnSocialTeam(platform, teamId) {
        let team = (window.allTeams || []).find(t => t.id == teamId);
        if (!team) return;
        const url = `${window.location.origin}/teams/${team.id}`;
        const text = `Únete a la comunidad: "${team.name}" - ${team.summary ? team.summary.substring(0, 100) + '...' : 'Haz la diferencia en equipo!'} ${url}`;
        let shareUrl;
        switch(platform) {
          case 'facebook':
            shareUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}&quote=${encodeURIComponent(text)}`;
            break;
          case 'twitter':
            shareUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}`;
            break;
          case 'whatsapp':
            shareUrl = `https://wa.me/?text=${encodeURIComponent(text)}`;
            break;
          default:
            return;
        }
        window.open(shareUrl, '_blank', 'width=600,height=400');
      }

      function copyTeamLink(teamId) {
        const url = `${window.location.origin}/teams/${teamId}`;
        navigator.clipboard.writeText(url).then(() => {
          alert('¡Enlace copiado!');
        }).catch(() => {
          prompt('Por favor, copia este enlace:', url);
        });
      }

      // Unirse a la comunidad
      function joinTeam(teamId) {
        // Puedes reutilizar tu lógica de unirse aquí
        alert('Funcionalidad de unirse próximamente.');
      }

      // --- Gestión centralizada de canales realtime ---
      if (!window.teamChannels) window.teamChannels = {};

      document.addEventListener('click', async (e) => {
        const joinBtn = e.target.closest('.join-team-btn');
        if (!joinBtn || joinBtn.disabled) return;

        const teamId = joinBtn.dataset.teamId;
        const { data: { session } } = await supabase.auth.getSession();

        if (!session?.user) {
          document.getElementById('loginModal').classList.add('active');
          return;
        }

        // Bloquear UI para evitar dobles clics
        const originalText = joinBtn.innerHTML;
        joinBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
        joinBtn.disabled = true;

        try {
          // 1. Intentar insertar la membresía directamente
          const { error: insertError } = await supabase
            .from('team_members')
            .insert({
              team_id: teamId,
              user_id: session.user.id,
              role: 'member',
              joined_at: new Date().toISOString()
            });

          // Si ya es miembro (error 23505), no incrementes el contador
          if (insertError && insertError.code === '23505') {
            // Ya es miembro, solo actualiza UI y contador real
          } else if (insertError) {
            throw insertError;
          } else {
            // Solo si la inserción fue exitosa, incrementa el contador en la base de datos
            const { error: updateError } = await supabase
              .rpc('increment_team_counter', {
                team_id_input: teamId,
                field_name: 'members_count'
              });
            if (updateError) throw updateError;
          }

          // 2. Obtener el valor real actualizado desde Supabase
          const { data: updatedTeam, error: fetchError } = await supabase
            .from('teams')
            .select('members_count')
            .eq('id', teamId)
            .single();

          if (fetchError) throw fetchError;

          // 3. Actualizar el contador en todas las tarjetas de este equipo
          document.querySelectorAll(`.team-card-classic[data-team-id="${teamId}"] .members-count-classic`).forEach(el => {
            el.textContent = updatedTeam.members_count;
          });

          // 4. Cambiar el botón a "Miembro"
          joinBtn.innerHTML = '<i class="fas fa-user-check"></i> Miembro';
          joinBtn.classList.remove('btn-accent');
          joinBtn.classList.add('btn-outline');
          joinBtn.disabled = true;

        } catch (error) {
          console.error('Error al unirse:', error);
          joinBtn.innerHTML = originalText;
          joinBtn.disabled = false;
          alert(error.message || 'Error al unirse');
        }
      });

      // --- Limpieza automática de canales realtime ---
      window.addEventListener('beforeunload', () => {
        if (window.teamChannels) {
          Object.values(window.teamChannels).forEach(channel => {
            if (channel?.unsubscribe) {
              channel.unsubscribe();
            }
          });
          window.teamChannels = {};
        }
      });
    });
  </script>
{% endblock %}
{% extends "layout.njk" %}

{% block title %}Solidarity - Comunidades{% endblock %}

{% block head %}
  {{ super() }}
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
  <style>
    :root {
      --primary: #4a6fa5;
      --primary-dark: #166088;
      --gray: #e2e8f0;
      --white: #fff;
      --accent: #4fc3a1;
      --accent-dark: #3da58a;
      --urgent: #e53e3e;
      --radius: 1.7rem;
    }

    .main-container {
      max-width: 1200px;
      margin: 2rem auto;
      padding: 0 2rem;
    }

    .section-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;
    }

    .section-header h1 {
      font-size: 2rem;
      color: var(--primary);
      font-weight: 700;
    }

    .search-container {
      margin-bottom: 2rem;
      display: flex;
      align-items: center;
      gap: 0.7rem;
    }

    .search-container input {
      flex: 1;
      padding: 0.6rem 1.2rem;
      border-radius: 7px;
      border: 1.5px solid var(--gray);
      font-size: 1.05rem;
      outline: none;
      transition: border 0.2s;
      background: #fff;
    }

    .search-container input:focus {
      border-color: var(--primary);
    }

    .tabs {
      display: flex;
      border-bottom: 1px solid var(--gray);
      margin-bottom: 2rem;
    }

    .tab {
      padding: 0.75rem 1.5rem;
      cursor: pointer;
      position: relative;
      font-weight: 500;
      color: #6b7280;
      background: none;
      border: none;
      outline: none;
    }

    .tab.active {
      color: var(--primary);
      font-weight: 600;
    }

    .tab.active::after {
      content: '';
      position: absolute;
      bottom: -1px;
      left: 0;
      width: 100%;
      height: 3px;
      background: var(--primary);
    }

    /* Intro y destacados */
    .teams-intro {
      background: linear-gradient(135deg, #f0f7ff 0%, #e6f0fa 100%);
      border-radius: 16px;
      padding: 2.5rem;
      margin-bottom: 3rem;
      display: flex;
      align-items: center;
      gap: 2rem;
      border: 1px solid var(--gray);
    }

    .teams-intro-icon {
      font-size: 3.5rem;
      color: var(--accent);
    }

    .teams-intro-content h2 {
      font-size: 1.8rem;
      color: var(--primary);
      margin-bottom: 0.5rem;
    }

    .teams-intro-content p {
      color: #4a5568;
      line-height: 1.6;
    }

    .teams-highlights {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
      gap: 1.5rem;
      margin-bottom: 3rem;
    }

    .highlight-card {
      background: white;
      border-radius: 10px;
      padding: 1.5rem;
      box-shadow: 0 5px 15px rgba(0,0,0,0.05);
      border: 1px solid var(--gray);
      transition: all 0.3s ease;
    }

    .highlight-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 25px rgba(0,0,0,0.1);
      border-color: var(--accent);
    }

    .highlight-icon {
      font-size: 1.8rem;
      color: var(--accent);
      margin-bottom: 1rem;
    }

    .highlight-title {
      font-size: 1.1rem;
      font-weight: 600;
      color: var(--primary);
      margin-bottom: 0.5rem;
    }

    .highlight-desc {
      color: #6b7280;
      font-size: 0.95rem;
      line-height: 1.5;
    }

    /* Modal y formulario */
    .modal-bg {
      display: none;
      position: fixed;
      top: 0; left: 0; width: 100vw; height: 100vh;
      background: rgba(0,0,0,0.35);
      z-index: 9999;
      align-items: center;
      justify-content: center;
    }
    .modal-bg.active { display: flex; }
    .modal-content {
      background: #fff;
      border-radius: 18px;
      max-width: 540px;
      width: 95vw;
      padding: 2.5rem 1.5rem 2rem 1.5rem;
      box-shadow: 0 8px 32px rgba(0,0,0,0.13);
      position: relative;
      animation: fadeIn 0.3s;
      max-height: 90vh;
      overflow-y: auto;
    }
    .close-modal {
      position: absolute;
      top: 1.1rem; right: 1.3rem;
      background: none;
      border: none;
      font-size: 2rem;
      color: #aaa;
      cursor: pointer;
      transition: color 0.2s;
    }
    .close-modal:hover { color: var(--primary, #4a6fa5); }
    .create-team-title {
      font-size: 1.5rem;
      font-weight: 800;
      color: var(--primary, #4a6fa5);
      margin-bottom: 1.2rem;
      text-align: center;
    }
    .team-form .form-group label { 
      font-weight: 600; 
      color: var(--primary, #4a6fa5); 
      margin-bottom: 0.5rem;
      display: block;
    }
    .team-form .form-group input,
    .team-form .form-group textarea,
    .team-form .form-group select {
      width: 100%;
      padding: 0.7rem 1rem;
      border-radius: 8px;
      border: 1px solid #e5e7eb;
      margin-bottom: 0.2rem;
      font-size: 1rem;
      background: #f8fafc;
      transition: border 0.2s;
    }
    .team-form .form-group input:focus,
    .team-form .form-group textarea:focus,
    .team-form .form-group select:focus {
      border: 1.5px solid var(--accent, #4fc3a1);
      outline: none;
      background: #fff;
    }
    .team-form .form-group textarea {
      min-height: 90px;
      resize: vertical;
    }
    .form-inline-group {
      display: flex;
      gap: 1rem;
    }
    .form-inline-group .form-group { flex: 1; }
    .preview-img {
      width: 100%;
      max-width: 320px;
      height: 180px;
      object-fit: cover;
      border-radius: 10px;
      margin-top: 0.5rem;
      border: 1px solid #e5e7eb;
      display: none;
    }
    .after-create {
      margin-top: 2rem;
      background: var(--primary-light, #e6f0fa);
      color: #444;
      border-radius: 10px;
      padding: 1.5rem 1rem;
      text-align: center;
    }

    /* Grid clásico de comunidades */
    .teams-grid-classic {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
      gap: 2rem;
    }
    .team-card-classic {
      background: white;
      border-radius: 12px;
      overflow: hidden;
      box-shadow: 0 5px 15px rgba(0,0,0,0.05);
      transition: all 0.3s ease;
      border: 1px solid var(--gray);
    }
    .team-card-classic:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 25px rgba(0,0,0,0.1);
    }
    .team-image-classic {
      height: 180px;
      overflow: hidden;
      position: relative;
    }
    .team-image-classic img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: transform 0.3s ease;
    }
    .team-card-classic:hover .team-image-classic img {
      transform: scale(1.05);
    }
    .team-badge-classic {
      position: absolute;
      top: 1rem;
      right: 1rem;
      background: rgba(255, 255, 255, 0.9);
      padding: 0.3rem 0.8rem;
      border-radius: 50px;
      font-size: 0.8rem;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
      z-index: 2;
    }
    .team-badge-classic.points {
      background: var(--primary);
      color: white;
      left: 1rem;
      right: auto;
    }
    .team-badge-classic[style*="background:#ffe066"] {
      background: #ffe066 !important;
      color: #b8860b !important;
    }
    .team-badge-classic[style*="background:var(--gray)"] {
      background: var(--gray) !important;
      color: var(--primary-dark) !important;
    }
    .team-badge-classic[style*="background:#ffd600"] {
      background: #ffd600 !important;
      color: #a67c00 !important;
    }
    .team-content-classic {
      padding: 1.5rem;
    }
    .team-content-classic h3 {
      font-size: 1.3rem;
      margin-bottom: 0.8rem;
      color: #2d3748;
    }
    .team-content-classic p {
      color: #6b7280;
      margin-bottom: 1.5rem;
      font-size: 0.95rem;
      line-height: 1.6;
    }
    .team-meta-classic {
      display: flex;
      gap: 1rem;
      margin-bottom: 1.5rem;
      font-size: 0.85rem;
      flex-wrap: wrap;
    }
    .meta-item-classic {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      color: #6b7280;
    }
    .meta-item-classic i {
      color: var(--primary);
    }
    .members-count-classic {
      display: inline-flex;
      align-items: center;
      background: #f0f9ff;
      color: var(--primary);
      padding: 0.3rem 0.8rem;
      border-radius: 50px;
      font-size: 0.85rem;
      font-weight: 600;
    }
    .members-count-classic i {
      margin-right: 0.3rem;
    }
    .team-progress-classic {
      margin-bottom: 1.5rem;
    }
    .team-actions-classic {
      display: flex;
      gap: 0.8rem;
    }

    /* Barra de progreso y tags (si no están en tu style.css) */
    /* Barra de progreso igual que causas */
    .progress-bar {
      width: 100%;
      background: var(--gray);
      border-radius: 4px;
      height: 8px;
      position: relative;
      overflow: hidden;
      margin-bottom: 0.5rem;
      box-shadow: none;
    }
    .progress-fill {
      height: 100%;
      background: var(--primary);
      border-radius: 4px;
      transition: width 0.4s cubic-bezier(.4,1,.7,1);
      color: #fff;
      font-size: 0.95em;
      font-weight: 700;
      display: flex;
      align-items: center;
      justify-content: flex-end;
      padding-right: 8px;
      box-shadow: none;
    }
    .progress-info {
      display: flex;
      justify-content: space-between;
      font-size: 0.9rem;
      color: #6b7280;
    }
    .team-badge-classic[style*="background:#ffe600"] {
      background: #ffe600 !important;
      color: #b8860b !important;
    }

    .pagination {
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 1.2rem;
      margin: 3rem 0 1.5rem 0;
    }
    .pagination .btn {
      min-width: 40px;
      height: 40px;
      border-radius: 50%;
      padding: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.15rem;
    }
    #pageInfo {
      font-weight: 600;
      color: var(--primary);
      font-size: 1.1rem;
      min-width: 38px;
      text-align: center;
      letter-spacing: 0.03em;
    }

    .team-tags-classic {
      display: flex;
      flex-wrap: wrap;
      gap: 0.3em;
      margin-bottom: 0.7em;
    }
    .team-tag-classic {
      background: #e6f0fa;
      color: var(--primary);
      border-radius: 50px;
      padding: 0.22em 0.95em;
      font-size: 0.92em;
      font-weight: 600;
      margin-bottom: 0.2em;
      margin-right: 0.3em;
      transition: background 0.2s, color 0.2s;
      border: 1px solid #dbeafe;
      letter-spacing: 0.01em;
      white-space: nowrap;
    }
    .team-tag-classic.tag-more {
      background: #ffe600;
      color: #a67c00;
      border: 1px solid #ffe600;
    }

    @media (max-width: 768px) {
      .teams-intro {
        flex-direction: column;
        text-align: center;
        padding: 1.5rem;
      }
      .teams-highlights {
        grid-template-columns: 1fr;
      }
      .team-card-classic {
        margin-bottom: 1.5rem;
      }
    }
    /* Forzar el mismo border-radius en todos los botones, aunque tengan estilos inline */
    button,
    .btn,
    .btn-primary,
    .btn-accent,
    .btn-outline,
    .btn-secondary,
    .modal-content button,
    .team-actions-classic .btn {
      border-radius: 2rem !important;
      font-weight: 600;
    }
    .btn-success {
      background: #22c55e !important;
      color: #fff !important;
      border: none;
    }
    .btn-success:hover, .btn-success:focus {
      background: #16a34a !important;
      color: #fff !important;
    }

    /* Nuevos estilos para la solución robusta */
    .btn-secondary {
      background-color: #64748b !important;
      color: white !important;
      cursor: not-allowed;
    }
    
    .fa-spinner {
      animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    #solidarity-alerts {
      position: fixed;
      bottom: 20px;
      right: 20px;
      z-index: 10000;
      max-width: 400px;
    }
    
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    @keyframes fadeOut {
      from { opacity: 1; transform: translateY(0); }
      to { opacity: 0; transform: translateY(20px); }
    }
  </style>
{% endblock %}

{% block content %}
  <!-- Modal para usuarios no logueados -->
  <div class="modal-bg" id="loginModal">
    <div class="modal-content">
      <h3>Para crear una comunidad</h3>
      <p>Debes ser un usuario registrado. ¿Deseas iniciar sesión o registrarte ahora?</p>
      <div class="modal-buttons">
        <a href="/login?return=/teams" class="btn btn-primary">Iniciar Sesión</a>
        <a href="/register?return=/teams" class="btn btn-outline">Registrarse</a>
        <button id="cancelModal" class="btn">Cancelar</button>
      </div>
    </div>
  </div>

  <!-- Modal CREAR COMUNIDAD -->
  <div class="modal-bg" id="createTeamModal">
    <div class="modal-content">
      <button class="close-modal" id="closeCreateTeamModal" title="Cerrar">&times;</button>
      <div class="create-task-title" style="font-size:1.5rem; font-weight:800; color:var(--primary,#4a6fa5); margin-bottom:1.2rem; text-align:center;">
        <i class="fas fa-users"></i> Crear Nueva Comunidad
      </div>
      <form class="team-form" id="teamForm" autocomplete="off" enctype="multipart/form-data">
        <div class="form-group">
          <label for="teamName">Nombre de la comunidad</label>
          <input type="text" id="teamName" name="name" placeholder="Ej: Voluntarios por el Bosque" required>
        </div>
        <div class="form-group">
          <label for="teamPhoto">Foto o logo</label>
          <input type="file" id="teamPhoto" name="photo" accept="image/*">
          <img id="previewTeamImg" class="preview-img" alt="Vista previa de la foto" style="display:none;">
        </div>
        <div class="form-group">
          <label for="teamSummary">Resumen (opcional)</label>
          <input type="text" id="teamSummary" name="summary" maxlength="120" placeholder="Breve resumen visible en la tarjeta">
        </div>
        <div class="form-group">
          <label for="teamDesc">Descripción</label>
          <textarea id="teamDesc" name="description" rows="4" required placeholder="Describe la misión, valores y objetivos de la comunidad"></textarea>
        </div>
        <div class="form-group">
          <label for="teamCategory">Categoría</label>
          <select id="teamCategory" name="category" required>
            <option value="">Selecciona una</option>
            <option value="medio_ambiente">Medio Ambiente</option>
            <option value="educacion">Educación</option>
            <option value="salud">Salud</option>
            <option value="animales">Animales</option>
            <option value="comunidad">Comunidad</option>
            <option value="otros">Otros</option>
          </select>
        </div>
        <div class="form-inline-group">
          <div class="form-group">
            <label for="teamPrivacy">Privacidad</label>
            <select id="teamPrivacy" name="privacy" required>
              <option value="public">Pública (cualquiera puede unirse)</option>
              <option value="private">Privada (requiere invitación)</option>
            </select>
          </div>
          <div class="form-group">
            <label for="teamGoal">Meta de recaudación (€) (opcional)</label>
            <input type="number" id="teamGoal" name="goal" min="0" placeholder="Ej: 1000">
          </div>
        </div>
        <div class="form-group">
          <label for="teamTags">Etiquetas (separadas por comas)</label>
          <input type="text" id="teamTags" name="tags" placeholder="ej: reciclaje, voluntariado, jóvenes">
        </div>
        <button type="submit" class="btn btn-primary" style="margin-top:1rem;">
          <i class="fas fa-plus"></i> Crear Comunidad
        </button>
      </form>
      <div class="after-create" id="afterCreateTeam" style="display:none;">
        <h3>¡Comunidad creada con éxito!</h3>
        <p>¿Quieres invitar miembros o ver todas las comunidades?</p>
        <a href="#" id="inviteMembersBtn" class="btn btn-accent">
          <i class="fas fa-user-plus"></i> Invitar miembros
        </a>
        <br>
        <a href="/teams" class="btn btn-outline" style="margin-top:1rem;">
          <i class="fas fa-users"></i> Ver comunidades
        </a>
      </div>
    </div>
  </div>

  <!-- Modal de ver más comunidad -->
  <div id="teamModal" class="modal-bg">
    <div class="modal-content" style="background:#fff; border-radius:18px; max-width:800px; width:95vw; padding:2rem; box-shadow:0 8px 32px rgba(74,111,165,0.13); position:relative; max-height:90vh; overflow-y:auto;">
      <button id="closeTeamModal" style="position:absolute; top:1.5rem; right:1.5rem; background:none; border:none; font-size:1.8rem; color:#6b7280; cursor:pointer; transition:color 0.2s;" onmouseover="this.style.color='#4a6fa5'" onmouseout="this.style.color='#6b7280'">&times;</button>
      <div id="teamModalBody" style="padding:0.5rem;">
        <!-- Contenido dinámico -->
      </div>
    </div>
  </div>

  <!-- Contenido principal de la página de comunidades -->
  <div class="main-container">
    <!-- Sección introductoria -->
    <div class="teams-intro">
      <div class="teams-intro-icon">
        <i class="fas fa-people-group"></i>
      </div>
      <div class="teams-intro-content">
        <h2>Comunidades Solidarias</h2>
        <p>Únete a grupos de personas que trabajan juntas para generar impacto positivo. Colabora en causas, tareas y retos compartidos, y multiplica tu capacidad de ayudar a quienes más lo necesitan.</p>
      </div>
    </div>
    
    <!-- Destacados -->
    <div class="teams-highlights">
      <div class="highlight-card">
        <div class="highlight-icon"><i class="fas fa-layer-group"></i></div>
        <div class="highlight-title">Multi-actividad</div>
        <div class="highlight-desc">Cada comunidad gestiona múltiples acciones simultáneas: causas, tareas, retos y voluntariados.</div>
      </div>
      <div class="highlight-card">
        <div class="highlight-icon"><i class="fas fa-comments"></i></div>
        <div class="highlight-title">Coordinación</div>
        <div class="highlight-desc">Organizaos mediante el chat interno, calendario compartido y tableros de progreso.</div>
      </div>
      <div class="highlight-card">
        <div class="highlight-icon"><i class="fas fa-heart"></i></div>
        <div class="highlight-title">Impacto colectivo</div>
        <div class="highlight-desc">Suma tus puntos individuales al impacto total de la comunidad.</div>
      </div>
      <div class="highlight-card">
        <div class="highlight-icon"><i class="fas fa-hands-helping"></i></div>
        <div class="highlight-title">Beneficiarios</div>
        <div class="highlight-desc">Visualiza el número total de personas y causas beneficiadas por vuestro equipo.</div>
      </div>
    </div>
    
    <!-- Cabecera con búsqueda y creación -->
    <div class="section-header">
      <h1>Explora Comunidades</h1>
      <a href="#" id="create-team-btn" class="btn btn-primary">
        <i class="fas fa-plus"></i> Crear Comunidad
      </a>
    </div>
    
    <div class="search-container">
      <input type="text" id="search-input" placeholder="Buscar por nombre, descripción, etiquetas...">
      <i class="fas fa-search" style="color:#4a6fa5;"></i>
    </div>
    
    <!-- Tabs de categorías -->
    <div class="tabs">
      <button class="tab active" data-filter="all">Todas</button>
      <button class="tab" data-filter="medio_ambiente">Medio Ambiente</button>
      <button class="tab" data-filter="educacion">Educación</button>
      <button class="tab" data-filter="salud">Salud</button>
      <button class="tab" data-filter="animales">Animales</button>
      <button class="tab" data-filter="comunidad">Comunidad</button>
    </div>
    
    <!-- Grid de comunidades -->
    <div class="teams-grid" id="teamsGrid">
      <!-- Las comunidades se cargarán dinámicamente -->
    </div>
    
    <!-- Paginación -->
    <div class="pagination" id="pagination">
      <button id="prevPage" class="btn btn-outline" disabled>
        <i class="fas fa-chevron-left"></i>
      </button>
      <span id="pageInfo">1</span>
      <button id="nextPage" class="btn btn-outline" disabled>
        <i class="fas fa-chevron-right"></i>
      </button>
    </div>
  </div>

  <!-- Sección de alertas (solidaridad) -->
  <div id="solidarity-alerts"></div>
{% endblock %}

{% block scripts %}
  {{ super() }}
  <script>
    // Variables globales para el sistema robusto
    let currentUserId = null;
    let userMemberships = [];
    let allTeams = [];
    let filteredTeams = [];
    let currentPage = 1;
    const itemsPerPage = 9;

    // Función para obtener usuario actual y membresías
    async function getCurrentUserAndMemberships() {
      try {
        const { data: { session } } = await supabase.auth.getSession();
        if (session?.user) {
          currentUserId = session.user.id;
          const { data: memberships, error } = await supabase
            .from('team_members')
            .select('team_id')
            .eq('user_id', currentUserId)
            .neq('role', 'pending');
          
          if (error) throw error;
          
          userMemberships = memberships ? memberships.map(m => m.team_id) : [];
        } else {
          currentUserId = null;
          userMemberships = [];
        }
        return userMemberships;
      } catch (error) {
        console.error('Error obteniendo membresías:', error);
        return [];
      }
    }

    // Función robusta para unirse a comunidades
    async function joinTeam(teamId, btnElement) {
      try {
        // 1. Verificar sesión
        const { data: { session } } = await supabase.auth.getSession();
        if (!session?.user) {
          showSolidarityAlert('Debes iniciar sesión para unirte a una comunidad', 'error');
          document.getElementById('loginModal').classList.add('active');
          return false;
        }

        // 2. Mostrar estado "Procesando"
        if (btnElement) {
          btnElement.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Procesando...';
          btnElement.disabled = true;
        }

        // 3. Verificar si ya es miembro
        const { data: existingMembership } = await supabase
          .from('team_members')
          .select('id')
          .eq('team_id', teamId)
          .eq('user_id', session.user.id)
          .neq('role', 'pending')
          .maybeSingle();

        if (existingMembership) {
          showSolidarityAlert('Ya eres miembro de esta comunidad', 'info');
          return true;
        }

        // 4. Obtener información de la comunidad
        const { data: team, error: teamError } = await supabase
          .from('teams')
          .select('privacy, members_count')
          .eq('id', teamId)
          .single();

        if (teamError || !team) {
          showSolidarityAlert('Error al obtener información de la comunidad', 'error');
          if (btnElement) {
            btnElement.innerHTML = '<i class="fas fa-user-plus"></i> Unirse';
            btnElement.disabled = false;
          }
          return false;
        }

        // 5. Procesar unión según privacidad
        if (team.privacy === 'public') {
          // Comunidad pública - unirse directamente
          const { error } = await supabase
            .from('team_members')
            .insert([{
              team_id: teamId,
              user_id: session.user.id,
              role: 'member',
              joined_at: new Date().toISOString()
            }]);

          if (error) throw error;

          // Actualizar contador de miembros
          await supabase
            .from('teams')
            .update({ members_count: (team.members_count || 0) + 1 })
            .eq('id', teamId);

          showSolidarityAlert('¡Te has unido a la comunidad! 🎉', 'success');
        } else {
          // Comunidad privada - enviar solicitud
          const { error } = await supabase
            .from('team_members')
            .insert([{
              team_id: teamId,
              user_id: session.user.id,
              role: 'pending',
              joined_at: new Date().toISOString()
            }]);

          if (error) throw error;

          showSolidarityAlert('Solicitud enviada. Espera aprobación.', 'success');
        }

        // 6. Actualizar UI
        await getCurrentUserAndMemberships();
        await updateTeamCard(teamId);
        
        return true;

      } catch (error) {
        console.error('Error uniéndose al equipo:', error);
        showSolidarityAlert(`Error al unirse: ${error.message}`, 'error');
        if (btnElement) {
          btnElement.innerHTML = '<i class="fas fa-user-plus"></i> Unirse';
          btnElement.disabled = false;
        }
        return false;
      }
    }

    // Actualizar tarjeta de equipo específica
    async function updateTeamCard(teamId) {
      try {
        // 1. Obtener datos actualizados del equipo
        const { data: team, error } = await supabase
          .from('teams')
          .select('*')
          .eq('id', teamId)
          .single();

        if (error || !team) return;

        // 2. Actualizar contador de miembros en todas las tarjetas correspondientes
        document.querySelectorAll(`[data-team-id="${teamId}"] .members-count-classic`).forEach(el => {
          el.textContent = team.members_count || 0;
        });

        // 3. Actualizar botones de unirse
        document.querySelectorAll(`[data-team-id="${teamId}"] .join-team-btn`).forEach(btn => {
          const isMember = userMemberships.includes(teamId);
          btn.innerHTML = `<i class="fas fa-${isMember ? 'check' : 'user-plus'}"></i> ${isMember ? 'Miembro' : 'Unirse'}`;
          btn.disabled = isMember;
          if (isMember) {
            btn.classList.add('btn-secondary');
            btn.classList.remove('btn-success');
          } else {
            btn.classList.add('btn-success');
            btn.classList.remove('btn-secondary');
          }
        });

      } catch (error) {
        console.error('Error actualizando tarjeta:', error);
      }
    }

    // Mostrar alertas de solidaridad
    function showSolidarityAlert(message, type = 'success') {
      const alerts = document.getElementById('solidarity-alerts');
      if (!alerts) return;
      
      const alert = document.createElement('div');
      alert.className = `alert-${type}`;
      alert.style.cssText = `
        background: ${type === 'success' ? '#d1fae5' : type === 'error' ? '#fee2e2' : '#fef3c7'};
        color: ${type === 'success' ? '#166534' : type === 'error' ? '#991b1b' : '#92400e'};
        border: 2px solid ${type === 'success' ? '#22c55e' : type === 'error' ? '#ef4444' : '#f59e0b'};
        border-radius: 8px;
        padding: 1rem 1.5rem;
        margin-bottom: 1.2rem;
        font-size: 1.1rem;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 0.7rem;
        box-shadow: 0 2px 8px rgba(0,0,0,0.08);
        position: relative;
        animation: fadeIn 0.3s ease-in-out;
      `;
      
      alert.innerHTML = `
        <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-triangle' : 'info-circle'}"></i>
        ${message}
        <span style="margin-left:auto;cursor:pointer;font-size:1.3rem;" onclick="this.parentElement.remove()">&times;</span>
      `;
      
      alerts.appendChild(alert);
      
      setTimeout(() => {
        alert.style.animation = 'fadeOut 0.3s ease-in-out';
        setTimeout(() => alert.remove(), 300);
      }, 3500);
    }

    document.addEventListener('DOMContentLoaded', function() {
      // Variables para paginación
      currentPage = 1;

      // Inicializar
      getCurrentUserAndMemberships().then(loadTeams);
      
      // Modal para crear equipo
      document.getElementById('create-team-btn').onclick = async function(e) {
        e.preventDefault();
        const { data: { session } } = await supabase.auth.getSession();
        if (session?.user) {
          document.getElementById('createTeamModal').classList.add('active');
          document.body.style.overflow = 'hidden';
        } else {
          document.getElementById('loginModal').classList.add('active');
        }
      };
      
      document.getElementById('closeCreateTeamModal').onclick = function() {
        document.getElementById('createTeamModal').classList.remove('active');
        document.body.style.overflow = '';
        document.getElementById('teamForm').reset();
        document.getElementById('previewTeamImg').style.display = 'none';
        document.getElementById('teamForm').style.display = 'block';
        document.getElementById('afterCreateTeam').style.display = 'none';
      };
      
      document.getElementById('createTeamModal').onclick = function(e) {
        if (e.target === this) {
          this.classList.remove('active');
          document.body.style.overflow = '';
          document.getElementById('teamForm').style.display = 'block';
          document.getElementById('afterCreateTeam').style.display = 'none';
        }
      };
      
      document.getElementById('cancelModal').onclick = function() {
        document.getElementById('loginModal').classList.remove('active');
      };
      
      document.getElementById('loginModal').onclick = function(e) {
        if (e.target === this) this.classList.remove('active');
      };
      
      // Vista previa de imagen
      document.getElementById('teamPhoto').addEventListener('change', function(e) {
        const file = e.target.files[0];
        const preview = document.getElementById('previewTeamImg');
        if (file) {
          const reader = new FileReader();
          reader.onload = function(evt) {
            preview.src = evt.target.result;
            preview.style.display = 'block';
          };
          reader.readAsDataURL(file);
        } else {
          preview.src = '';
          preview.style.display = 'none';
        }
      });

      // Envío del formulario de creación de comunidad
      document.getElementById('teamForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        const { data: { session } } = await supabase.auth.getSession();
        if (!session?.user) {
          alert('Debes iniciar sesión para crear una comunidad');
          return;
        }

        // ... (resto del código de creación de comunidad) ...
      });

      // Tabs de categorías
      document.querySelectorAll('.tab').forEach(tab => {
        tab.addEventListener('click', function() {
          document.querySelector('.tab.active').classList.remove('active');
          this.classList.add('active');
          currentPage = 1; // Resetear a primera página
          filterAndRenderTeams();
        });
      });

      // Búsqueda
      document.getElementById('search-input').addEventListener('input', function() {
        currentPage = 1; // Resetear a primera página
        filterAndRenderTeams();
      });

      // Paginación
      document.getElementById('prevPage').addEventListener('click', function() {
        if (currentPage > 1) {
          currentPage--;
          renderTeams();
        }
      });

      document.getElementById('nextPage').addEventListener('click', function() {
        const totalPages = Math.ceil(filteredTeams.length / itemsPerPage);
        if (currentPage < totalPages) {
          currentPage++;
          renderTeams();
        }
      });

      // Event listener para botones de unirse
      document.addEventListener('click', async function(e) {
        const joinBtn = e.target.closest('.join-team-btn');
        if (joinBtn) {
          e.preventDefault();
          const teamId = joinBtn.getAttribute('data-team-id');
          await joinTeam(teamId, joinBtn);
        }
        
        // Botón Ver Más
        const verMasBtn = e.target.closest('.btn-vermas-team');
        if (verMasBtn) {
          e.preventDefault();
          e.stopPropagation();
          const teamId = verMasBtn.dataset.teamId || verMasBtn.getAttribute('data-team-id');
          showTeamModal(teamId);
        }
      });

      // Función para cargar equipos desde Supabase
      async function loadTeams() {
        try {
          const { data: teams, error } = await supabase
            .from('teams')
            .select('*')
            .order('created_at', { ascending: false });
          
          if (error) throw error;
          
          allTeams = teams || [];
          filteredTeams = [...allTeams];
          currentPage = 1;
          renderTeams();
          
        } catch (error) {
          console.error('Error cargando equipos:', error);
          allTeams = [];
          filteredTeams = [];
          renderTeams();
        }
      }

      // Función para filtrar equipos
      function filterAndRenderTeams() {
        const activeFilter = document.querySelector('.tab.active').getAttribute('data-filter');
        const searchTerm = document.getElementById('search-input').value.toLowerCase();
        
        filteredTeams = allTeams.filter(team => {
          // Filtrar por categoría
          if (activeFilter !== 'all' && team.category !== activeFilter) {
            return false;
          }
          
          // Filtrar por búsqueda
          if (searchTerm) {
            const matchesName = team.name && team.name.toLowerCase().includes(searchTerm);
            const matchesDesc = team.description && team.description.toLowerCase().includes(searchTerm);
            const matchesTags = team.tags && team.tags.some(tag => tag && tag.toLowerCase().includes(searchTerm));
            return matchesName || matchesDesc || matchesTags;
          }
          
          return true;
        });
        
        renderTeams();
      }

      // Función para renderizar equipos con paginación
      async function renderTeams() {
        const startIdx = (currentPage - 1) * itemsPerPage;
        const endIdx = startIdx + itemsPerPage;
        const paginatedTeams = filteredTeams.slice(startIdx, endIdx);

        const container = document.getElementById('teamsGrid');
        container.className = 'teams-grid-classic';
        container.innerHTML = '';

        if (!paginatedTeams.length) {
          container.innerHTML = `
            <div class="empty-state">
              <i class="fas fa-users-slash"></i>
              <h3>No se encontraron comunidades</h3>
              <p>No hay comunidades que coincidan con tu búsqueda.</p>
              <button id="createTeamEmptyBtn" class="btn btn-primary">
                <i class="fas fa-plus"></i> Crear primera comunidad
              </button>
            </div>
          `;
          document.getElementById('createTeamEmptyBtn').addEventListener('click', () => {
            document.getElementById('create-team-btn').click();
          });
          document.getElementById('pagination').style.display = 'none';
          return;
        }

        document.getElementById('pagination').style.display = 'flex';

        paginatedTeams.forEach(team => {
          const isMember = userMemberships.includes(team.id);
          const membersCount = team.members_count || 0;

          const badgePrivada = team.privacy === 'private'
            ? `<div class="team-badge-classic" style="top:1rem;right:1rem;background:var(--gray);color:var(--primary-dark);"><i class="fas fa-lock"></i> Privada</div>`
            : '';

          const isTrending = membersCount >= 20 || (team.impact || 0) >= 1000;
          const badgeTrending = isTrending
            ? `<div class="team-badge-classic" style="top:${team.privacy === 'private' ? '3.2rem' : '1rem'};right:1rem;background:#ffe600;color:#b8860b;"><i class="fas fa-arrow-trend-up"></i> Trending</div>`
            : '';

          const tagsHtml = team.tags?.length
            ? `<div class="team-tags-classic" style="margin-bottom:0.8em;">${team.tags.slice(0, 4).map(tag => `<span class="team-tag-classic">${tag}</span>`).join('')}${team.tags.length > 4 ? `<span class="team-tag-classic tag-more">+${team.tags.length - 4}</span>` : ''}</div>`
            : '';

          const recaudado = team.funds_raised || 0;
          const meta = team.goal || 1000;
          const porcentaje = meta ? Math.min(100, Math.round((recaudado / meta) * 100)) : 0;

          const card = document.createElement('div');
          card.className = 'team-card-classic';
          card.dataset.teamId = team.id;
          card.innerHTML = `
            <div class="team-image-classic">
              <img src="${team.photo || 'https://via.placeholder.com/350x180?text=Comunidad'}" alt="${team.name}">
              <div class="team-badge-classic points" style="top:1rem;left:1rem;right:auto;background:var(--primary);color:#fff;">
                <i class="fas fa-bolt"></i> +${team.impact || 0} pts
              </div>
              ${badgePrivada}${badgeTrending}
            </div>
            <div class="team-content-classic">
              <h3>${team.name}</h3>
              <p>${team.summary || 'Esta comunidad no tiene resumen aún.'}</p>
              <div class="team-meta-classic">
                <div class="meta-item-classic"><i class="fas fa-layer-group"></i> ${getCategoryName(team.category)}</div>
                <div class="meta-item-classic"><i class="fas fa-tasks"></i> ${team.activities_count || 0} actividades</div>
                <div class="meta-item-classic"><i class="fas fa-heart"></i> ${team.beneficiaries || 0} beneficiarios</div>
                <div class="meta-item-classic">
                  <i class="fas fa-users"></i>
                  <span class="members-count-classic">${membersCount}</span> miembros
                </div>
              </div>
              ${tagsHtml}
              <div class="team-progress-classic" style="margin-bottom:1.2em;">
                <div class="progress-bar">
                  <div class="progress-fill" style="width:${porcentaje}%;${porcentaje > 10 ? '' : 'min-width:32px;'}">
                    ${porcentaje > 10 ? porcentaje + '%' : ''}
                  </div>
                </div>
                <div class="progress-info">
                  <span>${porcentaje}% completado</span>
                  <span>${recaudado} € de ${meta} €</span>
                </div>
              </div>
              <div class="team-actions-classic" style="margin-top:1.2em;">
                <button class="btn btn-primary btn-vermas-team" data-team-id="${team.id}">
                  <i class="fas fa-eye"></i> Ver más
                </button>
                <button class="btn ${isMember ? 'btn-secondary' : 'btn-success'} join-team-btn"
                  data-team-id="${team.id}" ${isMember ? 'disabled' : ''}>
                  <i class="fas fa-${isMember ? 'check' : 'user-plus'}"></i>
                  ${isMember ? 'Miembro' : 'Unirse'}
                </button>
              </div>
            </div>
          `;
          container.appendChild(card);
        });
        
        updatePagination();
      }
      
      // Función para actualizar controles de paginación
      function updatePagination() {
        const totalPages = Math.max(1, Math.ceil(filteredTeams.length / itemsPerPage));
        document.getElementById('pageInfo').textContent = `${currentPage} / ${totalPages}`;
        document.getElementById('prevPage').disabled = currentPage <= 1;
        document.getElementById('nextPage').disabled = currentPage >= totalPages;
      }
      
      // Función auxiliar para nombres de categoría
      function getCategoryName(category) {
        const categories = {
          'medio_ambiente': 'Medio Ambiente',
          'educacion': 'Educación',
          'salud': 'Salud',
          'animales': 'Animales',
          'comunidad': 'Comunidad',
          'otros': 'Otros'
        };
        return categories[category] || 'General';
      }

      // Cerrar modal de ver más
      document.getElementById('closeTeamModal').onclick = function() {
        document.getElementById('teamModal').classList.remove('active');
        document.body.style.overflow = '';
      };
      
      document.getElementById('teamModal').onclick = function(e) {
        if (e.target === this) {
          this.classList.remove('active');
          document.body.style.overflow = '';
        }
      };

      // Modal de detalle de comunidad
      async function showTeamModal(teamId) {
        // ... (código para mostrar el modal de detalle) ...
      }
    });
  </script>
{% endblock %}
{% extends "layout.njk" %}

{% block title %}Solidarity - Mis Comunidades{% endblock %}

{% block head %}
  {{ super() }}
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
  <style>
    :root {
      --primary: #4a6fa5;
      --primary-dark: #166088;
      --gray: #e2e8f0;
      --white: #fff;
      --accent: #4fc3a1;
      --accent-dark: #3da58a;
      --urgent: #e53e3e;
    }

    .main-container {
      max-width: 1200px;
      margin: 2rem auto;
      padding: 0 2rem;
    }

    .section-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;
    }

    .section-header h1 {
      font-size: 2rem;
      color: var(--primary);
      font-weight: 700;
    }

    .search-container {
      margin-bottom: 2rem;
      display: flex;
      align-items: center;
      gap: 0.7rem;
    }

    .search-container input {
      flex: 1;
      padding: 0.6rem 1.2rem;
      border-radius: 7px;
      border: 1.5px solid var(--gray);
      font-size: 1.05rem;
      outline: none;
      transition: border 0.2s;
      background: #fff;
    }

    .search-container input:focus {
      border-color: var(--primary);
    }

    .tabs {
      display: flex;
      border-bottom: 1px solid var(--gray);
      margin-bottom: 2rem;
      flex-wrap: wrap;
    }

    .tab {
      padding: 0.75rem 1.5rem;
      cursor: pointer;
      position: relative;
      font-weight: 500;
      color: #6b7280;
      background: none;
      border: none;
      outline: none;
    }

    .tab.active {
      color: var(--primary);
      font-weight: 600;
    }

    .tab.active::after {
      content: '';
      position: absolute;
      bottom: -1px;
      left: 0;
      width: 100%;
      height: 3px;
      background: var(--primary);
    }

    /* Intro y destacados */
    .teams-intro {
      background: linear-gradient(135deg, #f0f7ff 0%, #e6f0fa 100%);
      border-radius: 16px;
      padding: 2.5rem;
      margin-bottom: 3rem;
      display: flex;
      align-items: center;
      gap: 2rem;
      border: 1px solid var(--gray);
    }

    .teams-intro-icon {
      font-size: 3.5rem;
      color: var(--accent);
    }

    .teams-intro-content h2 {
      font-size: 1.8rem;
      color: var(--primary);
      margin-bottom: 0.5rem;
    }

    .teams-intro-content p {
      color: #4a5568;
      line-height: 1.6;
    }

    .teams-highlights {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
      gap: 1.5rem;
      margin-bottom: 3rem;
    }

    .highlight-card {
      background: white;
      border-radius: 10px;
      padding: 1.5rem;
      box-shadow: 0 5px 15px rgba(0,0,0,0.05);
      border: 1px solid var(--gray);
      transition: all 0.3s ease;
    }

    .highlight-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 25px rgba(0,0,0,0.1);
      border-color: var(--accent);
    }

    .highlight-icon {
      font-size: 1.8rem;
      color: var(--accent);
      margin-bottom: 1rem;
    }

    .highlight-title {
      font-size: 1.1rem;
      font-weight: 600;
      color: var(--primary);
      margin-bottom: 0.5rem;
    }

    .highlight-desc {
      color: #6b7280;
      font-size: 0.95rem;
      line-height: 1.5;
    }

    /* Grid de comunidades */
    .teams-grid-classic {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
      gap: 2rem;
    }

    .team-card-classic {
      background: white;
      border-radius: 12px;
      overflow: hidden;
      box-shadow: 0 5px 15px rgba(0,0,0,0.05);
      transition: all 0.3s ease;
      border: 1px solid var(--gray);
    }

    .team-card-classic:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 25px rgba(0,0,0,0.1);
    }

    .team-image-classic {
      height: 180px;
      overflow: hidden;
      position: relative;
    }

    .team-image-classic img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: transform 0.3s ease;
    }

    .team-card-classic:hover .team-image-classic img {
      transform: scale(1.05);
    }

    .team-badge-classic {
      position: absolute;
      top: 1rem;
      right: 1rem;
      background: rgba(255, 255, 255, 0.9);
      padding: 0.3rem 0.8rem;
      border-radius: 50px;
      font-size: 0.8rem;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
      z-index: 2;
    }

    .team-badge-classic.points {
      background: var(--primary);
      color: white;
      left: 1rem;
      right: auto;
    }

    .team-badge-classic[style*="background:#ffe066"] {
      background: #ffe066 !important;
      color: #b8860b !important;
    }

    .team-badge-classic[style*="background:var(--gray)"] {
      background: var(--gray) !important;
      color: var(--primary-dark) !important;
    }

    .team-badge-classic[style*="background:#ffd600"] {
      background: #ffd600 !important;
      color: #a67c00 !important;
    }

    .team-content-classic {
      padding: 1.5rem;
    }

    .team-content-classic h3 {
      font-size: 1.3rem;
      margin-bottom: 0.8rem;
      color: #2d3748;
    }

    .team-content-classic p {
      color: #6b7280;
      margin-bottom: 1.5rem;
      font-size: 0.95rem;
      line-height: 1.6;
    }

    .team-meta-classic {
      display: flex;
      gap: 1rem;
      margin-bottom: 1.5rem;
      font-size: 0.85rem;
      flex-wrap: wrap;
    }

    .meta-item-classic {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      color: #6b7280;
    }

    .meta-item-classic i {
      color: var(--primary);
    }

    .members-count-classic {
      display: inline-flex;
      align-items: center;
      background: #f0f9ff;
      color: var(--primary);
      padding: 0.3rem 0.8rem;
      border-radius: 50px;
      font-size: 0.85rem;
      font-weight: 600;
    }

    .members-count-classic i {
      margin-right: 0.3rem;
    }

    .team-progress-classic {
      margin-bottom: 1.5rem;
    }

    .team-actions-classic {
      display: flex;
      gap: 0.8rem;
    }

    /* Barra de progreso */
    .progress-bar {
      width: 100%;
      background: var(--gray);
      border-radius: 4px;
      height: 8px;
      position: relative;
      overflow: hidden;
      margin-bottom: 0.5rem;
      box-shadow: none;
    }

    .progress-fill {
      height: 100%;
      background: var(--primary);
      border-radius: 4px;
      transition: width 0.4s cubic-bezier(.4,1,.7,1);
      color: #fff;
      font-size: 0.95em;
      font-weight: 700;
      display: flex;
      align-items: center;
      justify-content: flex-end;
      padding-right: 8px;
      box-shadow: none;
    }

    .progress-info {
      display: flex;
      justify-content: space-between;
      font-size: 0.9rem;
      color: #6b7280;
    }

    .team-badge-classic[style*="background:#ffe600"] {
      background: #ffe600 !important;
      color: #b8860b !important;
    }

    /* Tags */
    .team-tags-classic {
      display: flex;
      flex-wrap: wrap;
      gap: 0.3em;
      margin-bottom: 0.7em;
    }

    .team-tag-classic {
      background: #e6f0fa;
      color: var(--primary);
      border-radius: 50px;
      padding: 0.22em 0.95em;
      font-size: 0.92em;
      font-weight: 600;
      margin-bottom: 0.2em;
      margin-right: 0.3em;
      transition: background 0.2s, color 0.2s;
      border: 1px solid #dbeafe;
      letter-spacing: 0.01em;
      white-space: nowrap;
    }

    .team-tag-classic.tag-more {
      background: #ffe600;
      color: #a67c00;
      border: 1px solid #ffe600;
    }

    /* Badges de rol */
    .role-badge {
      padding: 0.3rem 0.8rem;
      border-radius: 50px;
      font-size: 0.85rem;
      font-weight: 600;
      display: inline-flex;
      align-items: center;
      gap: 0.3rem;
    }

    .role-badge.admin {
      background: #4a6fa5;
      color: white;
    }

    .role-badge.moderator {
      background: #4fc3a1;
      color: white;
    }

    .role-badge.member {
      background: #e2e8f0;
      color: #4a5568;
    }

    /* Paginación */
    .pagination {
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 1.2rem;
      margin: 3rem 0 1.5rem 0;
    }

    .pagination .btn {
      min-width: 40px;
      height: 40px;
      border-radius: 50%;
      padding: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.15rem;
    }

    #pageInfo {
      font-weight: 600;
      color: var(--primary);
      font-size: 1.1rem;
      min-width: 38px;
      text-align: center;
      letter-spacing: 0.03em;
    }

    /* Modal de administración */
    .admin-modal {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.5);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1000;
      opacity: 0;
      visibility: hidden;
      transition: all 0.3s;
    }

    .admin-modal.active {
      opacity: 1;
      visibility: visible;
    }

    .admin-modal-content {
      background: white;
      border-radius: 12px;
      width: 90%;
      max-width: 800px;
      max-height: 90vh;
      overflow-y: auto;
      padding: 2rem;
      box-shadow: 0 5px 20px rgba(0,0,0,0.2);
      position: relative;
    }

    .close-admin-modal {
      position: absolute;
      top: 1rem;
      right: 1rem;
      background: none;
      border: none;
      font-size: 1.5rem;
      cursor: pointer;
      color: #6b7280;
    }

    .admin-tabs {
      display: flex;
      border-bottom: 1px solid #e2e8f0;
      margin-bottom: 1.5rem;
    }

    .admin-tab {
      padding: 0.75rem 1.5rem;
      cursor: pointer;
      position: relative;
      font-weight: 500;
      color: #6b7280;
      background: none;
      border: none;
      outline: none;
    }

    .admin-tab.active {
      color: var(--primary);
      font-weight: 600;
    }

    .admin-tab.active::after {
      content: '';
      position: absolute;
      bottom: -1px;
      left: 0;
      width: 100%;
      height: 3px;
      background: var(--primary);
    }

    .admin-tab-content {
      display: none;
    }

    .admin-tab-content.active {
      display: block;
    }

    .members-list {
      margin-top: 1rem;
    }

    .member-item {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 1rem;
      border-bottom: 1px solid #e2e8f0;
    }

    .member-info {
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    .member-avatar {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      object-fit: cover;
    }

    .member-name {
      font-weight: 600;
    }

    .member-actions {
      display: flex;
      gap: 0.5rem;
    }

    .invite-form {
      margin-top: 1.5rem;
    }

    .invite-form input {
      width: 100%;
      padding: 0.75rem;
      border: 1px solid #e2e8f0;
      border-radius: 6px;
      margin-bottom: 1rem;
    }

    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 1rem;
      margin-bottom: 1.5rem;
    }

    .stat-card {
      background: #f8fafc;
      border-radius: 8px;
      padding: 1.5rem;
      text-align: center;
    }

    .stat-value {
      font-size: 2rem;
      font-weight: 700;
      color: var(--primary);
      margin-bottom: 0.5rem;
    }

    .stat-label {
      color: #6b7280;
      font-size: 0.9rem;
    }

    /* Responsive */
    @media (max-width: 768px) {
      .teams-intro {
        flex-direction: column;
        text-align: center;
        padding: 1.5rem;
      }

      .teams-highlights {
        grid-template-columns: 1fr;
      }

      .team-card-classic {
        margin-bottom: 1.5rem;
      }

      .teams-grid-classic {
        grid-template-columns: 1fr;
      }

      .admin-modal-content {
        width: 95%;
        padding: 1rem;
      }

      .member-item {
        flex-direction: column;
        align-items: flex-start;
        gap: 1rem;
      }

      .member-actions {
        width: 100%;
        justify-content: flex-end;
      }
    }

    .teams-tabs {
      display: flex;
      border-bottom: 1.5px solid var(--gray);
      margin-bottom: 2rem;
      gap: 0.5rem;
      flex-wrap: wrap;
    }

    .teams-tab {
      background: none;
      border: none;
      outline: none;
      padding: 0.75rem 1.5rem;
      font-size: 1rem;
      color: #6b7280;
      cursor: pointer;
      font-weight: 500;
      border-radius: 8px 8px 0 0;
      transition: color 0.2s, background 0.2s;
      position: relative;
    }

    .teams-tab.active {
      color: var(--primary);
      background: #f8fafc;
      font-weight: 700;
    }

    .teams-tab.active::after {
      content: '';
      position: absolute;
      left: 0; right: 0; bottom: -1.5px;
      height: 3px;
      background: var(--primary);
      border-radius: 2px 2px 0 0;
    }
  </style>
{% endblock %}

{% block content %}
  <!-- Modal de administración -->
  <div class="admin-modal" id="adminModal">
    <div class="admin-modal-content">
      <button class="close-admin-modal" id="closeAdminModal">&times;</button>
      <h2 id="adminModalTitle">Administrar Comunidad</h2>
      
      <div class="admin-tabs">
        <button class="admin-tab active" data-tab="overview">Resumen</button>
        <button class="admin-tab" data-tab="members">Miembros</button>
        <button class="admin-tab" data-tab="settings">Configuración</button>
        <button class="admin-tab" data-tab="content">Contenido</button>
      </div>
      
      <div class="admin-tab-content active" id="overviewTab">
        <div class="stats-grid">
          <div class="stat-card">
            <div class="stat-value" id="membersCount">0</div>
            <div class="stat-label">Miembros</div>
          </div>
          <div class="stat-card">
            <div class="stat-value" id="activitiesCount">0</div>
            <div class="stat-label">Actividades</div>
          </div>
          <div class="stat-card">
            <div class="stat-value" id="impactPoints">0</div>
            <div class="stat-label">Puntos de Impacto</div>
          </div>
          <div class="stat-card">
            <div class="stat-value" id="beneficiariesCount">0</div>
            <div class="stat-label">Beneficiarios</div>
          </div>
        </div>
        
        <h3>Progreso de la comunidad</h3>
        <div class="progress-bar">
          <div class="progress-fill" id="communityProgress" style="width: 0%"></div>
        </div>
        <div class="progress-info">
          <span id="progressPercent">0% completado</span>
          <span id="progressAmount">0 € de 0 €</span>
        </div>
        
        <h3 style="margin-top: 2rem;">Acciones rápidas</h3>
        <div class="team-actions-classic" style="margin-top: 1rem;">
          <button class="btn btn-primary" id="createCauseBtn">
            <i class="fas fa-heart"></i> Crear Causa
          </button>
          <button class="btn btn-accent" id="createTaskBtn">
            <i class="fas fa-tasks"></i> Crear Tarea
          </button>
          <button class="btn btn-primary" id="createChallengeBtn">
            <i class="fas fa-trophy"></i> Crear Reto
          </button>
          <button class="btn btn-accent" id="createVolunteeringBtn">
            <i class="fas fa-hands-helping"></i> Crear Voluntariado
          </button>
        </div>
      </div>
      
      <div class="admin-tab-content" id="membersTab">
        <h3>Miembros actuales</h3>
        <div class="members-list" id="membersList">
          <!-- Los miembros se cargarán aquí dinámicamente -->
        </div>
        
        <h3 style="margin-top: 2rem;">Invitar nuevos miembros</h3>
        <div class="invite-form">
          <input type="email" id="inviteEmail" placeholder="Correo electrónico del usuario a invitar">
          <select id="inviteRole" class="form-control">
            <option value="member">Miembro</option>
            <option value="coordinator">Coordinador</option>
            <option value="founder">Fundador</option>
          </select>
          <button class="btn btn-primary" id="sendInviteBtn" style="margin-top: 1rem;">
            <i class="fas fa-paper-plane"></i> Enviar Invitación
          </button>
        </div>
      </div>
      
      <div class="admin-tab-content" id="settingsTab">
        <form id="teamSettingsForm">
          <div class="form-group">
            <label for="editTeamName">Nombre de la comunidad</label>
            <input type="text" id="editTeamName" name="editTeamName" required>
          </div>
          
          <div class="form-group">
            <label for="editTeamDesc">Descripción</label>
            <textarea id="editTeamDesc" name="editTeamDesc" rows="4" required></textarea>
          </div>
          
          <div class="form-group">
            <label for="editTeamPhoto">Foto/logo de la comunidad</label>
            <input type="file" id="editTeamPhoto" name="editTeamPhoto" accept="image/*">
            <img id="editTeamPhotoPreview" style="max-width: 200px; margin-top: 1rem; display: none;">
          </div>
          
          <div class="form-inline-group">
            <div class="form-group">
              <label for="editTeamCategory">Categoría</label>
              <select id="editTeamCategory" name="editTeamCategory" required>
                <option value="medio_ambiente">Medio Ambiente</option>
                <option value="educacion">Educación</option>
                <option value="salud">Salud</option>
                <option value="animales">Animales</option>
                <option value="comunidad">Comunidad</option>
                <option value="otros">Otros</option>
              </select>
            </div>
            <div class="form-group">
              <label for="editTeamPrivacy">Privacidad</label>
              <select id="editTeamPrivacy" name="editTeamPrivacy" required>
                <option value="public">Pública</option>
                <option value="private">Privada</option>
              </select>
            </div>
          </div>
          
          <div class="form-group">
            <label for="editTeamTags">Etiquetas (separadas por comas)</label>
            <input type="text" id="editTeamTags" name="editTeamTags">
          </div>
          
          <div class="form-group">
            <label for="editTeamGoal">Meta de recaudación (€)</label>
            <input type="number" id="editTeamGoal" name="editTeamGoal" min="0">
          </div>
          
          <button type="submit" class="btn btn-primary">
            <i class="fas fa-save"></i> Guardar Cambios
          </button>
        </form>
      </div>
      
      <div class="admin-tab-content" id="contentTab">
        <h3>Mensaje para la comunidad</h3>
        <textarea id="teamMessage" rows="5" style="width: 100%; margin-bottom: 1rem;"></textarea>
        <button class="btn btn-primary" id="saveMessageBtn">
          <i class="fas fa-bullhorn"></i> Publicar Mensaje
        </button>
        
        <h3 style="margin-top: 2rem;">Actividades recientes</h3>
        <div id="recentActivities">
          <!-- Las actividades se cargarán aquí dinámicamente -->
        </div>
      </div>
    </div>
  </div>

  <!-- Contenido principal de la página Mis Comunidades -->
  <div class="main-container">
    <!-- Sección introductoria -->
    <div class="teams-intro">
      <div class="teams-intro-icon">
        <i class="fas fa-user-group"></i>
      </div>
      <div class="teams-intro-content">
        <h2>Mis Comunidades</h2>
        <p>Aquí puedes gestionar todas las comunidades de las que formas parte. Como administrador, podrás modificar la configuración, invitar miembros, crear actividades y mucho más.</p>
      </div>
    </div>
    
    <!-- Destacados -->
    <div class="teams-highlights">
      <div class="highlight-card">
        <div class="highlight-icon"><i class="fas fa-crown"></i></div>
        <div class="highlight-title">Tus comunidades</div>
        <div class="highlight-desc">Gestiona las comunidades que has creado o donde tienes permisos de administración.</div>
      </div>
      <div class="highlight-card">
        <div class="highlight-icon"><i class="fas fa-users"></i></div>
        <div class="highlight-title">Miembro activo</div>
        <div class="highlight-desc">Tus comunidades donde participas como miembro regular.</div>
      </div>
      <div class="highlight-card">
        <div class="highlight-icon"><i class="fas fa-bell"></i></div>
        <div class="highlight-title">Solicitudes</div>
        <div class="highlight-desc">Gestiona las solicitudes pendientes para unirse a tus comunidades.</div>
      </div>
      <div class="highlight-card">
        <div class="highlight-icon"><i class="fas fa-chart-line"></i></div>
        <div class="highlight-title">Tu impacto</div>
        <div class="highlight-desc">Revisa el impacto colectivo de todas tus comunidades.</div>
      </div>
    </div>
    
    <!-- Cabecera con búsqueda -->
    <div class="section-header">
      <h1>Tus Comunidades</h1>
    </div>
    
    <div class="search-container">
      <input type="text" id="search-input" placeholder="Buscar entre tus comunidades...">
      <i class="fas fa-search" style="color:#4a6fa5;"></i>
    </div>
    
    <!-- Tabs para filtrar -->
    <div class="tabs">
      <button class="tab active" data-filter="all">Todas</button>
      <button class="tab" data-filter="founder">Founder</button>
      <button class="tab" data-filter="coordinator">Coordinator</button>
      <button class="tab" data-filter="member">Miembro</button>
      <button class="tab" data-filter="pending">Requests</button>
    </div>
    
    <!-- Grid de comunidades -->
    <div class="teams-grid-classic" id="teamsGrid">
      <!-- Las comunidades se cargarán aquí dinámicamente -->
    </div>
    
    <!-- Paginación -->
    <div class="pagination" id="pagination">
      <button id="prevPage" class="btn btn-outline" disabled>
        <i class="fas fa-chevron-left"></i>
      </button>
      <span id="pageInfo">1</span>
      <button id="nextPage" class="btn btn-outline" disabled>
        <i class="fas fa-chevron-right"></i>
      </button>
    </div>
  </div>
{% endblock %}

{% block scripts %}
  {{ super() }}
  <script>
    document.addEventListener('DOMContentLoaded', async function() {
      let currentPage = 1;
      const itemsPerPage = 9;
      let allTeams = [];
      let filteredTeams = [];
      let currentAdminTeam = null;

      // 1. Obtener usuario actual
      const { data: { session } } = await supabase.auth.getSession();
      if (!session?.user) {
        window.location.href = '/login?return=/my-teams';
        return;
      }
      const userId = session.user.id;

      // 2. Cargar comunidades del usuario
      await loadUserTeams();

      // 3. Eventos UI
      document.querySelectorAll('.tab').forEach(tab => {
        tab.addEventListener('click', function() {
          document.querySelector('.tab.active').classList.remove('active');
          this.classList.add('active');
          currentPage = 1;
          filterAndRenderTeams();
        });
      });
      document.getElementById('search-input').addEventListener('input', function() {
        currentPage = 1;
        filterAndRenderTeams();
      });
      document.getElementById('prevPage').addEventListener('click', function() {
        if (currentPage > 1) { currentPage--; renderTeams(); }
      });
      document.getElementById('nextPage').addEventListener('click', function() {
        const totalPages = Math.ceil(filteredTeams.length / itemsPerPage);
        if (currentPage < totalPages) { currentPage++; renderTeams(); }
      });
      document.getElementById('closeAdminModal').addEventListener('click', function() {
        document.getElementById('adminModal').classList.remove('active');
        document.body.style.overflow = '';
      });

      // Tabs del modal de administración
      document.querySelectorAll('.admin-tab').forEach(tab => {
        tab.addEventListener('click', function() {
          const tabId = this.getAttribute('data-tab');
          document.querySelectorAll('.admin-tab-content').forEach(content => content.classList.remove('active'));
          document.querySelectorAll('.admin-tab').forEach(t => t.classList.remove('active'));
          this.classList.add('active');
          document.getElementById(`${tabId}Tab`).classList.add('active');
          if (tabId === 'members' && currentAdminTeam) loadTeamMembers(currentAdminTeam.id);
          if (tabId === 'content' && currentAdminTeam) loadRecentActivities(currentAdminTeam.id);
        });
      });

      // --- FUNCIONES PRINCIPALES ---

      async function loadUserTeams() {
        try {
          // 1. Obtener todos los memberships del usuario
          const { data: memberships, error: membershipsError } = await supabase
            .from('team_members')
            .select('team_id, role')
            .eq('user_id', userId);
          if (membershipsError) throw membershipsError;

          // 2. Obtener los equipos donde el usuario es el creador
          const { data: createdTeams, error: createdTeamsError } = await supabase
            .from('teams')
            .select('*')
            .eq('creator_id', userId);
          if (createdTeamsError) throw createdTeamsError;

          // 3. Obtener los detalles de los equipos donde es miembro
          const teamIds = memberships.map(m => m.team_id);
          let { data: teams, error: teamsError } = await supabase
            .from('teams')
            .select('*')
            .in('id', teamIds.length ? teamIds : ['00000000-0000-0000-0000-000000000000'])
            .order('created_at', { ascending: false });
          if (teamsError) throw teamsError;

          // 4. Combinar y eliminar duplicados (si el creador también es miembro)
          const allTeamIds = new Set();
          allTeams = [
            ...teams.map(team => {
              const membership = memberships.find(m => m.team_id === team.id);
              allTeamIds.add(team.id);
              const role = membership ? membership.role : (team.creator_id === userId ? 'founder' : 'member');
              return {
                ...team,
                user_role: role,
                is_admin: ['founder', 'admin', 'coordinator'].includes(role),
                is_moderator: ['admin', 'coordinator'].includes(role),
                is_founder: role === 'founder',
                tags: Array.isArray(team.tags) ? team.tags : [],
              };
            }),
            ...createdTeams
              .filter(team => !allTeamIds.has(team.id))
              .map(team => ({
                ...team,
                user_role: 'founder',
                is_admin: true,
                is_moderator: false,
                is_founder: true,
                tags: Array.isArray(team.tags) ? team.tags : [],
              }))
          ];

          filteredTeams = [...allTeams];
          currentPage = 1;
          renderTeams();
        } catch (error) {
          console.error('Error loading user teams:', error);
          showEmptyState();
        }
      }

      function showEmptyState() {
        const container = document.getElementById('teamsGrid');
        container.innerHTML = `
          <div class="empty-state" style="grid-column: 1 / -1; text-align: center; padding: 3rem;">
            <i class="fas fa-users-slash" style="font-size: 3rem; color: #a0aec0; margin-bottom: 1rem;"></i>
            <h3 style="color: #4a5568; margin-bottom: 0.5rem;">No formas parte de ninguna comunidad aún</h3>
            <p style="color: #718096; margin-bottom: 1.5rem;">Únete a una comunidad existente o crea una nueva para empezar.</p>
            <a href="/teams" class="btn btn-primary" style="margin-right: 1rem;">
              <i class="fas fa-search"></i> Explorar Comunidades
            </a>
            <a href="/teams/create" class="btn btn-accent">
              <i class="fas fa-plus"></i> Crear Comunidad
            </a>
          </div>
        `;
        document.getElementById('pagination').style.display = 'none';
      }

      function filterAndRenderTeams() {
        const activeFilter = document.querySelector('.tab.active').getAttribute('data-filter');
        const searchTerm = document.getElementById('search-input').value.toLowerCase();
        filteredTeams = allTeams.filter(team => {
          if (activeFilter !== 'all') {
            if (activeFilter === 'founder' && team.user_role !== 'founder') return false;
            if (activeFilter === 'coordinator' && !['coordinator', 'admin'].includes(team.user_role)) return false;
            if (activeFilter === 'member' && team.user_role !== 'member') return false;
            if (activeFilter === 'pending' && team.user_role !== 'pending') return false;
          }
          if (searchTerm) {
            const matchesName = team.name && team.name.toLowerCase().includes(searchTerm);
            const matchesDesc = team.description && team.description.toLowerCase().includes(searchTerm);
            const matchesTags = team.tags && team.tags.some(tag => tag && tag.toLowerCase().includes(searchTerm));
            return matchesName || matchesDesc || matchesTags;
          }
          return true;
        });
        renderTeams();
      }

      function renderTeams() {
        const startIdx = (currentPage - 1) * itemsPerPage;
        const endIdx = startIdx + itemsPerPage;
        const paginatedTeams = filteredTeams.slice(startIdx, endIdx);
        const container = document.getElementById('teamsGrid');
        container.innerHTML = '';
        if (paginatedTeams.length === 0) {
          container.innerHTML = `
            <div class="empty-state" style="grid-column: 1 / -1; text-align: center; padding: 3rem;">
              <i class="fas fa-search" style="font-size: 3rem; color: #a0aec0; margin-bottom: 1rem;"></i>
              <h3 style="color: #4a5568; margin-bottom: 0.5rem;">No se encontraron comunidades</h3>
              <p style="color: #718096;">No hay comunidades que coincidan con tu búsqueda.</p>
            </div>
          `;
          document.getElementById('pagination').style.display = 'none';
          return;
        }
        document.getElementById('pagination').style.display = 'flex';

        paginatedTeams.forEach(team => {
          const membersCount = team.members_count || 1;
          const tagsHtml = team.tags?.length
            ? `<div class="team-tags-classic">${team.tags.slice(0, 4).map(tag => `<span class="team-tag-classic">${tag}</span>`).join('')}${team.tags.length > 4 ? `<span class="team-tag-classic tag-more">+${team.tags.length - 4}</span>` : ''}</div>`
            : '';
          const isTrending = membersCount >= 20 || (team.impact || 0) >= 1000;
          const recaudado = team.funds_raised || 0;
          const meta = team.goal || 1000;
          const porcentaje = meta ? Math.min(100, Math.round((recaudado / meta) * 100)) : 0;
          const roleBadgeClass = {
            'founder': 'role-badge admin',
            'coordinator': 'role-badge moderator',
            'admin': 'role-badge moderator',
            'member': 'role-badge member',
            'pending': 'role-badge member'
          }[team.user_role] || 'role-badge member';
          const roleBadgeText = {
            'founder': 'Fundador',
            'coordinator': 'Coordinador',
            'admin': 'Coordinador',
            'member': 'Miembro',
            'pending': 'Solicitud pendiente'
          }[team.user_role] || 'Miembro';
          const roleBadge = `<span class="${roleBadgeClass}"><i class="fas fa-${team.user_role === 'admin' ? 'crown' : team.user_role === 'moderator' ? 'star' : 'user'}"></i> ${roleBadgeText}</span>`;
          let badgePrivada = team.privacy === 'private'
            ? `<div class="team-badge-classic" style="top:1rem;right:1rem;background:var(--gray);color:var(--primary-dark);"><i class="fas fa-lock"></i> Privada</div>`
            : '';
          let badgeTrending = isTrending
            ? `<div class="team-badge-classic" style="top:${team.privacy === 'private' ? '3.2rem' : '1rem'};right:1rem;background:#ffe600;color:#b8860b;"><i class="fas fa-arrow-trend-up"></i> Trending</div>`
            : '';
          const card = document.createElement('div');
          card.className = 'team-card-classic';
          card.innerHTML = `
            <div class="team-image-classic">
              <img src="${team.photo || 'https://via.placeholder.com/350x180?text=Comunidad'}" alt="${team.name}">
              <div class="team-badge-classic points" style="top:1rem;left:1rem;right:auto;background:var(--primary);color:#fff;">
                <i class="fas fa-bolt"></i> +${team.impact || 0} pts
              </div>
              ${badgePrivada}${badgeTrending}
            </div>
            <div class="team-content-classic">
              <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.5rem;">
                <h3>${team.name}</h3>
                ${roleBadge}
              </div>
              <p>${team.description || 'Esta comunidad no tiene descripción aún.'}</p>
              <div class="team-meta-classic">
                <div class="meta-item-classic"><i class="fas fa-layer-group"></i> ${getCategoryName(team.category)}</div>
                <div class="meta-item-classic"><i class="fas fa-tasks"></i> ${team.activities_count || 0} actividades</div>
                <div class="meta-item-classic"><i class="fas fa-heart"></i> ${team.beneficiaries || 0} beneficiarios</div>
                <div class="meta-item-classic"><i class="fas fa-users"></i> ${membersCount} miembros</div>
              </div>
              ${tagsHtml}
              <div class="team-progress-classic">
                <div class="progress-bar">
                  <div class="progress-fill" style="width:${porcentaje}%;">
                    ${porcentaje > 10 ? porcentaje + '%' : ''}
                  </div>
                </div>
                <div class="progress-info">
                  <span>${porcentaje}% completado</span>
                  <span>${recaudado} € de ${meta} €</span>
                </div>
              </div>
              <div class="team-actions-classic">
                <a href="/teams/${team.id}" class="btn btn-primary">
                  Ver más
                </a>
                ${team.user_role === 'pending' ? `
                  <button class="btn btn-outline" disabled>
                    <i class="fas fa-clock"></i> Pendiente
                  </button>
                ` : team.is_admin || team.is_moderator ? `
                  <button class="btn btn-accent admin-team-btn" data-team-id="${team.id}">
                    <i class="fas fa-cog"></i> Administrar
                  </button>
                ` : `
                  <button class="btn btn-outline leave-team-btn" data-team-id="${team.id}">
                    <i class="fas fa-sign-out-alt"></i> Salir
                  </button>
                `}
              </div>
            </div>
          `;
          container.appendChild(card);
        });

        // Botones de administrar
        document.querySelectorAll('.admin-team-btn').forEach(btn => {
          btn.addEventListener('click', function() {
            const teamId = this.getAttribute('data-team-id');
            const team = allTeams.find(t => t.id === teamId);
            if (team) openAdminModal(team);
          });
        });
        // Botones de salir
        document.querySelectorAll('.leave-team-btn').forEach(btn => {
          btn.addEventListener('click', async function() {
            const teamId = this.getAttribute('data-team-id');
            if (confirm('¿Estás seguro de que quieres salir de esta comunidad?')) {
              try {
                const { error } = await supabase
                  .from('team_members')
                  .delete()
                  .eq('team_id', teamId)
                  .eq('user_id', userId);
                if (error) throw error;
                await loadUserTeams();
                alert('Has salido de la comunidad correctamente.');
              } catch (error) {
                console.error('Error leaving team:', error);
                alert('Error al salir de la comunidad: ' + error.message);
              }
            }
          });
        });
        updatePagination();
      }

      function updatePagination() {
        const totalPages = Math.max(1, Math.ceil(filteredTeams.length / itemsPerPage));
        document.getElementById('pageInfo').textContent = `${currentPage} / ${totalPages}`;
        document.getElementById('prevPage').disabled = currentPage <= 1;
        document.getElementById('nextPage').disabled = currentPage >= totalPages;
      }

      function getCategoryName(category) {
        const categories = {
          'medio_ambiente': 'Medio Ambiente',
          'educacion': 'Educación',
          'salud': 'Salud',
          'animales': 'Animales',
          'comunidad': 'Comunidad',
          'otros': 'Otros'
        };
        return categories[category] || 'General';
      }

      // --- FUNCIONES MODAL Y COMPLEMENTARIAS ---

      function openAdminModal(team) {
        currentAdminTeam = team;
        document.getElementById('adminModalTitle').textContent = `Administrar ${team.name}`;
        document.getElementById('adminModal').classList.add('active');
        document.body.style.overflow = 'hidden';

        // Actualizar datos en el modal
        document.getElementById('membersCount').textContent = team.members_count || 0;
        document.getElementById('activitiesCount').textContent = team.activities_count || 0;
        document.getElementById('impactPoints').textContent = team.impact || 0;
        document.getElementById('beneficiariesCount').textContent = team.beneficiaries || 0;

        // Configurar progreso
        const recaudado = team.funds_raised || 0;
        const meta = team.goal || 1000;
        const porcentaje = meta ? Math.min(100, Math.round((recaudado / meta) * 100)) : 0;
        document.getElementById('communityProgress').style.width = `${porcentaje}%`;
        document.getElementById('progressPercent').textContent = `${porcentaje}% completado`;
        document.getElementById('progressAmount').textContent = `${recaudado} € de ${meta} €`;
      }

      async function loadTeamMembers(teamId) {
        try {
          const { data: members, error } = await supabase
            .from('team_members')
            .select('user:profiles(id, name, avatar_url), role')
            .eq('team_id', teamId);

          if (error) throw error;

          const membersList = document.getElementById('membersList');
          membersList.innerHTML = '';

          members.forEach(member => {
            const memberItem = document.createElement('div');
            memberItem.className = 'member-item';
            memberItem.innerHTML = `
              <div class="member-info">
                <img src="${member.user.avatar_url || '/default-avatar.png'}" class="member-avatar" alt="${member.user.name}">
                <span class="member-name">${member.user.name}</span>
              </div>
              <div class="member-actions">
                <span class="role-badge ${member.role === 'founder' ? 'admin' : member.role === 'coordinator' ? 'moderator' : 'member'}">
                  ${member.role === 'founder' ? 'Fundador' : member.role === 'coordinator' ? 'Coordinador' : 'Miembro'}
                </span>
              </div>
            `;
            membersList.appendChild(memberItem);
          });
        } catch (error) {
          console.error('Error loading team members:', error);
        }
      }

      async function loadRecentActivities(teamId) {
        try {
          const { data: activities, error } = await supabase
            .from('activities')
            .select('*')
            .eq('team_id', teamId)
            .order('created_at', { ascending: false })
            .limit(5);

          if (error) throw error;

          const activitiesContainer = document.getElementById('recentActivities');
          activitiesContainer.innerHTML = '';

          if (!activities || activities.length === 0) {
            activitiesContainer.innerHTML = '<p>No hay actividades recientes.</p>';
            return;
          }

          activities.forEach(activity => {
            const activityElement = document.createElement('div');
            activityElement.className = 'activity-item';
            activityElement.innerHTML = `
              <h4>${activity.title}</h4>
              <p>${activity.description}</p>
              <small>${new Date(activity.created_at).toLocaleDateString()}</small>
            `;
            activitiesContainer.appendChild(activityElement);
          });
        } catch (error) {
          console.error('Error loading recent activities:', error);
        }
      }
    }); // Fin del DOMContentLoaded
  </script>
{% endblock %}
{% extends "layout.njk" %}

{% block title %}Solidarity - Mis Comunidades{% endblock %}

{% block head %}
  {{ super() }}
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
  <style>
    :root {
      --primary: #4a6fa5;
      --primary-dark: #166088;
      --gray: #e2e8f0;
      --white: #fff;
      --accent: #4fc3a1;
      --accent-dark: #3da58a;
      --urgent: #e53e3e;
    }

    .main-container {
      max-width: 1200px;
      margin: 2rem auto;
      padding: 0 2rem;
    }

    .section-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;
    }

    .section-header h1 {
      font-size: 2rem;
      color: var(--primary);
      font-weight: 700;
    }

    .search-container {
      margin-bottom: 2rem;
      display: flex;
      align-items: center;
      gap: 0.7rem;
    }

    .search-container input {
      flex: 1;
      padding: 0.6rem 1.2rem;
      border-radius: 7px;
      border: 1.5px solid var(--gray);
      font-size: 1.05rem;
      outline: none;
      transition: border 0.2s;
      background: #fff;
    }

    .search-container input:focus {
      border-color: var(--primary);
    }

    .tabs {
      display: flex;
      border-bottom: 1px solid var(--gray);
      margin-bottom: 2rem;
      flex-wrap: wrap;
    }

    .tab {
      padding: 0.75rem 1.5rem;
      cursor: pointer;
      position: relative;
      font-weight: 500;
      color: #6b7280;
      background: none;
      border: none;
      outline: none;
    }

    .tab.active {
      color: var(--primary);
      font-weight: 600;
    }

    .tab.active::after {
      content: '';
      position: absolute;
      bottom: -1px;
      left: 0;
      width: 100%;
      height: 3px;
      background: var(--primary);
    }

    /* Intro y destacados */
    .teams-intro {
      background: linear-gradient(135deg, #f0f7ff 0%, #e6f0fa 100%);
      border-radius: 16px;
      padding: 2.5rem;
      margin-bottom: 3rem;
      display: flex;
      align-items: center;
      gap: 2rem;
      border: 1px solid var(--gray);
    }

    .teams-intro-icon {
      font-size: 3.5rem;
      color: var(--accent);
    }

    .teams-intro-content h2 {
      font-size: 1.8rem;
      color: var(--primary);
      margin-bottom: 0.5rem;
    }

    .teams-intro-content p {
      color: #4a5568;
      line-height: 1.6;
    }

    .teams-highlights {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
      gap: 1.5rem;
      margin-bottom: 3rem;
    }

    .highlight-card {
      background: white;
      border-radius: 10px;
      padding: 1.5rem;
      box-shadow: 0 5px 15px rgba(0,0,0,0.05);
      border: 1px solid var(--gray);
      transition: all 0.3s ease;
    }

    .highlight-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 25px rgba(0,0,0,0.1);
      border-color: var(--accent);
    }

    .highlight-icon {
      font-size: 1.8rem;
      color: var(--accent);
      margin-bottom: 1rem;
    }

    .highlight-title {
      font-size: 1.1rem;
      font-weight: 600;
      color: var(--primary);
      margin-bottom: 0.5rem;
    }

    .highlight-desc {
      color: #6b7280;
      font-size: 0.95rem;
      line-height: 1.5;
    }

    /* Grid de comunidades */
    .teams-grid-classic {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
      gap: 2rem;
    }

    .team-card-classic {
      background: white;
      border-radius: 12px;
      overflow: hidden;
      box-shadow: 0 5px 15px rgba(0,0,0,0.05);
      transition: all 0.3s ease;
      border: 1px solid var(--gray);
    }

    .team-card-classic:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 25px rgba(0,0,0,0.1);
    }

    .team-image-classic {
      height: 180px;
      overflow: hidden;
      position: relative;
    }

    .team-image-classic img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: transform 0.3s ease;
    }

    .team-card-classic:hover .team-image-classic img {
      transform: scale(1.05);
    }

    .team-badge-classic {
      position: absolute;
      top: 1rem;
      right: 1rem;
      background: rgba(255, 255, 255, 0.9);
      padding: 0.3rem 0.8rem;
      border-radius: 50px;
      font-size: 0.8rem;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
      z-index: 2;
    }

    .team-badge-classic.points {
      background: var(--primary);
      color: white;
      left: 1rem;
      right: auto;
    }

    .team-badge-classic[style*="background:#ffe066"] {
      background: #ffe066 !important;
      color: #b8860b !important;
    }

    .team-badge-classic[style*="background:var(--gray)"] {
      background: var(--gray) !important;
      color: var(--primary-dark) !important;
    }

    .team-badge-classic[style*="background:#ffd600"] {
      background: #ffd600 !important;
      color: #a67c00 !important;
    }

    .team-content-classic {
      padding: 1.5rem;
    }

    .team-content-classic h3 {
      font-size: 1.3rem;
      margin-bottom: 0.8rem;
      color: #2d3748;
    }

    .team-content-classic p {
      color: #6b7280;
      margin-bottom: 1.5rem;
      font-size: 0.95rem;
      line-height: 1.6;
    }

    .team-meta-classic {
      display: flex;
      gap: 1rem;
      margin-bottom: 1.5rem;
      font-size: 0.85rem;
      flex-wrap: wrap;
    }

    .meta-item-classic {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      color: #6b7280;
    }

    .meta-item-classic i {
      color: var(--primary);
    }

    .members-count-classic {
      display: inline-flex;
      align-items: center;
      background: #f0f9ff;
      color: var(--primary);
      padding: 0.3rem 0.8rem;
      border-radius: 50px;
      font-size: 0.85rem;
      font-weight: 600;
    }

    .members-count-classic i {
      margin-right: 0.3rem;
    }

    .team-progress-classic {
      margin-bottom: 1.5rem;
    }

    .team-actions-classic {
      display: flex;
      gap: 0.8rem;
    }

    /* Barra de progreso */
    .progress-bar {
      width: 100%;
      background: var(--gray);
      border-radius: 4px;
      height: 8px;
      position: relative;
      overflow: hidden;
      margin-bottom: 0.5rem;
      box-shadow: none;
    }

    .progress-fill {
      height: 100%;
      background: var(--primary);
      border-radius: 4px;
      transition: width 0.4s cubic-bezier(.4,1,.7,1);
      color: #fff;
      font-size: 0.95em;
      font-weight: 700;
      display: flex;
      align-items: center;
      justify-content: flex-end;
      padding-right: 8px;
      box-shadow: none;
    }

    .progress-info {
      display: flex;
      justify-content: space-between;
      font-size: 0.9rem;
      color: #6b7280;
    }

    .team-badge-classic[style*="background:#ffe600"] {
      background: #ffe600 !important;
      color: #b8860b !important;
    }

    /* Tags */
    .team-tags-classic {
      display: flex;
      flex-wrap: wrap;
      gap: 0.3em;
      margin-bottom: 0.7em;
    }

    .team-tag-classic {
      background: #e6f0fa;
      color: var(--primary);
      border-radius: 50px;
      padding: 0.22em 0.95em;
      font-size: 0.92em;
      font-weight: 600;
      margin-bottom: 0.2em;
      margin-right: 0.3em;
      transition: background 0.2s, color 0.2s;
      border: 1px solid #dbeafe;
      letter-spacing: 0.01em;
      white-space: nowrap;
    }

    .team-tag-classic.tag-more {
      background: #ffe600;
      color: #a67c00;
      border: 1px solid #ffe600;
    }

    /* Badges de rol */
    .role-badge {
      padding: 0.3rem 0.8rem;
      border-radius: 50px;
      font-size: 0.85rem;
      font-weight: 600;
      display: inline-flex;
      align-items: center;
      gap: 0.3rem;
    }

    .role-badge.admin {
      background: #4a6fa5;
      color: white;
    }

    .role-badge.moderator {
      background: #4fc3a1;
      color: white;
    }

    .role-badge.member {
      background: #e2e8f0;
      color: #4a5568;
    }

    /* Paginación */
    .pagination {
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 1.2rem;
      margin: 3rem 0 1.5rem 0;
    }

    .pagination .btn {
      min-width: 40px;
      height: 40px;
      border-radius: 50%;
      padding: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.15rem;
    }

    #pageInfo {
      font-weight: 600;
      color: var(--primary);
      font-size: 1.1rem;
      min-width: 38px;
      text-align: center;
      letter-spacing: 0.03em;
    }

    /* Modal de administración */
    .admin-modal {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.5);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1000;
      opacity: 0;
      visibility: hidden;
      transition: all 0.3s;
    }

    .admin-modal.active {
      opacity: 1;
      visibility: visible;
    }

    .admin-modal-content {
      background: white;
      border-radius: 12px;
      width: 90%;
      max-width: 800px;
      max-height: 90vh;
      overflow-y: auto;
      padding: 2rem;
      box-shadow: 0 5px 20px rgba(0,0,0,0.2);
      position: relative;
    }

    .close-admin-modal {
      position: absolute;
      top: 1rem;
      right: 1rem;
      background: none;
      border: none;
      font-size: 1.5rem;
      cursor: pointer;
      color: #6b7280;
    }

    .admin-tabs {
      display: flex;
      border-bottom: 1px solid #e2e8f0;
      margin-bottom: 1.5rem;
    }

    .admin-tab {
      padding: 0.75rem 1.5rem;
      cursor: pointer;
      position: relative;
      font-weight: 500;
      color: #6b7280;
      background: none;
      border: none;
      outline: none;
    }

    .admin-tab.active {
      color: var(--primary);
      font-weight: 600;
    }

    .admin-tab.active::after {
      content: '';
      position: absolute;
      bottom: -1px;
      left: 0;
      width: 100%;
      height: 3px;
      background: var(--primary);
    }

    .admin-tab-content {
      display: none;
    }

    .admin-tab-content.active {
      display: block;
    }

    .members-list {
      margin-top: 1rem;
    }

    .member-item {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 1rem;
      border-bottom: 1px solid #e2e8f0;
    }

    .member-info {
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    .member-avatar {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      object-fit: cover;
    }

    .member-name {
      font-weight: 600;
    }

    .member-actions {
      display: flex;
      gap: 0.5rem;
    }

    .invite-form {
      margin-top: 1.5rem;
    }

    .invite-form input {
      width: 100%;
      padding: 0.75rem;
      border: 1px solid #e2e8f0;
      border-radius: 6px;
      margin-bottom: 1rem;
    }

    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 1rem;
      margin-bottom: 1.5rem;
    }

    .stat-card {
      background: #f8fafc;
      border-radius: 8px;
      padding: 1.5rem;
      text-align: center;
    }

    .stat-value {
      font-size: 2rem;
      font-weight: 700;
      color: var(--primary);
      margin-bottom: 0.5rem;
    }

    .stat-label {
      color: #6b7280;
      font-size: 0.9rem;
    }

    /* Responsive */
    @media (max-width: 768px) {
      .teams-intro {
        flex-direction: column;
        text-align: center;
        padding: 1.5rem;
      }

      .teams-highlights {
        grid-template-columns: 1fr;
      }

      .team-card-classic {
        margin-bottom: 1.5rem;
      }

      .teams-grid-classic {
        grid-template-columns: 1fr;
      }

      .admin-modal-content {
        width: 95%;
        padding: 1rem;
      }

      .member-item {
        flex-direction: column;
        align-items: flex-start;
        gap: 1rem;
      }

      .member-actions {
        width: 100%;
        justify-content: flex-end;
      }
    }

    .teams-tabs {
      display: flex;
      border-bottom: 1.5px solid var(--gray);
      margin-bottom: 2rem;
      gap: 0.5rem;
      flex-wrap: wrap;
    }

    .teams-tab {
      background: none;
      border: none;
      outline: none;
      padding: 0.75rem 1.5rem;
      font-size: 1rem;
      color: #6b7280;
      cursor: pointer;
      font-weight: 500;
      border-radius: 8px 8px 0 0;
      transition: color 0.2s, background 0.2s;
      position: relative;
    }

    .teams-tab.active {
      color: var(--primary);
      background: #f8fafc;
      font-weight: 700;
    }

    .teams-tab.active::after {
      content: '';
      position: absolute;
      left: 0; right: 0; bottom: -1.5px;
      height: 3px;
      background: var(--primary);
      border-radius: 2px 2px 0 0;
    }

    /* Modal de ver más comunidad */
    #teamModal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.7);
      z-index: 1001;
      justify-content: center;
      align-items: center;
    }

    #teamModal.active {
      display: flex;
    }

    #teamModal .modal-content {
      background: #fff;
      border-radius: 18px;
      max-width: 800px;
      width: 95vw;
      padding: 2rem;
      box-shadow: 0 8px 32px rgba(74,111,165,0.13);
      position: relative;
      max-height: 90vh;
      overflow-y: auto;
    }

    #teamModal .close-admin-modal {
      position: absolute;
      top: 1.5rem;
      right: 1.5rem;
      background: none;
      border: none;
      font-size: 1.8rem;
      color: #6b7280;
      cursor: pointer;
      transition: color 0.2s;
    }

    #teamModal .close-admin-modal:hover {
      color: #4a6fa5;
    }

    #teamModal #teamModalBody {
      padding: 0.5rem;
    }
  </style>
{% endblock %}

{% block content %}
  <!-- Modal de administración -->
  <div class="admin-modal" id="adminModal">
    <div class="admin-modal-content">
      <button class="close-admin-modal" id="closeAdminModal">&times;</button>
      <h2 id="adminModalTitle">Administrar Comunidad</h2>
      
      <div class="admin-tabs">
        <button class="admin-tab active" data-tab="overview">Resumen</button>
        <button class="admin-tab" data-tab="members">Miembros</button>
        <button class="admin-tab" data-tab="settings">Configuración</button>
        <button class="admin-tab" data-tab="content">Contenido</button>
      </div>
      
      <div class="admin-tab-content active" id="overviewTab">
        <div class="stats-grid">
          <div class="stat-card">
            <div class="stat-value" id="membersCount">0</div>
            <div class="stat-label">Miembros</div>
          </div>
          <div class="stat-card">
            <div class="stat-value" id="activitiesCount">0</div>
            <div class="stat-label">Actividades</div>
          </div>
          <div class="stat-card">
            <div class="stat-value" id="impactPoints">0</div>
            <div class="stat-label">Puntos de Impacto</div>
          </div>
          <div class="stat-card">
            <div class="stat-value" id="beneficiariesCount">0</div>
            <div class="stat-label">Beneficiarios</div>
          </div>
        </div>
        
        <h3>Progreso de la comunidad</h3>
        <div class="progress-bar">
          <div class="progress-fill" id="communityProgress" style="width: 0%"></div>
        </div>
        <div class="progress-info">
          <span id="progressPercent">0% completado</span>
          <span id="progressAmount">0 € de 0 €</span>
        </div>
        
        <h3 style="margin-top: 2rem;">Acciones rápidas</h3>
        <div class="team-actions-classic" style="margin-top: 1rem;">
          <button class="btn btn-primary" id="createCauseBtn">
            <i class="fas fa-heart"></i> Crear Causa
          </button>
          <button class="btn btn-accent" id="createTaskBtn">
            <i class="fas fa-tasks"></i> Crear Tarea
          </button>
          <button class="btn btn-primary" id="createChallengeBtn">
            <i class="fas fa-trophy"></i> Crear Reto
          </button>
          <button class="btn btn-accent" id="createVolunteeringBtn">
            <i class="fas fa-hands-helping"></i> Crear Voluntariado
          </button>
        </div>
      </div>
      
      <div class="admin-tab-content" id="membersTab">
        <h3>Miembros actuales</h3>
        <div class="members-list" id="membersList">
          <!-- Los miembros se cargarán aquí dinámicamente -->
        </div>
        
        <h3 style="margin-top: 2rem;">Invitar nuevos miembros</h3>
        <div class="invite-form">
          <input type="email" id="inviteEmail" placeholder="Correo electrónico del usuario a invitar">
          <select id="inviteRole" class="form-control">
            <option value="member">Miembro</option>
            <option value="coordinator">Coordinador</option>
            <option value="founder">Fundador</option>
          </select>
          <button class="btn btn-primary" id="sendInviteBtn" style="margin-top: 1rem;">
            <i class="fas fa-paper-plane"></i> Enviar Invitación
          </button>
        </div>
      </div>
      
      <div class="admin-tab-content" id="settingsTab">
        <form id="teamSettingsForm">
          <div class="form-group">
            <label for="editTeamName">Nombre de la comunidad</label>
            <input type="text" id="editTeamName" name="editTeamName" required>
          </div>
          
          <div class="form-group">
            <label for="editTeamDesc">Descripción</label>
            <textarea id="editTeamDesc" name="editTeamDesc" rows="4" required></textarea>
          </div>
          
          <div class="form-group">
            <label for="editTeamPhoto">Foto/logo de la comunidad</label>
            <input type="file" id="editTeamPhoto" name="editTeamPhoto" accept="image/*">
            <img id="editTeamPhotoPreview" style="max-width: 200px; margin-top: 1rem; display: none;">
          </div>
          
          <div class="form-inline-group">
            <div class="form-group">
              <label for="editTeamCategory">Categoría</label>
              <select id="editTeamCategory" name="editTeamCategory" required>
                <option value="medio_ambiente">Medio Ambiente</option>
                <option value="educacion">Educación</option>
                <option value="salud">Salud</option>
                <option value="animales">Animales</option>
                <option value="comunidad">Comunidad</option>
                <option value="otros">Otros</option>
              </select>
            </div>
            <div class="form-group">
              <label for="editTeamPrivacy">Privacidad</label>
              <select id="editTeamPrivacy" name="editTeamPrivacy" required>
                <option value="public">Pública</option>
                <option value="private">Privada</option>
              </select>
            </div>
          </div>
          
          <div class="form-group">
            <label for="editTeamTags">Etiquetas (separadas por comas)</label>
            <input type="text" id="editTeamTags" name="editTeamTags">
          </div>
          
          <div class="form-group">
            <label for="editTeamGoal">Meta de recaudación (€)</label>
            <input type="number" id="editTeamGoal" name="editTeamGoal" min="0">
          </div>
          
          <button type="submit" class="btn btn-primary">
            <i class="fas fa-save"></i> Guardar Cambios
          </button>
        </form>
      </div>
      
      <div class="admin-tab-content" id="contentTab">
        <h3>Mensaje para la comunidad</h3>
        <textarea id="teamMessage" rows="5" style="width: 100%; margin-bottom: 1rem;"></textarea>
        <button class="btn btn-primary" id="saveMessageBtn">
          <i class="fas fa-bullhorn"></i> Publicar Mensaje
        </button>
        
        <h3 style="margin-top: 2rem;">Actividades recientes</h3>
        <div id="recentActivities">
          <!-- Las actividades se cargarán aquí dinámicamente -->
        </div>
      </div>
    </div>
  </div>

  <!-- Modal de ver más comunidad -->
  <div id="teamModal" class="modal-bg">
    <div class="modal-content" style="background:#fff; border-radius:18px; max-width:800px; width:95vw; padding:2rem; box-shadow:0 8px 32px rgba(74,111,165,0.13); position:relative; max-height:90vh; overflow-y:auto;">
      <button id="closeTeamModal" style="position:absolute; top:1.5rem; right:1.5rem; background:none; border:none; font-size:1.8rem; color:#6b7280; cursor:pointer; transition:color 0.2s;" onmouseover="this.style.color='#4a6fa5'" onmouseout="this.style.color='#6b7280'">&times;</button>
      <div id="teamModalBody" style="padding:0.5rem;">
        <!-- Contenido dinámico -->
      </div>
    </div>
  </div>

  <!-- Contenido principal de la página Mis Comunidades -->
  <div class="main-container">
    <!-- Sección introductoria -->
    <div class="teams-intro">
      <div class="teams-intro-icon">
        <i class="fas fa-user-group"></i>
      </div>
      <div class="teams-intro-content">
        <h2>Mis Comunidades</h2>
        <p>Aquí puedes gestionar todas las comunidades de las que formas parte. Como administrador, podrás modificar la configuración, invitar miembros, crear actividades y mucho más.</p>
      </div>
    </div>
    
    <!-- Destacados -->
    <div class="teams-highlights">
      <div class="highlight-card">
        <div class="highlight-icon"><i class="fas fa-crown"></i></div>
        <div class="highlight-title">Tus comunidades</div>
        <div class="highlight-desc">Gestiona las comunidades que has creado o donde tienes permisos de administración.</div>
      </div>
      <div class="highlight-card">
        <div class="highlight-icon"><i class="fas fa-users"></i></div>
        <div class="highlight-title">Miembro activo</div>
        <div class="highlight-desc">Tus comunidades donde participas como miembro regular.</div>
      </div>
      <div class="highlight-card">
        <div class="highlight-icon"><i class="fas fa-bell"></i></div>
        <div class="highlight-title">Solicitudes</div>
        <div class="highlight-desc">Gestiona las solicitudes pendientes para unirse a tus comunidades.</div>
      </div>
      <div class="highlight-card">
        <div class="highlight-icon"><i class="fas fa-chart-line"></i></div>
        <div class="highlight-title">Tu impacto</div>
        <div class="highlight-desc">Revisa el impacto colectivo de todas tus comunidades.</div>
      </div>
    </div>
    
    <!-- Cabecera con búsqueda -->
    <div class="section-header">
      <h1>Tus Comunidades</h1>
    </div>
    
    <div class="search-container">
      <input type="text" id="search-input" placeholder="Buscar entre tus comunidades...">
      <i class="fas fa-search" style="color:#4a6fa5;"></i>
    </div>
    
    <!-- Tabs para filtrar -->
    <div class="tabs">
      <button class="tab active" data-filter="all">Todas</button>
      <button class="tab" data-filter="founder">Founder</button>
      <button class="tab" data-filter="coordinator">Coordinator</button>
      <button class="tab" data-filter="member">Miembro</button>
      <button class="tab" data-filter="pending">Requests</button>
    </div>
    
    <!-- Grid de comunidades -->
    <div class="teams-grid-classic" id="teamsGrid">
      <!-- Las comunidades se cargarán aquí dinámicamente -->
    </div>
    
    <!-- Paginación -->
    <div class="pagination" id="pagination">
      <button id="prevPage" class="btn btn-outline" disabled>
        <i class="fas fa-chevron-left"></i>
      </button>
      <span id="pageInfo">1</span>
      <button id="nextPage" class="btn btn-outline" disabled>
        <i class="fas fa-chevron-right"></i>
      </button>
    </div>
  </div>
{% endblock %}

{% block scripts %}
  {{ super() }}
  <script>
    document.addEventListener('DOMContentLoaded', async function() {
      let currentPage = 1;
      const itemsPerPage = 9;
      let allTeams = [];
      let filteredTeams = [];
      let currentAdminTeam = null;

      // 1. Obtener usuario actual
      const { data: { session } } = await supabase.auth.getSession();
      if (!session?.user) {
        window.location.href = '/login?return=/my-teams';
        return;
      }
      const userId = session.user.id;

      // 2. Cargar comunidades del usuario
      await loadUserTeams();

      // 3. Eventos UI
      document.querySelectorAll('.tab').forEach(tab => {
        tab.addEventListener('click', function() {
          document.querySelector('.tab.active').classList.remove('active');
          this.classList.add('active');
          currentPage = 1;
          filterAndRenderTeams();
        });
      });
      document.getElementById('search-input').addEventListener('input', function() {
        currentPage = 1;
        filterAndRenderTeams();
      });
      document.getElementById('prevPage').addEventListener('click', function() {
        if (currentPage > 1) { currentPage--; renderTeams(); }
      });
      document.getElementById('nextPage').addEventListener('click', function() {
        const totalPages = Math.ceil(filteredTeams.length / itemsPerPage);
        if (currentPage < totalPages) { currentPage++; renderTeams(); }
      });
      document.getElementById('closeAdminModal').addEventListener('click', function() {
        document.getElementById('adminModal').classList.remove('active');
        document.body.style.overflow = '';
      });

      // Tabs del modal de administración
      document.querySelectorAll('.admin-tab').forEach(tab => {
        tab.addEventListener('click', function() {
          const tabId = this.getAttribute('data-tab');
          document.querySelectorAll('.admin-tab-content').forEach(content => content.classList.remove('active'));
          document.querySelectorAll('.admin-tab').forEach(t => t.classList.remove('active'));
          this.classList.add('active');
          document.getElementById(`${tabId}Tab`).classList.add('active');
          if (tabId === 'members' && currentAdminTeam) loadTeamMembers(currentAdminTeam.id);
          if (tabId === 'content' && currentAdminTeam) loadRecentActivities(currentAdminTeam.id);
        });
      });

      // --- FUNCIONES PRINCIPALES ---

      async function loadUserTeams() {
        try {
          // 1. Obtener todos los memberships del usuario
          const { data: memberships } = await supabase
            .from('team_members')
            .select('team_id, role')
            .eq('user_id', userId)
            .neq('role', 'pending');

          // 2. Obtener los equipos donde el usuario es el creador
          const { data: createdTeams, error: createdTeamsError } = await supabase
            .from('teams')
            .select('*')
            .eq('creator_id', userId);
          if (createdTeamsError) throw createdTeamsError;

          // 3. Obtener los detalles de los equipos donde es miembro
          const teamIds = memberships.map(m => m.team_id);
          const { data: teams, error: teamsError } = await supabase
            .from('teams')
            .select('*')
            .in('id', teamIds.length ? teamIds : ['00000000-0000-0000-0000-000000000000'])
            .order('created_at', { ascending: false });
          if (teamsError) throw teamsError;

          // 4. Combinar y eliminar duplicados (si el creador también es miembro)
          const allTeamIds = new Set();
          allTeams = [
            ...teams.map(team => {
              const membership = memberships.find(m => m.team_id === team.id);
              allTeamIds.add(team.id);
              const role = membership ? membership.role : (team.creator_id === userId ? 'founder' : 'member');
              return {
                ...team,
                user_role: role,
                is_admin: ['founder', 'admin', 'coordinator'].includes(role),
                is_moderator: ['admin', 'coordinator'].includes(role),
                is_founder: role === 'founder',
                tags: Array.isArray(team.tags) ? team.tags : [],
              };
            }),
            ...createdTeams
              .filter(team => !allTeamIds.has(team.id))
              .map(team => ({
                ...team,
                user_role: 'founder',
                is_admin: true,
                is_moderator: false,
                is_founder: true,
                tags: Array.isArray(team.tags) ? team.tags : [],
              }))
          ];

          filteredTeams = [...allTeams];
          currentPage = 1;
          renderTeams();
        } catch (error) {
          console.error('Error loading user teams:', error);
          showEmptyState();
        }
      }

      function showEmptyState() {
        const container = document.getElementById('teamsGrid');
        container.innerHTML = `
          <div class="empty-state" style="grid-column: 1 / -1; text-align: center; padding: 3rem;">
            <i class="fas fa-users-slash" style="font-size: 3rem; color: #a0aec0; margin-bottom: 1rem;"></i>
            <h3 style="color: #4a5568; margin-bottom: 0.5rem;">No formas parte de ninguna comunidad aún</h3>
            <p style="color: #718096; margin-bottom: 1.5rem;">Únete a una comunidad existente o crea una nueva para empezar.</p>
            <a href="/teams" class="btn btn-primary" style="margin-right: 1rem;">
              <i class="fas fa-search"></i> Explorar Comunidades
            </a>
            <a href="/teams/create" class="btn btn-accent">
              <i class="fas fa-plus"></i> Crear Comunidad
            </a>
          </div>
        `;
        document.getElementById('pagination').style.display = 'none';
      }

      function filterAndRenderTeams() {
        const activeFilter = document.querySelector('.tab.active').getAttribute('data-filter');
        const searchTerm = document.getElementById('search-input').value.toLowerCase();
        filteredTeams = allTeams.filter(team => {
          if (activeFilter !== 'all') {
            if (activeFilter === 'founder' && team.user_role !== 'founder') return false;
            if (activeFilter === 'coordinator' && !['coordinator', 'admin'].includes(team.user_role)) return false;
            if (activeFilter === 'member' && team.user_role !== 'member') return false;
            if (activeFilter === 'pending' && team.user_role !== 'pending') return false;
          }
          if (searchTerm) {
            const matchesName = team.name && team.name.toLowerCase().includes(searchTerm);
            const matchesDesc = team.description && team.description.toLowerCase().includes(searchTerm);
            const matchesTags = team.tags && team.tags.some(tag => tag && tag.toLowerCase().includes(searchTerm));
            return matchesName || matchesDesc || matchesTags;
          }
          return true;
        });
        renderTeams();
      }

      function renderTeams() {
        const startIdx = (currentPage - 1) * itemsPerPage;
        const endIdx = startIdx + itemsPerPage;
        const paginatedTeams = filteredTeams.slice(startIdx, endIdx);
        const container = document.getElementById('teamsGrid');
        container.innerHTML = '';
        if (paginatedTeams.length === 0) {
          container.innerHTML = `
            <div class="empty-state" style="grid-column: 1 / -1; text-align: center; padding: 3rem;">
              <i class="fas fa-search" style="font-size: 3rem; color: #a0aec0; margin-bottom: 1rem;"></i>
              <h3 style="color: #4a5568; margin-bottom: 0.5rem;">No se encontraron comunidades</h3>
              <p style="color: #718096;">No hay comunidades que coincidan con tu búsqueda.</p>
            </div>
          `;
          document.getElementById('pagination').style.display = 'none';
          return;
        }
        document.getElementById('pagination').style.display = 'flex';

        paginatedTeams.forEach(team => {
          const membersCount = team.members_count || 1;
          const tagsHtml = team.tags?.length
            ? `<div class="team-tags-classic">${team.tags.slice(0, 4).map(tag => `<span class="team-tag-classic">${tag}</span>`).join('')}${team.tags.length > 4 ? `<span class="team-tag-classic tag-more">+${team.tags.length - 4}</span>` : ''}</div>`
            : '';

          const isTrending = membersCount >= 20 || (team.impact || 0) >= 1000;
          const recaudado = team.funds_raised || 0;
          const meta = team.goal || 1000;
          const porcentaje = meta ? Math.min(100, Math.round((recaudado / meta) * 100)) : 0;

          // Badge de rol del usuario
          const roleBadgeClass = {
            'founder': 'role-badge admin',
            'coordinator': 'role-badge moderator',
            'admin': 'role-badge moderator',
            'member': 'role-badge member',
            'pending': 'role-badge member'
          }[team.user_role] || 'role-badge member';

          const roleBadgeText = {
            'founder': 'Fundador',
            'coordinator': 'Coordinador',
            'admin': 'Coordinador',
            'member': 'Miembro',
            'pending': 'Solicitud pendiente'
          }[team.user_role] || 'Miembro';

          const roleBadge = `<span class="${roleBadgeClass}"><i class="fas fa-${team.user_role === 'admin' ? 'crown' : team.user_role === 'moderator' ? 'star' : 'user'}"></i> ${roleBadgeText}</span>`;

          // Badge trending y privada
          let badgePrivada = team.privacy === 'private'
            ? `<div class="team-badge-classic" style="top:1rem;right:1rem;background:var(--gray);color:var(--primary-dark);"><i class="fas fa-lock"></i> Privada</div>`
            : '';
          let badgeTrending = isTrending
            ? `<div class="team-badge-classic" style="top:${team.privacy === 'private' ? '3.2rem' : '1rem'};right:1rem;background:#ffe600;color:#b8860b;"><i class="fas fa-arrow-trend-up"></i> Trending</div>`
            : '';

          const card = document.createElement('div');
          card.className = 'team-card-classic';
          card.innerHTML = `
            <div class="team-image-classic">
              <img src="${team.photo || 'https://via.placeholder.com/350x180?text=Comunidad'}" alt="${team.name}">
              <div class="team-badge-classic points" style="top:1rem;left:1rem;right:auto;background:var(--primary);color:#fff;">
                <i class="fas fa-bolt"></i> +${team.impact || 0} pts
              </div>
              ${badgePrivada}${badgeTrending}
            </div>
            <div class="team-content-classic">
              <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.5rem;">
                <h3>${team.name}</h3>
                ${roleBadge}
              </div>
              <p>${team.description || 'Esta comunidad no tiene descripción aún.'}</p>
              <div class="team-meta-classic">
                <div class="meta-item-classic"><i class="fas fa-layer-group"></i> ${getCategoryName(team.category)}</div>
                <div class="meta-item-classic"><i class="fas fa-tasks"></i> ${team.activities_count || 0} actividades</div>
                <div class="meta-item-classic"><i class="fas fa-heart"></i> ${team.beneficiaries || 0} beneficiarios</div>
                <div class="meta-item-classic"><i class="fas fa-users"></i> ${membersCount} miembros</div>
              </div>
              ${tagsHtml}
              <div class="team-progress-classic">
                <div class="progress-bar">
                  <div class="progress-fill" style="width:${porcentaje}%;">${porcentaje > 10 ? porcentaje + '%' : ''}</div>
                </div>
                <div class="progress-info">
                  <span>${porcentaje}% completado</span>
                  <span>${recaudado} € de ${meta} €</span>
                </div>
              </div>
              <div class="team-actions-classic">
                <button class="btn btn-primary btn-vermas-team" data-team-id="${team.id}">
                  <i class="fas fa-eye"></i> Ver más
                </button>
                ${team.user_role === 'pending' ? `
                  <button class="btn btn-outline" disabled>
                    <i class="fas fa-clock"></i> Pendiente
                  </button>
                ` : team.is_admin || team.is_moderator ? `
                  <button class="btn btn-accent admin-team-btn" data-team-id="${team.id}">
                    <i class="fas fa-cog"></i> Administrar
                  </button>
                ` : `
                  <button class="btn btn-outline leave-team-btn" data-team-id="${team.id}">
                    <i class="fas fa-sign-out-alt"></i> Salir
                  </button>
                `}
              </div>
            </div>
          `;
          container.appendChild(card);
        });

        // Listeners para los botones "Ver más"
        document.querySelectorAll('.btn-vermas-team').forEach(btn => {
          btn.addEventListener('click', function() {
            showTeamModal(this.getAttribute('data-team-id'));
          });
        });

        // Listeners para los botones "Administrar"
        document.querySelectorAll('.admin-team-btn').forEach(btn => {
          btn.addEventListener('click', function() {
            const teamId = this.getAttribute('data-team-id');
            const team = allTeams.find(t => t.id === teamId);
            if (team) openAdminModal(team);
          });
        });
        // Botones de salir
        document.querySelectorAll('.leave-team-btn').forEach(btn => {
          btn.addEventListener('click', async function() {
            const teamId = this.getAttribute('data-team-id');
            if (confirm('¿Estás seguro de que quieres salir de esta comunidad?')) {
              try {
                const { error } = await supabase
                  .from('team_members')
                  .delete()
                  .eq('team_id', teamId)
                  .eq('user_id', userId);
                if (error) throw error;
                await loadUserTeams();
                alert('Has salido de la comunidad correctamente.');
              } catch (error) {
                console.error('Error leaving team:', error);
                alert('Error al salir de la comunidad: ' + error.message);
              }
            }
          });
        });
        updatePagination();
      }

      updatePagination();
      function updatePagination() {
        const totalPages = Math.max(1, Math.ceil(filteredTeams.length / itemsPerPage));
        document.getElementById('pageInfo').textContent = `${currentPage} / ${totalPages}`;
        document.getElementById('prevPage').disabled = currentPage <= 1;
        document.getElementById('nextPage').disabled = currentPage >= totalPages;
      }

      // --- FUNCIONES MODAL Y COMPLEMENTARIAS ---

      function openAdminModal(team) {
        currentAdminTeam = team;
        document.getElementById('adminModalTitle').textContent = `Administrar ${team.name}`;
        document.getElementById('adminModal').classList.add('active');
        document.body.style.overflow = 'hidden';

        // Actualizar datos en el modal
        document.getElementById('membersCount').textContent = team.members_count || 0;
        document.getElementById('activitiesCount').textContent = team.activities_count || 0;
        document.getElementById('impactPoints').textContent = team.impact || 0;
        document.getElementById('beneficiariesCount').textContent = team.beneficiaries || 0;

        // Configurar progreso
        const recaudado = team.funds_raised || 0;
        const meta = team.goal || 1000;
        const porcentaje = meta ? Math.min(100, Math.round((recaudado / meta) * 100)) : 0;
        document.getElementById('communityProgress').style.width = `${porcentaje}%`;
        document.getElementById('progressPercent').textContent = `${porcentaje}% completado`;
        document.getElementById('progressAmount').textContent = `${recaudado} € de ${meta} €`;
      }

      async function loadTeamMembers(teamId) {
        try {
          // 1. Obtener los miembros
          const { data: members, error: membersError } = await supabase
            .from('team_members')
            .select('user_id, role')
            .eq('team_id', team.id)
            .neq('role', 'pending');

          if (membersError) {
            console.error('Error cargando miembros:', membersError);
          }

          // 2. Añadir el founder si no está
          let membersList = members ? [...members] : [];
          if (team.creator_id && !membersList.some(m => m.user_id === team.creator_id)) {
            membersList.unshift({
              user_id: team.creator_id,
              role: 'founder'
            });
          }

          // 3. Obtener los perfiles de todos los miembros
          let profilesMap = {};
          if (membersList.length) {
            const userIds = membersList.map(m => m.user_id);
            const { data: profiles, error: profilesError } = await supabase
              .from('profiles')
              .select('id, username, photo_url')
              .in('id', userIds);

            if (profilesError) {
              console.error('Error cargando perfiles:', profilesError);
            } else {
              profilesMap = Object.fromEntries(profiles.map(p => [p.id, p]));
            }
          }

          // 4. Renderizar miembros (siempre muestra la sección)
          const membersHtml = `
            <div style="margin-top:1.5rem;">
              <h4 style="color:var(--primary);font-size:1.05rem;margin-bottom:0.5rem;">
                <i class="fas fa-users"></i> Miembros (${membersList.length})
              </h4>
              <div style="display:flex;flex-wrap:wrap;gap:0.7rem;">
                ${membersList.map(m => {
                  const profile = profilesMap[m.user_id] || {};
                  return `
                    <div style="display:flex;align-items:center;gap:0.4rem;">
                      <img src="${profile.photo_url ? profile.photo_url : 'https://ui-avatars.com/api/?name=' + encodeURIComponent(profile.username || 'Usuario')}" alt="${profile.username || 'Usuario'}" style="width:32px;height:32px;border-radius:50%;object-fit:cover;">
                      <span style="font-size:0.98rem;color:#4a6fa5;">${profile.username || 'Usuario'}</span>
                      <span class="role-badge ${m.role === 'founder' ? 'admin' : m.role}">
                        ${m.role === 'founder' ? 'Fundador' : m.role.charAt(0).toUpperCase() + m.role.slice(1)}
                      </span>
                    </div>
                  `;
                }).join('')}
              </div>
            </div>
          `;

          const membersListContainer = document.getElementById('membersList');
          membersListContainer.innerHTML = membersHtml;
        } catch (error) {
          console.error('Error loading team members:', error);
        }
      }

      async function loadRecentActivities(teamId) {
        try {
          const { data: activities, error } = await supabase
            .from('activities')
            .select('*')
            .eq('team_id', teamId)
            .order('created_at', { ascending: false })
            .limit(5);

          if (error) throw error;

          const activitiesContainer = document.getElementById('recentActivities');
          activitiesContainer.innerHTML = '';

          if (!activities || activities.length === 0) {
            activitiesContainer.innerHTML = '<p>No hay actividades recientes.</p>';
            return;
          }

          activities.forEach(activity => {
            const activityElement = document.createElement('div');
            activityElement.className = 'activity-item';
            activityElement.innerHTML = `
              <h4>${activity.title}</h4>
              <p>${activity.description}</p>
              <small>${new Date(activity.created_at).toLocaleDateString()}</small>
            `;
            activitiesContainer.appendChild(activityElement);
          });
        } catch (error) {
          console.error('Error loading recent activities:', error);
        }
      }

      // 1. Define la función renderTeamModal en el ámbito global del script
      async function renderTeamModal(teamId, isAdmin = false) {
        // Asegura que el modal existe
        let modal = document.getElementById('teamModal');
        let content = document.getElementById('teamModalContent');
        if (!modal || !content) {
          // Si no existe, créalo
          modal = document.createElement('div');
          modal.id = 'teamModal';
          modal.className = 'admin-modal';
          modal.innerHTML = `<div class="admin-modal-content" id="teamModalContent"></div>`;
          document.body.appendChild(modal);
          content = document.getElementById('teamModalContent');
        }

        // Muestra el modal y bloquea el scroll
        modal.classList.add('active');
        document.body.style.overflow = 'hidden';
        content.innerHTML = `<div style="text-align:center;padding:2rem;"><i class="fas fa-spinner fa-spin fa-2x"></i></div>`;

        // Carga los datos del equipo
        try {
          const { data: team, error: teamError } = await supabase
            .from('teams')
            .select('*')
            .eq('id', teamId)
            .single();
          if (teamError || !team) {
            content.innerHTML = `<p style="color:var(--urgent);">Error al cargar la comunidad.</p>`;
            return;
          }

          // Carga los miembros
          const { data: members, error: membersError } = await supabase
            .from('team_members')
            .select('profiles:user_id (full_name, avatar_url), role')
            .eq('team_id', team.id)
            .neq('role', 'pending');

          if (membersError) {
            console.error('Error cargando miembros:', membersError);
          }

          const membersHtml = members && members.length ? `
            <div style="margin-top:1.5rem;">
              <h4 style="color:var(--primary);font-size:1.05rem;margin-bottom:0.5rem;">
                <i class="fas fa-users"></i> Miembros (${members.length})
              </h4>
              <div style="display:flex;flex-wrap:wrap;gap:0.7rem;">
                ${members.map(m => `
                  <div style="display:flex;align-items:center;gap:0.4rem;">
                    <img src="${m.profiles?.avatar_url || 'https://via.placeholder.com/32'}" alt="${m.profiles?.full_name || 'Usuario'}" style="width:32px;height:32px;border-radius:50%;object-fit:cover;">
                    <span style="font-size:0.98rem;color:#4a6fa5;">${m.profiles?.full_name || 'Usuario'}</span>
                    <span class="role-badge ${m.role === 'founder' ? 'admin' : m.role}">
                      ${m.role === 'founder' ? 'Fundador' : m.role.charAt(0).toUpperCase() + m.role.slice(1)}
                    </span>
                  </div>
                `).join('')}
              </div>
            </div>
          ` : '';

          // Acciones rápidas solo si isAdmin
          const quickActions = isAdmin ? `
            <h3 style="margin-top:2rem;">Acciones rápidas</h3>
            <div class="team-actions-classic" style="margin-top:1rem;">
              <button class="btn btn-primary" id="createCauseBtn">
                <i class="fas fa-heart"></i> Crear Causa
              </button>
              <button class="btn btn-accent" id="createTaskBtn">
                <i class="fas fa-tasks"></i> Crear Tarea
              </button>
              <button class="btn btn-primary" id="createChallengeBtn">
                <i class="fas fa-trophy"></i> Crear Reto
              </button>
              <button class="btn btn-accent" id="createVolunteeringBtn">
                <i class="fas fa-hands-helping"></i> Crear Voluntariado
              </button>
            </div>
          ` : `
            <h3 style="margin-top:2rem;">Detalles de la comunidad</h3>
          `;

          // Render principal del modal
          content.innerHTML = `
            <button class="close-admin-modal" id="closeTeamModalBtn">&times;</button>
            <div style="display:flex;align-items:center;gap:1.5rem;">
              <img src="${team.photo || 'https://via.placeholder.com/120x120?text=Comunidad'}" alt="${team.name}" style="width:120px;height:120px;border-radius:16px;object-fit:cover;border:2px solid var(--gray);">
              <div>
                <h2 style="color:var(--primary);font-size:2rem;font-weight:700;margin-bottom:0.3em;">${team.name}</h2>
                <div style="color:#4a5568;font-size:1.1rem;margin-bottom:0.7em;">${team.description || 'Esta comunidad no tiene descripción.'}</div>
                <div style="display:flex;gap:1.2em;flex-wrap:wrap;">
                  <span class="team-tag-classic">${getCategoryName(team.category)}</span>
                  <span class="team-tag-classic" style="background:${team.privacy === 'private' ? 'var(--gray)' : '#e6f0fa'};color:${team.privacy === 'private' ? 'var(--primary-dark)' : 'var(--primary)'};">
                    <i class="fas fa-${team.privacy === 'private' ? 'lock' : 'globe'}"></i> ${team.privacy === 'private' ? 'Privada' : 'Pública'}
                  </span>
                  ${(team.tags || []).slice(0, 3).map(tag => `<span class="team-tag-classic">${tag}</span>`).join('')}
                </div>
              </div>
            </div>
            <div style="margin-top:1.5rem;">
              <div class="progress-bar">
                <div class="progress-fill" style="width:${team.goal ? Math.min(100, Math.round((team.funds_raised || 0) / team.goal * 100)) : 0}%;"></div>
              </div>
              <div class="progress-info">
                <span>${team.funds_raised || 0} € de ${team.goal || 0} €</span>
              </div>
            </div>
            ${quickActions}
          `;

          // Acciones rápidas: redirección a páginas de creación
          if (isAdmin) {
            document.getElementById('createCauseBtn').onclick = () =>
              window.location.href = `/causes/create?team_id=${team.id}`;
            document.getElementById('createTaskBtn').onclick = () =>
              window.location.href = `/tasks/create?team_id=${team.id}`;
            document.getElementById('createChallengeBtn').onclick = () =>
              window.location.href = `/challenges/create?team_id=${team.id}`;
            document.getElementById('createVolunteeringBtn').onclick = () =>
              window.location.href = `/volunteering/create?team_id=${team.id}`;
          }

          // Cerrar modal
          document.getElementById('closeTeamModalBtn').onclick = () => {
            modal.classList.remove('active');
            document.body.style.overflow = '';
          };
          // Cerrar modal al hacer click fuera del contenido
          modal.onclick = (e) => {
            if (e.target === modal) {
              modal.classList.remove('active');
              document.body.style.overflow = '';
            }
          };

        } catch (err) {
          content.innerHTML = `<p style="color:var(--urgent);">Error al cargar la comunidad.</p>`;
        }
      }

      // 2. Después de renderizar las tarjetas, añade los listeners:
      document.querySelectorAll('.view-team-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          renderTeamModal(this.getAttribute('data-team-id'), false);
        });
      });
      document.querySelectorAll('.admin-team-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          renderTeamModal(this.getAttribute('data-team-id'), true);
        });
      });

      // 3. Helper para categoría (debe estar en el ámbito global)
      function getCategoryName(category) {
        const categories = {
          'medio_ambiente': 'Medio Ambiente',
          'educacion': 'Educación',
          'salud': 'Salud',
          'animales': 'Animales',
          'comunidad': 'Comunidad',
          'otros': 'Otros'
        };
        return categories[category] || 'General';
      }

      // Helper para nombres de categoría
      function getCategoryName(category) {
        const categories = {
          'medio_ambiente': 'Medio Ambiente',
          'educacion': 'Educación',
          'salud': 'Salud',
          'animales': 'Animales',
          'comunidad': 'Comunidad',
          'otros': 'Otros'
        };
        return categories[category] || 'General';
      }

      // Modal de detalle de comunidad (idéntico a index.njk)
      async function showTeamModal(teamId) {
        // 1. Cargar la comunidad
        const { data: team, error } = await supabase
          .from('teams')
          .select('*')
          .eq('id', teamId)
          .single();

        if (error || !team) {
          alert('Error al cargar la comunidad');
          return;
        }

        // 2. Cargar miembros (user_id y role)
        const { data: members, error: membersError } = await supabase
          .from('team_members')
          .select('user_id, role')
          .eq('team_id', team.id)
          .neq('role', 'pending');

        if (membersError) {
          console.error('Error cargando miembros:', membersError);
        }

        // 3. Añadir founder si no está
        let membersList = members ? [...members] : [];
        if (team.creator_id && !membersList.some(m => m.user_id === team.creator_id)) {
          membersList.unshift({
            user_id: team.creator_id,
            role: 'founder'
          });
        }

        // 4. Cargar perfiles de todos los miembros
        let profilesMap = {};
        if (membersList.length) {
          const userIds = membersList.map(m => m.user_id);
          const { data: profiles, error: profilesError } = await supabase
            .from('profiles')
            .select('id, username, photo_url')
            .in('id', userIds);

          if (profilesError) {
            console.error('Error cargando perfiles:', profilesError);
          } else {
            profilesMap = Object.fromEntries(profiles.map(p => [p.id, p]));
          }
        }

        // 5. Renderizar miembros (siempre muestra la sección)
        const membersHtml = `
          <div style="margin-top:1.5rem;">
            <h4 style="color:var(--primary);font-size:1.05rem;margin-bottom:0.5rem;">
              <i class="fas fa-users"></i> Miembros (${membersList.length})
            </h4>
            <div style="display:flex;flex-wrap:wrap;gap:0.7rem;">
              ${membersList.map(m => {
                const profile = profilesMap[m.user_id] || {};
                return `
                  <div style="display:flex;align-items:center;gap:0.4rem;">
                    <img src="${profile.photo_url ? profile.photo_url : 'https://ui-avatars.com/api/?name=' + encodeURIComponent(profile.username || 'Usuario')}" alt="${profile.username || 'Usuario'}" style="width:32px;height:32px;border-radius:50%;object-fit:cover;">
                    <span style="font-size:0.98rem;color:#4a6fa5;">${profile.username || 'Usuario'}</span>
                    <span class="role-badge ${m.role === 'founder' ? 'admin' : m.role}">
                      ${m.role === 'founder' ? 'Fundador' : m.role.charAt(0).toUpperCase() + m.role.slice(1)}
                    </span>
                  </div>
                `;
              }).join('')}
            </div>
          </div>
        `;

        // 6. Prepara datos
        const createdDate = new Date(team.created_at).toLocaleDateString('es-ES', {
          year: 'numeric',
          month: 'long',
          day: 'numeric'
        });
        const recaudado = team.funds_raised || 0;
        const meta = team.goal || 1000;
        const porcentaje = meta ? Math.min(100, Math.round((recaudado / meta) * 100)) : 0;
        const beneficiaries = team.beneficiaries || 0;
        const membersCount = team.members_count || membersList.length || 1;
        const impact = team.impact || 0;
        const category = getCategoryName ? getCategoryName(team.category) : (team.category || '');
        const privacy = team.privacy === 'private' ? 'Privada' : 'Pública';

        // 7. Renderiza el modal
        document.getElementById('teamModalBody').innerHTML = `
          <div class="modal-task-container" style="padding:0;">
            <h1 class="modal-task-title" style="font-size:2rem; font-weight:800; color:var(--primary); margin-bottom:1.2rem; text-align:center; width:100%;">${team.name}</h1>
            <div style="display:flex; flex-wrap:wrap; gap:2.2rem; margin-bottom:1.5rem;">
              <div style="flex:1; min-width:320px; max-width:350px; position:relative;">
                <img src="${team.photo || 'https://via.placeholder.com/350x180?text=Comunidad'}" alt="Imagen de la comunidad" style="width:100%;height:200px;object-fit:cover;border-radius:12px;box-shadow:0 4px 12px rgba(0,0,0,0.08);">
                <div style="position:absolute;top:1rem;left:1rem;background:var(--primary);color:#fff;padding:0.4rem 1rem;border-radius:50px;font-size:0.9rem;font-weight:600;display:flex;align-items:center;gap:0.6rem;">
                  <i class="fas fa-users"></i> Comunidad
                </div>
                ${team.privacy === 'private' ? `
                <div style="position:absolute;top:1rem;right:1rem;background:var(--gray);color:var(--primary-dark);padding:0.4rem 1rem;border-radius:50px;font-size:0.9rem;font-weight:600;display:flex;align-items:center;gap:0.6rem;">
                  <i class="fas fa-lock"></i> Privada
                </div>` : ''}
              </div>
              <div style="flex:2;min-width:260px;display:flex;flex-direction:column;gap:1.2rem;justify-content:flex-start;">
                <div class="modal-cause-progress-container" style="background:#f8fafc;padding:1.2rem 1.2rem 1rem 1.2rem;border-radius:12px;margin-bottom:0.5rem;border:1px solid #e5e7eb;">
                  <div class="progress-bar">
                    <div class="progress-fill" style="width: ${porcentaje}%; background: var(--primary);"></div>
                  </div>
                  <div class="progress-info" style="display:flex; justify-content:space-between; margin-top:0.8rem; font-size:0.95rem; color:#6b7280;">
                    <span>${porcentaje}% completado</span>
                    <span>${team.funds_raised || 0} € de ${team.goal || 0} €</span>
                  </div>
                </div>
                <div class="modal-cause-meta-grid" style="display:grid; grid-template-columns:1fr 1fr; gap:0.7rem 1.2rem; margin-bottom:1.2rem;">
                  <div class="meta-item" style="display:flex;align-items:center;gap:0.8rem;font-size:0.95rem;">
                    <span class="meta-icon" style="color:var(--primary);font-size:1.1rem;width:1.5rem;text-align:center;"><i class="fas fa-layer-group"></i></span>
                    <span>${team.category || 'Sin categoría'}</span>
                  </div>
                  <div class="meta-item" style="display:flex;align-items:center;gap:0.8rem;font-size:0.95rem;">
                    <span class="meta-icon" style="color:var(--primary);font-size:1.1rem;width:1.5rem;text-align:center;"><i class="fas fa-users"></i></span>
                    <span>${team.members_count || membersList.length || 1} miembros</span>
                  </div>
                  <div class="meta-item" style="display:flex;align-items:center;gap:0.8rem;font-size:0.95rem;">
                    <span class="meta-icon" style="color:var(--primary);font-size:1.1rem;width:1.5rem;text-align:center;"><i class="fas fa-heart"></i></span>
                    <span>${team.beneficiaries || 0} beneficiarios</span>
                  </div>
                  <div class="meta-item" style="display:flex;align-items:center;gap:0.8rem;font-size:0.95rem;">
                    <span class="meta-icon" style="color:var(--primary);font-size:1.1rem;width:1.5rem;text-align:center;"><i class="fas fa-calendar-alt"></i></span>
                    <span>${createdDate}</span>
                  </div>
                </div>
                <div class="points-notice" style="background:#f0f9ff; border-left:4px solid var(--accent); padding:0.8rem; border-radius:0 8px 8px 0; font-size:0.97rem; display:flex; align-items:center; gap:0.7rem;color:var(--primary);">
                  <i class="fas fa-bolt" style="color:var(--accent);"></i>
                  Participar en esta comunidad otorga <strong>${team.impact || 0} puntos</strong> de impacto
                </div>
              </div>
            </div>
            <div style="margin-bottom:1.2rem;">
              <div class="content-section" style="margin-bottom:1.7rem;">
                <h3 class="content-title" style="font-size:1.1rem;font-weight:600;color:var(--primary);margin-bottom:0.5rem;display:flex;align-items:center;gap:0.7rem;">
                  <i class="fas fa-quote-left"></i> Resumen
                </h3>
                <p class="content-text" style="line-height:1.6;color:#4b5563;font-size:1.05rem;margin-left:0;margin-right:0;text-align:justify;">${team.summary || 'Sin resumen.'}</p>
              </div>
              <div class="content-section" style="margin-bottom:2.2rem;">
                <h3 class="content-title" style="font-size:1.1rem;font-weight:600;color:var(--primary);margin-bottom:0.5rem;display:flex;align-items:center;gap:0.7rem;">
                  <i class="fas fa-align-left"></i> Descripción
                </h3>
                <p class="content-text" style="line-height:1.7;color:#4b5563;font-size:1.05rem;margin-left:0;margin-right:0;text-align:justify;">${team.description || 'Esta comunidad no tiene descripción.'}</p>
                ${membersHtml}
              </div>
              <div class="content-section" style="margin-bottom:2.2rem;">
                <h3 class="content-title" style="font-size:1.1rem;font-weight:600;color:var(--primary);margin-bottom:0.5rem;display:flex;align-items:center;gap:0.7rem;">
                  <i class="fas fa-info-circle"></i> Detalles adicionales
                </h3>
                <div style="display:grid;grid-template-columns:1fr 1fr;gap:1rem;">
                  <div>
                    <p style="font-weight:600;color:var(--primary);margin-bottom:0.3rem;">Privacidad</p>
                    <p style="color:#6b7280;">${privacy}</p>
                  </div>
                  <div>
                    <p style="font-weight:600;color:var(--primary);margin-bottom:0.3rem;">Meta de recaudación</p>
                    <p style="color:#6b7280;">${meta} €</p>
                  </div>
                  <div>
                    <p style="font-weight:600;color:var(--primary);margin-bottom:0.3rem;">ID</p>
                    <p style="color:#6b7280;">${team.id}</p>
                  </div>
                </div>
              </div>
            </div>
            <div class="task-actions" style="display:flex;gap:0.8rem;margin-top:2.2rem;">
              <button class="btn btn-primary" style="flex:1;" id="joinTeamBtn">
                <i class="fas fa-user-plus"></i> Unirse
              </button>
              <button class="btn btn-accent" style="flex:1;" id="shareTeamBtn">
                <i class="fas fa-share-alt"></i> Compartir
              </button>
            </div>
            <div class="share-section" id="shareSectionTeam"></div>
          </div>
        `;

        document.getElementById('teamModal').classList.add('active');
        document.body.style.overflow = 'hidden';

        // Botón Unirse
        document.getElementById('joinTeamBtn').onclick = async function() {
          const { data: { session } } = await supabase.auth.getSession();
          if (!session?.user) {
            alert('Debes iniciar sesión para unirte a la comunidad.');
            return;
          }
          alert('¡Solicitud de unión enviada! (Aquí puedes poner tu lógica real)');
        };

        // Botón Compartir
        document.getElementById('shareTeamBtn').onclick = function() {
          showShareOptionsTeam(team.id, team);
        };
      }

      // Compartir comunidad (idéntico a index.njk)
      function showShareOptionsTeam(teamId, teamObj) {
        let team = teamObj;
        if (!team) return;
        const shareSection = document.getElementById('shareSectionTeam');
        shareSection.innerHTML = `
          <h3 class="share-title" style="color:var(--primary);font-size:1.1rem;">
            <i class="fas fa-share-alt"></i> Ayuda a difundir esta comunidad
          </h3>
          <div class="share-content">
            <p class="share-text" style="color:#4b5563;">
              <span class="share-highlight" style="color:var(--primary);font-weight:600;">"${team.summary ? team.summary : 'Únete a nosotros y sé parte del cambio.'}"</span>
              <br>
              Comparte este enlace: <span id="shareableLink" style="color:var(--primary);font-weight:600;">${window.location.origin}/teams/${teamId}</span>
            </p>
            <div class="share-buttons" style="display:flex;gap:0.8rem;margin-top:1rem;">
              <button class="btn btn-primary" id="copyLinkBtnTeam">
                <i class="fas fa-link"></i> Copiar enlace
              </button>
              <button class="btn btn-accent" id="whatsappShareBtnTeam">
                <i class="fab fa-whatsapp"></i> Compartir en WhatsApp
              </button>
              <button class="btn btn-info" id="twitterShareBtnTeam">
                <i class="fab fa-twitter"></i> Compartir en Twitter
              </button>
              <button class="btn btn-danger" id="facebookShareBtnTeam">
                <i class="fab fa-facebook-f"></i> Compartir en Facebook
              </button>
            </div>
          </div>
        `;

        // Copiar enlace
        document.getElementById('copyLinkBtnTeam').onclick = function() {
          const link = document.getElementById('shareableLink');
          navigator.clipboard.writeText(link.textContent).then(() => {
            alert('Enlace copiado al portapapeles');
          }).catch(err => {
            console.error('Error al copiar el enlace: ', err);
            alert('Error al copiar el enlace. Por favor, intenta nuevamente.');
          });
        };

        // Compartir en WhatsApp
        document.getElementById('whatsappShareBtnTeam').onclick = function() {
          const message = `¡Únete a nuestra comunidad en Solidarity! ${team.summary} ${window.location.origin}/teams/${team.id}`;
          const whatsappUrl = `https://api.whatsapp.com/send?text=${encodeURIComponent(message)}`;
          window.open(whatsappUrl, '_blank');
        };

        // Compartir en Twitter
        document.getElementById('twitterShareBtnTeam').onclick = function() {
          const tweet = `¡Únete a nuestra comunidad en Solidarity! ${team.summary} ${window.location.origin}/teams/${team.id}`;
          const twitterUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(tweet)}`;
          window.open(twitterUrl, '_blank');
        };

        // Compartir en Facebook
        document.getElementById('facebookShareBtnTeam').onclick = function() {
          const fbShareUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(window.location.origin + '/teams/' + team.id)}`;
          window.open(fbShareUrl, '_blank');
        };
      }

      // Función para obtener el enlace compartible (idéntico a index.njk)
      function getShareableLink(teamId) {
        return `${window.location.origin}/teams/${teamId}`;
      }
    }); // Fin del DOMContentLoaded

    // Permite cerrar el modal "Ver más" con la cruz o haciendo clic fuera
    document.addEventListener('DOMContentLoaded', function() {
      const teamModal = document.getElementById('teamModal');
      const closeTeamModal = document.getElementById('closeTeamModal');
      if (closeTeamModal) {
        closeTeamModal.onclick = function() {
          teamModal.classList.remove('active');
          document.body.style.overflow = '';
        };
      }
     
      if (teamModal) {
        teamModal.onclick = function(e) {
          if (e.target === teamModal) {
            teamModal.classList.remove('active');
            document.body.style.overflow = '';
          }
        };
      }
    });
  </script>
{% endblock %}
{% extends "layout.njk" %}

{% block title %}Voluntariados - Solidarity{% endblock %}

{% block head %}
  {{ super() }}
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/choices.js/public/assets/styles/choices.min.css" />
  <style>
    :root {
      --primary: #4a6fa5;
      --primary-dark: #166088;
      --gray: #e2e8f0;
      --white: #fff;
      --accent: #4fc3a1;
      --accent-dark: #3da58a;
      --urgent: #e53e3e;
    }
    body {
      background: #f8fafc;
      font-family: 'Inter', Arial, sans-serif;
      color: #2d3748;
      font-size: 1rem;
    }
    .modal-bg {
      display: none;
      position: fixed;
      top: 0; left: 0; width: 100vw; height: 100vh;
      background: rgba(0,0,0,0.35);
      z-index: 9999;
      align-items: center;
      justify-content: center;
    }
    .modal-bg.active { display: flex; }
    .modal-content {
      background: #fff;
      border-radius: 18px;
      max-width: 540px;
      width: 95vw;
      padding: 2.5rem 1.5rem 2rem 1.5rem;
      box-shadow: 0 8px 32px rgba(0,0,0,0.13);
      position: relative;
      animation: fadeIn 0.3s;
      max-height: 90vh;
      overflow-y: auto;
    }
    .close-modal {
      position: absolute;
      top: 1.1rem; right: 1.3rem;
      background: none;
      border: none;
      font-size: 2rem;
      color: #aaa;
      cursor: pointer;
      transition: color 0.2s;
    }
    .close-modal:hover { color: var(--primary, #4a6fa5); }
    .create-volunteering-title {
      font-size: 1.5rem;
      font-weight: 800;
      color: var(--primary, #4a6fa5);
      margin-bottom: 1.2rem;
      text-align: center;
    }
    .volunteering-form .form-group label { font-weight: 600; color: var(--primary, #4a6fa5); }
    .volunteering-form .form-group input,
    .volunteering-form .form-group textarea,
    .volunteering-form .form-group select {
      width: 100%;
      padding: 0.7rem 1rem;
      border-radius: 8px;
      border: 1px solid #e5e7eb;
      margin-bottom: 0.2rem;
      font-size: 1rem;
      background: #f8fafc;
      transition: border 0.2s;
    }
    .volunteering-form .form-group input:focus,
    .volunteering-form .form-group textarea:focus,
    .volunteering-form .form-group select:focus {
      border: 1.5px solid var(--accent, #4fc3a1);
      outline: none;
      background: #fff;
    }
    .volunteering-form .form-group textarea {
      min-height: 90px;
      resize: vertical;
    }
    .form-inline-group {
      display: flex;
      gap: 1rem;
    }
    .form-inline-group .form-group { flex: 1; }
    .preview-img {
      width: 100%;
      max-width: 320px;
      height: 180px;
      object-fit: cover;
      border-radius: 10px;
      margin-top: 0.5rem;
      border: 1px solid #e5e7eb;
      display: none;
    }
    .points-info {
      background: var(--accent, #4fc3a1);
      color: #fff;
      border-radius: 8px;
      padding: 0.7rem 1rem;
      margin-top: 0.5rem;
      font-size: 1.05rem;
      display: flex;
      align-items: center;
      gap: 0.7rem;
    }
    .after-create {
      margin-top: 2rem;
      background: var(--primary-light, #e6f0fa);
      color: #444;
      border-radius: 10px;
      padding: 1.5rem 1rem;
      text-align: center;
    }
    @media (max-width: 600px) {
      .modal-content { padding: 1.2rem 0.5rem 1.2rem 0.5rem; }
      .create-volunteering-title { font-size: 1.1rem; }
      .form-inline-group { flex-direction: column; }
    }
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(-30px);}
      to { opacity: 1; transform: translateY(0);}
    }
    /* SOLO estilos de la página de voluntariados */
    .main-container {
        max-width: 1200px;
        margin: 2rem auto;
        padding: 0 2rem;
    }
    .volunteering-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
    }
    .volunteering-header h1 {
        font-size: 2rem;
        color: var(--primary);
        font-weight: 700;
    }
    .volunteering-search {
        margin-bottom: 2rem;
        display: flex;
        align-items: center;
        gap: 0.7rem;
    }
    .volunteering-search input {
        flex: 1;
        padding: 0.6rem 1.2rem;
        border-radius: 7px;
        border: 1.5px solid var(--gray);
        font-size: 1.05rem;
        outline: none;
        transition: border 0.2s;
        background: #fff;
    }
    .volunteering-search input:focus {
        border-color: var(--primary);
    }
    .tabs {
        display: flex;
        border-bottom: 1px solid var(--gray);
        margin-bottom: 2rem;
    }
    .tab {
        padding: 0.75rem 1.5rem;
        cursor: pointer;
        position: relative;
        font-weight: 500;
        color: #6b7280;
        background: none;
        border: none;
        outline: none;
    }
    .tab.active {
        color: var(--primary);
        font-weight: 600;
    }
    .tab.active::after {
        content: '';
        position: absolute;
        bottom: -1px;
        left: 0;
        width: 100%;
        height: 3px;
        background: var(--primary);
    }
    .volunteering-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 2rem;
    }
    .volunteering-card {
        background: white;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
        transition: all 0.3s ease;
        border: 1px solid var(--gray);
        display: flex;
        flex-direction: column;
    }
    .volunteering-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    }
    .volunteering-image {
        height: 180px;
        overflow: hidden;
        position: relative;
    }
    .volunteering-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
    }
    .volunteering-card:hover .volunteering-image img {
        transform: scale(1.05);
    }
    .volunteering-badge {
        position: absolute;
        top: 1rem;
        right: 1rem;
        background: rgba(255, 255, 255, 0.9);
        padding: 0.3rem 0.8rem;
        border-radius: 50px;
        font-size: 0.8rem;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }
    .volunteering-badge.urgent {
        background: var(--urgent);
        color: white;
    }
    .volunteering-badge.points {
        background: var(--primary);
        color: white;
        left: 1rem;
        right: auto;
    }
    .volunteering-badge.remote {
        background: var(--accent);
        color: white;
        top: 3.5rem;
    }
    .volunteering-content {
        padding: 1.5rem;
        display: flex;
        flex-direction: column;
        flex: 1;
    }
    .volunteering-content h3 {
        font-size: 1.3rem;
        margin-bottom: 0.8rem;
        color: #2d3748;
    }
    .volunteering-content p {
        color: #6b7280;
        margin-bottom: 1.5rem;
        font-size: 0.95rem;
        line-height: 1.6;
        flex-grow: 1;
    }
    .volunteering-meta {
        display: flex;
        gap: 1rem;
        margin-bottom: 1.5rem;
        font-size: 0.85rem;
        flex-wrap: wrap;
    }
    .meta-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: #6b7280;
    }
    .meta-item i {
        color: var(--primary);
    }
    .participants-count {
        display: inline-flex;
        align-items: center;
        background: #f0f9ff;
        color: var(--primary);
        padding: 0.3rem 0.8rem;
        border-radius: 50px;
        font-size: 0.85rem;
        font-weight: 600;
    }
    .participants-count i {
        margin-right: 0.3rem;
    }
    .linked-cause {
        display: inline-flex;
        align-items: center;
        background: #f0f0ff;
        color: var(--primary);
        padding: 0.3rem 0.8rem;
        border-radius: 50px;
        font-size: 0.85rem;
        font-weight: 600;
        margin-bottom: 1rem;
    }
    .volunteering-progress {
        margin-bottom: 1.5rem;
    }
    .progress-bar {
        height: 8px;
        background: var(--gray);
        border-radius: 4px;
        overflow: hidden;
        margin-bottom: 0.5rem;
    }
    .progress-fill {
        height: 100%;
        background: var(--primary);
        border-radius: 4px;
    }
    .progress-info {
        display: flex;
        justify-content: space-between;
        font-size: 0.9rem;
        color: #6b7280;
    }
    .volunteering-actions {
        display: flex;
        gap: 0.8rem;
    }
    .volunteering-actions .btn {
        flex: 1;
        text-align: center;
        justify-content: center;
    }
    .btn-accent {
        background: var(--accent);
        color: white;
    }
    .btn-accent:hover {
        background: var(--accent-dark);
        transform: translateY(-2px);
    }
    @media (max-width: 900px) {
        .main-container {
            padding: 1.2rem 0.5rem;
        }
    }
    @media (max-width: 768px) {
        .volunteering-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 1rem;
        }
        .volunteering-grid {
            grid-template-columns: 1fr;
        }
        .volunteering-actions {
            flex-direction: column;
        }
    }

    /* NUEVOS ESTILOS PARA LA TARJETA DE VOLUNTARIADO DESTACADO */
    .action-card {
      background: #fff;
      border-radius: 12px;
      overflow: hidden;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      transition: transform 0.3s;
      display: flex;
      flex-direction: column;
    }
    .action-card:hover {
      transform: translateY(-4px);
    }
    .action-image {
      position: relative;
      height: 180px;
      overflow: hidden;
    }
    .action-image img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: transform 0.3s;
    }
    .action-card:hover .action-image img {
      transform: scale(1.1);
    }
    .action-badge {
      position: absolute;
      top: 1rem;
      right: 1rem;
      background: var(--primary);
      color: #fff;
      padding: 0.4rem 0.8rem;
      border-radius: 50px;
      font-size: 0.85rem;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 0.4rem;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
    }
    .action-content {
      padding: 1.5rem;
      display: flex;
      flex-direction: column;
      flex: 1;
    }
    .action-content h3 {
      font-size: 1.4rem;
      margin-bottom: 1rem;
      color: #2d3748;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }
    .action-content h3 .action-icon {
      font-size: 1.2rem;
      color: var(--primary);
    }
    .action-content p {
      color: #4b5563;
      margin-bottom: 1.5rem;
      font-size: 0.95rem;
      line-height: 1.6;
      flex-grow: 1;
    }
    .action-stats {
      display: flex;
      gap: 1.5rem;
      margin-bottom: 1.5rem;
    }
    .stat-item {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      color: #6b7280;
      font-size: 0.9rem;
    }
    .stat-item i {
      color: var(--primary);
    }
    .action-button {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      padding: 0.7rem 1.2rem;
      border-radius: 8px;
      font-size: 1rem;
      transition: background 0.3s, transform 0.3s;
      text-decoration: none;
    }
    .action-button.btn-primary {
      background: var(--primary);
      color: #fff;
    }
    .action-button.btn-primary:hover {
      background: var(--primary-dark);
      transform: translateY(-2px);
    }
    @media (max-width: 768px) {
      .action-card {
        flex-direction: row;
        gap: 1rem;
      }
      .action-image {
        height: 120px;
      }
      .action-content {
        padding: 1rem;
      }
      .action-content h3 {
        font-size: 1.2rem;
      }
      .action-button {
        padding: 0.6rem 1rem;
        font-size: 0.9rem;
      }
    }
  </style>
{% endblock %}

{% block content %}
  <!-- Modal para usuarios no logueados -->
  <div class="modal-bg" id="loginModal">
    <div class="modal-content">
      <h3>Para crear un voluntariado</h3>
      <p>Debes ser un usuario registrado. ¿Deseas iniciar sesión o registrarte ahora?</p>
      <div class="modal-buttons">
        <a href="/login?return=/volunteering" class="btn btn-primary">Iniciar Sesión</a>
        <a href="/register?return=/volunteering" class="btn btn-outline">Registrarse</a>
        <button id="cancelModal" class="btn">Cancelar</button>
      </div>
    </div>
  </div>

  <!-- Modal emergente para crear voluntariado -->
  <div id="createVolunteeringModal" class="modal-bg">
    <div class="modal-content">
      <button class="close-modal" id="closeCreateVolunteeringModal" title="Cerrar">&times;</button>
      <div class="create-volunteering-title">
        <i class="fas fa-plus-circle"></i> Crear Nueva Oportunidad de Voluntariado
      </div>
      <form class="volunteering-form" id="volunteeringForm" autocomplete="off">
        <div class="form-group">
          <label for="title">Título del voluntariado</label>
          <input type="text" id="title" name="title" placeholder="Ej: Apoyo escolar a niños" required>
        </div>
        <div class="form-group">
          <label for="summary">Resumen breve</label>
          <input type="text" id="summary" name="summary" maxlength="140" placeholder="Breve resumen del voluntariado (máx. 140 caracteres)" required>
        </div>
        <div class="form-group">
          <label for="description">Descripción detallada</label>
          <textarea id="description" name="description" placeholder="Describe el voluntariado, qué actividades se realizarán y qué se espera de los voluntarios..." required></textarea>
        </div>
        <div class="form-group">
          <label for="category">Temática</label>
          <select id="category" name="category" required>
            <option value="">Selecciona temática</option>
            <option value="medioambiente">Medio Ambiente</option>
            <option value="educacion">Educación</option>
            <option value="salud">Salud</option>
            <option value="deportes">Deportes</option>
            <option value="animales">Animales</option>
            <option value="comunidad">Comunidad</option>
            <option value="otros">Otros</option>
          </select>
        </div>
        <div class="form-group">
          <label for="cause_id">Vinculado a causa (opcional)</label>
          <select id="cause-select" name="cause_id">
            <option value="">Selecciona una causa</option>
            <!-- Las opciones se cargan dinámicamente -->
          </select>
        </div>
        <div class="form-group">
          <label for="photo">Foto principal</label>
          <input type="file" id="photo" name="photo" accept="image/*">
          <img id="previewImg" class="preview-img" alt="Vista previa de la foto" style="display:none;">
        </div>
        <div class="form-inline-group">
          <div class="form-group">
            <label for="city">Ciudad</label>
            <input type="text" id="city" name="city" placeholder="Ej: Madrid" required>
          </div>
          <div class="form-group">
            <label for="country">País</label>
            <input type="text" id="country" name="country" placeholder="Ej: España" required>
          </div>
        </div>
        <div class="form-group">
          <label for="points">Puntos por hora</label>
          <input type="number" id="points" name="points" min="1" max="1000" value="50" required>
          <div class="points-info" id="pointsText">
            <i class="fas fa-star"></i>
            Participar en este voluntariado otorgará <strong>50 puntos por hora</strong> a cada voluntario.
          </div>
        </div>
        <div class="form-group">
          <label for="beneficiaries">Nº de beneficiarios</label>
          <input type="number" id="beneficiaries" name="beneficiaries" min="1" placeholder="Ej: 100" required>
        </div>
        <div class="form-group">
          <label for="volunteers_needed">Voluntarios necesarios</label>
          <input type="number" id="volunteers_needed" name="volunteers_needed" min="1" placeholder="Ej: 10" required>
        </div>
        <div class="form-group">
          <label for="is_urgent">
            <input type="checkbox" id="is_urgent" name="is_urgent"> Marcar como urgente
          </label>
        </div>
        <div class="form-inline-group">
          <div class="form-group">
            <label for="start_date">Fecha de inicio</label>
            <input type="date" id="start_date" name="start_date" required>
          </div>
          <div class="form-group">
            <label for="end_date">Fecha de finalización</label>
            <input type="date" id="end_date" name="end_date" required>
          </div>
        </div>
        <div class="form-group">
          <label for="schedule">Horario (opcional)</label>
          <input type="text" id="schedule" name="schedule" placeholder="Ej: Lunes a Viernes de 16:00 a 18:00">
        </div>
        <div class="form-group">
          <label for="skills_required">Habilidades requeridas (opcional)</label>
          <input type="text" id="skills_required" name="skills_required" placeholder="Ej: Docencia, Paciencia, etc.">
        </div>
        <input type="hidden" id="lat" name="lat">
        <input type="hidden" id="lng" name="lng">
        <button type="submit" class="btn btn-primary" style="margin-top:1rem;">
          <i class="fas fa-paper-plane"></i> Crear Voluntariado
        </button>
      </form>
      <div class="after-create" id="afterCreate" style="display:none;">
        <h3>¡Voluntariado creado con éxito!</h3>
        <p>¿Quieres ver todas las oportunidades disponibles o crear otra?</p>
        <a href="/volunteering" class="btn btn-accent">
          <i class="fas fa-hands-helping"></i> Ver todos los voluntariados
        </a>
        <br>
        <a href="#" id="createAnother" class="btn btn-outline" style="margin-top:1rem;">
          <i class="fas fa-plus"></i> Crear otra oportunidad
        </a>
      </div>
    </div>
  </div>

  <!-- Modal de Voluntariado (detalle, opcional) -->
  <div id="volunteeringModal" class="modal" style="display:none; position:fixed; z-index:9999; left:0; top:0; width:100vw; height:100vh; background:rgba(0,0,0,0.35); align-items:center; justify-content:center;">
    <div class="modal-content" style="background:#fff; border-radius:18px; max-width:800px; width:95vw; padding:2rem; box-shadow:0 8px 32px rgba(74,111,165,0.13); position:relative; max-height:90vh; overflow-y:auto;">
      <button id="closeVolunteeringModal" style="position:absolute; top:1.5rem; right:1.5rem; background:none; border:none; font-size:1.8rem; color:#6b7280; cursor:pointer; transition:color 0.2s;" onmouseover="this.style.color='#4a6fa5'" onmouseout="this.style.color='#6b7280'">&times;</button>
      <div id="volunteeringModalBody" style="padding:0.5rem;">
        <!-- Contenido dinámico -->
      </div>
    </div>
  </div>

  <!-- Modal de Causa (reutilizable) -->
  <div id="causeModal" class="modal-bg">
    <div class="modal-content" id="causeModalContent" style="max-width:500px;">
      <button class="close-modal" id="closeCauseModal" title="Cerrar">&times;</button>
      <div id="causeModalBody"></div>
    </div>
  </div>

  <!-- Contenido principal de la página de voluntariados -->
  <div class="main-container">
    <div class="volunteering-header">
      <h1>Oportunidades de Voluntariado</h1>
      <a href="#" id="create-volunteering-btn" class="btn btn-primary">
        <i class="fas fa-plus"></i> Crear Voluntariado
      </a>
    </div>
    <div class="volunteering-search">
      <input type="text" id="search-input" placeholder="Buscar por título, país, descripción...">
      <i class="fas fa-search" style="color:#4a6fa5;"></i>
    </div>
    <div class="tabs">
      <button class="tab active" data-filter="all">Todas</button>
      <button class="tab" data-filter="education">Educación</button>
      <button class="tab" data-filter="health">Salud</button>
      <button class="tab" data-filter="environment">Medio Ambiente</button>
      <button class="tab" data-filter="animals">Animales</button>
      <button class="tab" data-filter="community">Comunidad</button>
      <button class="tab" data-filter="remote">Remotos</button>
    </div>
    <div class="volunteering-grid" id="volunteeringList">
      <!-- Los voluntariados se cargarán dinámicamente desde Supabase -->
    </div>
  </div>
{% endblock %}

{% block scripts %}
{{ super() }}
<script src="https://cdn.jsdelivr.net/npm/choices.js/public/assets/scripts/choices.min.js"></script>
<script>
let currentFilter = "all";
let causeChoices = null;

document.addEventListener('DOMContentLoaded', async function() {
  // Abrir modal de crear voluntariado
  document.getElementById('create-volunteering-btn').onclick = async function(e) {
    e.preventDefault();
    const { data: { session } } = await supabase.auth.getSession();
    if (session?.user) {
      await loadCausesForSelect();
      document.getElementById('createVolunteeringModal').classList.add('active');
      document.body.style.overflow = 'hidden';
    } else {
      document.getElementById('loginModal').classList.add('active');
    }
  };

  // Cerrar modal de crear voluntariado
  document.getElementById('closeCreateVolunteeringModal').onclick = function() {
    document.getElementById('createVolunteeringModal').classList.remove('active');
    document.body.style.overflow = '';
    document.getElementById('volunteeringForm').reset();
    document.getElementById('previewImg').style.display = 'none';
    document.getElementById('volunteeringForm').style.display = 'block';
    document.getElementById('afterCreate').style.display = 'none';
  };

  // Cerrar modal al hacer click fuera del contenido
  document.getElementById('createVolunteeringModal').onclick = function(e) {
    if (e.target === this) {
      this.classList.remove('active');
      document.body.style.overflow = '';
      document.getElementById('volunteeringForm').style.display = 'block';
      document.getElementById('afterCreate').style.display = 'none';
    }
  };

  // Modal login
  document.getElementById('cancelModal').onclick = function() {
    document.getElementById('loginModal').classList.remove('active');
  };
  document.getElementById('loginModal').onclick = function(e) {
    if (e.target === this) this.classList.remove('active');
  };

  // Tabs
  document.querySelectorAll('.tab').forEach(tab => {
    tab.addEventListener('click', function() {
      document.querySelector('.tab.active').classList.remove('active');
      this.classList.add('active');
      loadVolunteeringFromSupabase(this.getAttribute('data-filter'));
    });
  });

  // Búsqueda
  document.getElementById('search-input').addEventListener('input', function() {
    loadVolunteeringFromSupabase(currentFilter, this.value);
  });

  // Vista previa de imagen
  document.getElementById('photo').addEventListener('change', function(e) {
    const file = e.target.files[0];
    const preview = document.getElementById('previewImg');
    if (file) {
      const reader = new FileReader();
      reader.onload = function(evt) {
        preview.src = evt.target.result;
        preview.style.display = 'block';
      };
      reader.readAsDataURL(file);
    } else {
      preview.src = '';
      preview.style.display = 'none';
    }
  });

  // Actualizar texto de puntos
  document.getElementById('points').addEventListener('input', function() {
    const val = this.value || 0;
    document.getElementById('pointsText').innerHTML = `<i class="fas fa-star"></i> Participar en este voluntariado otorgará <strong>${val} puntos por hora</strong> a cada voluntario.`;
  });

  // Crear otro voluntariado tras éxito
  document.getElementById('createAnother').onclick = function(e) {
    e.preventDefault();
    document.getElementById('volunteeringForm').reset();
    document.getElementById('previewImg').style.display = 'none';
    document.getElementById('volunteeringForm').style.display = 'block';
    document.getElementById('afterCreate').style.display = 'none';
  };

  // Envío del formulario
  document.getElementById('volunteeringForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    // Recoge los datos del formulario
    const title = document.getElementById('title').value.trim();
    const summary = document.getElementById('summary').value.trim();
    const description = document.getElementById('description').value.trim();
    const category = document.getElementById('category').value;
    const city = document.getElementById('city').value.trim();
    const country = document.getElementById('country').value.trim();
    const points = parseInt(document.getElementById('points').value, 10);
    const beneficiaries = parseInt(document.getElementById('beneficiaries').value, 10);
    const volunteers_needed = parseInt(document.getElementById('volunteers_needed').value, 10);
    const is_urgent = document.getElementById('is_urgent').checked;
    const cause_id = document.getElementById('cause-select').value || null;
    const photoFile = document.getElementById('photo').files[0];
    const start_date = document.getElementById('start_date').value;
    const end_date = document.getElementById('end_date').value;
    const schedule = document.getElementById('schedule').value.trim();
    const skills_required = document.getElementById('skills_required').value.trim();
    let photo_url = null;

    // Sube la foto a Supabase Storage si existe
    if (photoFile) {
      const fileExt = photoFile.name.split('.').pop();
      const fileName = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}.${fileExt}`;
      const filePath = `public/${fileName}`;
      const { error: uploadError } = await supabase.storage
        .from('volunteering')
        .upload(filePath, photoFile, { upsert: true });
      if (uploadError) {
        alert('Error subiendo la foto: ' + uploadError.message);
        return;
      }
      const { data } = supabase.storage.from('volunteering').getPublicUrl(filePath);
      photo_url = data.publicUrl;
    }

    // Guarda el voluntariado en la tabla
    const { data: { session } } = await supabase.auth.getSession();
    const user = session?.user;
    if (!user) {
      alert('Debes iniciar sesión para crear un voluntariado.');
      return;
    }

    const lat = document.getElementById('lat').value;
    const lng = document.getElementById('lng').value;

    const { error } = await supabase
      .from('volunteering')
      .insert([{
        title,
        summary,
        description,
        category,
        city,
        country,
        points,
        beneficiaries,
        volunteers_needed,
        is_urgent,
        photo_url,
        user_id: user.id,
        volunteers: 0,
        cause_id,
        start_date,
        end_date,
        schedule,
        skills_required,
        lat: lat ? parseFloat(lat) : null,
        lng: lng ? parseFloat(lng) : null,
      }]);

    if (error) {
      alert('Error al crear el voluntariado: ' + error.message);
      return;
    }

    document.getElementById('volunteeringForm').style.display = 'none';
    document.getElementById('afterCreate').style.display = 'block';
    loadVolunteeringFromSupabase();
  });

  // Cargar voluntariados al iniciar
  await loadVolunteeringFromSupabase();
});

async function loadVolunteeringFromSupabase(filter = "all", searchTerm = "") {
  currentFilter = filter;
  let query = supabase
    .from('volunteering')
    .select('*')
    .order('created_at', { ascending: false });

  if (filter !== "all") {
    query = query.eq('category', filter);
  }
  if (searchTerm && searchTerm.trim() !== "") {
    query = query.or(`title.ilike.%${searchTerm}%,description.ilike.%${searchTerm}%,city.ilike.%${searchTerm}%,country.ilike.%${searchTerm}%`);
  }
  const { data: volunteering, error } = await query;
  const volunteeringList = document.getElementById('volunteeringList');
  if (error) {
    volunteeringList.innerHTML = '<div style="color:#e53e3e;text-align:center;">Error al cargar los voluntariados.</div>';
    return;
  }
  volunteeringList.innerHTML = '';
  if (!volunteering || volunteering.length === 0) {
    volunteeringList.innerHTML = '<div style="color:#6b7280;text-align:center;padding:2rem;grid-column:1/-1;">No se encontraron oportunidades de voluntariado.</div>';
    return;
  }

  // Guardar los voluntariados en una variable global para acceder desde el modal
  window.volunteering = volunteering;

  volunteering.forEach(volunteer => {
    const urgentBadge = volunteer.is_urgent ? `<div class="volunteering-badge urgent"><i class="fas fa-exclamation-circle"></i> Urgente</div>` : "";
    const pointsBadge = `<div class="volunteering-badge points"><i class="fas fa-star"></i> +${volunteer.points || 0} pts/h</div>`;
    const location = volunteer.city && volunteer.country ? `${volunteer.city}, ${volunteer.country}` : "";
    const startDate = new Date(volunteer.start_date).toLocaleDateString('es-ES', { day: 'numeric', month: 'short' });
    const endDate = new Date(volunteer.end_date).toLocaleDateString('es-ES', { day: 'numeric', month: 'short' });

    const card = document.createElement('div');
    card.className = 'volunteering-card';
    const beneficiariesHtml = `
      <div class="beneficiaries-count" style="color:var(--primary);">
        <i class="fas fa-heart"></i> Beneficia a ${volunteer.beneficiaries || 0} personas
      </div>
    `;
    card.innerHTML = `
      <div class="volunteering-image">
        <img src="${volunteer.photo_url || '/img/volunteer-default.jpg'}" alt="${volunteer.title}" onerror="this.src='/img/volunteer-default.jpg'">
        ${urgentBadge}
        ${pointsBadge}
      </div>
      <div class="volunteering-content">
        <h3>${volunteer.title}</h3>
        <p>${volunteer.summary || volunteer.description.substring(0, 100)}${!volunteer.summary && volunteer.description.length > 100 ? '...' : ''}</p>
        ${volunteer.cause_id ? `<div class="linked-cause"><i class="fas fa-link"></i> Vinculado a causa #${volunteer.cause_id}</div>` : ''}
        <div class="volunteering-meta">
          <div class="meta-item"><i class="fas fa-map-marker-alt"></i> ${location}</div>
          <div class="meta-item"><i class="fas fa-users"></i> ${volunteer.volunteers || 0}/${volunteer.volunteers_needed || 0} voluntarios</div>
          ${beneficiariesHtml}
          <div class="meta-item"><i class="fas fa-calendar-alt"></i> ${startDate} - ${endDate}</div>
        </div>
        <div class="volunteering-progress">
          <div class="progress-bar">
            <div class="progress-fill" style="width: ${Math.min(Math.round((volunteer.volunteers / volunteer.volunteers_needed) * 100), 100)}%"></div>
          </div>
          <div class="progress-info">
            <span>${volunteer.volunteers || 0} voluntarios</span>
            <span>Meta: ${volunteer.volunteers_needed || 0}</span>
          </div>
        </div>
        <div class="volunteering-actions">
          <button class="btn btn-primary view-volunteer-btn" data-volunteer-id="${volunteer.id}">Ver más</button>
          <button class="btn btn-accent join-btn" data-volunteer-id="${volunteer.id}">Unirse</button>
        </div>
      </div>
    `;
    volunteeringList.appendChild(card);
  });

  // Agregar event listeners para los botones de ver más
  document.querySelectorAll('.view-volunteer-btn').forEach(btn => {
    btn.addEventListener('click', function(e) {
      e.preventDefault();
      const volunteerId = this.getAttribute('data-volunteer-id');
      showVolunteeringModal(volunteerId);
    });
  });

  // Agregar event listeners para los botones de unirse
  document.querySelectorAll('.join-btn').forEach(btn => {
    btn.addEventListener('click', function(e) {
      e.preventDefault();
      const volunteerId = this.getAttribute('data-volunteer-id');
      joinVolunteering(volunteerId);
    });
  });
}

// Función para mostrar el modal con los detalles del voluntariado
async function showVolunteeringModal(volunteerId) {
  const { data: volunteer, error } = await supabase
    .from('volunteering')
    .select('*')
    .eq('id', volunteerId)
    .single();

  if (error) {
    alert('Error al cargar el voluntariado: ' + error.message);
    return;
  }

  const progress = Math.min(Math.round((volunteer.volunteers / volunteer.volunteers_needed) * 100), 100);
  const createdDate = new Date(volunteer.created_at).toLocaleDateString('es-ES', { year: 'numeric', month: 'long', day: 'numeric' });
  const startDate = new Date(volunteer.start_date).toLocaleDateString('es-ES', { year: 'numeric', month: 'long', day: 'numeric' });
  const endDate = new Date(volunteer.end_date).toLocaleDateString('es-ES', { year: 'numeric', month: 'long', day: 'numeric' });

  // Obtener información de la causa vinculada si existe
  let causeInfo = '';
  if (volunteer.cause_id) {
    const { data: cause } = await supabase
      .from('causes')
      .select('title, photo_url')
      .eq('id', volunteer.cause_id)
      .single();

    if (cause) {
      causeInfo = `
        <div class="linked-cause-section" style="margin-bottom:1.5rem;">
          <h3 class="content-title" style="font-size:1.2rem; font-weight:600; color:var(--primary); margin-bottom:0.9rem; display:flex; align-items:center; gap:0.7rem;">
            <i class="fas fa-link"></i> Vinculado a la causa
          </h3>
          <div style="display:flex; align-items:center; gap:1rem; background:#f8fafc; padding:1rem; border-radius:8px; border:1px solid #e5e7eb;">
            <img src="${cause.photo_url || '/img/causa-default.jpg'}" 
                 alt="Imagen de la causa vinculada"
                 style="width:80px; height:80px; object-fit:cover; border-radius:6px;"
                 onerror="this.src='/img/causa-default.jpg'">
            <div>
              <strong style="color:var(--primary);">${cause.title}</strong>
              <p style="margin-top:0.3rem; font-size:0.9rem; color:#6b7280;">Causa #${volunteer.cause_id}</p>
              <a href="#" class="btn btn-sm" style="margin-top:0.5rem; padding:0.3rem 0.8rem; font-size:0.85rem;"
                 onclick="showCauseModal('${volunteer.cause_id}'); return false;">
                <i class="fas fa-external-link-alt"></i> Ver causa
              </a>
            </div>
          </div>
        </div>
      `;
    }
  }

  document.getElementById('volunteeringModalBody').innerHTML = `
    <div class="modal-volunteer-container">
      <h1 class="modal-volunteer-title" style="font-size:2rem; font-weight:800; color:var(--primary); margin-bottom:2.7rem; text-align:center; width:100%;">${volunteer.title}</h1>
      <div class="modal-volunteer-header" style="display:flex; gap:2.5rem; margin-bottom:2.7rem;">
        <div class="modal-volunteer-image-wrapper" style="flex:1; min-width:320px; height:300px; border-radius:12px; overflow:hidden; position:relative; box-shadow:0 4px 12px rgba(0,0,0,0.08);">
          <div class="modal-cause-badge" style="top:1.2rem; left:1.2rem; right:auto; background:var(--accent); color:white; position:absolute; border-radius:50px; padding:0.5rem 1rem; font-size:0.9rem; font-weight:600; display:flex; align-items:center; gap:0.6rem; box-shadow:0 2px 8px rgba(0,0,0,0.1); z-index:2;">
            <i class="fas fa-hands-helping"></i> Voluntariado
          </div>
          <img class="modal-volunteer-image" src="${volunteer.photo_url || '/img/volunteer-default.jpg'}" 
               alt="Imagen del voluntariado ${volunteer.title}"
               style="width:100%;height:100%;object-fit:cover;"
               onerror="this.src='/img/volunteer-default.jpg'">
          ${volunteer.is_urgent ? `
          <div class="modal-cause-badge urgent" style="right:1.2rem; left:auto; top:1.2rem; background:var(--urgent); color:white; border-radius:50px; padding:0.5rem 1rem; font-size:0.9rem; font-weight:600; display:flex; align-items:center; gap:0.6rem; box-shadow:0 2px 8px rgba(0,0,0,0.1); z-index:2;">
            <i class="fas fa-exclamation-circle"></i> Urgente
          </div>` : ''}
        </div>
        <div class="modal-volunteer-info" style="flex:1.5; display:flex; flex-direction:column; justify-content:flex-start;">
          <div class="modal-cause-progress-container" style="background:#f8fafc; padding:1.5rem; border-radius:12px; margin-bottom:1.5rem; border:1px solid #e5e7eb;">
            <div class="progress-bar">
              <div class="progress-fill" style="width: ${progress}%"></div>
            </div>
            <div class="progress-info">
              <span>${progress}% completado</span>
              <span>${volunteer.volunteers || 0} de ${volunteer.volunteers_needed || 0} voluntarios</span>
            </div>
          </div>
          <div class="modal-volunteer-meta-grid" style="display:grid; grid-template-columns:1fr 1fr; gap:0.7rem 1.2rem; margin-bottom:1.2rem;">
            <div class="meta-item">
              <span class="meta-icon"><i class="fas fa-tag"></i></span>
              <span>${getCategoryName(volunteer.category)}</span>
            </div>
            <div class="meta-item">
              <span class="meta-icon"><i class="fas fa-map-marker-alt"></i></span>
              <span>${volunteer.city || 'Sin ubicación'}${volunteer.country ? ', ' + volunteer.country : ''}</span>
            </div>
            <div class="meta-item">
              <span class="meta-icon"><i class="fas fa-users"></i></span>
              <span>${volunteer.volunteers || 0} voluntarios</span>
            </div>
            <div class="meta-item">
              <span class="meta-icon"><i class="fas fa-heart"></i></span>
              <span>${volunteer.beneficiaries || 0} beneficiarios</span>
            </div>
            <div class="meta-item">
              <span class="meta-icon"><i class="fas fa-calendar-alt"></i></span>
              <span>${startDate} - ${endDate}</span>
            </div>
            ${volunteer.schedule ? `
            <div class="meta-item">
              <span class="meta-icon"><i class="fas fa-clock"></i></span>
              <span>${volunteer.schedule}</span>
            </div>` : ''}
            ${volunteer.skills_required ? `
            <div class="meta-item">
              <span class="meta-icon"><i class="fas fa-lightbulb"></i></span>
              <span>${volunteer.skills_required}</span>
            </div>` : ''}
          </div>
          <div class="points-notice" style="background:#f0f9ff; border-left:4px solid var(--accent); padding:0.8rem; border-radius:0 8px 8px 0; font-size:0.97rem; display:flex; align-items:center; gap:0.7rem;">
            <i class="fas fa-star" style="color: var(--accent);"></i>
            Participar en este voluntariado otorgará <strong>${volunteer.points || 20} puntos</strong> de impacto
          </div>
        </div>
      </div>
      ${causeInfo}
      <div class="modal-volunteer-content" style="margin-top:0;">
        <div class="content-section" style="margin-bottom:2.2rem;">
          <h3 class="content-title"><i class="fas fa-align-left"></i> Resumen</h3>
          <p class="content-text">${volunteer.summary || 'Sin resumen.'}</p>
        </div>
        <div class="content-section" style="margin-bottom:2.2rem;">
          <h3 class="content-title"><i class="fas fa-align-left"></i> Descripción</h3>
          <p class="content-text">${volunteer.description || 'No hay descripción disponible para este voluntariado.'}</p>
        </div>
        <div class="content-section" style="margin-bottom:2.2rem;">
          <h3 class="content-title" style="font-size:1.2rem; font-weight:600; color:var(--primary); margin-bottom:0.9rem; display:flex; align-items:center; gap:0.7rem;">
            <i class="fas fa-info-circle"></i> Detalles adicionales
          </h3>
          <div style="display:grid; grid-template-columns:1fr 1fr; gap:1rem;">
            <div>
              <p style="font-weight:600; color:#4b5563; margin-bottom:0.3rem;">Fecha de creación</p>
              <p style="color:#6b7280;">${createdDate}</p>
            </div>
            <div>
              <p style="font-weight:600; color:#4b5563; margin-bottom:0.3rem;">Estado</p>
              <p style="color:#6b7280;">${new Date(volunteer.end_date) > new Date() ? 'Activo' : 'Finalizado'}</p>
            </div>
            <div>
              <p style="font-weight:600; color:#4b5563; margin-bottom:0.3rem;">Prioridad</p>
              <p style="color:#6b7280;">${volunteer.is_urgent ? 'Alta prioridad' : 'Prioridad normal'}</p>
            </div>
            <div>
              <p style="font-weight:600; color:#4b5563; margin-bottom:0.3rem;">Plazas disponibles</p>
              <p style="color:#6b7280;">${volunteer.volunteers_needed - volunteer.volunteers} de ${volunteer.volunteers_needed}</p>
            </div>
          </div>
        </div>
      </div>
      <div class="volunteering-actions" style="display:flex; gap:0.8rem; margin-top:2.2rem;">
        <button class="btn btn-primary" style="flex:1;" onclick="joinVolunteering('${volunteer.id}')">
          <i class="fas fa-handshake"></i> Unirme como voluntario
        </button>
        <button class="btn btn-accent" style="flex:1;" onclick="showShareOptionsVolunteer('${volunteer.id}')">
          <i class="fas fa-share-alt"></i> Compartir
        </button>
      </div>
      <div class="share-section" id="shareSectionVolunteer"></div>
    </div>
  `;

  document.getElementById('volunteeringModal').style.display = 'flex';
  document.body.style.overflow = 'hidden';
}

// Función para mostrar opciones de compartir para voluntariados
function showShareOptionsVolunteer(volunteerId) {
  const volunteer = window.volunteering.find(v => v.id == volunteerId);
  const shareSection = document.getElementById('shareSectionVolunteer');
  shareSection.innerHTML = `
    <h3 class="share-title">
      <i class="fas fa-share-alt"></i> Ayuda a difundir este voluntariado
    </h3>
    <div class="share-content">
      <p class="share-text">
        <span class="share-highlight">"${volunteer.description ? volunteer.description.substring(0, 120) + '...' : 'Únete a esta importante oportunidad de voluntariado'}"</span><br><br>
        Cada voluntario nos acerca más a la meta de ayudar a <strong>${volunteer.beneficiaries || 0} personas</strong>.
      </p>
      <div class="share-buttons">
        <a href="#" class="share-btn share-btn-facebook" onclick="shareOnSocialVolunteer('facebook', '${volunteer.id}')">
          <i class="fab fa-facebook-f"></i> Facebook
        </a>
        <a href="#" class="share-btn share-btn-twitter" onclick="shareOnSocialVolunteer('twitter', '${volunteer.id}')">
          <i class="fab fa-twitter"></i> Twitter
        </a>
        <a href="#" class="share-btn share-btn-whatsapp" onclick="shareOnSocialVolunteer('whatsapp', '${volunteer.id}')">
          <i class="fab fa-whatsapp"></i> WhatsApp
        </a>
        <a href="#" class="share-btn share-btn-link" onclick="copyVolunteerLink('${volunteer.id}')">
          <i class="fas fa-link"></i> Copiar enlace
        </a>
      </div>
    </div>
  `;
  shareSection.scrollIntoView({ behavior: 'smooth' });
}

// Función para compartir voluntariados en redes sociales
function shareOnSocialVolunteer(platform, volunteerId) {
  const volunteer = window.volunteering.find(v => v.id == volunteerId);
  const url = `${window.location.origin}/volunteering/${volunteer.id}`;
  const text = `Únete a este voluntariado: "${volunteer.title}" - ${volunteer.description ? volunteer.description.substring(0, 100) + '...' : 'Ayuda a hacer la diferencia!'} ${url}`;
  let shareUrl;
  switch(platform) {
    case 'facebook':
      shareUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}&quote=${encodeURIComponent(text)}`;
      break;
    case 'twitter':
      shareUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}`;
      break;
    case 'whatsapp':
      shareUrl = `https://wa.me/?text=${encodeURIComponent(text)}`;
      break;
    default:
      return;
  }
  window.open(shareUrl, '_blank', 'width=600,height=400');
}

// Función para copiar enlace del voluntariado
function copyVolunteerLink(volunteerId) {
  const url = `${window.location.origin}/volunteering/${volunteerId}`;
  navigator.clipboard.writeText(url).then(() => {
    alert('¡Enlace copiado!');
  }).catch(() => {
    prompt('Por favor, copia este enlace:', url);
  });
}

// Cerrar modal y restaurar scroll
document.getElementById('closeVolunteeringModal').addEventListener('click', function() {
  document.getElementById('volunteeringModal').style.display = 'none';
  document.body.style.overflow = '';
});
document.getElementById('volunteeringModal').addEventListener('click', function(e) {
  if (e.target === this) {
    this.style.display = 'none';
    document.body.style.overflow = '';
  }
});

// Ejemplo de función para unirse a voluntariado
function joinVolunteering(volunteerId) {
  alert('Funcionalidad de unión a voluntariado próximamente.');
}

// Cargar causas en el select al abrir el modal de crear voluntariado
async function loadCausesForSelect() {
  const select = document.getElementById('cause-select');
  if (causeChoices) {
    causeChoices.destroy();
    causeChoices = null;
  }
  select.innerHTML = '<option value="">Selecciona una causa</option>';
  const { data: causes, error } = await supabase.from('causes').select('id, title');
  if (error) {
    alert('Error cargando causas: ' + error.message);
    return;
  }
  if (causes && causes.length > 0) {
    causes.forEach(cause => {
      const option = document.createElement('option');
      option.value = cause.id;
      option.textContent = cause.title;
      select.appendChild(option);
    });
  }
  causeChoices = new Choices(select, {
    searchEnabled: true,
    itemSelectText: '',
    shouldSort: false,
    placeholder: true,
    placeholderValue: 'Selecciona una causa',
    removeItemButton: true,
    noResultsText: 'No se encontraron causas',
  });
}

// Geocodificación automática al cambiar ciudad o país
async function geocodeCityCountry() {
  const city = document.getElementById('city').value.trim();
  const country = document.getElementById('country').value.trim();
  if (!city || !country) return;

  const query = encodeURIComponent(`${city}, ${country}`);
  const url = `https://nominatim.openstreetmap.org/search?q=${query}&format=json&limit=1`;

  try {
    const res = await fetch(url, { headers: { 'Accept-Language': 'es' } });
    const data = await res.json();
    if (data && data.length > 0) {
      document.getElementById('lat').value = data[0].lat;
      document.getElementById('lng').value = data[0].lon;
    } else {
      document.getElementById('lat').value = '';
      document.getElementById('lng').value = '';
    }
  } catch (e) {
    document.getElementById('lat').value = '';
    document.getElementById('lng').value = '';
  }
}

document.getElementById('city').addEventListener('change', geocodeCityCountry);
document.getElementById('country').addEventListener('change', geocodeCityCountry);

// Añade esta función auxiliar para mostrar el nombre de la temática:
function getCategoryName(category) {
  const categories = {
    'medioambiente': 'Medio Ambiente',
    'educacion': 'Educación',
    'salud': 'Salud',
    'deportes': 'Deportes',
    'animales': 'Animales',
    'comunidad': 'Comunidad',
    'otros': 'Otros'
  };
  return categories[category] || 'General';
}

// --- MODAL DE CAUSA REUTILIZABLE PARA VOLUNTARIADOS Y TAREAS ---

// Función para mostrar el modal de causa
async function showCauseModal(causeId) {
  const { data: cause, error } = await supabase
    .from('causes')
    .select('*')
    .eq('id', causeId)
    .single();

  if (error || !cause) {
    alert('No se pudo cargar la causa.');
    return;
  }

  document.getElementById('causeModalBody').innerHTML = `
    <h2 style="color:var(--primary);margin-bottom:1rem;">${cause.title}</h2>
    <img src="${cause.photo_url || '/img/causa-default.jpg'}" alt="${cause.title}" style="width:100%;max-width:320px;border-radius:8px;margin-bottom:1rem;">
    <p style="color:#4b5563;">${cause.description || 'Sin descripción.'}</p>
  `;
  document.getElementById('causeModal').classList.add('active');
  document.body.style.overflow = 'hidden';
}

document.getElementById('closeCauseModal').onclick = function() {
  document.getElementById('causeModal').classList.remove('active');
  document.body.style.overflow = '';
};
document.getElementById('causeModal').onclick = function(e) {
  if (e.target === this) {
    this.classList.remove('active');
    document.body.style.overflow = '';
  }
};
</script>
{% endblock %}
{% extends "layout.njk" %}

{% block title %}Solidarity - Plataforma de Impacto Social{% endblock %}

{% block head %}
  {{ super() }}
  <style>
    :root {
      --primary: #4a6fa5;
      --primary-dark: #166088;
      --accent: #4fc3a1;
      --accent-dark: #3da58a;
      --urgent: #e53e3e;
      --warning: #f59e42;
      --gold: #eab308;
      --light: #f8fafc;
      --dark: #2d3748;
      --gray: #e2e8f0;
    }

    /* Hero Section Rediseñada */
    .hero {
      background: linear-gradient(135deg, var(--primary), var(--primary-dark));
      color: white;
      padding: 4rem 2rem 6rem;
      text-align: center;
      position: relative;
      overflow: hidden;
      margin-bottom: 0;
    }

    .hero-container {
      display: flex;
      align-items: center;
      max-width: 1200px;
      margin: 0 auto;
      position: relative;
      z-index: 2;
      gap: 3rem;
    }

    .hero-content {
      flex: 1;
      text-align: left;
      padding: 2rem 0;
    }

    .hero-image {
      flex: 1;
      position: relative;
      display: none; /* Oculto en móvil */
    }

    .hero-image img {
      width: 100%;
      max-width: 500px;
      border-radius: 16px;
      box-shadow: 0 20px 40px rgba(0,0,0,0.2);
      transform: rotate(-3deg);
      transition: transform 0.3s ease;
    }

    .hero-image:hover img {
      transform: rotate(0) scale(1.02);
    }

    .hero h1 {
      font-size: 2.8rem;
      margin-bottom: 1.5rem;
      font-weight: 800;
      line-height: 1.2;
      text-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .hero p {
      font-size: 1.2rem;
      margin: 0 auto 2rem;
      font-weight: 400;
      opacity: 0.9;
      max-width: 600px;
    }

    .hero-buttons {
      display: flex;
      gap: 1.5rem;
      margin-top: 2rem;
      flex-wrap: wrap;
    }

    .hero-features {
      display: flex;
      gap: 1.5rem;
      margin-top: 2rem;
      flex-wrap: wrap;
    }

    .feature-badge {
      background: rgba(255,255,255,0.15);
      border-radius: 50px;
      padding: 0.5rem 1.2rem;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      font-size: 0.9rem;
      backdrop-filter: blur(5px);
    }

    /* Sección de Acciones */
    .actions-section {
      padding: 5rem 2rem;
      background: white;
    }

    .actions-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 2rem;
      max-width: 1200px;
      margin: 0 auto;
    }

    .action-card {
      background: white;
      border-radius: 16px;
      overflow: hidden;
      box-shadow: 0 10px 30px rgba(0,0,0,0.08);
      transition: all 0.3s ease;
      border: 1px solid var(--gray);
      position: relative;
    }

    .action-card:hover {
      transform: translateY(-10px);
      box-shadow: 0 15px 40px rgba(0,0,0,0.12);
    }

    .action-image {
      height: 180px;
      overflow: hidden;
      position: relative;
    }

    .action-image img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: transform 0.5s ease;
    }

    .action-card:hover .action-image img {
      transform: scale(1.1);
    }

    .action-badge {
      position: absolute;
      top: 1rem;
      right: 1rem;
      background: white;
      padding: 0.3rem 0.8rem;
      border-radius: 50px;
      font-size: 0.8rem;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .action-badge.points {
      background: var(--primary);
      color: white;
    }

    .action-content {
      padding: 1.5rem;
    }

    .action-content h3 {
      font-size: 1.4rem;
      margin-bottom: 0.8rem;
      color: var(--dark);
      display: flex;
      align-items: center;
      gap: 0.7rem;
    }

    .action-icon {
      width: 40px;
      height: 40px;
      background: rgba(79, 195, 161, 0.1);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      color: var(--accent);
    }

    .action-content p {
      color: #6b7280;
      margin-bottom: 1.5rem;
      font-size: 0.95rem;
      line-height: 1.6;
    }

    .action-stats {
      display: flex;
      gap: 1rem;
      margin-bottom: 1rem;
      font-size: 0.85rem;
      flex-wrap: wrap;
    }

    .stat-item {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      color: #6b7280;
    }

    .stat-item i {
      color: var(--primary);
    }

    .action-button {
      width: 100%;
      text-align: center;
      padding: 0.8rem;
      border-radius: 8px;
      font-weight: 600;
      margin-top: 1rem;
    }

    /* Sección Comunidades */
    .communities-section {
      padding: 5rem 2rem;
      background: var(--light);
    }

    .communities-container {
      max-width: 1200px;
      margin: 0 auto;
    }

    .communities-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
      gap: 2rem;
      margin-top: 3rem;
    }

    .community-card {
      background: white;
      border-radius: 16px;
      padding: 1.5rem;
      box-shadow: 0 5px 20px rgba(0,0,0,0.05);
      transition: all 0.3s ease;
      border: 1px solid var(--gray);
      text-align: center;
    }

    .community-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 30px rgba(0,0,0,0.1);
    }

    .community-avatar {
      width: 80px;
      height: 80px;
      border-radius: 50%;
      object-fit: cover;
      border: 3px solid var(--accent);
      margin: 0 auto 1rem;
      box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }

    .community-card h3 {
      font-size: 1.3rem;
      margin-bottom: 0.5rem;
      color: var(--primary);
    }

    .community-card p {
      color: #6b7280;
      font-size: 0.95rem;
      margin-bottom: 1.5rem;
    }

    .community-members {
      display: flex;
      justify-content: center;
      gap: 0.5rem;
      margin-bottom: 1.5rem;
    }

    .member-avatar {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      object-fit: cover;
      border: 2px solid white;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }

    .community-stats {
      display: flex;
      justify-content: space-around;
      margin-top: 1.5rem;
    }

    .community-stat {
      text-align: center;
    }

    .community-stat span {
      font-weight: 700;
      color: var(--primary);
      display: block;
    }

    .community-stat small {
      font-size: 0.8rem;
      color: #6b7280;
    }

    /* Responsive */
    @media (min-width: 768px) {
      .hero {
        padding: 6rem 2rem;
      }
      .hero-container {
        text-align: left;
      }
      .hero-content {
        padding: 3rem 0;
      }
      .hero-image {
        display: block;
      }
      .hero h1 {
        font-size: 3.2rem;
      }
      .hero p {
        font-size: 1.3rem;
        margin: 0 0 2rem;
      }
    }

    @media (max-width: 768px) {
      .hero-buttons {
        justify-content: center;
      }
      .hero-features {
        justify-content: center;
      }
    }

    /* Animaciones */
    @keyframes float {
      0%, 100% { transform: translateY(0); }
      50% { transform: translateY(-10px); }
    }

    .floating {
      animation: float 4s ease-in-out infinite;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }

    .animate-fade {
      animation: fadeIn 0.8s ease-out forwards;
    }

    .delay-1 { animation-delay: 0.2s; }
    .delay-2 { animation-delay: 0.4s; }
    .delay-3 { animation-delay: 0.6s; }
  </style>
{% endblock %}

{% block content %}
  <!-- Hero Section Rediseñada -->
  <section class="hero">
    <div class="hero-container">
      <div class="hero-content">
        <h1 class="animate-fade">¡Transforma tu solidaridad en impacto real!</h1>
        <p class="animate-fade delay-1">Únete a miles de personas que están cambiando el mundo a través de acciones concretas. Gana puntos, supera retos y forma parte de comunidades que marcan la diferencia.</p>
        
        <div class="hero-buttons animate-fade delay-2">
          <a href="/register" class="btn btn-accent">
            <i class="fas fa-rocket"></i> Empieza ahora
          </a>
          <a href="#actions" class="btn btn-outline-white">
            <i class="fas fa-play-circle"></i> Ver acciones
          </a>
        </div>
        
        <div class="hero-features animate-fade delay-3">
          <div class="feature-badge">
            <i class="fas fa-star" style="color: var(--gold);"></i>
            Sistema de puntos
          </div>
          <div class="feature-badge">
            <i class="fas fa-trophy" style="color: var(--warning);"></i>
            Retos emocionantes
          </div>
          <div class="feature-badge">
            <i class="fas fa-users" style="color: white;"></i>
            Comunidades activas
          </div>
        </div>
      </div>
      
      <div class="hero-image floating">
        <img src="https://images.unsplash.com/photo-1529333166437-7750a6dd5a70?auto=format&fit=crop&w=800&q=80" alt="Personas ayudando y sonriendo" class="animate-fade delay-2">
      </div>
    </div>
  </section>

  <!-- Sección de Acciones -->
  <section class="actions-section" id="actions">
    <div class="communities-container">
      <div class="section-header">
        <h2>Elige cómo quieres impactar</h2>
        <p>Diferentes formas de contribuir, todas generan cambios positivos</p>
      </div>
      
      <div class="actions-grid">
        <!-- Causas -->
        <div class="action-card animate-fade">
          <div class="action-image">
            <img src="https://images.unsplash.com/photo-1522202176988-66273c2fd55f?auto=format&fit=crop&w=600&q=80" alt="Causas sociales">
            <div class="action-badge points">
              <i class="fas fa-star"></i> +10 pts/€
            </div>
          </div>
          <div class="action-content">
            <h3><div class="action-icon"><i class="fas fa-hand-holding-heart"></i></div> Causas Solidarias</h3>
            <p>Apoya proyectos verificados con objetivos claros. Cada donación suma puntos y avances medibles hacia la meta.</p>
            <div class="action-stats">
              <div class="stat-item">
                <i class="fas fa-map-marker-alt"></i> 58 países
              </div>
              <div class="stat-item">
                <i class="fas fa-users"></i> 1,250+ activas
              </div>
            </div>
            <a href="/causes" class="action-button btn btn-primary">
              <i class="fas fa-search"></i> Explorar causas
            </a>
          </div>
        </div>
        
        <!-- Retos -->
        <div class="action-card animate-fade delay-1">
          <div class="action-image">
            <img src="https://images.unsplash.com/photo-1542601906990-b4d3fb778b09?auto=format&fit=crop&w=600&q=80" alt="Retos comunitarios">
            <div class="action-badge points">
              <i class="fas fa-star"></i> +200 pts
            </div>
          </div>
          <div class="action-content">
            <h3><div class="action-icon"><i class="fas fa-trophy"></i></div> Retos Solidarios</h3>
            <p>Supera objetivos junto a otros voluntarios. La competencia sana multiplica el impacto colectivo.</p>
            <div class="action-stats">
              <div class="stat-item">
                <i class="fas fa-medal"></i> Premios especiales
              </div>
              <div class="stat-item">
                <i class="fas fa-bolt"></i> Tabla de posiciones
              </div>
            </div>
            <a href="/challenges" class="action-button btn btn-accent">
              <i class="fas fa-flag-checkered"></i> Ver retos
            </a>
          </div>
        </div>
        
        <!-- Voluntariado -->
        <div class="action-card animate-fade delay-2">
          <div class="action-image">
            <img src="https://images.unsplash.com/photo-1521791136064-7986c2920216?auto=format&fit=crop&w=600&q=80" alt="Voluntariado">
            <div class="action-badge points">
              <i class="fas fa-star"></i> +50 pts/hora
            </div>
          </div>
          <div class="action-content">
            <h3><div class="action-icon"><i class="fas fa-hands-helping"></i></div> Voluntariados</h3>
            <p>Conecta con oportunidades presenciales o remotas que necesitan tus habilidades específicas.</p>
            <div class="action-stats">
              <div class="stat-item">
                <i class="fas fa-certificate"></i> Certificados
              </div>
              <div class="stat-item">
                <i class="fas fa-heart"></i> Experiencias únicas
              </div>
            </div>
            <a href="/volunteering" class="action-button btn btn-primary">
              <i class="fas fa-search"></i> Buscar voluntariados
            </a>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Sección Comunidades -->
  <section class="communities-section">
    <div class="communities-container">
      <div class="section-header">
        <h2>Únete a comunidades activas</h2>
        <p>Colabora con equipos que comparten tus intereses y multiplica tu impacto</p>
      </div>
      
      <div class="communities-grid">
        <div class="community-card animate-fade">
          <img src="https://images.unsplash.com/photo-1506744038136-46273834b3fb?auto=format&fit=facearea&w=80&h=80&facepad=2&q=80" alt="EcoBarrio Solidario" class="community-avatar">
          <h3>EcoBarrio Solidario</h3>
          <p>Acciones ambientales y sociales en tu comunidad local</p>
          
          <div class="community-members">
            <img src="https://randomuser.me/api/portraits/women/44.jpg" class="member-avatar" title="Laura">
            <img src="https://randomuser.me/api/portraits/men/32.jpg" class="member-avatar" title="Carlos">
            <img src="https://randomuser.me/api/portraits/women/65.jpg" class="member-avatar" title="Ana">
            <span style="align-self:center; font-size:0.9rem;">+24</span>
          </div>
          
          <div class="community-stats">
            <div class="community-stat">
              <span>1.2K</span>
              <small>Puntos</small>
            </div>
            <div class="community-stat">
              <span>5</span>
              <small>Causas</small>
            </div>
            <div class="community-stat">
              <span>245</span>
              <small>Impacto</small>
            </div>
          </div>
          
          <a href="/teams/ecobarrio" class="btn btn-outline" style="width:100%; margin-top:1rem;">
            <i class="fas fa-users"></i> Ver comunidad
          </a>
        </div>
        
        <div class="community-card animate-fade delay-1">
          <img src="https://images.unsplash.com/photo-1515378791036-0648a3ef77b2?auto=format&fit=facearea&w=80&h=80&facepad=2&q=80" alt="Cocina Comunitaria" class="community-avatar">
          <h3>Cocina Comunitaria</h3>
          <p>Preparamos comidas para personas en situación vulnerable</p>
          
          <div class="community-members">
            <img src="https://randomuser.me/api/portraits/men/41.jpg" class="member-avatar" title="Pedro">
            <img src="https://randomuser.me/api/portraits/women/43.jpg" class="member-avatar" title="Lucía">
            <span style="align-self:center; font-size:0.9rem;">+18</span>
          </div>
          
          <div class="community-stats">
            <div class="community-stat">
              <span>870</span>
              <small>Puntos</small>
            </div>
            <div class="community-stat">
              <span>2</span>
              <small>Causas</small>
            </div>
            <div class="community-stat">
              <span>180</span>
              <small>Impacto</small>
            </div>
          </div>
          
          <a href="/teams/cocina-comunitaria" class="btn btn-outline" style="width:100%; margin-top:1rem;">
            <i class="fas fa-users"></i> Ver comunidad
          </a>
        </div>
        
        <div class="community-card animate-fade delay-2">
          <img src="https://images.unsplash.com/photo-1517841905240-472988babdf9?auto=format&fit=facearea&w=80&h=80&facepad=2&q=80" alt="Lectura Accesible" class="community-avatar">
          <h3>Lectura Accesible</h3>
          <p>Hacemos la lectura accesible a personas con discapacidad</p>
          
          <div class="community-members">
            <img src="https://randomuser.me/api/portraits/women/68.jpg" class="member-avatar" title="María">
            <img src="https://randomuser.me/api/portraits/men/42.jpg" class="member-avatar" title="Javier">
            <span style="align-self:center; font-size:0.9rem;">+12</span>
          </div>
          
          <div class="community-stats">
            <div class="community-stat">
              <span>650</span>
              <small>Puntos</small>
            </div>
            <div class="community-stat">
              <span>1</span>
              <small>Causas</small>
            </div>
            <div class="community-stat">
              <span>95</span>
              <small>Impacto</small>
            </div>
          </div>
          
          <a href="/teams/lectura-accesible" class="btn btn-outline" style="width:100%; margin-top:1rem;">
            <i class="fas fa-users"></i> Ver comunidad
          </a>
        </div>
      </div>
      
      <div style="text-align: center; margin-top: 3rem;">
        <a href="/teams" class="btn btn-primary" style="padding: 0.8rem 2.5rem;">
          <i class="fas fa-search"></i> Explorar todas las comunidades
        </a>
      </div>
    </div>
  </section>

  <!-- CTA Final -->
  <section style="background: var(--primary); color: white; padding: 4rem 2rem; text-align: center;">
    <div style="max-width: 800px; margin: 0 auto;">
      <h2 style="font-size: 2rem; margin-bottom: 1.5rem;">¿Listo para unirte al movimiento?</h2>
      <p style="font-size: 1.2rem; margin-bottom: 2rem; opacity: 0.9;">Regístrate ahora y comienza a ganar puntos, completar retos y conectar con una comunidad global de agentes de cambio.</p>
      <div style="display: flex; gap: 1.5rem; justify-content: center; flex-wrap: wrap;">
        <a href="/register" class="btn btn-accent" style="padding: 0.8rem 2rem;">
          <i class="fas fa-user-plus"></i> Crear cuenta gratis
        </a>
        <a href="/login" class="btn btn-outline-white" style="padding: 0.8rem 2rem;">
          <i class="fas fa-sign-in-alt"></i> Iniciar sesión
        </a>
      </div>
    </div>
  </section>
{% endblock %}

{% block scripts %}
  {{ super() }}
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Animaciones y efectos visuales, NO lógica de supabase aquí
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add('animate-fade');
          }
        });
      }, { threshold: 0.1 });

      document.querySelectorAll('.action-card, .community-card').forEach(card => {
        observer.observe(card);
      });

      // Efecto hover en tarjetas
      const cards = document.querySelectorAll('.action-card, .community-card');
      cards.forEach(card => {
        card.addEventListener('mouseenter', function() {
          this.style.transform = 'translateY(-10px)';
        });
        card.addEventListener('mouseleave', function() {
          this.style.transform = '';
        });
      });

      // Mostrar imagen hero en desktop
      if (window.innerWidth >= 768) {
        document.querySelector('.hero-image').style.display = 'block';
      }

      // Actualizar al cambiar tamaño
      window.addEventListener('resize', function() {
        if (window.innerWidth >= 768) {
          document.querySelector('.hero-image').style.display = 'block';
        } else {
          document.querySelector('.hero-image').style.display = 'none';
        }
      });
    });
  </script>
{% endblock %}
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>{% block title %}Solidarity{% endblock %}</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="description" content="Plataforma colaborativa para impulsar la solidaridad y el impacto social">
  
  <!-- Favicon (ajusta la ruta si es necesario) -->
  <link rel="icon" href="/images/favicon.ico" type="image/x-icon">
  
  <!-- CSS -->
  <link rel="stylesheet" href="/css/style.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
  
  <!-- Bloques para extensiones -->
  {% block head %}{% endblock %}
</head>
<body>
  <!-- Navbar -->
  <header>
    {% include "partials/navbar.njk" %}
  </header>

  <!-- Contenido principal -->
  <main class="main-content">
    {% block content %}{% endblock %}
  </main>

  <!-- Footer -->
  {% include "partials/footer.njk" %}

  <!-- Scripts base -->
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
  <script>
    const supabaseUrl = 'https://cyftasxlrzuynzbrfgkd.supabase.co';
    const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImN5ZnRhc3hscnp1eW56YnJmZ2tkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDgwMzUzMTksImV4cCI6MjA2MzYxMTMxOX0.I56ZqFTfLgdwWlcozMVncGNGBZ4A2_5VpAbHeNmtDhA';
    window.supabase = window.supabase.createClient(supabaseUrl, supabaseKey);

    // Hacer global la función waitForSupabase
    window.waitForSupabase = function(callback) {
      if (window.supabase) {
        callback(window.supabase);
      } else {
        setTimeout(() => window.waitForSupabase(callback), 30);
      }
    };
  </script>
  <script src="/js/navbar.js"></script>
  
  <!-- Bloques para scripts específicos -->
  {% block scripts %}{% endblock %}

  <!-- Notificaciones (ejemplo) -->
  <div id="notifications" class="notifications-container"></div>
</body>
</html>
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>{% block title %}Solidarity{% endblock %}</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="description" content="Plataforma colaborativa para impulsar la solidaridad y el impacto social">
  
  <!-- Favicon (ajusta la ruta si es necesario) -->
  <link rel="icon" href="/images/favicon.ico" type="image/x-icon">
  
  <!-- CSS -->
  <link rel="stylesheet" href="/css/style.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
  
  <!-- Bloques para extensiones -->
  {% block head %}{% endblock %}
</head>
<body>
  <!-- Navbar -->
  <header>
    {% include "partials/navbar.njk" %}
  </header>

  <!-- Contenido principal -->
  <main class="main-content">
    {% block content %}{% endblock %}
  </main>

  <!-- Footer -->
  {% include "partials/footer.njk" %}

  <!-- Scripts base: SOLO UNA VEZ -->
  <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
  <script>
    const supabaseUrl = 'https://cyftasxlrzuynzbrfgkd.supabase.co';
    const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImN5ZnRhc3hscnp1eW56YnJmZ2tkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDgwMzUzMTksImV4cCI6MjA2MzYxMTMxOX0.I56ZqFTfLgdwWlcozMVncGNGBZ4A2_5VpAbHeNmtDhA';
    const supabase = window.supabase = window.supabase.createClient(supabaseUrl, supabaseKey);
  </script>
  <script src="/js/navbar.js"></script>
  <script src="/js/impactpoints.js"></script>
  <!-- y cualquier otro script que use supabase -->

  <!-- Bloques para scripts específicos -->
  {% block scripts %}{% endblock %}

  <!-- Notificaciones (ejemplo) -->
  <div id="notifications" class="notifications-container"></div>

  <!-- Modal de bienvenida tras login -->
  <div id="welcomeModal" style="display:none; position:fixed; top:0; left:0; width:100vw; height:100vh; background:rgba(0,0,0,0.35); z-index:9999; align-items:center; justify-content:center;">
    <div style="background:#fff; border-radius:18px; max-width:370px; margin:auto; padding:2.2rem 1.7rem; box-shadow:0 8px 32px rgba(0,0,0,0.13); text-align:center; position:relative;">
      <span style="font-size:2.7rem; color:#2dd4bf; display:block; margin-bottom:1rem;">
        <i class="fas fa-fire"></i>
      </span>
      <h2 style="color:#2dd4bf; font-weight:900; margin-bottom:0.7rem;">¡Bienvenido/a de nuevo!</h2>
      <p style="color:#444; font-size:1.13rem;">
        ¡Nos alegra verte en Solidarity!<br>
        <strong>Hoy es un gran día para ayudar, inspirar y transformar el mundo.</strong>
      </p>
      <p style="color:#888; font-size:0.97rem; margin-top:1em;">
        ¿Listo/a para dejar tu huella positiva?<br>
        ¡Explora, conecta y actúa!
      </p>
      <button onclick="document.getElementById('welcomeModal').style.display='none';" style="margin-top:1.5rem; background:#2dd4bf; color:#fff; border:none; border-radius:8px; padding:0.8rem 1.7rem; font-size:1.1rem; font-weight:700; cursor:pointer;">
        ¡Vamos allá!
      </button>
    </div>
  </div>
  <script>
    function isTrending(activity) {
      if (activity.type === 'cause') {
        return (activity.beneficiaries || 0) + (activity.raised || 0) > 100;
      }
      if (activity.type === 'task') {
        return (activity.beneficiaries || 0) > 50;
      }
      if (activity.type === 'volunteering') {
        return (activity.volunteers_needed || 0) > 30;
      }
      if (activity.type === 'challenge') {
        // Trending si es reciente (últimos 7 días)
        const created = new Date(activity.created_at);
        const now = new Date();
        const diffDays = (now - created) / (1000 * 60 * 60 * 24);
        return diffDays < 7;
      }
      return false;
    }

    // Renderizado de actividades
    const grid = document.getElementById('activities-grid');
    const activitiesToShow = []; // Suponiendo que esta variable contiene las actividades a mostrar

    grid.innerHTML = activitiesToShow.map(activity => {
      const typeLabels = {
        cause: 'Causa',
        task: 'Tarea',
        challenge: 'Reto',
        volunteering: 'Voluntariado'
      };

      // Badge tipo
      const badge = `<div class="activity-badge ${activity.type}">
        <i class="fas ${activity.icon}"></i> ${typeLabels[activity.type] || 'Otro'}
      </div>`;

      // Badge trending
      const trendingBadge = isTrending(activity)
        ? `<div class="activity-badge trending"><i class="fas fa-fire"></i> Trending</div>`
        : '';

      // Causa
      if (activity.type === 'cause') {
        const meta = activity.goal || 1000;
        const recaudado = activity.raised || 0;
        const porcentaje = meta ? Math.min(100, Math.round((recaudado / meta) * 100)) : 0;
        return `
          <div class="activity-card" data-type="cause">
            ${badge}
            ${trendingBadge}
            <div class="activity-image" style="background-image: url('${activity.photo_url || '/img/causa-default.jpg'}')"></div>
            <div class="activity-content">
              <div class="activity-header">${activity.title || 'Sin título'}</div>
              <div class="activity-meta">
                <span><i class="fas fa-map-marker-alt"></i> ${activity.city || 'Sin ubicación'}${activity.country ? ', ' + activity.country : ''}</span>
                <span><i class="fas fa-calendar-alt"></i> ${activity.formattedDate}</span>
              </div>
              <div class="activity-impact">
                <span><i class="fas fa-users"></i> ${activity.beneficiaries || 0} beneficiarios</span>
              </div>
              <div class="activity-impact">
                <span><i class="fas fa-euro-sign"></i> ${recaudado} € de ${meta} €</span>
              </div>
              <div class="progress-bar" style="margin: 0.5em 0 0.7em 0;">
                <div class="progress-fill" style="width:${porcentaje}%;background:#4fc3a1;height:8px;border-radius:4px;"></div>
              </div>
              <div style="font-size:0.92em;color:#6b7280;">${porcentaje}% recaudado</div>
            </div>
            <a href="/causes/${activity.id}" class="activity-link">Ver detalles</a>
          </div>
        `;
      }
      // Tarea
      if (activity.type === 'task') {
        return `
          <div class="activity-card" data-type="task">
            ${badge}
            ${trendingBadge}
            <div class="activity-image" style="background-image: url('${activity.photo_url || '/img/task-default.jpg'}')"></div>
            <div class="activity-content">
              <div class="activity-header">${activity.title || 'Sin título'}</div>
              <div class="activity-meta">
                <span><i class="fas fa-map-marker-alt"></i> ${activity.city || 'Sin ubicación'}${activity.country ? ', ' + activity.country : ''}</span>
                <span><i class="fas fa-calendar-alt"></i> ${activity.formattedDate}</span>
              </div>
              <div class="activity-impact">
                <span><i class="fas fa-users"></i> ${activity.beneficiaries || 0} beneficiarios</span>
              </div>
            </div>
            <a href="/tasks/${activity.id}" class="activity-link">Ver detalles</a>
          </div>
        `;
      }
      // Reto
      if (activity.type === 'challenge') {
        return `
          <div class="activity-card" data-type="challenge">
            ${badge}
            ${trendingBadge}
            <div class="activity-image" style="background-image: url('${activity.photo_url || '/img/challenge-default.jpg'}')"></div>
            <div class="activity-content">
              <div class="activity-header">${activity.title || 'Sin título'}</div>
              <div class="activity-meta">
                <span><i class="fas fa-map-marker-alt"></i> ${activity.city || 'Sin ubicación'}${activity.country ? ', ' + activity.country : ''}</span>
                <span><i class="fas fa-calendar-alt"></i> ${activity.formattedDate}</span>
              </div>
              <div class="activity-impact">
                <span><i class="fas fa-bullseye"></i> Impacto: 50 pts</span>
              </div>
            </div>
            <a href="/challenges/${activity.id}" class="activity-link">Ver detalles</a>
          </div>
        `;
      }
      // Voluntariado
      if (activity.type === 'volunteering') {
        return `
          <div class="activity-card" data-type="volunteering">
            ${badge}
            ${trendingBadge}
            <div class="activity-image" style="background-image: url('${activity.photo_url || '/img/volunteer-default.jpg'}')"></div>
            <div class="activity-content">
              <div class="activity-header">${activity.title || 'Sin título'}</div>
              <div class="activity-meta">
                <span><i class="fas fa-map-marker-alt"></i> ${activity.city || 'Sin ubicación'}${activity.country ? ', ' + activity.country : ''}</span>
                <span><i class="fas fa-calendar-alt"></i> ${activity.formattedDate}</span>
              </div>
              <div class="activity-impact">
                <span><i class="fas fa-users"></i> ${activity.volunteers_needed || 0} voluntarios necesarios</span>
              </div>
            </div>
            <a href="/volunteering/${activity.id}" class="activity-link">Ver detalles</a>
          </div>
        `;
      }
      return '';
    }).join('');
  </script>
</body>
</html>
require('dotenv').config();
const express = require('express');
const path = require('path');
const session = require('express-session');
const fs = require('fs');
const multer = require('multer');
const nunjucks = require('nunjucks');
const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);
const app = express();
const PORT = 3000;

const USERS_FILE = path.join(__dirname, 'users.json');

// Middleware para parsear JSON
app.use(express.json());

// Sesiones (añadido cookie: { sameSite: 'lax' } para compatibilidad frontend-backend)
app.use(session({
    secret: 'secreto-super-seguro',
    resave: false,
    saveUninitialized: false,
    cookie: { secure: false, sameSite: 'lax' }
}));

// Servir archivos estáticos (NO HTML aquí, solo CSS, JS, imágenes)
app.use(express.static(path.join(__dirname)));
app.use(express.static(path.join(__dirname, 'public'))); // Para scripts y assets

// --- Multer config para subir imágenes ---
const uploadDir = path.join(__dirname, 'public', 'uploads');
if (!fs.existsSync(uploadDir)) fs.mkdirSync(uploadDir, { recursive: true });

const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, uploadDir);
    },
    filename: function (req, file, cb) {
        // Nombre único: fecha + nombre original
        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
        const ext = path.extname(file.originalname);
        cb(null, file.fieldname + '-' + uniqueSuffix + ext);
    }
});
const upload = multer({ storage: storage });

// --- Subida de foto de perfil ---
app.post('/upload-photo', upload.single('photo'), (req, res) => {
    if (!req.file) {
        return res.json({ ok: false, error: 'No se subió ninguna imagen.' });
    }
    // URL accesible desde el navegador
    const url = '/uploads/' + req.file.filename;
    res.json({ ok: true, url });
});

// --- Leer y guardar usuarios ---
function readUsers() {
    if (!fs.existsSync(USERS_FILE)) return [];
    const data = fs.readFileSync(USERS_FILE, 'utf8');
    if (!data) return [];
    return JSON.parse(data);
}
function writeUsers(users) {
    fs.writeFileSync(USERS_FILE, JSON.stringify(users, null, 2));
}

// --- Registro de usuario ---
app.post('/register', (req, res) => {
    const { username, password, name, email, photo } = req.body;
    if (!username || !password || !name || !email) {
        return res.status(400).json({ ok: false, error: 'Faltan campos obligatorios' });
    }
    let users = readUsers();
    if (users.find(u => u.username === username)) {
        return res.status(400).json({ ok: false, error: 'Usuario ya existe' });
    }
    const newUser = { username, password, name, email, photo: photo || '' };
    users.push(newUser);
    writeUsers(users);
    res.json({ ok: true });
});

// --- Login ---
app.post('/login', (req, res) => {
    // Permitir login por username o email
    const { username, password, email } = req.body;
    let users = readUsers();
    let user = null;
    if (username && password) {
        user = users.find(u => u.username === username && u.password === password);
    } else if (email && password) {
        user = users.find(u => u.email === email && u.password === password);
    }
    if (user) {
        req.session.user = { name: user.name, photo: user.photo || '', username: user.username, email: user.email };
        res.json({ ok: true, user: req.session.user });
    } else {
        res.status(401).json({ ok: false, error: 'Credenciales incorrectas' });
    }
});

// --- Saber si hay sesión ---
app.get('/me', (req, res) => {
    if (req.session.user) {
        res.json({ logged: true, user: req.session.user });
    } else {
        res.json({ logged: false });
    }
});

// --- Logout ---
app.post('/logout', (req, res) => {
    req.session.destroy(() => res.json({ ok: true }));
});

// --- Configura nunjucks para usar la carpeta 'views' ---
nunjucks.configure('views', {
  autoescape: true,
  express: app
});
app.set('view engine', 'njk');

// --- Rutas para las páginas principales (usa .njk) ---
app.get('/', (req, res) => {
    res.render('index.njk');
});
app.get('/login', (req, res) => {
    res.render('auth/login.njk');
});
app.get('/register', (req, res) => {
    res.render('auth/register.njk');
});
app.get('/causes', (req, res) => {
    res.render('causes/index.njk');
});
app.get('/tasks', (req, res) => {
    res.render('tasks/index.njk');
});
app.get('/volunteering', (req, res) => {
    res.render('volunteering/index.njk');
});
app.get('/profile', (req, res) => {
    res.render('profile/index.njk');
});
app.get('/causes/create', (req, res) => {
    res.render('causes/create.njk');
});
app.get('/tasks/create', (req, res) => {
    res.render('tasks/create.njk');
});
app.get('/volunteering/create', (req, res) => {
    res.render('volunteering/create.njk');
});
app.get('/maps', (req, res) => {
    res.render('maps/index.njk');
});
app.get('/challenges', (req, res) => {
    res.render('challenges/index.njk');
});
app.get('/teams', (req, res) => {
    res.render('teams/index.njk');
});
app.get('/teams/myteams', (req, res) => {
    res.render('teams/myteams.njk');
});
app.get('/ranking', (req, res) => {
    res.render('ranking/index.njk');
});
app.get('/takeaction', (req, res) => {
    res.render('takeaction/index.njk');
});

// --- Ruta para 404 ---
app.use((req, res) => {
    res.status(404).send('Página no encontrada');
});

// 1. Crear cuenta Express para el creador de la causa
app.post('/connect-account', async (req, res) => {
  const { userId, email } = req.body;
  try {
    const account = await stripe.accounts.create({
      type: 'express',
      email,
      capabilities: { transfers: { requested: true } }
    });
    // Guarda account.id en tu BD, asociado al usuario
    // ...
    res.json({ accountId: account.id });
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
});

// 2. Crear link de onboarding para que el usuario complete su cuenta
app.post('/connect-onboarding', async (req, res) => {
  const { accountId } = req.body;
  try {
    const accountLink = await stripe.accountLinks.create({
      account: accountId,
      refresh_url: 'https://tusitio.com/stripe/refresh',
      return_url: 'https://tusitio.com/stripe/return',
      type: 'account_onboarding',
    });
    res.json({ url: accountLink.url });
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
});

// 3. Crear sesión de pago para donar a una causa
app.post('/donate', async (req, res) => {
  const { amount, causeId, creatorStripeAccountId, donorEmail } = req.body;
  try {
    const session = await stripe.checkout.sessions.create({
      payment_method_types: ['card'],
      line_items: [{
        price_data: {
          currency: 'eur',
          product_data: { name: `Donación a causa #${causeId}` },
          unit_amount: amount * 100, // en céntimos
        },
        quantity: 1,
      }],
      mode: 'payment',
      success_url: 'https://tusitio.com/donacion-exitosa',
      cancel_url: 'https://tusitio.com/donacion-cancelada',
      payment_intent_data: {
        application_fee_amount: 100, // comisión para la plataforma (opcional)
        transfer_data: {
          destination: creatorStripeAccountId, // el Stripe Account del creador
        },
      },
      customer_email: donorEmail,
    });
    res.json({ url: session.url });
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
});

app.listen(PORT, () => {
    console.log(`Servidor iniciado en http://localhost:${PORT}`);
});

==== C:\Users\gabi2\Desktop\Solidarity-web\public\css\style - copia.css ====
/* Variables y estilos base (mantén los que tienes) */
:root {
  --primary: #4a6fa5;
  --primary-light: #6d8fc7;
  --secondary: #166088;
  --accent: #4fc3a1;
  --accent-dark: #3aa389;
  --dark: #2d3748;
  --darker: #1a202c;
  --light: #f8f9fa;
  --gray: #e2e8f0;
  --white: #ffffff;
  --btn-bg: #4a6fa5;
  --btn-bg-hover: #3da58a;
  --btn-outline: #fff;
  --btn-outline-border: #4a6fa5;
  --btn-outline-hover: #eaf3fa;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  font-size: 16px;
  scroll-behavior: smooth;
}

body {
  font-family: 'Poppins', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  background: var(--light);
  color: var(--darker);
  line-height: 1.6;
  padding-bottom: 72px; /* Espacio para el menú móvil */
}

/* Header y Navbar Responsive */
header {
  background: var(--white);
  box-shadow: 0 2px 15px rgba(0, 0, 0, 0.08);
  position: sticky;
  top: 0;
  z-index: 1000;
  width: 100%;
  padding: 0.5rem 1rem;
}

.navbar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1rem;
  position: relative;
  background: #fff;
  z-index: 100;
  box-shadow: 0 2px 8px rgba(74,111,165,0.07);
}

.logo {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  text-decoration: none;
  z-index: 1001;
}

.logo-icon {
  font-size: 1.8rem;
  color: var(--primary);
}

.logo-text {
  font-size: 1.4rem;
  font-weight: 600;
  color: var(--primary);
  letter-spacing: 1px;
}

/* Menú hamburguesa (solo visible en móvil) */
.menu-toggle {
  display: none;
  background: none;
  border: none;
  cursor: pointer;
  padding: 0.5rem;
  z-index: 1001;
}

.menu-bar {
  display: block;
  width: 25px;
  height: 3px;
  background: var(--primary);
  margin: 5px 0;
  transition: all 0.3s ease;
}

/* Contenedor de enlaces */
.nav-links-container {
  display: flex;
  flex-grow: 1;
  justify-content: space-between;
  align-items: center;
}

/* Enlaces de navegación */
.nav-links {
  display: flex;
  gap: 1.5rem;
  align-items: center;
}

.auth-container {
  display: flex;
  align-items: center;
  gap: 1rem;
}

/* Botones */
.btn {
  padding: 0.5em 1.2em;
  border-radius: 30px;
  border: none;
  font-weight: 500;
  font-size: 1em;
  cursor: pointer;
  transition: background 0.2s, color 0.2s;
  text-decoration: none;
  display: inline-block;
}

.btn-primary {
  background: var(--btn-bg);
  color: #fff;
}

.btn-primary:hover {
  background: var(--btn-bg-hover);
}

.btn-outline {
  background: var(--btn-outline);
  color: var(--primary);
  border: 2px solid var(--btn-outline-border);
}

.btn-outline:hover {
  background: var(--btn-outline-hover);
}

/* Contenido principal */
.main-content {
  min-height: calc(100vh - 120px);
  width: 100%;
  overflow-x: hidden;
}

/* Secciones comunes */
.section-header {
  text-align: center;
  margin-bottom: 2.5rem;
  padding: 0 1rem;
}

.section-header h2 {
  font-size: 2rem;
  color: var(--primary);
  margin-bottom: 0.5rem;
}

.section-header p {
  color: #6b7280;
  font-size: 1.1rem;
  max-width: 700px;
  margin: 0 auto;
}

/* Hero Section Responsive */
.hero {
  background: linear-gradient(135deg, var(--primary), var(--primary-dark));
  color: white;
  padding: 3rem 1rem 4rem;
  text-align: center;
  position: relative;
  overflow: hidden;
}

.hero-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  max-width: 1200px;
  margin: 0 auto;
  position: relative;
  z-index: 2;
  gap: 2rem;
}

.hero-content {
  flex: 1;
  text-align: center;
  padding: 1rem 0;
  width: 100%;
}

.hero-image {
  flex: 1;
  position: relative;
  display: none;
  width: 100%;
  max-width: 500px;
  margin: 0 auto;
}

.hero h1 {
  font-size: 2rem;
  margin-bottom: 1rem;
  font-weight: 800;
  line-height: 1.2;
  text-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.hero p {
  font-size: 1.1rem;
  margin: 0 auto 1.5rem;
  font-weight: 400;
  opacity: 0.9;
  max-width: 100%;
  padding: 0 1rem;
}

.hero-buttons {
  display: flex;
  gap: 1rem;
  margin-top: 1.5rem;
  flex-wrap: wrap;
  justify-content: center;
}

.hero-features {
  display: flex;
  gap: 1rem;
  margin-top: 1.5rem;
  flex-wrap: wrap;
  justify-content: center;
}

.feature-badge {
  background: rgba(255,255,255,0.15);
  border-radius: 50px;
  padding: 0.5rem 1rem;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-size: 0.85rem;
  backdrop-filter: blur(5px);
}

/* Grids responsive */
.actions-grid, .communities-grid {
  display: grid;
  grid-template-columns: 1fr;
  gap: 1.5rem;
  padding: 0 1rem;
}

.action-card, .community-card {
  width: 100%;
  margin: 0 auto;
}

/* Footer responsive */
footer {
  background: white;
  padding: 2rem 1rem;
  border-top: 1px solid var(--gray);
}

.footer-content {
  display: flex;
  flex-direction: column;
  gap: 2rem;
  max-width: 1200px;
  margin: 0 auto;
}

.footer-logo {
  display: flex;
  align-items: center;
  gap: 0.7rem;
  margin-bottom: 1rem;
}

/* Menú móvil */
/* .mobile-nav {
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  background: white;
  display: flex;
  justify-content: space-around;
  padding: 0.75rem 0;
  box-shadow: 0 -2px 10px rgba(0,0,0,0.1);
  z-index: 1000;
}

.mobile-nav-item {
  display: flex;
  flex-direction: column;
  align-items: center;
  text-decoration: none;
  color: var(--dark);
  font-size: 0.8rem;
  gap: 0.3rem;
}

.mobile-nav-item i {
  font-size: 1.4rem;
}

.mobile-nav-item.active {
  color: var(--primary);
} */

/* Modal responsive */
.modal-container {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background: rgba(0,0,0,0.35);
  z-index: 9999;
  align-items: center;
  justify-content: center;
  padding: 1rem;
}

.modal-content {
  background: #fff;
  border-radius: 16px;
  max-width: 370px;
  width: 100%;
  padding: 1.5rem;
  box-shadow: 0 8px 32px rgba(0,0,0,0.13);
  text-align: center;
  position: relative;
}

.modal-icon {
  font-size: 2.5rem;
  color: var(--accent);
  display: block;
  margin-bottom: 1rem;
}

.modal-content h2 {
  color: var(--accent);
  font-weight: 900;
  margin-bottom: 0.7rem;
  font-size: 1.5rem;
}

.modal-content p {
  color: #444;
  font-size: 1rem;
  margin-bottom: 0.5rem;
}

.modal-subtext {
  color: #888;
  font-size: 0.9rem;
  margin-top: 0.5rem;
}

.modal-button {
  margin-top: 1.5rem;
  background: var(--accent);
  color: #fff;
  border: none;
  border-radius: 8px;
  padding: 0.8rem 1.5rem;
  font-size: 1rem;
  font-weight: 700;
  cursor: pointer;
  width: 100%;
}

/* Media Queries para tablets */
@media (min-width: 600px) {
  .hero {
    padding: 4rem 1.5rem 5rem;
  }
  
  .hero h1 {
    font-size: 2.3rem;
  }
  
  .hero p {
    font-size: 1.15rem;
  }
  
  .actions-grid, .communities-grid {
    grid-template-columns: repeat(2, 1fr);
  }
  
  .footer-content {
    flex-direction: row;
    flex-wrap: wrap;
  }
  
  .footer-content > div {
    flex: 1 1 45%;
    min-width: 0;
  }
}

/* Media Queries para desktop */
@media (min-width: 992px) {
  body {
    padding-bottom: 0;
  }
  
  .mobile-nav {
    display: none;
  }
  
  .hero {
    padding: 5rem 2rem 6rem;
  }
  
  .hero-container {
    flex-direction: row;
    text-align: left;
    gap: 3rem;
  }
  
  .hero-content {
    text-align: left;
    padding: 2rem 0;
  }
  
  .hero-image {
    display: block;
  }
  
  .hero h1 {
    font-size: 2.8rem;
  }
  
  .hero p {
    margin: 0 0 2rem;
    padding: 0;
    text-align: left;
  }
  
  .hero-buttons, .hero-features {
    justify-content: flex-start;
  }
  
  .actions-grid {
    grid-template-columns: repeat(3, 1fr);
    padding: 0;
  }
  
  .communities-grid {
    grid-template-columns: repeat(3, 1fr);
    padding: 0;
  }
  
  .footer-content > div {
    flex: 1 1 22%;
  }
}

/* Media Queries para pantallas grandes */
@media (min-width: 1200px) {
  .hero h1 {
    font-size: 3.2rem;
  }
  
  .hero p {
    font-size: 1.25rem;
  }
}

/* Menú hamburguesa para móviles */
@media (max-width: 991px) {
  .nav-links {
    position: fixed;
    top: 70px;
    left: 0;
    right: 0;
    bottom: 0;
    background: white;
    flex-direction: column;
    justify-content: flex-start;
    padding: 2rem;
    gap: 1.5rem;
    transform: translateX(-100%);
    transition: transform 0.3s ease;
    z-index: 999;
    overflow-y: auto;
  }
  
  .nav-links.active {
    transform: translateX(0);
  }
  
  .auth-buttons {
    flex-direction: column;
    gap: 1rem;
    width: 100%;
    margin-top: 1rem;
  }
  
  #user-menu {
    margin-left: auto;
  }
  
  /* Botón hamburguesa */
  .menu-toggle {
    display: flex;
    flex-direction: column;
    justify-content: space-around;
    width: 30px;
    height: 24px;
    background: transparent;
    border: none;
    cursor: pointer;
    padding: 0;
    z-index: 1001;
  }
  
  .menu-toggle span {
    width: 100%;
    height: 3px;
    background: var(--primary);
    transition: all 0.3s ease;
  }
  
  .menu-toggle.active span:nth-child(1) {
    transform: translateY(8px) rotate(45deg);
  }
  
  .menu-toggle.active span:nth-child(2) {
    opacity: 0;
  }
  
  .menu-toggle.active span:nth-child(3) {
    transform: translateY(-8px) rotate(-45deg);
  }
  
  /* Añade esto al navbar.njk */
  /* <button class="menu-toggle" id="mobile-menu-toggle">
    <span></span>
    <span></span>
    <span></span>
  </button> */
}

/* Responsive */
@media (max-width: 991px) {
  .menu-toggle {
    display: block;
  }

  .nav-links-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: #fff;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    transform: translateX(100%);
    transition: transform 0.3s ease;
    z-index: 1000;
    padding-top: 80px;
  }

  .nav-links-container.active {
    transform: translateX(0);
  }

  .nav-links {
    flex-direction: column;
    width: 100%;
    padding: 1rem;
    gap: 2rem;
  }

  .auth-container {
    flex-direction: column;
    width: 100%;
    padding: 1rem;
    gap: 1.5rem;
  }

  .menu-toggle.active .menu-bar:nth-child(1) {
    transform: translateY(8px) rotate(45deg);
  }
  .menu-toggle.active .menu-bar:nth-child(2) {
    opacity: 0;
  }
  .menu-toggle.active .menu-bar:nth-child(3) {
    transform: translateY(-8px) rotate(-45deg);
  }

  body.no-scroll {
    overflow: hidden;
  }
}

==== C:\Users\gabi2\Desktop\Solidarity-web\public\js\impactpoints.js ====
const IMPACT_POINTS = {
  register: 100,
  daily_login: 5,
  weekly_streak: 50,
  post_activity: 50, // causa, tarea, reto, voluntariado
  share: 5,
  per_euro_donated: 5
};

// Suma puntos al usuario
async function addImpactPoints(userId, points) {
  if (!userId || !points) return;
  const { data: profile, error } = await supabase
    .from('profiles')
    .select('impact_points, weekly_points')
    .eq('id', userId)
    .single();
  if (error || !profile) return;
  const newImpactPoints = (profile.impact_points || 0) + points;
  const newWeeklyPoints = (profile.weekly_points || 0) + points;
  await supabase
    .from('profiles')
    .update({
      impact_points: newImpactPoints,
      weekly_points: newWeeklyPoints
    })
    .eq('id', userId);
}

// 1. Al registrarse
async function onUserRegister(userId) {
  await addImpactPoints(userId, IMPACT_POINTS.register);
}

// 2. Al hacer login diario
async function onUserDailyLogin(userId) {
  await addImpactPoints(userId, IMPACT_POINTS.daily_login);
  // Aquí puedes añadir lógica para streak semanal
  // Ejemplo: si es el 7º día seguido, suma bonus
  const streak = await getLoginStreak(userId);
  if (streak && streak % 7 === 0) {
    await addImpactPoints(userId, IMPACT_POINTS.weekly_streak);
  }
}

// 3. Al publicar causa, tarea, reto o voluntariado
async function onPostActivity(userId) {
  await addImpactPoints(userId, IMPACT_POINTS.post_activity);
}

// 4. Al unirse a una actividad (puntos variables)
async function onJoinActivity(userId, activityPoints) {
  await addImpactPoints(userId, activityPoints);
}

// 5. Por cada euro donado
async function onDonate(userId, euros) {
  const points = euros * IMPACT_POINTS.per_euro_donated;
  await addImpactPoints(userId, points);
}

// 6. Por compartir en redes
async function onShare(userId) {
  await addImpactPoints(userId, IMPACT_POINTS.share);
}

// Ejemplo de función para obtener el streak de login semanal (debes implementarla según tu lógica)
async function getLoginStreak(userId) {
  // Aquí deberías consultar una tabla de logins diarios y calcular el streak
  // Por ahora, devuelve 7 para simular un bonus semanal
  return 7;
}

==== C:\Users\gabi2\Desktop\Solidarity-web\public\js\index.js ====
document.addEventListener('DOMContentLoaded', async () => {
  // Cargar causas desde Supabase
  const { data: causas, error } = await supabase
    .from('causas')
    .select('*')
    .order('created_at', { ascending: false })
    .limit(3);

  if (error) {
    // Muestra un mensaje de error en la UI si quieres
    return;
  }

  const grid = document.querySelector('.causes-grid');
  if (!grid) return;

  grid.innerHTML = '';
  causas.forEach(causa => {
    grid.innerHTML += `
      <div class="cause-card">
        <div class="cause-image">
          <img src="${causa.imagen_url}" alt="${causa.titulo}">
        </div>
        <div class="cause-content">
          <h3>${causa.titulo}</h3>
          <p>${causa.descripcion}</p>
          <div class="progress-container">
            <div class="progress-bar">
              <div class="progress" style="width: ${causa.progreso || 0}%;"></div>
            </div>
            <div class="progress-info">
              <span>${causa.recaudado || 0} recaudados</span>
              <span>${causa.progreso || 0}%</span>
            </div>
          </div>
          <a href="#" class="btn btn-primary btn-sm">
            <i class="fas fa-heart"></i> Apoyar
          </a>
        </div>
      </div>
    `;
  });
});

==== C:\Users\gabi2\Desktop\Solidarity-web\public\js\login.js ====
document.getElementById('loginForm').addEventListener('submit', async function(e) {
  e.preventDefault();
  const loginValue = document.getElementById('loginEmail').value.trim();
  const password = document.getElementById('loginPassword').value;
  const errorDiv = document.getElementById('loginError');
  errorDiv.style.display = 'none';

  let user = null;
  let error = null;

  if (loginValue.includes('@')) {
    // Login por email
    const res = await supabase.auth.signInWithPassword({ email: loginValue, password });
    user = res.data?.user;
    error = res.error;
  } else {
    // Login por username
    const { data: profile } = await supabase
      .from('profiles')
      .select('email')
      .eq('username', loginValue)
      .maybeSingle();
    if (!profile) {
      errorDiv.textContent = 'Usuario no encontrado';
      errorDiv.style.display = 'block';
      return;
    }
    const res = await supabase.auth.signInWithPassword({ email: profile.email, password });
    user = res.data?.user;
    error = res.error;
  }

  if (error) {
    errorDiv.textContent = error.message || 'No se pudo iniciar sesión';
    errorDiv.style.display = 'block';
  } else {
    window.location.href = '/profile';
  }
});

==== C:\Users\gabi2\Desktop\Solidarity-web\public\js\navbar - copia (2).js ====
document.addEventListener('DOMContentLoaded', async () => {
  // Autenticación (ajusta según tu lógica)
  const { data: { user } } = await supabase.auth.getUser();
  const authButtons = document.getElementById('auth-buttons');
  const userMenu = document.getElementById('user-menu');

  if (user) {
    const { data: perfil } = await supabase
      .from('profiles')
      .select('username, photo_url')
      .eq('id', user.id)
      .single();

    document.getElementById('user-avatar').src = perfil?.photo_url || '/img/default-user.png';
    document.getElementById('user-name').textContent = perfil?.username || user.email;
    authButtons.style.display = 'none';
    userMenu.style.display = 'flex';
  } else {
    authButtons.style.display = 'flex';
    userMenu.style.display = 'none';
  }

  // Logout
  const logoutBtn = document.getElementById('logout-btn-link');
  if (logoutBtn) {
    logoutBtn.onclick = async (e) => {
      e.preventDefault();
      await supabase.auth.signOut();
      window.location.reload();
    };
  }

  // Menú móvil hamburguesa
  const toggle = document.getElementById('mobile-menu-toggle');
  const navContainer = document.querySelector('.nav-links-container');

  if (toggle && navContainer) {
    toggle.addEventListener('click', () => {
      toggle.classList.toggle('active');
      navContainer.classList.toggle('active');
      document.body.classList.toggle('no-scroll');
    });
  }

  // Cerrar menú al hacer clic en un enlace
  document.querySelectorAll('.nav-links a').forEach(link => {
    link.addEventListener('click', () => {
      if (toggle && navContainer) {
        toggle.classList.remove('active');
        navContainer.classList.remove('active');
        document.body.classList.remove('no-scroll');
      }
    });
  });
});

==== C:\Users\gabi2\Desktop\Solidarity-web\public\js\navbar - copia.js ====
document.addEventListener('DOMContentLoaded', () => {
  window.waitForSupabase(async (supabase) => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      const authButtons = document.getElementById('auth-buttons');
      const userMenu = document.getElementById('user-menu');
      
      if (user) {
        const { data: perfil } = await supabase
          .from('profiles')
          .select('username, photo_url')
          .eq('id', user.id)
          .single();

        document.getElementById('user-avatar').src = perfil?.photo_url || '/images/default-avatar.png';
        document.getElementById('user-name').textContent = perfil?.username || user.email;
        authButtons.style.display = 'none';
        userMenu.style.display = 'flex';
        
        document.getElementById('logout-btn').onclick = async () => {
          await supabase.auth.signOut();
          window.location.reload();
        };
      } else {
        authButtons.style.display = 'flex';
        userMenu.style.display = 'none';
      }
    } catch (error) {
      console.error("Error en navbar:", error);
    }
  });
});

==== C:\Users\gabi2\Desktop\Solidarity-web\public\scripts\logout.js ====
// logout.js - Código super sencillo
document.addEventListener('DOMContentLoaded', () => {
  const logoutBtn = document.getElementById('logout-btn');
  
  if (logoutBtn) {
    logoutBtn.addEventListener('click', async () => {
      const { error } = await supabase.auth.signOut();
      if (!error) {
        // Limpiar datos locales
        sessionStorage.removeItem('user');
        // Redirigir al home
        window.location.href = "/";
      } else {
        alert('Error al cerrar sesión: ' + error.message);
      }
    });
  }
});

==== C:\Users\gabi2\Desktop\Solidarity-web\public\scripts\sessions.js ====
document.addEventListener('DOMContentLoaded', async () => {
  const { data: { user } } = await supabase.auth.getUser();

  // Redirige si la página requiere autenticación y el usuario NO está logueado
  const publicPaths = ["/", "/login", "/register"];
  if (!user && !publicPaths.includes(window.location.pathname)) {
    window.location.href = "/";
  }

  // Guarda datos útiles en sessionStorage si quieres usarlos en otras páginas
  if (user) {
    sessionStorage.setItem('user', JSON.stringify({
      id: user.id,
      email: user.email,
      name: user.user_metadata?.name,
      avatar: user.user_metadata?.avatar_url
    }));
  } else {
    sessionStorage.removeItem('user');
  }
});

==== C:\Users\gabi2\Desktop\Solidarity-web\views\auth\home.njk ====
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Solidarity - Inicio</title>
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
</head>
<body>
    <div class="app-container">
        <!-- Sidebar -->
        <aside class="sidebar">
            <div class="sidebar-header">
                <div class="app-logo">
                    <i class="fas fa-hands-helping"></i>
                    <h1>Solidarity</h1>
                </div>
            </div>
            
            <nav class="sidebar-nav">
                <ul>
                    <li class="active">
                        <a href="/home">
                            <i class="fas fa-home"></i>
                            <span>Inicio</span>
                        </a>
                    </li>
                    <li>
                        <a href="/causes">
                            <i class="fas fa-heart"></i>
                            <span>Causas</span>
                        </a>
                    </li>
                    <li>
                        <a href="/tasks">
                            <i class="fas fa-tasks"></i>
                            <span>Tareas Solidarias</span>
                        </a>
                    </li>
                    <li>
                        <a href="/volunteer">
                            <i class="fas fa-hands-helping"></i>
                            <span>Voluntariados</span>
                        </a>
                    </li>
                    <li>
                        <a href="/impact">
                            <i class="fas fa-chart-line"></i>
                            <span>Mi Impacto</span>
                        </a>
                    </li>
                    <li>
                        <a href="/ranking">
                            <i class="fas fa-trophy"></i>
                            <span>Ranking</span>
                        </a>
                    </li>
                </ul>
            </nav>
            
            <div class="sidebar-footer">
                <div class="user-profile">
                    <div class="user-avatar">
                        <img src="/images/default-avatar.jpg" alt="User Avatar">
                    </div>
                    <div class="user-info">
                        <span class="user-name" id="sidebarUserName">Nombre Usuario</span>
                        <span class="user-level">Nivel 2</span>
                    </div>
                </div>
                <a href="/settings" class="settings-link">
                    <i class="fas fa-cog"></i>
                </a>
            </div>
        </aside>
        
        <!-- Main Content -->
        <main class="main-content">
            <header class="main-header">
                <div class="header-left">
                    <button class="menu-toggle">
                        <i class="fas fa-bars"></i>
                    </button>
                    <h2 id="pageTitle">Inicio</h2>
                </div>
                <div class="header-right">
                    <div class="notifications">
                        <i class="fas fa-bell"></i>
                        <span class="badge">3</span>
                    </div>
                    <div class="messages">
                        <i class="fas fa-envelope"></i>
                        <span class="badge">1</span>
                    </div>
                </div>
            </header>
            
            <div class="content-wrapper">
                <!-- Sección Take Action -->
                <section class="section take-action">
                    <div class="section-header">
                        <h3>Take Action</h3>
                        <a href="/tasks" class="see-all">Ver todas</a>
                    </div>
                    <div class="tasks-carousel" id="featuredTasks">
                        <!-- Las tareas se cargarán dinámicamente aquí -->
                    </div>
                </section>
                
                <!-- Impact Score -->
                <section class="impact-score-section">
                    <div class="impact-score-card">
                        <h4>Mi Impact Score</h4>
                        <div class="score-display" id="impactScoreDisplay">750</div>
                        <div class="progress-container">
                            <div class="progress-bar">
                                <div class="progress" style="width: 65%;"></div>
                            </div>
                            <div class="progress-info">
                                <span>65% hacia el siguiente nivel</span>
                            </div>
                        </div>
                        <div class="impact-stats">
                            <div class="stat-item">
                                <i class="fas fa-donate"></i>
                                <span>$1,200 donados</span>
                            </div>
                            <div class="stat-item">
                                <i class="fas fa-tasks"></i>
                                <span>8 tareas completadas</span>
                            </div>
                            <div class="stat-item">
                                <i class="fas fa-clock"></i>
                                <span>25 horas de voluntariado</span>
                            </div>
                        </div>
                    </div>
                </section>
                
                <!-- What's Happening Now -->
                <section class="section whats-happening">
                    <div class="section-header">
                        <h3>What's Happening Now</h3>
                        <a href="/news" class="see-all">Ver más</a>
                    </div>
                    <div class="news-carousel" id="newsCarousel">
                        <!-- Las noticias se cargarán dinámicamente aquí -->
                    </div>
                </section>
                
                <!-- Progreso Personal -->
                <section class="section personal-progress">
                    <h3>Mi Progreso</h3>
                    <div class="progress-grid">
                        <div class="progress-item">
                            <div class="progress-circle" data-value="75">
                                <svg class="progress-ring" width="80" height="80">
                                    <circle class="progress-ring-circle" stroke-width="8" fill="transparent" r="36" cx="40" cy="40"/>
                                </svg>
                                <div class="progress-text">75%</div>
                            </div>
                            <h4>Donaciones</h4>
                        </div>
                        <div class="progress-item">
                            <div class="progress-circle" data-value="60">
                                <svg class="progress-ring" width="80" height="80">
                                    <circle class="progress-ring-circle" stroke-width="8" fill="transparent" r="36" cx="40" cy="40"/>
                                </svg>
                                <div class="progress-text">60%</div>
                            </div>
                            <h4>Tareas</h4>
                        </div>
                        <div class="progress-item">
                            <div class="progress-circle" data-value="45">
                                <svg class="progress-ring" width="80" height="80">
                                    <circle class="progress-ring-circle" stroke-width="8" fill="transparent" r="36" cx="40" cy="40"/>
                                </svg>
                                <div class="progress-text">45%</div>
                            </div>
                            <h4>Voluntariado</h4>
                        </div>
                    </div>
                </section>
            </div>
        </main>
    </div>

    <script src="/js/app.js"></script>
</body>
</html>

==== C:\Users\gabi2\Desktop\Solidarity-web\views\auth\login.njk ====
{% extends "layout.njk" %}

{% block title %}Solidarity - Iniciar Sesión{% endblock %}

{% block head %}
<style>
    .login-container {
        max-width: 420px;
        margin: 4rem auto 0 auto;
        background: var(--white);
        border-radius: 16px;
        box-shadow: 0 8px 32px rgba(0,0,0,0.07);
        border: 1px solid var(--gray);
        padding: 2.5rem 2rem 2rem 2rem;
        display: flex;
        flex-direction: column;
        align-items: center;
    }
    .login-title {
        font-size: 2rem;
        font-weight: 700;
        color: var(--primary);
        margin-bottom: 1.2rem;
        text-align: center;
    }
    .login-desc {
        color: #6b7280;
        font-size: 1.05rem;
        margin-bottom: 2rem;
        text-align: center;
    }
    .login-form {
        width: 100%;
        display: flex;
        flex-direction: column;
        gap: 1.2rem;
    }
    .form-group {
        display: flex;
        flex-direction: column;
        gap: 0.4rem;
    }
    .form-group label {
        font-weight: 500;
        color: var(--darker);
    }
    .form-group input {
        padding: 0.75rem 1rem;
        border-radius: 8px;
        border: 1px solid var(--gray);
        font-size: 1rem;
        background: var(--light);
        transition: border 0.2s;
    }
    .form-group input:focus {
        border: 1.5px solid var(--primary);
        outline: none;
        background: #fff;
    }
    .form-group .input-icon {
        position: relative;
    }
    .form-group .input-icon input {
        padding-left: 2.5rem;
    }
    .form-group .input-icon i {
        position: absolute;
        left: 0.8rem;
        top: 50%;
        transform: translateY(-50%);
        color: var(--primary);
        font-size: 1.1rem;
    }
    .login-form .btn {
        margin-top: 0.5rem;
        width: 100%;
        font-size: 1.1rem;
    }
    .login-divider {
        width: 100%;
        text-align: center;
        margin: 1.5rem 0 1.2rem 0;
        color: #b0b0b0;
        font-size: 0.98rem;
        position: relative;
    }
    .login-divider:before,
    .login-divider:after {
        content: "";
        display: inline-block;
        width: 35%;
        height: 1px;
        background: #e2e8f0;
        vertical-align: middle;
        margin: 0 0.5rem;
    }
    .social-login {
        display: flex;
        flex-direction: column;
        gap: 0.7rem;
        width: 100%;
    }
    .social-btn {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.7rem;
        border: none;
        border-radius: 50px;
        padding: 0.7rem 1rem;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: background 0.2s, color 0.2s;
    }
    .social-btn.google {
        background: #fff;
        color: #ea4335;
        border: 1.5px solid #ea4335;
    }
    .social-btn.google:hover {
        background: #ea4335;
        color: #fff;
    }
    .social-btn.facebook {
        background: #fff;
        color: #1877f3;
        border: 1.5px solid #1877f3;
    }
    .social-btn.facebook:hover {
        background: #1877f3;
        color: #fff;
    }
    .social-btn.twitter {
        background: #fff;
        color: #1da1f2;
        border: 1.5px solid #1da1f2;
    }
    .social-btn.twitter:hover {
        background: #1da1f2;
        color: #fff;
    }
    .login-footer {
        margin-top: 1.5rem;
        text-align: center;
        color: #6b7280;
        font-size: 0.98rem;
    }
    .login-footer a {
        color: var(--primary);
        text-decoration: none;
        font-weight: 500;
        margin-left: 0.3rem;
    }
    .login-footer a:hover {
        text-decoration: underline;
    }
    @media (max-width: 600px) {
        .login-container {
            margin: 2rem 0 0 0;
            border-radius: 10px;
            padding: 1.5rem 0.7rem 1.2rem 0.7rem;
        }
    }
</style>
{% endblock %}

{% block content %}
<div class="login-container">
    <div class="login-title">
        <i class="fas fa-sign-in-alt"></i> Iniciar Sesión
    </div>
    <div class="login-desc">
        Accede a tu cuenta para continuar generando impacto.
    </div>
    <form class="login-form" id="loginForm" autocomplete="off">
        <div class="form-group">
            <label for="login">Correo electrónico o Nombre de usuario</label>
            <div class="input-icon">
                <i class="fas fa-user"></i>
                <input type="text" id="login" name="login" placeholder="Email o username" required>
            </div>
        </div>
        <div class="form-group">
            <label for="password">Contraseña</label>
            <div class="input-icon">
                <i class="fas fa-lock"></i>
                <input type="password" id="password" name="password" placeholder="Contraseña" required>
            </div>
        </div>
        <div id="loginError" style="color:#e53e3e; text-align:center; margin-bottom:1rem; display:none;"></div>
        <button type="submit" class="btn btn-primary">
            <i class="fas fa-sign-in-alt"></i> Iniciar Sesión
        </button>
    </form>
    <div class="login-divider">o inicia sesión con</div>
    <div class="social-login">
        <button type="button" class="social-btn google">
            <i class="fab fa-google"></i> Google
        </button>
        <button type="button" class="social-btn facebook">
            <i class="fab fa-facebook-f"></i> Facebook
        </button>
        <button type="button" class="social-btn twitter">
            <i class="fab fa-twitter"></i> Twitter
        </button>
    </div>
    <div class="login-footer">
        ¿No tienes cuenta?
        <a href="/register">Regístrate</a>
    </div>
</div>
{% endblock %}

{% block scripts %}

<script>

document.getElementById('loginForm').addEventListener('submit', async function(e) {
  e.preventDefault();

  const loginValue = document.getElementById('login').value.trim();
  const password = document.getElementById('password').value;

  let user = null;
  let error = null;

  // Si es email, intenta login directo
  if (loginValue.includes('@')) {
    const res = await supabase.auth.signInWithPassword({ email: loginValue, password });
    user = res.data?.user;
    error = res.error;
  } else {
    // Si es username, busca el email asociado
    const { data: profile, error: profileError } = await supabase
      .from('profiles')
      .select('email')
      .eq('username', loginValue)
      .maybeSingle();
    if (!profile || profileError) {
      document.getElementById('loginError').textContent = 'Usuario no encontrado';
      document.getElementById('loginError').style.display = 'block';
      return;
    }
    const res = await supabase.auth.signInWithPassword({ email: profile.email, password });
    user = res.data?.user;
    error = res.error;
  }

  if (error) {
    document.getElementById('loginError').textContent = error.message || 'No se pudo iniciar sesión';
    document.getElementById('loginError').style.display = 'block';
    return;
  }

  if (!user) {
    document.getElementById('loginError').textContent = 'No se pudo obtener el usuario';
    document.getElementById('loginError').style.display = 'block';
    return;
  }

  // Comprueba si el perfil existe en la tabla profiles
  const { data: profile, error: profileError } = await supabase
    .from('profiles')
    .select('id')
    .eq('id', user.id)
    .maybeSingle();

  if (!profile) {
    window.location.href = '/completar-perfil';
  } else {
    window.location.href = '/';
  }
});
</script>
{% endblock %}

==== C:\Users\gabi2\Desktop\Solidarity-web\views\auth\register.njk ====
{% extends "layout.njk" %}

{% block title %}Registro | Solidarity{% endblock %}

{% block head %}
  {{ super() }}
  <style>
    .register-section {
      max-width: 480px;
      margin: 3rem auto 2rem auto;
      background: #fff;
      border-radius: 16px;
      box-shadow: 0 2px 16px rgba(0,0,0,0.07);
      padding: 2.5rem 2rem 2rem 2rem;
    }
    .register-header {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 1rem;
      margin-bottom: 1.5rem;
    }
    .register-header img {
      height: 48px;
      width: 48px;
      border-radius: 12px;
      background: #f8fafc;
      object-fit: contain;
      box-shadow: 0 2px 8px rgba(0,0,0,0.06);
    }
    .register-header h1 {
      font-size: 2rem;
      font-weight: 900;
      color: var(--primary);
      margin: 0;
    }
    .register-form label {
      font-weight: 600;
      color: var(--primary);
      margin-bottom: 0.3rem;
      display: block;
    }
    .register-form input,
    .register-form select,
    .register-form textarea {
      width: 100%;
      padding: 0.7rem 1rem;
      border-radius: 8px;
      border: 1px solid #e5e7eb;
      margin-bottom: 1.1rem;
      font-size: 1rem;
      background: #f8fafc;
      transition: border 0.2s;
    }
    .register-form input:focus,
    .register-form select:focus,
    .register-form textarea:focus {
      border: 1.5px solid var(--accent);
      outline: none;
      background: #fff;
    }
    .register-form .interests-section {
      margin-bottom: 1.5rem;
    }
    .register-form .interests-title {
      font-weight: 600;
      color: var(--primary);
      margin-bottom: 0.5rem;
      font-size: 1.08rem;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }
    .register-form .interests-list {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem 0.5rem;
      margin-bottom: 0.2rem;
      justify-content: flex-start;
    }
    .register-form .interest-chip {
      background: #f1f5f9;
      color: var(--primary);
      border-radius: 999px;
      padding: 0.45rem 1.1rem;
      font-size: 1rem;
      cursor: pointer;
      border: 1.5px solid #e5e7eb;
      transition: background 0.2s, border 0.2s, color 0.2s;
      user-select: none;
      display: flex;
      align-items: center;
      gap: 0.4rem;
    }
    .register-form .interest-chip.selected {
      background: var(--accent);
      color: #fff;
      border: 1.5px solid var(--primary);
      font-weight: 600;
    }
    .register-form .photo-preview {
      display: flex;
      align-items: center;
      gap: 1rem;
      margin-bottom: 1.2rem;
    }
    .register-form .photo-preview img {
      width: 64px;
      height: 64px;
      border-radius: 50%;
      object-fit: cover;
      border: 2px solid var(--accent);
      background: #f1f5f9;
    }
    .register-form .photo-preview label {
      margin-bottom: 0;
      font-weight: 400;
      color: var(--primary);
      cursor: pointer;
    }
    .register-form .btn {
      width: 100%;
      margin-top: 0.5rem;
    }
    .register-form .form-desc {
      text-align: center;
      color: #6b7280;
      margin-bottom: 1.5rem;
      font-size: 1.08rem;
    }
    .register-form .success-message {
      background: #e6f7f1;
      color: var(--primary);
      border-radius: 8px;
      padding: 1rem;
      text-align: center;
      margin-bottom: 1rem;
      font-weight: 600;
    }
    .register-form .slogan-section {
      margin-bottom: 1.2rem;
    }
    .register-form .slogan-section label {
      font-weight: 600;
      color: var(--primary);
      margin-bottom: 0.3rem;
      display: block;
    }
    .register-form .slogan-section input {
      font-style: italic;
    }
    .social-register {
      display: flex;
      flex-direction: column;
      gap: 0.7rem;
      margin-bottom: 2rem;
      margin-top: 0.5rem;
    }
    .social-btn {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.7rem;
      border-radius: 8px;
      border: 1.5px solid #e5e7eb;
      background: #f8fafc;
      color: #222;
      font-weight: 600;
      font-size: 1rem;
      padding: 0.7rem 0;
      cursor: pointer;
      transition: background 0.18s, border 0.18s;
      text-decoration: none;
    }
    .social-btn:hover {
      background: var(--primary-light, #e6f0fa);
      border: 1.5px solid var(--primary);
      color: var(--primary);
    }
    .social-btn img {
      width: 22px;
      height: 22px;
      margin-right: 0.7rem;
      border-radius: 4px;
      background: #fff;
      object-fit: contain;
      box-shadow: 0 1px 3px rgba(0,0,0,0.04);
    }
    .social-divider {
      text-align: center;
      color: #b0b0b0;
      margin: 1.5rem 0 1.2rem 0;
      font-size: 1rem;
      position: relative;
    }
    .social-divider:before,
    .social-divider:after {
      content: "";
      display: inline-block;
      width: 35%;
      height: 1px;
      background: #e5e7eb;
      vertical-align: middle;
      margin: 0 0.7rem;
    }
    .register-form .mini-icon {
      width: 20px;
      height: 20px;
      margin-right: 7px;
      vertical-align: middle;
      border-radius: 4px;
      background: #f8fafc;
      object-fit: contain;
      box-shadow: 0 1px 3px rgba(0,0,0,0.04);
    }
    @media (max-width: 600px) {
      .register-section { padding: 1.2rem 0.5rem; }
      .register-header img { height: 36px; width: 36px; }
      .register-header h1 { font-size: 1.3rem; }
    }
  </style>
{% endblock %}

{% block content %}
<section class="register-section">
  <div class="register-header">
    <span style="display:flex;align-items:center;justify-content:center;height:48px;width:48px;border-radius:12px;background:#f8fafc;box-shadow:0 2px 8px rgba(0,0,0,0.06);">
      <i class="fas fa-hands-helping" style="font-size:2rem;color:var(--accent,#2dd4bf);"></i>
    </span>
    <h1>Únete a Solidarity</h1>
  </div>
  <div class="social-register">
    <a href="/auth/google" class="social-btn gmail">
      <img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/google/google-original.svg" alt="Google logo">
      Registrarse con Gmail
    </a>
    <a href="/auth/facebook" class="social-btn facebook">
      <img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/facebook/facebook-original.svg" alt="Facebook logo">
      Registrarse con Facebook
    </a>
    <a href="/auth/twitter" class="social-btn twitter">
      <img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/twitter/twitter-original.svg" alt="Twitter logo">
      Registrarse con Twitter
    </a>
  </div>
  <form class="register-form" id="registerForm" enctype="multipart/form-data" autocomplete="off">
    <div class="form-desc">
      Crea tu cuenta y empieza a transformar el mundo. Personaliza tu perfil, elige tus intereses y conecta con la comunidad.
    </div>
    <label for="photo">Foto de perfil</label>
    <div class="photo-preview">
      <img id="photoPreview" src="https://randomuser.me/api/portraits/lego/1.jpg" alt="Foto de perfil">
      <label for="photo" style="cursor:pointer;">
        <i class="fas fa-camera"></i> Cambiar foto
        <input type="file" id="photo" name="photo" accept="image/*" style="display:none;">
      </label>
    </div>
    <label for="firstName">Nombre</label>
    <input type="text" id="firstName" name="firstName" required placeholder="Tu nombre">

    <label for="lastName">Apellido</label>
    <input type="text" id="lastName" name="lastName" required placeholder="Tu apellido">

    <label for="username">Nombre de usuario</label>
    <input type="text" id="username" name="username" required placeholder="Ej: solidaridad123">

    <label for="email">Correo electrónico</label>
    <input type="email" id="email" name="email" required placeholder="tucorreo@email.com">

    <label for="password">Contraseña</label>
    <input type="password" id="password" name="password" required minlength="6" placeholder="Mínimo 6 caracteres">

    <label for="country">País</label>
    <select id="country" name="country" required>
      <option value="">Selecciona tu país</option>
      <option value="España">España</option>
      <option value="México">México</option>
      <option value="Argentina">Argentina</option>
      <option value="Colombia">Colombia</option>
      <option value="Chile">Chile</option>
      <option value="Perú">Perú</option>
      <option value="Uruguay">Uruguay</option>
      <option value="Venezuela">Venezuela</option>
      <option value="Bolivia">Bolivia</option>
      <option value="Ecuador">Ecuador</option>
      <option value="Costa Rica">Costa Rica</option>
      <option value="Panamá">Panamá</option>
      <option value="Otro">Otro</option>
    </select>

    <label for="birthdate">Fecha de nacimiento</label>
    <input type="date" id="birthdate" name="birthdate" required>

    <div class="slogan-section">
      <label for="slogan">Slogan personal o frase motivacional</label>
      <input type="text" id="slogan" name="slogan" maxlength="80" placeholder="Ej: ¡Pequeñas acciones, grandes cambios!">
    </div>

    <div class="interests-section">
      <div class="interests-title">
        <i class="fas fa-heart"></i> Intereses principales
      </div>
      <div class="interests-list" id="interestsList">
        <span class="interest-chip" data-value="medio ambiente">
          <img src="https://cdn-icons-png.flaticon.com/512/2909/2909769.png" class="mini-icon" alt="Medio ambiente">Medio ambiente
        </span>
        <span class="interest-chip" data-value="educación">
          <img src="https://cdn-icons-png.flaticon.com/512/3135/3135755.png" class="mini-icon" alt="Educación">Educación
        </span>
        <span class="interest-chip" data-value="inclusión">
          <img src="https://cdn-icons-png.flaticon.com/512/1077/1077012.png" class="mini-icon" alt="Inclusión">Inclusión
        </span>
        <span class="interest-chip" data-value="salud">
          <img src="https://cdn-icons-png.flaticon.com/512/833/833472.png" class="mini-icon" alt="Salud">Salud
        </span>
        <span class="interest-chip" data-value="animales">
          <img src="https://cdn-icons-png.flaticon.com/512/616/616408.png" class="mini-icon" alt="Animales">Animales
        </span>
        <span class="interest-chip" data-value="tecnología">
          <img src="https://cdn-icons-png.flaticon.com/512/2721/2721297.png" class="mini-icon" alt="Tecnología">Tecnología
        </span>
        <span class="interest-chip" data-value="arte">
          <img src="https://cdn-icons-png.flaticon.com/512/3595/3595455.png" class="mini-icon" alt="Arte">Arte
        </span>
        <span class="interest-chip" data-value="deporte">
          <img src="https://cdn-icons-png.flaticon.com/512/1041/1041916.png" class="mini-icon" alt="Deporte">Deporte
        </span>
        <span class="interest-chip" data-value="derechos humanos">
          <img src="https://cdn-icons-png.flaticon.com/512/3135/3135715.png" class="mini-icon" alt="Derechos Humanos">Derechos Humanos
        </span>
        <span class="interest-chip" data-value="pobreza">
          <img src="https://cdn-icons-png.flaticon.com/512/2917/2917995.png" class="mini-icon" alt="Pobreza">Pobreza
        </span>
        <span class="interest-chip" data-value="igualdad de género">
          <img src="https://cdn-icons-png.flaticon.com/512/3135/3135789.png" class="mini-icon" alt="Igualdad de género">Igualdad de género
        </span>
        <span class="interest-chip" data-value="cultura">
          <img src="https://cdn-icons-png.flaticon.com/512/3135/3135768.png" class="mini-icon" alt="Cultura">Cultura
        </span>
        <span class="interest-chip" data-value="innovación">
          <img src="https://cdn-icons-png.flaticon.com/512/3135/3135773.png" class="mini-icon" alt="Innovación">Innovación
        </span>
        <span class="interest-chip" data-value="emprendimiento">
          <img src="https://cdn-icons-png.flaticon.com/512/3135/3135792.png" class="mini-icon" alt="Emprendimiento">Emprendimiento
        </span>
        <span class="interest-chip" data-value="alimentación">
          <img src="https://cdn-icons-png.flaticon.com/512/1046/1046857.png" class="mini-icon" alt="Alimentación">Alimentación
        </span>
        <span class="interest-chip" data-value="energía">
          <img src="https://cdn-icons-png.flaticon.com/512/1046/1046876.png" class="mini-icon" alt="Energía">Energía
        </span>
        <span class="interest-chip" data-value="voluntariado">
          <img src="https://cdn-icons-png.flaticon.com/512/3135/3135766.png" class="mini-icon" alt="Voluntariado">Voluntariado
        </span>
      </div>
      <div style="font-size:0.97rem;color:#6b7280;margin-top:0.2rem;">
        Selecciona uno o varios intereses para personalizar tu experiencia.
      </div>
    </div>

    <label for="bio">Sobre ti</label>
    <textarea id="bio" name="bio" rows="2" maxlength="200" placeholder="Cuéntanos algo sobre ti..."></textarea>

    <button type="submit" class="btn btn-accent btn-lg">
      <i class="fas fa-user-plus"></i> Crear cuenta
    </button>
  </form>
  <div id="registerSuccess" class="success-message" style="display:none;">
    ¡Registro exitoso! Te hemos enviado un correo de bienvenida. Revisa tu bandeja de entrada.
  </div>

  <!-- Modal de éxito de registro -->
  <div id="registerModal" style="display:none; position:fixed; top:0; left:0; width:100vw; height:100vh; background:rgba(0,0,0,0.35); z-index:9999; align-items:center; justify-content:center;">
    <div style="background:#fff; border-radius:16px; max-width:350px; margin:auto; padding:2rem 1.5rem; box-shadow:0 8px 32px rgba(0,0,0,0.13); text-align:center; position:relative;">
      <span style="font-size:2.5rem; color:var(--accent,#2dd4bf); display:block; margin-bottom:1rem;">
        <i class="fas fa-envelope-open-text"></i>
      </span>
      <h2 style="color:var(--primary); font-weight:800; margin-bottom:0.7rem;">¡Registro iniciado!</h2>
      <p style="color:#444; font-size:1.08rem;">
        Si tu correo es válido, recibirás un email de confirmación.<br>
        Revisa tu bandeja de entrada y la carpeta de spam.<br>
        <span style="color:#888; font-size:0.97rem;">No cierres esta ventana hasta confirmar tu correo.</span>
      </p>
      <button onclick="document.getElementById('registerModal').style.display='none';" style="margin-top:1.2rem; background:var(--accent,#2dd4bf); color:#fff; border:none; border-radius:8px; padding:0.7rem 1.5rem; font-size:1.1rem; font-weight:600; cursor:pointer;">
        Entendido
      </button>
    </div>
  </div>
</section>
{% endblock %}

{% block scripts %}
  {{ super() }}
  <script>
    // Foto de perfil preview
document.getElementById('photo').addEventListener('change', function(e) {
  const file = e.target.files[0];
  if (file) {
    const reader = new FileReader();
    reader.onload = function(evt) {
      document.getElementById('photoPreview').src = evt.target.result;
    };
    reader.readAsDataURL(file);
  }
});

// Intereses selección
const interestsList = document.getElementById('interestsList');
let selectedInterests = [];
interestsList.addEventListener('click', function(e) {
  const chip = e.target.closest('.interest-chip');
  if (chip) {
    chip.classList.toggle('selected');
    const value = chip.getAttribute('data-value');
    if (chip.classList.contains('selected')) {
      selectedInterests.push(value);
    } else {
      selectedInterests = selectedInterests.filter(i => i !== value);
    }
  }
});

// Registro real con Supabase
document.getElementById('registerForm').addEventListener('submit', async function(e) {
  e.preventDefault();

  // Recoge los datos del formulario
  const email = document.getElementById('email').value.trim();
  const password = document.getElementById('password').value;
  const firstName = document.getElementById('firstName').value.trim();
  const lastName = document.getElementById('lastName').value.trim();
  const username = document.getElementById('username').value.trim();
  const birthdate = document.getElementById('birthdate').value;
  const country = document.getElementById('country').value;
  const slogan = document.getElementById('slogan').value.trim();
  const bio = document.getElementById('bio').value.trim();
  const interests = selectedInterests;
  const photoFile = document.getElementById('photo').files[0];

  // 1. Registra el usuario en Supabase Auth
  const { data: signUpData, error: signUpError } = await supabase.auth.signUp({ email, password });
  if (signUpError) {
    alert(signUpError.message || 'No se pudo registrar');
    return;
  }

  // 2. Sube la foto si existe
  let photo_url = null;
  if (photoFile) {
    const fileExt = photoFile.name.split('.').pop();
    const fileName = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}.${fileExt}`;
    const filePath = `avatars/${fileName}`;
    const { error: uploadError } = await supabase.storage
      .from('avatars')
      .upload(filePath, photoFile, { upsert: true });
    if (!uploadError) {
      const { data: publicUrlData } = supabase.storage.from('avatars').getPublicUrl(filePath);
      photo_url = publicUrlData.publicUrl;
    }
  }

  // 3. Inserta el perfil en la tabla profiles con el mismo id que el usuario de Auth
  const userId = signUpData.user?.id;
  if (userId) {
    await supabase
      .from('profiles')
      .insert([{
        id: userId,
        email,
        first_name: firstName,
        last_name: lastName,
        username,
        birthdate,
        country,
        slogan,
        bio,
        interests,
        photo_url
      }]);
  }

  // 4. Muestra mensaje de éxito
  document.getElementById('registerSuccess').style.display = 'block';
  document.getElementById('registerModal').style.display = 'flex';
  window.scrollTo({ top: 0, behavior: 'smooth' });
});
  </script>
{% endblock %}

==== C:\Users\gabi2\Desktop\Solidarity-web\views\causes\details.njk ====

==== C:\Users\gabi2\Desktop\Solidarity-web\views\causes\index - copia.njk ====
{% extends "layout.njk" %}

{% block title %}Causas - Solidarity{% endblock %}

{% block head %}
  {{ super() }}
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
  <style>
    :root {
      --primary: #4a6fa5;
      --primary-dark: #166088;
      --gray: #e2e8f0;
      --white: #fff;
      --accent: #4fc3a1;
      --accent-dark: #3da58a;
      --urgent: #e53e3e;
    }
    body {
      background: #f8fafc;
      font-family: 'Inter', Arial, sans-serif;
      color: #2d3748;
      font-size: 1rem;
    }
    .modal-bg {
      display: none;
      position: fixed;
      top: 0; left: 0; width: 100vw; height: 100vh;
      background: rgba(0,0,0,0.35);
      z-index: 9999;
      align-items: center;
      justify-content: center;
    }
    .modal-bg.active { display: flex; }
    .modal-content {
      background: #fff;
      border-radius: 18px;
      max-width: 540px;
      width: 95vw;
      padding: 2.5rem 1.5rem 2rem 1.5rem;
      box-shadow: 0 8px 32px rgba(0,0,0,0.13);
      position: relative;
      animation: fadeIn 0.3s;
      max-height: 90vh;
      overflow-y: auto;
    }
    .close-modal {
      position: absolute;
      top: 1.1rem; right: 1.3rem;
      background: none;
      border: none;
      font-size: 2rem;
      color: #aaa;
      cursor: pointer;
      transition: color 0.2s;
    }
    .close-modal:hover { color: var(--primary, #4a6fa5); }
    .create-cause-title {
      font-size: 1.5rem;
      font-weight: 800;
      color: var(--primary, #4a6fa5);
      margin-bottom: 1.2rem;
      text-align: center;
    }
    .cause-form .form-group label { font-weight: 600; color: var(--primary, #4a6fa5); }
    .cause-form .form-group input,
    .cause-form .form-group textarea {
      width: 100%;
      padding: 0.7rem 1rem;
      border-radius: 8px;
      border: 1px solid #e5e7eb;
      margin-bottom: 0.2rem;
      font-size: 1rem;
      background: #f8fafc;
      transition: border 0.2s;
    }
    .cause-form .form-group input:focus,
    .cause-form .form-group textarea:focus {
      border: 1.5px solid var(--accent, #4fc3a1);
      outline: none;
      background: #fff;
    }
    .cause-form .form-group textarea {
      min-height: 90px;
      resize: vertical;
    }
    .form-inline-group {
      display: flex;
      gap: 1rem;
    }
    .form-inline-group .form-group { flex: 1; }
    .preview-img {
      width: 100%;
      max-width: 320px;
      height: 180px;
      object-fit: cover;
      border-radius: 10px;
      margin-top: 0.5rem;
      border: 1px solid #e5e7eb;
      display: none;
    }
    .points-info {
      background: var(--accent, #4fc3a1);
      color: #fff;
      border-radius: 8px;
      padding: 0.7rem 1rem;
      margin-top: 0.5rem;
      font-size: 1.05rem;
      display: flex;
      align-items: center;
      gap: 0.7rem;
    }
    .after-create {
      margin-top: 2rem;
      background: var(--primary-light, #e6f0fa);
      color: #444;
      border-radius: 10px;
      padding: 1.5rem 1rem;
      text-align: center;
    }
    @media (max-width: 600px) {
      .modal-content { padding: 1.2rem 0.5rem 1.2rem 0.5rem; }
      .create-cause-title { font-size: 1.1rem; }
      .form-inline-group { flex-direction: column; }
    }
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(-30px);}
      to { opacity: 1; transform: translateY(0);}
    }
    /* SOLO estilos de la página de causas, NO navbar, logo, nav-links, auth-buttons, user-info, footer */
    .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.5);
        z-index: 1000;
        justify-content: center;
        align-items: center;
    }
    .modal-content {
        background: #fff;
        padding: 2rem;
        border-radius: 10px;
        max-width: 500px;
        width: 90%;
        text-align: center;
    }
    .modal-buttons {
        display: flex;
        gap: 1rem;
        justify-content: center;
        margin-top: 1.5rem;
    }
    .main-container {
        max-width: 1200px;
        margin: 2rem auto;
        padding: 0 2rem;
    }
    .causes-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
    }
    .causes-header h1 {
        font-size: 2rem;
        color: var(--primary);
        font-weight: 700;
    }
    .causes-search {
        margin-bottom: 2rem;
        display: flex;
        align-items: center;
        gap: 0.7rem;
    }
    .causes-search input {
        flex: 1;
        padding: 0.6rem 1.2rem;
        border-radius: 7px;
        border: 1.5px solid var(--gray);
        font-size: 1.05rem;
        outline: none;
        transition: border 0.2s;
        background: #fff;
    }
    .causes-search input:focus {
        border-color: var(--primary);
    }
    .tabs {
        display: flex;
        border-bottom: 1px solid var(--gray);
        margin-bottom: 2rem;
    }
    .tab {
        padding: 0.75rem 1.5rem;
        cursor: pointer;
        position: relative;
        font-weight: 500;
        color: #6b7280;
        background: none;
        border: none;
        outline: none;
    }
    .tab.active {
        color: var(--primary);
        font-weight: 600;
    }
    .tab.active::after {
        content: '';
        position: absolute;
        bottom: -1px;
        left: 0;
        width: 100%;
        height: 3px;
        background: var(--primary);
    }
    .causes-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 2rem;
    }
    .cause-card {
        background: white;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
        transition: all 0.3s ease;
        border: 1px solid var(--gray);
        display: flex;
        flex-direction: column;
    }
    .cause-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    }
    .cause-image {
        height: 180px;
        overflow: hidden;
        position: relative;
    }
    .cause-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
    }
    .cause-card:hover .cause-image img {
        transform: scale(1.05);
    }
    .cause-badge {
        position: absolute;
        top: 1rem;
        right: 1rem;
        background: rgba(255, 255, 255, 0.9);
        padding: 0.3rem 0.8rem;
        border-radius: 50px;
        font-size: 0.8rem;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }
    .cause-badge.urgent {
        background: var(--urgent);
        color: white;
    }
    .cause-badge.points {
        background: var(--primary);
        color: white;
        left: 1rem;
        right: auto;
    }
    .cause-content {
        padding: 1.5rem;
        display: flex;
        flex-direction: column;
        flex: 1;
    }
    .cause-content h3 {
        font-size: 1.3rem;
        margin-bottom: 0.8rem;
        color: #2d3748;
    }
    .cause-content p {
        color: #6b7280;
        margin-bottom: 1.5rem;
        font-size: 0.95rem;
        line-height: 1.6;
        flex-grow: 1;
    }
    .cause-meta {
        display: flex;
        gap: 1rem;
        margin-bottom: 1.5rem;
        font-size: 0.85rem;
        flex-wrap: wrap;
    }
    .meta-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: #6b7280;
    }
    .meta-item i {
        color: var(--primary);
    }
    .beneficiaries-count {
        display: inline-flex;
        align-items: center;
        background: #f0f9ff;
        color: var(--primary);
        padding: 0.3rem 0.8rem;
        border-radius: 50px;
        font-size: 0.85rem;
        font-weight: 600;
    }
    .beneficiaries-count i {
        margin-right: 0.3rem;
    }
    .cause-progress {
        margin-bottom: 1.5rem;
    }
    .progress-bar {
        height: 8px;
        background: var(--gray);
        border-radius: 4px;
        overflow: hidden;
        margin-bottom: 0.5rem;
    }
    .progress-fill {
        height: 100%;
        background: var(--primary);
        border-radius: 4px;
    }
    .progress-info {
        display: flex;
        justify-content: space-between;
        font-size: 0.9rem;
        color: #6b7280;
    }
    .cause-actions {
        display: flex;
        gap: 0.8rem;
    }
    .cause-actions .btn {
        flex: 1;
        text-align: center;
        justify-content: center;
    }
    .btn-accent {
        background: var(--accent);
        color: white;
    }
    .btn-accent:hover {
        background: var(--accent-dark);
        transform: translateY(-2px);
    }
    .btn-sm {
        padding: 0.4rem 0.8rem;
        font-size: 0.85rem;
    }
    @media (max-width: 900px) {
        .main-container {
            padding: 1.2rem 0.5rem;
        }
    }
    @media (max-width: 768px) {
        .causes-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 1rem;
        }
        .causes-grid {
            grid-template-columns: 1fr;
        }
        .cause-actions {
            flex-direction: column;
        }
    }

    /* Nuevos estilos para el modal de causa */
    .modal-cause-details {
      display: flex;
      flex-direction: column;
      gap: 1.5rem;
    }
    .modal-cause-header {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
      padding-bottom: 1rem;
      border-bottom: 1px solid #e5e7eb;
    }
    .modal-cause-header h2 {
      color: var(--primary);
      font-size: 1.8rem;
      margin: 0;
    }
    .modal-cause-category {
      background: var(--accent);
      color: white;
      padding: 0.3rem 0.8rem;
      border-radius: 50px;
      font-size: 0.85rem;
      font-weight: 600;
      align-self: flex-start;
    }
    .modal-cause-main {
      display: grid;
      grid-template-columns: 1fr 1.5fr;
      gap: 1.5rem;
    }
    .modal-cause-image {
      border-radius: 12px;
      overflow: hidden;
      height: 240px;
    }
    .modal-cause-image img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
    .modal-cause-info {
      display: flex;
      flex-direction: column;
      gap: 1.2rem;
    }
    .modal-cause-progress {
      background: #f8fafc;
      padding: 1rem;
      border-radius: 10px;
    }
    .modal-cause-meta {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 0.8rem;
      font-size: 0.95rem;
    }
    .modal-cause-meta div {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      color: #6b7280;
    }
    .modal-cause-meta i {
      color: var(--primary);
      width: 1.2rem;
      text-align: center;
    }
    .modal-cause-shortdesc,
    .modal-cause-desc {
      padding: 1rem;
      background: #f8fafc;
      border-radius: 10px;
      font-size: 0.95rem;
      line-height: 1.6;
    }
    .modal-cause-shortdesc b,
    .modal-cause-desc b {
      color: var(--primary);
    }
    .modal-cause-actions {
      display: flex;
      gap: 1rem;
      margin-top: 0.5rem;
    }
    .modal-cause-linked {
      margin-top: 1.5rem;
      padding-top: 1.5rem;
      border-top: 1px solid #e5e7eb;
    }
    .modal-cause-linked h4 {
      color: var(--primary);
      margin-bottom: 1rem;
      font-size: 1.2rem;
    }
    .linked-items {
      display: flex;
      flex-direction: column;
      gap: 0.8rem;
    }
    .linked-item {
      display: flex;
      align-items: center;
      gap: 0.7rem;
      padding: 0.8rem 1rem;
      background: #f8fafc;
      border-radius: 8px;
      font-size: 0.95rem;
      transition: background 0.2s;
    }
    .linked-item:hover {
      background: #e6f0fa;
    }
    .linked-item i {
      color: var(--accent);
    }
    .linked-loading {
      color: #6b7280;
      text-align: center;
      padding: 1rem;
    }

    /* Modal de Causa */
    .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.35);
        z-index: 1000;
        justify-content: center;
        align-items: center;
    }
    .modal-content {
        background: #fff;
        border-radius: 18px;
        max-width: 740px;
        width: 95vw;
        padding: 2rem;
        box-shadow: 0 8px 32px rgba(74,111,165,0.13);
        position: relative;
        max-height: 90vh;
        overflow-y: auto;
    }
    #closeModal {
      position: absolute;
      top: 1.5rem;
      right: 1.5rem;
      background: none;
      border: none;
      font-size: 1.8rem;
      color: #6b7280;
      cursor: pointer;
      transition: color 0.2s;
    }
    #closeModal:hover {
      color: var(--primary);
    }
    .modal-cause-container {
      font-family: 'Poppins', sans-serif;
      color: #2d3748;
    }
    .modal-cause-header { margin-bottom: 1.8rem; }
    .modal-cause-title {
      font-size: 2rem;
      font-weight: 700;
      color: var(--primary);
      margin-bottom: 0.5rem;
      line-height: 1.3;
    }
    .modal-cause-image-wrapper {
      width: 100%;
      height: 320px;
      border-radius: 12px;
      overflow: hidden;
      position: relative;
      margin-bottom: 1.5rem;
      box-shadow: 0 4px 12px rgba(0,0,0,0.08);
    }
    .modal-cause-image {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: transform 0.3s ease;
    }
    .modal-cause-badge {
      position: absolute;
      top: 1.5rem;
      left: 1.5rem;
      background: rgba(255,255,255,0.95);
      padding: 0.5rem 1rem;
      border-radius: 50px;
      font-size: 0.9rem;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 0.6rem;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
      z-index: 2;
    }
    .modal-cause-badge.urgent {
      background: var(--urgent);
      color: white;
    }
    .modal-cause-progress-container {
      background: #f8fafc;
      padding: 1.5rem;
      border-radius: 12px;
      margin-bottom: 2rem;
      border: 1px solid #e5e7eb;
    }
    .progress-info {
      display: flex;
      justify-content: space-between;
      margin-top: 0.8rem;
      font-size: 0.95rem;
      color: #6b7280;
    }
    .modal-cause-meta-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
      gap: 1.5rem;
      margin-bottom: 2rem;
    }
    .meta-item {
      display: flex;
      align-items: center;
      gap: 0.8rem;
      font-size: 0.95rem;
    }
    .meta-icon {
      color: var(--primary);
      font-size: 1.1rem;
      width: 1.5rem;
      text-align: center;
    }
    .modal-cause-content { margin-bottom: 2rem; }
    .content-section { margin-bottom: 2rem; }
    .content-title {
      font-size: 1.3rem;
      font-weight: 600;
      color: var(--primary);
      margin-bottom: 1rem;
      display: flex;
      align-items: center;
      gap: 0.7rem;
    }
    .content-text {
      line-height: 1.7;
      color: #4b5563;
      font-size: 1.05rem;
    }
    .points-notice {
      background: #f0f9ff;
      border-left: 4px solid var(--accent);
      padding: 1rem;
      border-radius: 0 8px 8px 0;
      margin: 1.5rem 0;
      font-size: 0.95rem;
    }
    .modal-cause-actions {
      display: flex;
      gap: 1rem;
      margin-top: 2rem;
      flex-wrap: wrap;
    }
    .action-btn {
      flex: 1;
      min-width: 200px;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.7rem;
      padding: 1rem;
      border-radius: 8px;
      font-weight: 600;
      font-size: 1.05rem;
      transition: all 0.2s ease;
    }
    .action-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }
    .action-btn-primary {
      background: var(--primary);
      color: white;
    }
    .action-btn-accent {
      background: var(--accent);
      color: white;
    }
    .action-btn-secondary {
      background: #f8fafc;
      color: var(--primary);
      border: 1px solid var(--primary-light);
    }
    .share-section {
      margin-top: 3rem;
      padding-top: 2rem;
      border-top: 1px solid #e5e7eb;
    }
    .share-title {
      font-size: 1.3rem;
      font-weight: 600;
      color: var(--primary);
      margin-bottom: 1.5rem;
      text-align: center;
    }
    .share-content {
      background: #f8fafc;
      border-radius: 12px;
      padding: 1.5rem;
      margin-bottom: 1.5rem;
      position: relative;
    }
    .share-text {
      font-size: 1rem;
      line-height: 1.6;
      color: #4b5563;
      margin-bottom: 1rem;
    }
    .share-highlight {
      color: var(--primary);
      font-weight: 600;
    }
    .share-buttons {
      display: flex;
      justify-content: center;
      gap: 1rem;
      flex-wrap: wrap;
    }
    .share-btn {
      display: flex;
      align-items: center;
      gap: 0.7rem;
      padding: 0.8rem 1.5rem;
      border-radius: 50px;
      font-weight: 600;
      color: white;
      transition: all 0.2s;
    }
    .share-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    .share-btn-facebook { background: #3b5998; }
    .share-btn-twitter { background: #1da1f2; }
    .share-btn-whatsapp { background: #25d366; }
    .share-btn-link { background: var(--primary); }
    @media (max-width: 768px) {
      .modal-cause-title { font-size: 1.6rem; }
      .modal-cause-image-wrapper { height: 240px; }
      .modal-cause-actions { flex-direction: column; }
      .action-btn { width: 100%; }
    }
    @keyframes fadeInOut {
      0% { opacity: 0; transform: translateX(-50%) translateY(20px); }
      15% { opacity: 1; transform: translateX(-50%) translateY(0); }
      85% { opacity: 1; transform: translateX(-50%) translateY(0); }
      100% { opacity: 0; transform: translateX(-50%) translateY(-20px); }
    }
  </style>
{% endblock %}

{% block content %}
  <!-- Modal para usuarios no logueados -->
  <div class="modal-bg" id="loginModal">
    <div class="modal-content">
      <h3>Para crear una causa</h3>
      <p>Debes ser un usuario registrado. ¿Deseas iniciar sesión o registrarte ahora?</p>
      <div class="modal-buttons">
        <a href="/login?return=/causes" class="btn btn-primary">Iniciar Sesión</a>
        <a href="/register?return=/causes" class="btn btn-outline">Registrarse</a>
        <button id="cancelModal" class="btn">Cancelar</button>
      </div>
    </div>
  </div>

  <!-- Modal emergente para crear causa -->
  <div id="createCauseModal" class="modal-bg">
    <div class="modal-content">
      <button class="close-modal" id="closeCreateCauseModal" title="Cerrar">&times;</button>
      <div class="create-cause-title">
        <i class="fas fa-plus-circle"></i> Crear Nueva Causa Solidaria
      </div>
      <form class="cause-form" id="causeForm" autocomplete="off">
        <div class="form-group">
          <label for="title">Título de la causa</label>
          <input type="text" id="title" name="title" placeholder="Ej: Agua limpia para todos" required>
        </div>
        <div class="form-group">
          <label for="short_description">Descripción corta (máx. 3 líneas)</label>
          <textarea id="short_description" name="short_description" maxlength="180" placeholder="Resumen breve para mostrar en la tarjeta..." required></textarea>
        </div>
        <div class="form-group">
          <label for="description">Descripción exhaustiva</label>
          <textarea id="description" name="description" placeholder="Describe la causa, el objetivo, contexto, cómo se usará la ayuda..." required></textarea>
        </div>
        <div class="form-group">
          <label for="photo">Foto principal</label>
          <input type="file" id="photo" name="photo" accept="image/*">
          <img id="previewImg" class="preview-img" alt="Vista previa de la foto" style="display:none;">
        </div>
        <div class="form-inline-group">
          <div class="form-group">
            <label for="goal">Meta de recaudación (€)</label>
            <input type="number" id="goal" name="goal" min="1" step="0.01" placeholder="Ej: 5000" required>
          </div>
          <div class="form-group">
            <label for="beneficiaries">Nº de beneficiarios</label>
            <input type="number" id="beneficiaries" name="beneficiaries" min="1" placeholder="Ej: 100" required>
          </div>
        </div>
        <div class="form-inline-group">
          <div class="form-group">
            <label for="city">Ciudad</label>
            <input type="text" id="city" name="city" placeholder="Ej: Madrid" required>
          </div>
          <div class="form-group">
            <label for="country">País</label>
            <input type="text" id="country" name="country" placeholder="Ej: España" required>
          </div>
        </div>
        <div class="form-group">
          <label for="points">Puntos por colaborar</label>
          <input type="number" id="points" name="points" min="1" max="1000" value="50" required>
          <div class="points-info" id="pointsText">
            <i class="fas fa-star"></i>
            Colaborar en esta causa otorgará <strong>50 puntos</strong> a cada participante.
          </div>
        </div>
        <input type="hidden" id="lat" name="lat">
        <input type="hidden" id="lng" name="lng">
        <button type="submit" class="btn btn-primary" style="margin-top:1rem;">
          <i class="fas fa-paper-plane"></i> Crear Causa
        </button>
      </form>
      <div class="after-create" id="afterCreate" style="display:none;">
        <h3>¡Causa creada con éxito!</h3>
        <p>¿Quieres agregar tareas o retos específicos vinculados a esta causa?</p>
        <a href="/tasks/create" class="btn btn-accent">
          <i class="fas fa-tasks"></i> Agregar tareas/retos
        </a>
        <br>
        <a href="/causes" class="btn btn-outline" style="margin-top:1rem;">
          <i class="fas fa-arrow-left"></i> Volver a causas
        </a>
      </div>
    </div>
  </div>

  <!-- Modal de Causa -->
  <div id="causeModal" class="modal" style="display:none; position:fixed; z-index:9999; left:0; top:0; width:100vw; height:100vh; background:rgba(0,0,0,0.35); align-items:center; justify-content:center;">
    <div class="modal-content" style="background:#fff; border-radius:18px; max-width:740px; width:95vw; padding:2rem; box-shadow:0 8px 32px rgba(74,111,165,0.13); position:relative; max-height:90vh; overflow-y:auto;">
      <button id="closeModal" style="position:absolute; top:1.5rem; right:1.5rem; background:none; border:none; font-size:1.8rem; color:#6b7280; cursor:pointer; transition:color 0.2s;" onmouseover="this.style.color='#4a6fa5'" onmouseout="this.style.color='#6b7280'">&times;</button>
      <div id="modalBody" style="padding:0.5rem;">
        <!-- Contenido dinámico -->
      </div>
    </div>
  </div>

  <!-- Contenido principal de la página de causas -->
  <div class="main-container">
    <div class="causes-header">
      <h1>Causas Solidarias</h1>
      <a href="#" id="create-cause-btn" class="btn btn-primary">
        <i class="fas fa-plus"></i> Crear Causa
      </a>
    </div>
    <div class="causes-search">
      <input type="text" id="search-input" placeholder="Buscar por título, país, descripción...">
      <i class="fas fa-search" style="color:#4a6fa5;"></i>
    </div>
    <div class="tabs">
      <button class="tab active" data-filter="all">Todas</button>
      <button class="tab" data-filter="education">Educación</button>
      <button class="tab" data-filter="health">Salud</button>
      <button class="tab" data-filter="environment">Medio Ambiente</button>
      <button class="tab" data-filter="animals">Animales</button>
      <button class="tab" data-filter="community">Comunidad</button>
    </div>
    <div class="causes-grid" id="causesList">
      <!-- Las causas se cargarán dinámicamente desde Supabase -->
    </div>
  </div>
{% endblock %}

{% block scripts %}
{{ super() }}
<script>
let currentFilter = "all";

document.addEventListener('DOMContentLoaded', async function() {
  // Abrir modal de crear causa
  document.getElementById('create-cause-btn').onclick = async function(e) {
    e.preventDefault();
    const { data: { session } } = await supabase.auth.getSession();
    if (session?.user) {
      document.getElementById('createCauseModal').classList.add('active');
      document.body.style.overflow = 'hidden';
    } else {
      document.getElementById('loginModal').classList.add('active');
    }
  };

  // Cerrar modal de crear causa
  document.getElementById('closeCreateCauseModal').onclick = function() {
    document.getElementById('createCauseModal').classList.remove('active');
    document.body.style.overflow = '';
    document.getElementById('causeForm').reset();
    document.getElementById('previewImg').style.display = 'none';
    document.getElementById('causeForm').style.display = 'block';
    document.getElementById('afterCreate').style.display = 'none';
  };

  // Cerrar modal al hacer click fuera del contenido
  document.getElementById('createCauseModal').onclick = function(e) {
    if (e.target === this) {
      this.classList.remove('active');
      document.body.style.overflow = '';
      document.getElementById('causeForm').style.display = 'block';
      document.getElementById('afterCreate').style.display = 'none';
    }
  };

  // Modal login
  document.getElementById('cancelModal').onclick = function() {
    document.getElementById('loginModal').classList.remove('active');
  };
  document.getElementById('loginModal').onclick = function(e) {
    if (e.target === this) this.classList.remove('active');
  };

  // Tabs
  document.querySelectorAll('.tab').forEach(tab => {
    tab.addEventListener('click', function() {
      document.querySelector('.tab.active').classList.remove('active');
      this.classList.add('active');
      loadCausesFromSupabase(this.getAttribute('data-filter'));
    });
  });

  // Búsqueda
  document.getElementById('search-input').addEventListener('input', function() {
    loadCausesFromSupabase(currentFilter, this.value);
  });

  // Vista previa de imagen
  document.getElementById('photo').addEventListener('change', function(e) {
    const file = e.target.files[0];
    const preview = document.getElementById('previewImg');
    if (file) {
      const reader = new FileReader();
      reader.onload = function(evt) {
        preview.src = evt.target.result;
        preview.style.display = 'block';
      };
      reader.readAsDataURL(file);
    } else {
      preview.src = '';
      preview.style.display = 'none';
    }
  });

  // Actualizar texto de puntos
  document.getElementById('points').addEventListener('input', function() {
    const val = this.value || 0;
    document.getElementById('pointsText').innerHTML = `<i class="fas fa-star"></i> Colaborar en esta causa otorgará <strong>${val} puntos</strong> a cada participante.`;
  });

  // Envío del formulario
  document.getElementById('causeForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    // Recoge los datos del formulario
    const title = document.getElementById('title').value.trim();
    const short_description = document.getElementById('short_description').value.trim();
    const description = document.getElementById('description').value.trim();
    const goal = parseFloat(document.getElementById('goal').value);
    const beneficiaries = parseInt(document.getElementById('beneficiaries').value, 10);
    const city = document.getElementById('city').value.trim();
    const country = document.getElementById('country').value.trim();
    const points = parseInt(document.getElementById('points').value, 10);
    const photoFile = document.getElementById('photo').files[0];
    let photo_url = null;

    // Sube la foto a Supabase Storage si existe
    if (photoFile) {
      const fileExt = photoFile.name.split('.').pop();
      const fileName = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}.${fileExt}`;
      const filePath = `public/${fileName}`;
      const { error: uploadError } = await supabase.storage
        .from('causes')
        .upload(filePath, photoFile, { upsert: true });
      if (uploadError) {
        alert('Error subiendo la foto: ' + uploadError.message);
        return;
      }
      const { data } = supabase.storage.from('causes').getPublicUrl(filePath);
      photo_url = data.publicUrl;
    }

    // Guarda la causa en la tabla
    const { data: { session } } = await supabase.auth.getSession();
    const user = session?.user;
    if (!user) {
      alert('Debes iniciar sesión para crear una causa.');
      return;
    }

    const lat = document.getElementById('lat').value;
    const lng = document.getElementById('lng').value;

    const { error } = await supabase
      .from('causes')
      .insert([{
        title,
        short_description,
        description,
        goal,
        beneficiaries,
        city,
        country,
        lat: lat ? parseFloat(lat) : null,
        lng: lng ? parseFloat(lng) : null,
        points,
        photo_url,
        user_id: user.id,
        raised: 0,
        donors: 0,
        urgent: false,
        category: 'community' // Puedes cambiar esto según tu lógica
      }]);

    if (error) {
      alert('Error al crear la causa: ' + error.message);
      return;
    }

    document.getElementById('causeForm').style.display = 'none';
    document.getElementById('afterCreate').style.display = 'block';
    loadCausesFromSupabase();
  });

  // Cargar causas al iniciar
  await loadCausesFromSupabase();
});

async function loadCausesFromSupabase(filter = "all", searchTerm = "") {
  currentFilter = filter;
  let query = supabase
    .from('causes')
    .select('*')
    .order('created_at', { ascending: false });

  if (filter !== "all") {
    query = query.eq('category', filter);
  }
  if (searchTerm && searchTerm.trim() !== "") {
    query = query.or(`title.ilike.%${searchTerm}%,description.ilike.%${searchTerm}%,city.ilike.%${searchTerm}%,country.ilike.%${searchTerm}%`);
  }
  const { data: causes, error } = await query;
  const causesList = document.getElementById('causesList');
  if (error) {
    causesList.innerHTML = '<div style="color:#e53e3e;text-align:center;">Error al cargar las causas.</div>';
    return;
  }
  causesList.innerHTML = '';
  if (!causes || causes.length === 0) {
    causesList.innerHTML = '<div style="color:#6b7280;text-align:center;padding:2rem;grid-column:1/-1;">No se encontraron causas.</div>';
    return;
  }
  causes.forEach(cause => {
    const progress = cause.goal ? Math.min(Math.round((cause.raised / cause.goal) * 100), 100) : 0;
    const urgentBadge = cause.urgent ? `<div class="cause-badge urgent"><i class="fas fa-exclamation-circle"></i> Urgente</div>` : "";
    const pointsBadge = `<div class="cause-badge points"><i class="fas fa-star"></i> +${cause.points || 0} pts</div>`;
    const location = cause.city && cause.country ? `${cause.city}, ${cause.country}` : "";
    const card = document.createElement('div');
    card.className = 'cause-card';
    card.innerHTML = `
      <div class="cause-image">
        <img src="${cause.photo_url || '/img/causa-default.jpg'}" alt="${cause.title}" 
  onerror="if (!this._defaulted) { this._defaulted = true; this.src='/img/causa-default.jpg'; }">
        ${urgentBadge}
        ${pointsBadge}
      </div>
      <div class="cause-content">
        <h3>${cause.title}</h3>
        <p>${cause.short_description || ''}</p>
        <div class="cause-meta">
          <div class="meta-item"><i class="fas fa-map-marker-alt"></i> ${location}</div>
          <div class="meta-item"><i class="fas fa-users"></i> ${cause.donors || 0} donantes</div>
          <div class="beneficiaries-count">
            <i class="fas fa-heart"></i> Beneficia a ${cause.beneficiaries || 0} personas
          </div>
        </div>
        <div class="cause-progress">
          <div class="progress-bar">
            <div class="progress-fill" style="width: ${progress}%"></div>
          </div>
          <div class="progress-info">
            <span>${progress}% completado</span>
            <span>${cause.raised || 0} € de ${cause.goal || 0} €</span>
          </div>
        </div>
        <div class="cause-actions">
          <button class="btn btn-primary view-cause-btn" data-cause-id="${cause.id}">Ver más</button>
          <a href="#" class="btn btn-accent">Donar</a>
        </div>
      </div>
    `;
    causesList.appendChild(card);
  });
  window.causes = causes; // Añade esto después de obtener las causas
}

// Geocodificación automática al cambiar ciudad o país
async function geocodeCityCountry() {
  const city = document.getElementById('city').value.trim();
  const country = document.getElementById('country').value.trim();
  if (!city || !country) return;

  const query = encodeURIComponent(`${city}, ${country}`);
  const url = `https://nominatim.openstreetmap.org/search?q=${query}&format=json&limit=1`;

  try {
    const res = await fetch(url, { headers: { 'Accept-Language': 'es' } });
    const data = await res.json();
    if (data && data.length > 0) {
      document.getElementById('lat').value = data[0].lat;
      document.getElementById('lng').value = data[0].lon;
    } else {
      document.getElementById('lat').value = '';
      document.getElementById('lng').value = '';
    }
  } catch (e) {
    document.getElementById('lat').value = '';
    document.getElementById('lng').value = '';
  }
}

document.getElementById('city').addEventListener('change', geocodeCityCountry);
document.getElementById('country').addEventListener('change', geocodeCityCountry);

// Ver detalles de causa
document.addEventListener('click', async function(e) {
  if (e.target.classList.contains('view-cause-btn')) {
    const causeId = e.target.getAttribute('data-cause-id');
    const cause = window.causes.find(c => c.id == causeId);
    const progress = cause.goal ? Math.min(Math.round((cause.raised / cause.goal) * 100), 100) : 0;
    const createdDate = new Date(cause.created_at).toLocaleDateString('es-ES', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });

    // Rellena el modal con los datos
    document.getElementById('modalBody').innerHTML = `
      <div class="modal-cause-details">
        <div class="modal-cause-header">
          <h2>${cause.title}</h2>
          <span class="modal-cause-category">
            <i class="fas fa-hands-helping"></i> Causa Solidaria
          </span>
        </div>
        
        <div class="modal-cause-image-container">
          <img class="modal-cause-image" src="${cause.photo_url || '/img/causa-default.jpg'}" 
               alt="Imagen de la causa ${cause.title}"
               onerror="this.src='/img/causa-default.jpg'">
          
          <div class="modal-cause-badges">
            ${cause.urgent ? `
            <div class="modal-cause-badge urgent">
              <i class="fas fa-exclamation-circle"></i> Urgente
            </div>` : ''}
            
            <div class="modal-cause-badge points">
              <i class="fas fa-star"></i> +${cause.points || 0} Puntos
            </div>
          </div>
        </div>
        
        <div class="modal-cause-progress-container">
          <div class="progress-bar">
            <div class="progress-fill" style="width: ${progress}%"></div>
          </div>
          <div class="progress-info">
            <span>${progress}% completado</span>
            <span>${cause.raised || 0} € de ${cause.goal || 0} €</span>
          </div>
        </div>
        
        <div class="modal-cause-meta">
          <div class="modal-cause-meta-item">
            <i class="fas fa-map-marker-alt"></i>
            <span>${cause.city || 'Sin ubicación'}${cause.country ? ', ' + cause.country : ''}</span>
          </div>
          
          <div class="modal-cause-meta-item">
            <i class="fas fa-users"></i>
            <span>${cause.donors || 0} donantes</span>
          </div>
          
          <div class="modal-cause-meta-item">
            <i class="fas fa-heart"></i>
            <span>${cause.beneficiaries || 0} beneficiarios</span>
          </div>
          
          <div class="modal-cause-meta-item">
            <i class="fas fa-calendar-alt"></i>
            <span>${createdDate}</span>
          </div>
        </div>
        
        <div class="modal-cause-content">
          <div class="modal-cause-section">
            <h3><i class="fas fa-align-left"></i> Descripción</h3>
            <p>${cause.description || 'No hay descripción disponible para esta causa.'}</p>
          </div>
        </div>
        
        <div class="modal-cause-actions">
          <a href="#" class="btn btn-primary" style="display:flex; align-items:center; justify-content:center; gap:0.7rem;">
            <i class="fas fa-donate"></i> Donar ahora
          </a>
          <a href="#" class="btn btn-accent" style="display:flex; align-items:center; justify-content:center; gap:0.7rem;">
            <i class="fas fa-hands-helping"></i> Colaborar
          </a>
        </div>
        
        <div class="modal-cause-share">
          <h3><i class="fas fa-share-alt"></i> Comparte esta causa</h3>
          
          <div class="share-content">
            <div class="share-title">¡Únete a esta causa solidaria!</div>
            <div class="share-text">
              "${cause.short_description || 'Ayuda a hacer realidad este proyecto solidario'}"<br><br>
              Cada contribución cuenta y nos acerca más a la meta de ${cause.goal || 0}€ para ayudar a ${cause.beneficiaries || 0} personas.
            </div>
            
            <div class="share-meta">
              <div class="share-meta-item">
                <i class="fas fa-bullseye"></i> ${progress}% alcanzado
              </div>
              <div class="share-meta-item">
                <i class="fas fa-users"></i> ${cause.donors || 0} colaboradores
              </div>
              ${cause.urgent ? `
              <div class="share-meta-item">
                <i class="fas fa-exclamation-circle"></i> Necesidad urgente
              </div>` : ''}
            </div>
          </div>
          
          <div class="share-buttons">
            <a href="#" class="share-button facebook" onclick="shareOnPlatform('facebook', '${cause.title}', '${window.location.origin}/causes/${cause.id}')">
              <i class="fab fa-facebook-f"></i> Facebook
            </a>
            <a href="#" class="share-button twitter" onclick="shareOnPlatform('twitter', '${cause.title}', '${window.location.origin}/causes/${cause.id}')">
              <i class="fab fa-twitter"></i> Twitter
            </a>
            <a href="#" class="share-button whatsapp" onclick="shareOnPlatform('whatsapp', '${cause.title}', '${window.location.origin}/causes/${cause.id}')">
              <i class="fab fa-whatsapp"></i> WhatsApp
            </a>
            <a href="#" class="share-button link" onclick="copyCauseLink('${window.location.origin}/causes/${cause.id}')">
              <i class="fas fa-link"></i> Copiar enlace
            </a>
          </div>
        </div>
        
        <div class="modal-cause-linked">
          <h3><i class="fas fa-link"></i> Acciones relacionadas</h3>
          <div class="linked-items" id="linked-items">
            <div class="linked-loading">Cargando tareas y actividades relacionadas...</div>
          </div>
        </div>
      </div>
    `;

    // Cargar elementos vinculados
    loadLinkedItems(cause.id);
    
    // Mostrar modal
    document.getElementById('causeModal').style.display = 'flex';
    document.body.style.overflow = 'hidden';
  }
});

// Función para compartir en plataformas específicas
function shareOnPlatform(platform, title, url) {
  let shareUrl = '';
  const text = `Únete a esta causa solidaria: "${title}" - Cada contribución cuenta!`;
  
  switch(platform) {
    case 'facebook':
      shareUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}`;
      break;
    case 'twitter':
      shareUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}&url=${encodeURIComponent(url)}`;
      break;
    case 'whatsapp':
      shareUrl = `https://wa.me/?text=${encodeURIComponent(text + ' ' + url)}`;
      break;
    default:
      return;
  }
  
  window.open(shareUrl, '_blank', 'width=600,height=400');
}

// Función para copiar enlace
function copyCauseLink(url) {
  navigator.clipboard.writeText(url).then(() => {
    // Mostrar notificación de copiado
    const notification = document.createElement('div');
    notification.style.position = 'fixed';
    notification.style.bottom = '20px';
    notification.style.left = '50%';
    notification.style.transform = 'translateX(-50%)';
    notification.style.backgroundColor = 'var(--accent)';
    notification.style.color = 'white';
    notification.style.padding = '10px 20px';
    notification.style.borderRadius = '50px';
    notification.style.boxShadow = '0 4px 12px rgba(0,0,0,0.15)';
    notification.style.zIndex = '10000';
    notification.style.animation = 'fadeInOut 2.5s ease-in-out';
    notification.innerText = '¡Enlace copiado al portapapeles!';
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
      notification.remove();
    }, 2500);
  }).catch(err => {
    console.error('Error al copiar:', err);
    prompt('Por favor, copia este enlace:', url);
  });
}

// Cerrar modal y restaurar scroll
document.getElementById('closeModal').addEventListener('click', function() {
  document.getElementById('causeModal').style.display = 'none';
  document.body.style.overflow = '';
});

// Cerrar al hacer clic fuera del contenido
document.getElementById('causeModal').addEventListener('click', function(e) {
  if (e.target === this) {
    this.style.display = 'none';
    document.body.style.overflow = '';
  }
});

// Puedes mantener tu función loadLinkedItems aquí
function loadLinkedItems(causeId) {
  const container = document.getElementById('linked-items');
  if (container) {
    container.innerHTML = '<div class="linked-loading">No hay acciones vinculadas aún.</div>';
  }
}

// Ejemplo de funciones para donar/colaborar (puedes personalizar)
function donateToCause(causeId) {
  alert('Funcionalidad de donación próximamente.');
}
function volunteerForCause(causeId) {
  alert('Funcionalidad de voluntariado próximamente.');
}

// Mostrar el modal con los detalles de la causa
async function showCauseModal(causeId) {
  const cause = window.causes.find(c => c.id == causeId);
  const progress = cause.goal ? Math.min(Math.round((cause.raised / cause.goal) * 100), 100) : 0;
  const createdDate = new Date(cause.created_at).toLocaleDateString('es-ES', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });

  document.getElementById('modalBody').innerHTML = `
    <div class="modal-cause-container">
      <div class="modal-cause-header">
        <h1 class="modal-cause-title">${cause.title}</h1>
      </div>
      <div class="modal-cause-image-wrapper">
        <img class="modal-cause-image" src="${cause.photo_url || '/img/causa-default.jpg'}" 
             alt="Imagen de la causa ${cause.title}"
             onerror="this.src='/img/causa-default.jpg'">
        ${cause.urgent ? `
        <div class="modal-cause-badge urgent">
          <i class="fas fa-exclamation-circle"></i> Urgente
        </div>` : ''}
      </div>
      <div class="modal-cause-progress-container">
        <div class="progress-bar">
          <div class="progress-fill" style="width: ${progress}%"></div>
        </div>
        <div class="progress-info">
          <span>${progress}% completado</span>
          <span>${cause.raised || 0} € de ${cause.goal || 0} €</span>
        </div>
      </div>
      <div class="points-notice">
        <i class="fas fa-star" style="color: var(--accent);"></i> Cada euro donado recibirá <strong>${cause.points || 20} puntos</strong> de impacto.
      </div>
      <div class="modal-cause-meta-grid">
        <div class="meta-item">
          <span class="meta-icon"><i class="fas fa-map-marker-alt"></i></span>
          <span>${cause.city || 'Sin ubicación'}${cause.country ? ', ' + cause.country : ''}</span>
        </div>
        <div class="meta-item">
          <span class="meta-icon"><i class="fas fa-users"></i></span>
          <span>${cause.donors || 0} donantes</span>
        </div>
        <div class="meta-item">
          <span class="meta-icon"><i class="fas fa-heart"></i></span>
          <span>${cause.beneficiaries || 0} beneficiarios</span>
        </div>
        <div class="meta-item">
          <span class="meta-icon"><i class="fas fa-calendar-alt"></i></span>
          <span>${createdDate}</span>
        </div>
      </div>
      <div class="modal-cause-content">
        <div class="content-section">
          <h3 class="content-title">
            <i class="fas fa-align-left"></i> Resumen
          </h3>
          <p class="content-text">${cause.short_description || 'No hay resumen disponible para esta causa.'}</p>
        </div>
        <div class="content-section">
          <h3 class="content-title">
            <i class="fas fa-info-circle"></i> Descripción completa
          </h3>
          <p class="content-text">${cause.description || 'No hay descripción detallada disponible para esta causa.'}</p>
        </div>
      </div>
      <div class="modal-cause-actions">
        <button class="action-btn action-btn-primary" onclick="donateToCause('${cause.id}')">
          <i class="fas fa-donate"></i> Donar ahora
        </button>
        <button class="action-btn action-btn-accent" onclick="volunteerForCause('${cause.id}')">
          <i class="fas fa-hands-helping"></i> Colaborar
        </button>
       

==== C:\Users\gabi2\Desktop\Solidarity-web\views\causes\mine.njk ====
{# filepath: /views/causes/mine.njk #}
{% extends "layout.njk" %}

{% block title %}Mis Causas | Solidarity{% endblock %}

{% block content %}
<section class="causes-section">
  <div class="section-header" style="display:flex;align-items:center;gap:1rem;margin-bottom:2rem;">
    <i class="fas fa-hands-helping" style="font-size:2rem;color:var(--accent,#2dd4bf);"></i>
    <h1 style="margin:0;">Mis Causas Solidarias</h1>
  </div>
  <div id="myCausesList" class="causes-list">
    <div class="loading" style="text-align:center;color:#888;">Cargando tus causas...</div>
  </div>
  <div id="noCausesMsg" style="display:none;text-align:center;color:#888;margin-top:2rem;">
    <i class="fas fa-info-circle"></i> Aún no has creado ninguna causa.
  </div>
</section>
{% endblock %}

{% block scripts %}
{{ super() }}
<script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
<script>

document.addEventListener('DOMContentLoaded', async () => {
  const { data: { user } } = await supabase.auth.getUser();
  if (!user) {
    document.getElementById('myCausesList').innerHTML = '<div style="color:#e53e3e;text-align:center;">Debes iniciar sesión para ver tus causas.</div>';
    return;
  }

  const { data: misCausas, error } = await supabase
    .from('causes')
    .select('*')
    .eq('user_id', user.id)
    .order('created_at', { ascending: false });

  const list = document.getElementById('myCausesList');
  list.innerHTML = '';

  if (error) {
    list.innerHTML = '<div style="color:#e53e3e;text-align:center;">Error al cargar tus causas.</div>';
    return;
  }

  if (!misCausas || misCausas.length === 0) {
    document.getElementById('noCausesMsg').style.display = 'block';
    return;
  }

  misCausas.forEach(causa => {
    const card = document.createElement('div');
    card.className = 'cause-card';
    card.innerHTML = `
      <div class="cause-img-wrap">
        <img src="${causa.photo_url || '/img/causa-default.jpg'}" alt="Foto de la causa" class="cause-img">
      </div>
      <div class="cause-info">
        <h2 class="cause-title">${causa.title}</h2>
        <div class="cause-meta">
          <span class="cause-city"><i class="fas fa-map-marker-alt"></i> ${causa.city}, ${causa.country}</span>
          <span class="cause-beneficiaries"><i class="fas fa-users"></i> ${causa.beneficiaries} beneficiarios</span>
        </div>
        <p class="cause-desc">${causa.description}</p>
        <div class="cause-goal">
          <span class="goal-label"><i class="fas fa-donate"></i> Meta:</span>
          <span class="goal-amount">€${causa.goal}</span>
        </div>
        <div class="cause-points">
          <i class="fas fa-star"></i> ${causa.points} puntos por colaborar
        </div>
        <div class="cause-date">
          <i class="fas fa-calendar-alt"></i> Creada el ${new Date(causa.created_at).toLocaleDateString()}
        </div>
      </div>
    `;
    list.appendChild(card);
  });
});
</script>
<style>
.causes-list {
  display: flex;
  flex-wrap: wrap;
  gap: 2rem;
  justify-content: flex-start;
}
.cause-card {
  background: #fff;
  border-radius: 14px;
  box-shadow: 0 2px 12px rgba(0,0,0,0.07);
  overflow: hidden;
  max-width: 350px;
  width: 100%;
  display: flex;
  flex-direction: column;
  margin-bottom: 1.5rem;
}
.cause-img-wrap {
  width: 100%;
  height: 180px;
  background: #f8fafc;
  display: flex;
  align-items: center;
  justify-content: center;
}
.cause-img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}
.cause-info {
  padding: 1.2rem 1rem 1rem 1rem;
  display: flex;
  flex-direction: column;
  gap: 0.6rem;
}
.cause-title {
  font-size: 1.2rem;
  font-weight: 800;
  color: var(--primary, #2dd4bf);
  margin: 0 0 0.3rem 0;
}
.cause-meta {
  font-size: 0.97rem;
  color: #6b7280;
  display: flex;
  gap: 1.2rem;
  margin-bottom: 0.3rem;
}
.cause-desc {
  color: #444;
  font-size: 1rem;
  margin: 0.2rem 0 0.5rem 0;
  min-height: 48px;
}
.cause-goal, .cause-points, .cause-date {
  font-size: 0.98rem;
  color: var(--accent, #4fc3a1);
  margin-bottom: 0.2rem;
  display: flex;
  align-items: center;
  gap: 0.5rem;
}
.cause-goal .goal-label { color: #444; font-weight: 600; }
.cause-goal .goal-amount { color: var(--primary, #2dd4bf); font-weight: 700; }
@media (max-width: 900px) {
  .causes-list { flex-direction: column; gap: 1.5rem; }
  .cause-card { max-width: 100%; }
}
</style>
{% endblock %}

==== C:\Users\gabi2\Desktop\Solidarity-web\views\maps\index.njk ====
<!-- filepath: c:\Users\gabi2\Desktop\Solidarity-web\views\maps\index.njk -->
{% extends "layout.njk" %}

{% block title %}Mapa de Ayudas - Solidarity{% endblock %}

{% block head %}
  {{ super() }}
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
  <style>
    /* SOLO estilos específicos del mapa, el resto en layout */
    .map-main-container {
        max-width: 1100px;
        margin: 3rem auto 0 auto;
        background: #fff;
        border-radius: 18px;
        box-shadow: 0 8px 32px rgba(0,0,0,0.07);
        padding: 2.5rem 2rem 2.5rem 2rem;
    }
    .map-title {
        font-size: 2rem;
        font-weight: 800;
        color: var(--primary, #3182ce);
        margin-bottom: 0.7rem;
        letter-spacing: -1px;
    }
    .map-filters {
        display: flex;
        gap: 1rem;
        margin-bottom: 1.2rem;
        flex-wrap: wrap;
    }
    .map-filter-btn {
        background: #f4f8fb;
        border: none;
        border-radius: 8px;
        padding: 0.6rem 1.5rem;
        font-size: 1.05rem;
        font-weight: 600;
        color: var(--primary, #3182ce);
        cursor: pointer;
        transition: background 0.2s, color 0.2s;
    }
    .map-filter-btn.active, .map-filter-btn:hover {
        background: #e6f0fa;
        color: var(--primary-dark, #174e85);
    }
    #community-map {
        width: 100%;
        height: 420px;
        border-radius: 12px;
        border: 1.5px solid #e5e7eb;
        box-shadow: 0 2px 12px rgba(49,130,206,0.06);
        margin-bottom: 2.2rem;
    }
    .leaflet-control-zoom {
        box-shadow: 0 2px 8px rgba(49,130,206,0.10);
        border-radius: 10px;
        overflow: hidden;
    }
    .popup-photo {
        width: 38px;
        height: 38px;
        border-radius: 50%;
        object-fit: cover;
        margin-bottom: 7px;
        border: 2px solid #3182ce;
        box-shadow: 0 1px 4px rgba(49,130,206,0.10);
        display: block;
        margin-left: auto;
        margin-right: auto;
    }
    .map-stats-section {
        display: flex;
        flex-wrap: wrap;
        gap: 2.5rem;
        margin-bottom: 2.2rem;
        justify-content: space-between;
        background: #f8fafc;
        border-radius: 14px;
        padding: 1.5rem 1rem;
    }
    .map-stat-block {
        text-align: center;
        flex: 1 1 180px;
        min-width: 150px;
    }
    .map-stat-block .number {
        font-size: 2.1rem;
        font-weight: 900;
        color: var(--primary, #3182ce);
        margin-bottom: 0.2rem;
        min-height: 2.1rem;
        letter-spacing: -1px;
    }
    .map-stat-block .label {
        color: #6b7280;
        font-size: 1.08rem;
    }
    @media (max-width: 900px) {
        .map-main-container {
            padding: 1.2rem 0.5rem;
        }
        .map-stats-section {
            flex-direction: column;
            gap: 1.2rem;
        }
    }
  </style>
{% endblock %}

{% block content %}
<div class="map-main-container">
    <div class="map-title">
        <i class="fas fa-globe-europe"></i> Mapa de Ayudas de la Comunidad
    </div>
    <div class="map-filters">
        <button class="map-filter-btn active" data-type="all">Todos</button>
        <button class="map-filter-btn" data-type="causa">Causas</button>
        <button class="map-filter-btn" data-type="tarea">Tareas</button>
        <button class="map-filter-btn" data-type="reto">Retos</button>
        <button class="map-filter-btn" data-type="voluntariado">Voluntariados</button>
        <button class="map-filter-btn" data-type="miembro">Miembros</button>
    </div>
    <div id="community-map"></div>
    <div class="map-stats-section">
        <div class="map-stat-block">
            <div class="number" id="stat-people">0</div>
            <div class="label">Personas ayudadas</div>
        </div>
        <div class="map-stat-block">
            <div class="number" id="stat-causes">0</div>
            <div class="label">Causas</div>
        </div>
        <div class="map-stat-block">
            <div class="number" id="stat-volunteering">0</div>
            <div class="label">Voluntariados</div>
        </div>
        <div class="map-stat-block">
            <div class="number" id="stat-tasks">0</div>
            <div class="label">Tareas</div>
        </div>
        <div class="map-stat-block">
            <div class="number" id="stat-challenges">0</div>
            <div class="label">Retos</div>
        </div>
        <div class="map-stat-block">
            <div class="number" id="stat-donations">0 €</div>
            <div class="label">Donaciones totales</div>
        </div>
        <div class="map-stat-block">
            <div class="number" id="stat-countries">0</div>
            <div class="label">Países ayudados</div>
        </div>
        <div class="map-stat-block">
            <div class="number" id="stat-cities">0</div>
            <div class="label">Ciudades impactadas</div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
  {{ super() }}
  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
  <script>

    // Iconos de marcadores
    const markerIcons = {
      causa:    new L.Icon({iconUrl: 'https://cdn.jsdelivr.net/gh/pointhi/leaflet-color-markers@master/img/marker-icon-red.png',    shadowUrl: 'https://cdn.jsdelivr.net/gh/pointhi/leaflet-color-markers@master/img/marker-shadow.png', iconSize: [18,30], iconAnchor: [9,30], popupAnchor: [1,-24], shadowSize: [30,30]}),
      tarea:    new L.Icon({iconUrl: 'https://cdn.jsdelivr.net/gh/pointhi/leaflet-color-markers@master/img/marker-icon-blue.png',   shadowUrl: 'https://cdn.jsdelivr.net/gh/pointhi/leaflet-color-markers@master/img/marker-shadow.png', iconSize: [18,30], iconAnchor: [9,30], popupAnchor: [1,-24], shadowSize: [30,30]}),
      voluntariado: new L.Icon({iconUrl: 'https://cdn.jsdelivr.net/gh/pointhi/leaflet-color-markers@master/img/marker-icon-green.png', shadowUrl: 'https://cdn.jsdelivr.net/gh/pointhi/leaflet-color-markers@master/img/marker-shadow.png', iconSize: [18,30], iconAnchor: [9,30], popupAnchor: [1,-24], shadowSize: [30,30]}),
      reto: new L.Icon({iconUrl: 'https://cdn.jsdelivr.net/gh/pointhi/leaflet-color-markers@master/img/marker-icon-yellow.png', shadowUrl: 'https://cdn.jsdelivr.net/gh/pointhi/leaflet-color-markers@master/img/marker-shadow.png', iconSize: [18,30], iconAnchor: [9,30], popupAnchor: [1,-24], shadowSize: [30,30]}),
      miembro: new L.Icon({iconUrl: 'https://cdn.jsdelivr.net/gh/pointhi/leaflet-color-markers@master/img/marker-icon-violet.png', shadowUrl: 'https://cdn.jsdelivr.net/gh/pointhi/leaflet-color-markers@master/img/marker-shadow.png', iconSize: [18,30], iconAnchor: [9,30], popupAnchor: [1,-24], shadowSize: [30,30]})
    };

    let currentFilter = "all";
    let markers = [];

    // Función para traer y unificar datos reales
    async function fetchMapData() {
      const { data: causes } = await supabase.from('causes').select('*');
      const { data: tasks } = await supabase.from('tasks').select('*');
      const { data: challenges } = await supabase.from('challenges').select('*');
      const { data: volunteering } = await supabase.from('volunteering').select('*');
      const { data: members } = await supabase.from('profiles').select('*');

      const communityActions = [
  ...(causes || []).map(c => ({
    type: "causa",
    title: c.title,
    desc: c.description,
    city: c.city,
    country: c.country,
    lat: c.lat,
    lng: c.lng,
    link: `/causes/${c.id}`,
    photo: c.photo_url || '/img/causa-default.jpg'
  })),
  ...(tasks || []).map(t => ({
    type: "tarea",
    title: t.title,
    desc: t.description,
    city: t.city,
    country: t.country,
    lat: t.lat,
    lng: t.lng,
    link: `/tasks/${t.id}`,
    photo: t.photo_url || '/img/task-default.jpg'
  })),
  ...(challenges || []).map(r => ({
    type: "reto",
    title: r.title,
    desc: r.description,
    city: r.city,
    country: r.country,
    lat: r.lat,
    lng: r.lng,
    link: `/challenges/${r.id}`,
    photo: r.photo_url || '/img/challenge-default.jpg'
  })),
  ...(volunteering || []).map(v => ({
    type: "voluntariado",
    title: v.title,
    desc: v.description,
    city: v.city,
    country: v.country,
    lat: v.lat,
    lng: v.lng,
    link: `/volunteering/${v.id}`,
    photo: v.photo_url || '/img/volunteer-default.jpg'
  }))
];  

      const communityMembers = (members || []).map(m => ({
        name: m.name,
        city: m.city,
        country: m.country,
        lat: m.lat,
        lng: m.lng,
        photo: m.photo,
        profile: `/profile/${m.id}`
      }));

      // Estadísticas reales
      const stats = {
        people: (causes || []).reduce((sum, c) => sum + (c.beneficiaries || 0), 0),
        causes: (causes || []).length,
        volunteering: (volunteering || []).length,
        tasks: (tasks || []).length,
        challenges: (challenges || []).length,
        donations: (causes || []).reduce((sum, c) => sum + (c.raised || 0), 0),
        cities: new Set(communityActions.map(a => a.city)).size,
        countries: new Set(communityActions.map(a => a.country)).size
      };

      return { communityActions, communityMembers, stats };
    }

    function sleep(ms) {
      return new Promise(resolve => setTimeout(resolve, ms));
    }

    // Renderiza marcadores según filtro
    async function renderMapMarkers(type, communityActions, communityMembers) {
      markers.forEach(m => m.remove());
      markers = [];
      let filtered = [];
      if (type === "miembro") {
        filtered = communityMembers;
        for (const m of filtered) {
          if (m.lat && m.lng) {
            const marker = L.marker([m.lat, m.lng], {icon: markerIcons.miembro}).addTo(map)
              .bindPopup(`
                <img src="${m.photo}" class="popup-photo" alt="Foto miembro">
                <strong>${m.name}</strong><br>
                <span style="color:#6b7280;">${m.city}, ${m.country}</span><br>
                <a href="${m.profile}" class="action-link" target="_blank" style="color:#3182ce;font-weight:600;">Ver perfil</a>
              `);
            markers.push(marker);
          }
        }
      } else {
        filtered = (type === "all") ? communityActions : communityActions.filter(a => a.type === type);
        for (const action of filtered) {
          let lat = action.lat, lng = action.lng;
          if (!lat || !lng) {
            // Espera un poco entre peticiones para no saturar Nominatim
            await sleep(300);
            const coords = await geocodeCity(action.city, action.country);
            if (coords) {
              lat = coords.lat;
              lng = coords.lng;
            }
          }
          if (lat && lng) {
            const marker = L.marker([lat, lng], {icon: markerIcons[action.type]}).addTo(map)
              .bindPopup(`
                <img src="${action.photo}" class="popup-photo" alt="Foto acción">
                <strong>${action.title}</strong><br>
                <span style="color:#6b7280;">${action.city}, ${action.country}</span><br>
                <span style="font-size:0.97rem;">${action.desc}</span><br>
                <a href="${action.link}" class="action-link" target="_blank" style="color:#3182ce;font-weight:600;">Ver acción</a>
              `);
            markers.push(marker);
          }
        }
      }
      // Ajustar vista
      const validMarkers = markers.map(m => m.getLatLng());
      if (validMarkers.length > 0) {
        const bounds = L.latLngBounds(validMarkers);
        if (bounds.isValid()) map.fitBounds(bounds, { padding: [30, 30] });
      }
    }

    // Animar los números
    function animateCounter(id, target, prefix = '', suffix = '', duration = 1200) {
      const el = document.getElementById(id);
      let count = 0;
      const steps = 50;
      const step = Math.max(1, Math.ceil(target / steps));
      const intervalTime = Math.max(10, Math.floor(duration / (target / step)));
      const interval = setInterval(() => {
        count += step;
        if (count >= target) {
          el.textContent = prefix + target + suffix;
          clearInterval(interval);
        } else {
          el.textContent = prefix + count + suffix;
        }
      }, intervalTime);
    }

    // Geocodificación de ciudad y país
    async function geocodeCity(city, country) {
      const url = `https://nominatim.openstreetmap.org/search?city=${encodeURIComponent(city)}&country=${encodeURIComponent(country)}&format=json&limit=1`;
      const res = await fetch(url, { headers: { 'Accept-Language': 'es' } });
      const data = await res.json();
      if (data && data.length > 0) {
        return { lat: parseFloat(data[0].lat), lng: parseFloat(data[0].lon) };
      }
      return null;
    }

    // Mapa
    const map = L.map('community-map', { zoomControl: true, dragging: true, scrollWheelZoom: false }).setView([20, 0], 2.1);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '&copy; OpenStreetMap contributors'
    }).addTo(map);
    map.zoomControl.setPosition('topright');

    // Al cargar la página
    document.addEventListener('DOMContentLoaded', async function() {
      const { communityActions, communityMembers, stats } = await fetchMapData();

      // Filtros
      document.querySelectorAll('.map-filter-btn').forEach(btn => {
        btn.addEventListener('click', async function() {
          document.querySelector('.map-filter-btn.active').classList.remove('active');
          this.classList.add('active');
          currentFilter = this.getAttribute('data-type');
          await renderMapMarkers(currentFilter, communityActions, communityMembers);
        });
      });

      // Inicial
      await renderMapMarkers(currentFilter, communityActions, communityMembers);

      // Estadísticas reales
      animateCounter('stat-people', stats.people);
      animateCounter('stat-causes', stats.causes);
      animateCounter('stat-volunteering', stats.volunteering);
      animateCounter('stat-tasks', stats.tasks);
      animateCounter('stat-challenges', stats.challenges);
      animateCounter('stat-donations', stats.donations, '', ' €');
      animateCounter('stat-cities', stats.cities);
      animateCounter('stat-countries', stats.countries);
    });

    // Cabecera dinámica usuario logueado (si tu layout.njk lo soporta)
    window.addEventListener('DOMContentLoaded', function() {
      if (document.getElementById('auth-buttons') && document.getElementById('user-info')) {
        fetch('/me', { credentials: 'include' })
          .then(res => res.json())
          .then(data => {
            if (data.logged) {
              document.getElementById('auth-buttons').style.display = 'none';
              document.getElementById('user-info').style.display = 'flex';
              document.getElementById('user-photo').src = data.user.photo || '/img/default-user.png';
              document.getElementById('user-name').textContent = data.user.name;
            } else {
              document.getElementById('auth-buttons').style.display = 'flex';
              document.getElementById('user-info').style.display = 'none';
            }
          });

        // Logout
        document.getElementById('logoutBtn').onclick = function() {
          fetch('/logout', { method: 'POST', credentials: 'include' })
            .then(() => window.location.reload());
        };
      }
    });
    console.log('Actividades para el mapa:', allActivities);
    allActivities.forEach(a => console.log(a.title, a.lat, a.lng));
  </script>
{% endblock %}

==== C:\Users\gabi2\Desktop\Solidarity-web\views\partials\footer.njk ====
<footer>
  <div class="footer-content" style="max-width:1200px;margin:0 auto;padding:2.5rem 1rem;display:flex;flex-wrap:wrap;gap:2.5rem;justify-content:space-between;">
    <!-- Logo y descripción -->
    <div style="flex:1 1 220px;min-width:220px;">
      <div class="footer-logo" style="display:flex;align-items:center;gap:0.7rem;margin-bottom:1rem;">
        <i class="fas fa-hands-helping" style="font-size:2rem;color:var(--primary);"></i>
        <h3 style="font-size:1.5rem;font-weight:700;color:var(--primary);margin:0;">Solidarity</h3>
      </div>
      <div style="color:#6b7280;font-size:1rem;margin-bottom:1.2rem;">
        Plataforma para transformar tu solidaridad en impacto real. Únete, participa y haz la diferencia en tu comunidad y el mundo.
      </div>
      <div class="social-links" style="display:flex;gap:1rem;">
        <a href="#" aria-label="Twitter" style="color:var(--accent);font-size:1.3rem;"><i class="fab fa-twitter"></i></a>
        <a href="#" aria-label="Facebook" style="color:var(--accent);font-size:1.3rem;"><i class="fab fa-facebook-f"></i></a>
        <a href="#" aria-label="Instagram" style="color:var(--accent);font-size:1.3rem;"><i class="fab fa-instagram"></i></a>
        <a href="#" aria-label="LinkedIn" style="color:var(--accent);font-size:1.3rem;"><i class="fab fa-linkedin"></i></a>
      </div>
    </div>
    <!-- Enlaces útiles -->
    <div style="flex:1 1 160px;min-width:160px;">
      <h4 style="font-size:1.1rem;font-weight:600;margin-bottom:0.7rem;color:var(--primary);">Solidarity</h4>
      <div class="footer-links" style="display:flex;flex-direction:column;gap:0.5rem;">
        <a href="/about">Acerca de</a>
      </div>
    </div>
    <!-- Recursos legales -->
    <div style="flex:1 1 160px;min-width:160px;">
      <h4 style="font-size:1.1rem;font-weight:600;margin-bottom:0.7rem;color:var(--primary);">Legal</h4>
      <div style="display:flex;flex-direction:column;gap:0.5rem;">
        <a href="/privacy">Política de Privacidad</a>
        <a href="/terms">Términos y Condiciones</a>
        <a href="/cookies">Política de Cookies</a>
        <a href="/contact">Contacto</a>
      </div>
    </div>
    <!-- Newsletter -->
    <div style="flex:1 1 260px;min-width:260px;">
      <h4 style="font-size:1.1rem;font-weight:600;margin-bottom:0.7rem;color:var(--primary);">Newsletter</h4>
      <div style="color:#6b7280;font-size:0.98rem;margin-bottom:0.7rem;">
        Recibe novedades, historias inspiradoras y oportunidades de acción directamente en tu correo.
      </div>
      <form id="newsletter-form" style="display:flex;gap:0.5rem;">
        <input type="email" name="newsletter-email" placeholder="Tu email" required style="flex:1;padding:0.5rem 1rem;border-radius:50px;border:1px solid var(--gray);font-size:1rem;">
        <button type="submit" class="btn btn-accent" style="border-radius:50px;padding:0.5rem 1.2rem;">Suscribirse</button>
      </form>
      <div id="newsletter-msg" style="font-size:0.95rem;color:var(--accent);margin-top:0.5rem;display:none;"></div>
    </div>
  </div>
  <div class="footer-bottom" style="text-align:center;padding:1.2rem 0 0 0;margin-top:1.5rem;border-top:1px solid #e5e7eb;color:#6b7280;font-size:0.98rem;">
    &copy; 2025 Solidarity. Todos los derechos reservados.
  </div>
</footer>

<script>
  // Newsletter simple feedback (no backend)
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('newsletter-form');
    if (form) {
      form.addEventListener('submit', function(e) {
        e.preventDefault();
        document.getElementById('newsletter-msg').textContent = "¡Gracias por suscribirte!";
        document.getElementById('newsletter-msg').style.display = "block";
        form.reset();
      });
    }
  });
</script>

==== C:\Users\gabi2\Desktop\Solidarity-web\views\partials\navbar - copia.njk ====
<nav class="navbar">
  <a href="/" class="logo">
    <i class="fas fa-hands-helping logo-icon"></i>
    <span class="logo-text">Solidarity</span>
  </a>
  <div class="nav-links">
    <a href="/">Home</a>
    <div class="dropdown">
      <a href="/takeaction" class="dropbtn btn-accent">Take Action! <i class="fas fa-caret-down"></i></a>
      <div class="dropdown-content">
        <a href="/causes">Causas</a>
        <a href="/tasks">Tareas</a>
        <a href="/challenges">Retos</a>
        <a href="/volunteering">Voluntariado</a>
      </div>
    </div>
    <a href="/teams">Equipos</a>
    <a href="/maps">Mapa de Ayudas</a>
    <a href="/ranking">Ranking</a>
    <a href="/profile">Mi Perfil</a>
  </div>
  <div id="auth-buttons">
    <a href="/login" class="btn btn-outline">Iniciar Sesión</a>
    <a href="/register" class="btn btn-primary">Registrarse</a>
  </div>
  <div id="user-menu" style="display: none;">
    <img id="user-avatar" src="" class="avatar" style="width:36px;height:36px;border-radius:50%;object-fit:cover;">
    <span id="user-name"></span>
    <button id="logout-btn" class="btn btn-outline">
      <i class="fas fa-sign-out-alt"></i> Cerrar sesión
    </button>
  </div>
</nav>

<style>
.navbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    max-width: 1800px;
    margin: 0 auto;
    padding: 0 2rem;
}

.nav-links {
    display: flex;
    align-items: center;
    gap: 2rem;
}

.dropdown {
    position: relative;
    display: flex;
    align-items: center;
}
</style>

==== C:\Users\gabi2\Desktop\Solidarity-web\views\profile\index.njk ====
{% extends "layout.njk" %}

{% block title %}Mapa de Ayudas Solidarity{% endblock %}

{% block head %}
  {{ super() }}
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
  <style>
/* Barra de progreso para causas (activity cards) */
.progress-bar {
  height: 8px;
  background: var(--gray, #e2e8f0);
  border-radius: 4px;
  overflow: hidden;
  margin-bottom: 0.5rem;
}
.progress-fill {
  height: 100%;
  background: var(--primary, #4a6fa5);
  border-radius: 4px;
  transition: width 0.3s;
}
.progress-info {
  display: flex;
  justify-content: space-between;
  font-size: 0.93rem;
  color: #6b7280;
  margin-bottom: 0.7rem;
}

/* Perfil */
.profile-main-container {
  max-width: 1100px;
  margin: 2rem auto;
  background: #fff;
  border-radius: 18px;
  box-shadow: 0 5px 24px rgba(76,163,161,0.08);
  padding: 2.5rem 2rem;
}
.profile-header {
  display: flex;
  gap: 2.5rem;
  align-items: center;
  margin-bottom: 2.2rem;
  flex-wrap: wrap;
}
.profile-photo-wrapper { flex-shrink: 0; position: relative; }
.profile-photo {
  width: 120px;
  height: 120px;
  border-radius: 50%;
  object-fit: cover;
  border: 4px solid #4fc3a1;
  box-shadow: 0 2px 8px rgba(0,0,0,0.07);
}
.profile-info h2 {
  font-size: 2rem;
  margin-bottom: 0.5rem;
  color: #4a6fa5;
  font-weight: 800;
}
.profile-location {
  color: #6b7280;
  margin-bottom: 0.7rem;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-size: 1.05rem;
}
.profile-bio { color: #444; margin-bottom: 1.2rem; font-size: 1.07rem; }
.social-links a {
  color: #4fc3a1;
  margin-right: 0.7em;
  font-size: 1.2em;
  transition: color 0.18s;
}
.social-links a:hover { color: #166088; }

.stats-section {
  display: flex;
  gap: 2.5rem;
  margin-bottom: 2.2rem;
  flex-wrap: wrap;
  justify-content: flex-start;
}
.stats-card {
  background: #f8fafc;
  border-radius: 14px;
  box-shadow: 0 2px 10px rgba(76,163,161,0.07);
  padding: 1.2rem 2.2rem;
  display: flex;
  align-items: center;
  gap: 1.1rem;
  min-width: 180px;
  flex: 1 1 180px;
  border: 1.5px solid #e2e8f0;
  transition: box-shadow 0.18s, border 0.18s;
}
.stats-card.highlight {
  background: #e6f0fa;
  border-color: #4a6fa5;
}
.stats-icon {
  font-size: 2.1rem;
  color: #4a6fa5;
  background: #e6f0fa;
  border-radius: 50%;
  width: 48px;
  height: 48px;
  display: flex;
  align-items: center;
  justify-content: center;
}
.stats-content .number {
  font-size: 1.7rem;
  font-weight: 700;
  color: #4a6fa5;
}
.stats-content .label {
  color: #6b7280;
  font-size: 1.01rem;
  margin-top: 0.2rem;
}

.impact-score-section {
  margin: 2rem 0 2.5rem 0;
  background: #e6f0fa;
  border-radius: 14px;
  padding: 1.7rem 1.2rem;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 1.2rem;
  box-shadow: 0 2px 10px rgba(76,163,161,0.07);
}
.impact-score-main {
  display: flex;
  align-items: center;
  gap: 1.2rem;
}
.score {
  font-size: 2.5rem;
  font-weight: 700;
  color: #4a6fa5;
}
.score-label {
  font-size: 1.1rem;
  color: #4fc3a1;
  font-weight: 600;
}
.impact-badge {
  display: inline-block;
  background: #4a6fa5;
  color: #fff;
  font-size: 0.95rem;
  font-weight: 700;
  padding: 0.18em 0.9em;
  border-radius: 999px;
  box-shadow: 0 2px 8px rgba(76,163,161,0.09);
  margin-left: 0.7em;
  letter-spacing: 0.02em;
  position: static;
  margin-top: 0;
  margin-bottom: 0;
  vertical-align: middle;
  min-width: 70px;
  text-align: center;
}
.impact-score-bar-bg {
  width: 220px;
  height: 12px;
  background: #f0f0f0;
  border-radius: 8px;
  margin: 0.5rem 0;
  overflow: hidden;
  position: relative;
}
.impact-score-bar {
  height: 100%;
  background: linear-gradient(90deg, #4a6fa5, #4fc3a1);
  border-radius: 8px;
  transition: width 0.5s;
  position: absolute;
  top: 0;
  left: 0;
}
.impact-level-info {
  color: #6b7280;
  font-size: 1.01rem;
  margin-top: 0.2rem;
  display: flex;
  gap: 1.2rem;
  flex-wrap: wrap;
  justify-content: center;
}

.activities-filter {
  display: flex;
  gap: 0.7rem;
  margin: 2.2rem 0 1.2rem 0;
  flex-wrap: wrap;
}
.filter-btn {
  background: #f1f5f9;
  color: #4a6fa5;
  border-radius: 999px;
  padding: 0.5rem 1.3rem;
  font-size: 1rem;
  font-weight: 600;
  border: none;
  cursor: pointer;
  transition: background 0.18s, color 0.18s;
  outline: none;
}
.filter-btn.active, .filter-btn:hover {
  background: #4fc3a1;
  color: #fff;
}

.activities-section .section-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1.2rem;
  gap: 1.2rem;
}
.sort-options {
  display: flex;
  align-items: center;
  gap: 0.7rem;
  font-size: 1rem;
  color: #4a6fa5;
}
.activities-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
  gap: 1.5rem;
}

/* Tarjetas de actividad (idénticas a causas Solidarity) */
.activity-card {
  background: #fff;
  border-radius: 12px;
  overflow: hidden;
  box-shadow: 0 5px 15px rgba(44, 62, 80, 0.07);
  border: 1px solid #e2e8f0;
  display: flex;
  flex-direction: column;
  font-family: 'Poppins', 'Segoe UI', Arial, sans-serif;
  transition: box-shadow 0.2s, border 0.2s, transform 0.2s;
}
.activity-card:hover {
  box-shadow: 0 10px 25px rgba(44, 62, 80, 0.13);
  border-color: #4a6fa5;
  transform: translateY(-4px);
}
.activity-image {
  height: 180px;
  overflow: hidden;
  position: relative;
  background-size: cover;
  background-position: center;
}
.activity-image img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: transform 0.3s;
}
.activity-card:hover .activity-image img {
  transform: scale(1.05);
}
.activity-badge {
  position: absolute;
  top: 1rem;
  left: 1rem;
  background: #e74c3c;
  color: #fff;
  padding: 0.22em 1em;
  border-radius: 999px;
  font-size: 0.93em;
  font-weight: 600;
  box-shadow: 0 2px 8px rgba(44,62,80,0.08);
  display: flex;
  align-items: center;
  gap: 0.4em;
  z-index: 2;
  letter-spacing: 0.01em;
  text-transform: capitalize;
}
.activity-badge.cause { background: #e74c3c; }
.activity-badge.task { background: #4a6fa5; }
.activity-badge.challenge { background: #f39c12; }
.activity-badge.volunteering { background: #2ecc71; }

.activity-content {
  padding: 1.3rem 1.2rem 1.2rem 1.2rem;
  display: flex;
  flex-direction: column;
  flex: 1;
}
.activity-header {
  font-size: 1.15rem;
  margin-bottom: 0.7rem;
  color: #2d3748;
  font-weight: 700;
  letter-spacing: 0.01em;
}
.activity-content p {
  color: #6b7280;
  margin-bottom: 1.2rem;
  font-size: 0.97rem;
  line-height: 1.6;
  flex-grow: 1;
}
.activity-meta {
  display: flex;
  gap: 1rem;
  margin-bottom: 1.1rem;
  font-size: 0.89rem;
  flex-wrap: wrap;
}
.meta-item {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  color: #6b7280;
}
.meta-item i {
  color: #4a6fa5;
}
.activity-impact {
  display: inline-flex;
  align-items: center;
  background: #f0f9ff;
  color: #4a6fa5;
  padding: 0.3rem 0.8rem;
  border-radius: 50px;
  font-size: 0.92em;
  font-weight: 600;
  margin-bottom: 1rem;
}
.activity-impact i {
  margin-right: 0.3rem;
}
.custom-map-marker {
  display: flex;
  justify-content: center;
  align-items: center;
}

/* Tarjeta de comunidad (usa los mismos estilos que activity-card) */
.community-badge {
  background: #4a6fa5;
  color: #fff;
  padding: 0.22em 1em;
  border-radius: 999px;
  font-size: 0.93em;
  font-weight: 600;
  box-shadow: 0 2px 8px rgba(44,62,80,0.08);
  display: flex;
  align-items: center;
  gap: 0.4em;
  z-index: 2;
  letter-spacing: 0.01em;
  text-transform: capitalize;
  position: absolute;
  top: 1rem;
  left: 1rem;
}

/* MAPA Y LEYENDA */
#profile-map {
  width: 100%;
  height: 400px;
  border-radius: 12px;
  margin-bottom: 1.5rem;
  box-shadow: 0 2px 10px rgba(0,0,0,0.08);
  background: #f8fafc;
  border: 1px solid #e2e8f0;
}
.map-section .section-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1.2rem;
  gap: 1.2rem;
}
.map-stats {
  display: flex;
  gap: 1.2rem;
  font-size: 1rem;
  color: #4a6fa5;
}
.map-legend {
  display: flex;
  gap: 1.2rem;
  margin-top: 1rem;
  font-size: 0.97rem;
}
.legend-item {
  display: flex;
  align-items: center;
  gap: 0.4rem;
}
.legend-color {
  display: inline-block;
  width: 16px;
  height: 16px;
  border-radius: 50%;
  margin-right: 0.3em;
}
.legend-color.cause { background: #e74c3c; }
.legend-color.task { background: #3498db; }
.legend-color.challenge { background: #f39c12; }
.legend-color.volunteering { background: #2ecc71; }
/* Marcador personalizado para el mapa */
.map-marker {
  display: flex;
  justify-content: center;
  align-items: center;
}

/* Responsive */
@media (max-width: 900px) {
  .profile-header { flex-direction: column; gap: 1.2rem; text-align: center; }
  .stats-section { flex-direction: column; gap: 1.2rem; }
  .activities-grid { grid-template-columns: 1fr; }
  .map-section { margin-top: 2rem; }
}
@media (max-width: 600px) {
  .profile-main-container { padding: 1.1rem 0.3rem; }
  .impact-score-section { padding: 1rem 0.3rem; }
  .stats-card { padding: 1rem 1.1rem; }
}
.section-header h3 {
  color: #4a6fa5;
  font-weight: 800;
  font-size: 1.45em; /* aumentado */
  letter-spacing: 0.01em;
  margin-bottom: 0;
}

/* Margen inferior para separar las tarjetas del mapa */
.activities-section {
  margin-bottom: 1cm;
}
  </style>
{% endblock %}

{% block content %}
<div class="profile-main-container">
  <!-- Header con foto y datos básicos -->
  <div class="profile-header">
    <div class="profile-photo-wrapper">
      <img class="profile-photo" src="/img/avatar-default.jpg" alt="Foto de perfil">
    </div>
    <div class="profile-info">
      <h2>Nombre Apellido</h2>
      <div class="profile-location"></div>
      <div class="profile-bio"></div>
      <div class="social-links">
        <a href="#"><i class="fab fa-linkedin"></i></a>
        <a href="#"><i class="fab fa-twitter"></i></a>
        <a href="#"><i class="fab fa-instagram"></i></a>
      </div>
    </div>
  </div>

  <!-- Sección de estadísticas principales -->
  <div class="stats-section">
    <div class="stats-card">
      <div class="stats-icon"><i class="fas fa-project-diagram"></i></div>
      <div class="stats-content">
        <div class="number" id="projects-counter">0</div>
        <div class="label">Proyectos</div>
      </div>
    </div>
    <div class="stats-card highlight">
      <div class="stats-icon"><i class="fas fa-users"></i></div>
      <div class="stats-content">
        <div class="number" id="impacted-counter">0</div>
        <div class="label">Personas impactadas</div>
      </div>
    </div>
    <div class="stats-card">
      <div class="stats-icon"><i class="fas fa-hand-holding-heart"></i></div>
      <div class="stats-content">
        <div class="number" id="donated-counter">0</div>
        <div class="label">Donado</div>
      </div>
    </div>
  </div>

  <!-- Barra de progreso de impacto -->
  <div class="impact-score-section">
    <div class="section-header">
      <h3>Tu impacto social</h3>
      <div class="impact-score-main">
        <span class="score" id="impact-score">0</span>
        <span class="score-label">Puntos</span>
        <span class="impact-badge" id="impact-level-badge">
          <i class="fas fa-tree" style="margin-right:0.4em;color:#fff;"></i>
          Forest
        </span>
      </div>
    </div>
    <div class="impact-score-bar-bg">
      <div class="impact-score-bar" id="impact-score-bar" style="width:0%"></div>
    </div>
    <div class="impact-level-info">
      <span id="impact-level">Nivel 1 - Seed</span>
      <span id="impact-score-details-text">0/500 puntos para el siguiente nivel</span>
    </div>
  </div>

  <!-- Filtros de actividades -->
  <div class="activities-filter">
    <button class="filter-btn active" data-filter="all">Todas</button>
    <button class="filter-btn" data-filter="cause"><i class="fas fa-heart"></i> Causas</button>
    <button class="filter-btn" data-filter="task"><i class="fas fa-tasks"></i> Tareas</button>
    <button class="filter-btn" data-filter="challenge"><i class="fas fa-bolt"></i> Retos</button>
    <button class="filter-btn" data-filter="volunteering"><i class="fas fa-hands-helping"></i> Voluntariados</button>
    <button class="filter-btn" data-filter="community"><i class="fas fa-users"></i> Comunidades</button>
  </div>

  <!-- Listado de actividades -->
  <div class="activities-section">
    <div class="section-header with-action">
      <h3>Tus actividades</h3>
      <div class="sort-options">
        <span>Ordenar por:</span>
        <select id="activities-sort">
          <option value="recent">Más recientes</option>
          <option value="oldest">Más antiguas</option>
          <option value="impact">Mayor impacto</option>
        </select>
      </div>
    </div>
    <div class="activities-grid" id="activities-grid"></div>
  </div>

   <!-- Mapa de impacto -->
  <div class="map-section">
    <div class="section-header with-stats">
      <h3>Tu mapa de impacto</h3>
      <div class="map-stats">
        <div class="stat-item"><i class="fas fa-city"></i> <span id="city-count">0</span> ciudades</div>
        <div class="stat-item"><i class="fas fa-globe"></i> <span id="country-count">0</span> países</div>
      </div>
    </div>
    <div id="profile-map"></div>
    <div class="map-legend">
      <div class="legend-item"><span class="legend-color cause"></span> Causas</div>
      <div class="legend-item"><span class="legend-color task"></span> Tareas</div>
      <div class="legend-item"><span class="legend-color challenge"></span> Retos</div>
      <div class="legend-item"><span class="legend-color volunteering"></span> Voluntariados</div>
    </div>
  </div>
</div>
{% endblock %}

{% block scripts %}
  {{ super() }}
  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
  <script>
    function waitForSupabase(callback) {
      if (window.supabase) {
        callback(window.supabase);
      } else {
        setTimeout(() => waitForSupabase(callback), 30);
      }
    }

    // --- Funciones auxiliares mejoradas ---
    function animateCounter(id, target, prefix = '', suffix = '', duration = 1200) {
      const el = document.getElementById(id);
      if (!el) return;
      let count = 0;
      const steps = 50;
      const step = Math.max(1, Math.ceil(target / steps));
      const intervalTime = Math.max(10, Math.floor(duration / (target / step)));
      const interval = setInterval(() => {
        count += step;
        if (count >= target) {
          el.textContent = prefix + target + suffix;
          clearInterval(interval);
        } else {
          el.textContent = prefix + count + suffix;
        }
      }, intervalTime);
    }

    const levels = [
      { name: "Seed", min: 0, max: 499, color: "#4CAF50", icon: "fa-seedling" },
      { name: "Sprout", min: 500, max: 999, color: "#8BC34A", icon: "fa-leaf" },
      { name: "Tree", min: 1000, max: 1999, color: "#FFC107", icon: "fa-tree" },
      { name: "Forest", min: 2000, max: 4999, color: "#FF9800", icon: "fa-forest" },
      { name: "Legend", min: 5000, max: 99999, color: "#F44336", icon: "fa-trophy" }
    ];

    function getLevel(score) {
      for (let i = levels.length - 1; i >= 0; i--) {
        if (score >= levels[i].min) {
          return { ...levels[i], idx: i };
        }
      }
      return { ...levels[0], idx: 0 };
    }

    function updateImpactScore(score) {
      const scoreElement = document.getElementById('impact-score');
      const levelElement = document.getElementById('impact-level');
      const badgeElement = document.getElementById('impact-level-badge');
      const barElement = document.getElementById('impact-score-bar');
      const detailsElement = document.getElementById('impact-score-details-text');
      
      if (!scoreElement || !levelElement || !barElement || !detailsElement) return;
      
      scoreElement.textContent = score;
      const level = getLevel(score);
      
      // Actualizar nivel y badge
      levelElement.innerHTML = `<i class="fas ${level.icon}"></i> Nivel ${level.idx + 1} - ${level.name}`;
      if (badgeElement) {
        badgeElement.textContent = level.name;
        badgeElement.style.background = level.name === "Forest"
          ? "linear-gradient(90deg,#FF9800,#4fc3a1)"
          : level.color;
        badgeElement.innerHTML = level.name === "Forest"
          ? '<i class="fas fa-tree" style="margin-right:0.4em;color:#fff;"></i>Forest'
          : level.name;
      }
      
      // Actualizar barra de progreso
      let percent = 100;
      if (level.max) {
        percent = Math.round(((score - level.min) / (level.max - level.min)) * 100);
        percent = Math.max(0, Math.min(percent, 100));
      }
      barElement.style.width = percent + '%';
      barElement.style.backgroundColor = level.color;
      
      // Actualizar texto de detalles
      detailsElement.textContent = percent >= 100
        ? `¡Has alcanzado el máximo de este nivel!`
        : `Te faltan ${level.max - score} puntos para el siguiente nivel.`;
    }

    function formatDate(dateString) {
      const options = { year: 'numeric', month: 'short', day: 'numeric' };
      return new Date(dateString).toLocaleDateString('es-ES', options);
    }

    // --- Fin funciones auxiliares ---

    waitForSupabase(async function(supabase) {
      try {
        // 1. Obtener usuario logueado
        const { data: { user }, error: authError } = await supabase.auth.getUser();
        if (authError || !user) {
          window.location.href = '/login?return=/profile';
          return;
        }

        // 2. Cargar perfil
        const { data: profile, error: profileError } = await supabase
          .from('profiles')
          .select('*')
          .eq('id', user.id)
          .single();

        if (!profileError && profile) {
          document.querySelector('.profile-photo').src = profile.photo_url || '/img/avatar-default.jpg';
          document.querySelector('.profile-info h2').textContent = `${profile.first_name || ''} ${profile.last_name || ''}`.trim();
          
          if (profile.country) {
            document.querySelector('.profile-location').innerHTML = `
              <i class="fas fa-map-marker-alt"></i> 
              ${[profile.city, profile.country].filter(Boolean).join(', ')}
            `;
          }
          
          document.querySelector('.profile-bio').textContent = profile.bio || '';
        }

        // 3. Cargar todas las acciones del usuario
        const [
          causesPromise, 
          tasksPromise, 
          challengesPromise, 
          volunteeringPromise
        ] = await Promise.allSettled([
          supabase.from('causes').select('id,title,description,city,country,lat,lng,photo_url,beneficiaries,raised,goal,created_at').eq('user_id', user.id),
          supabase.from('tasks').select('id,title,description,city,country,lat,lng,photo_url,beneficiaries,created_at').eq('user_id', user.id),
          supabase.from('challenges').select('id,title,description,city,country,lat,lng,photo_url,created_at').eq('user_id', user.id),
          supabase.from('volunteering').select('id,title,description,city,country,lat,lng,photo_url,volunteers_needed,created_at').eq('user_id', user.id)
        ]);

        // Procesar resultados
        const causes = Array.isArray(causesPromise.value?.data) ? causesPromise.value.data : [];
        const tasks = Array.isArray(tasksPromise.value?.data) ? tasksPromise.value.data : [];
        const challenges = Array.isArray(challengesPromise.value?.data) ? challengesPromise.value.data : [];
        const volunteering = Array.isArray(volunteeringPromise.value?.data) ? volunteeringPromise.value.data : [];

        // 3b. Cargar comunidades del usuario (miembro)
        const { data: memberCommunities } = await supabase
          .from('communities_members')
          .select('community_id')
          .eq('user_id', user.id);

        // 3c. Cargar comunidades creadas por el usuario
        const { data: createdCommunities } = await supabase
          .from('communities')
          .select('id,name,description,photo_url')
          .eq('creator_id', user.id);

        // Unir y eliminar duplicados por id
        const allCommunities = [
          ...(memberCommunities?.map(c => c.community) || []),
          ...(createdCommunities || [])
        ].filter((c, i, arr) => c && arr.findIndex(x => x.id === c.id) === i);

        // Renderizar comunidades
        function renderCommunities() {
          const grid = document.getElementById('communities-grid');
          if (!grid) return;
          if (!allCommunities || allCommunities.length === 0) {
            grid.innerHTML = `<div class="no-activities" style="grid-column:1/-1;">
              <i class="fas fa-users"></i>
              </div>`;
            return;
          }
          grid.innerHTML = allCommunities.map(c => `
            <div class="activity-card">
              <div class="activity-image" style="background-image: url('${c.photo_url || '/img/community-default.jpg'}')">
                <span class="community-badge">
                  <i class="fas fa-users"></i> Comunidad
                </span>
              </div>
              <div class="activity-content">
                <h3 class="activity-header">${c.name || 'Sin nombre'}</h3>
                <p>${c.description || 'Sin descripción'}</p>
              </div>
              <a href="/communities/${c.id}" class="activity-link">Ver detalles</a>
            </div>
          `).join('');
        }
        renderCommunities();

        // 4. Calcular estadísticas
        const totalProjects = causes.length + tasks.length + challenges.length + volunteering.length;
        const totalImpacted = [...causes, ...tasks, ...volunteering].reduce((sum, item) => sum + (item.beneficiaries || item.volunteers_needed || 0), 0);
        const totalDonated = causes.reduce((sum, c) => sum + (c.raised || 0), 0);

        // Actualizar contadores con animación
        animateCounter('projects-counter', totalProjects);
        animateCounter('impacted-counter', totalImpacted);
        animateCounter('donated-counter', totalDonated, '', ' €');

        // Calcular y mostrar puntuación de impacto
        const impactScore = totalImpacted + totalProjects * 10 + totalDonated;
        updateImpactScore(impactScore);

        // 5. Preparar datos para actividades y mapa
        const allActivities = [
          ...causes.map(c => ({
            type: 'cause',
            icon: 'fa-heart',
            color: '#e74c3c',
            ...c,
            impact: (c.beneficiaries || 0) + (c.raised || 0),
            formattedDate: formatDate(c.created_at)
          })),
          ...tasks.map(t => ({
            type: 'task',
            icon: 'fa-tasks',
            color: '#3498db',
            ...t,
            impact: t.beneficiaries || 0,
            formattedDate: formatDate(t.created_at)
          })),
          ...challenges.map(ch => ({
            type: 'challenge',
            icon: 'fa-bolt',
            color: '#f39c12',
            ...ch,
            impact: 50, // Valor base para retos
            formattedDate: formatDate(ch.created_at)
          })),
          ...volunteering.map(v => ({
            type: 'volunteering',
            icon: 'fa-hands-helping',
            color: '#2ecc71',
            ...v,
            impact: v.volunteers_needed || 0,
            formattedDate: formatDate(v.created_at)
          }))
        ].sort((a, b) => new Date(b.created_at) - new Date(a.created_at));

        console.log('Actividades para el mapa:', allActivities);
        allActivities.forEach(a => console.log(a.title, a.lat, a.lng));

        // 6. Renderizar actividades
        function renderActivities(filter = 'all', sort = 'recent') {
          const grid = document.getElementById('activities-grid');
          if (!grid) return;

          let activitiesToShow = [...allActivities];

          // Si el filtro es "community", muestra solo comunidades
          if (filter === 'community') {
            if (!allCommunities || allCommunities.length === 0) {
              grid.innerHTML = `
                <div class="no-activities" style="grid-column:1/-1; text-align:center; padding:2.5em 1em;">
                  <i class="fas fa-users" style="font-size:2.5em; color:#4a6fa5; margin-bottom:0.5em;"></i>
                  <h4 style="color:#4a6fa5; font-size:1.3em; margin-bottom:0.3em;">Aún no formas parte de ninguna comunidad</h4>
                  <p style="color:#6b7280; font-size:1em;">Únete a una comunidad para conectar con personas afines y participar en proyectos colectivos.</p>
                </div>
              `;
              return;
            }
            grid.innerHTML = allCommunities.map(c => `
              <div class="activity-card">
                <div class="activity-image" style="background-image: url('${c.photo_url || '/img/community-default.jpg'}')">
                  <span class="community-badge">
                    <i class="fas fa-users"></i> Comunidad
                  </span>
                </div>
                <div class="activity-content">
                  <h3 class="activity-header">${c.name || 'Sin nombre'}</h3>
                  <p>${c.description || 'Sin descripción'}</p>
                </div>
                <a href="/communities/${c.id}" class="activity-link">Ver más</a>
              </div>
            `).join('');
            return;
          }

          // En "Todas", no mostrar mensaje si no hay comunidades
          if (filter === 'all') {
            // No filtrar nada, muestra todo lo que haya en allActivities (incluidas comunidades si existen)
          } else if (filter !== 'all') {
            activitiesToShow = activitiesToShow.filter(a => a.type === filter);
          }

          grid.innerHTML = activitiesToShow.map(activity => {
            const location = activity.city && activity.country ? `${activity.city}${activity.country ? ', ' + activity.country : ''}` : 'Sin ubicación';

            // Causa
            if (activity.type === 'cause') {
              const meta = Number(activity.goal) > 0 ? Number(activity.goal) : 1000;
              const recaudado = Number(activity.raised) >= 0 ? Number(activity.raised) : 0;
              const porcentaje = meta ? Math.min(100, Math.round((recaudado / meta) * 100)) : 0;

              return `
                <div class="activity-card" data-type="cause">
                  <div class="activity-image" style="background-image: url('${activity.photo_url || '/img/causa-default.jpg'}')">
                    <span class="activity-badge cause">
                      <i class="fas fa-heart"></i> Causa
                    </span>
                  </div>
                  <div class="activity-content">
                    <h3 class="activity-header">${activity.title || 'Sin título'}</h3>
                    <p>${activity.description || 'No hay descripción disponible'}</p>
                    <div class="activity-meta">
                      <span class="meta-item"><i class="fas fa-map-marker-alt"></i> ${location}</span>
                      <span class="meta-item"><i class="fas fa-calendar-alt"></i> ${activity.formattedDate}</span>
                    </div>
                    <div class="activity-impact">
                      <i class="fas fa-users"></i> ${activity.beneficiaries || 0} beneficiarios
                    </div>
                    <div class="progress-bar">
                      <div class="progress-fill" style="width:${porcentaje}%"></div>
                    </div>
                    <div class="progress-info">
                      <span>${porcentaje}% completado</span>
                      <span>${recaudado} € de ${meta} €</span>
                    </div>
                  </div>
                  <a href="/causes/${activity.id}" class="activity-link">Ver más</a>
                </div>
              `;
            }

            // Tarea
            if (activity.type === 'task') {
              return `
                <div class="activity-card" data-type="task">
                  <div class="activity-image" style="background-image: url('${activity.photo_url || '/img/task-default.jpg'}')">
                    <span class="activity-badge task">
                      <i class="fas fa-tasks"></i> Tarea
                    </span>
                  </div>
                  <div class="activity-content">
                    <h3 class="activity-header">${activity.title || 'Sin título'}</h3>
                    <p>${activity.description || 'No hay descripción disponible'}</p>
                    <div class="activity-meta">
                      <span class="meta-item"><i class="fas fa-map-marker-alt"></i> ${location}</span>
                      <span class="meta-item"><i class="fas fa-calendar-alt"></i> ${activity.formattedDate}</span>
                    </div>
                    <div class="activity-impact">
                      <i class="fas fa-users"></i> ${activity.beneficiaries || 0} beneficiarios
                    </div>
                  </div>
                  <a href="/tasks/${activity.id}" class="activity-link">Ver más</a>
                </div>
              `;
            }

            // Reto
            if (activity.type === 'challenge') {
              return `
                <div class="activity-card" data-type="challenge">
                  <div class="activity-image" style="background-image: url('${activity.photo_url || '/img/challenge-default.jpg'}')">
                    <span class="activity-badge challenge">
                      <i class="fas fa-bolt"></i> Reto
                    </span>
                  </div>
                  <div class="activity-content">
                    <h3 class="activity-header">${activity.title || 'Sin título'}</h3>
                    <p>${activity.description || 'No hay descripción disponible'}</p>
                    <div class="activity-meta">
                      <span class="meta-item"><i class="fas fa-map-marker-alt"></i> ${location}</span>
                      <span class="meta-item"><i class="fas fa-calendar-alt"></i> ${activity.formattedDate}</span>
                    </div>
                    <div class="activity-impact">
                      <i class="fas fa-bullseye"></i> Impacto: 50 pts
                    </div>
                  </div>
                  <a href="/challenges/${activity.id}" class="activity-link">Ver más</a>
                </div>
              `;
            }

            // Voluntariado
            if (activity.type === 'volunteering') {
              return `
                <div class="activity-card" data-type="volunteering">
                  <div class="activity-image" style="background-image: url('${activity.photo_url || '/img/volunteer-default.jpg'}')">
                    <span class="activity-badge volunteering">
                      <i class="fas fa-hands-helping"></i> Voluntariado
                    </span>
                  </div>
                  <div class="activity-content">
                    <h3 class="activity-header">${activity.title || 'Sin título'}</h3>
                    <p>${activity.description || 'No hay descripción disponible'}</p>
                    <div class="activity-meta">
                      <span class="meta-item"><i class="fas fa-map-marker-alt"></i> ${location}</span>
                      <span class="meta-item"><i class="fas fa-calendar-alt"></i> ${activity.formattedDate}</span>
                    </div>
                    <div class="activity-impact">
                      <i class="fas fa-users"></i> ${activity.volunteers_needed || 0} voluntarios necesarios
                    </div>
                  </div>
                  <a href="/volunteering/${activity.id}" class="activity-link">Ver más</a>
                </div>
              `;
            }

            // Comunidad
            if (activity.type === 'community') {
              return `
                <div class="activity-card">
                  <div class="activity-image" style="background-image: url('${activity.photo_url || '/img/community-default.jpg'}')">
                    <span class="community-badge">
                      <i class="fas fa-users"></i> Comunidad
                    </span>
                  </div>
                  <div class="activity-content">
                    <h3 class="activity-header">${activity.name || 'Sin nombre'}</h3>
                    <p>${activity.description || 'Sin descripción'}</p>
                  </div>
                  <a href="/communities/${activity.id}" class="activity-link">Ver más</a>
                </div>
              `;
            }

            return '';
          }).join('');

          if (activitiesToShow.length === 0) {
            grid.innerHTML = `
              <div class="no-activities" style="grid-column:1/-1;">
                <i class="fas fa-inbox"></i>
                <p>No hay actividades para mostrar</p>
              </div>
            `;
          }
        }

        // Event listeners para filtros
        document.querySelectorAll('.filter-btn').forEach(btn => {
          btn.addEventListener('click', function() {
            document.querySelector('.filter-btn.active').classList.remove('active');
            this.classList.add('active');
            renderActivities(this.dataset.filter, document.getElementById('activities-sort').value);
          });
        });

        // Event listener para ordenar
        document.getElementById('activities-sort')?.addEventListener('change', function() {
          const activeFilter = document.querySelector('.filter-btn.active').dataset.filter;
          renderActivities(activeFilter, this.value);
        });

        // Renderizar inicialmente
        renderActivities();

        // 7. Configurar mapa de impacto
        const markerIcons = {
          cause: new L.Icon({
            iconUrl: 'https://cdn.jsdelivr.net/gh/pointhi/leaflet-color-markers@master/img/marker-icon-red.png',
            shadowUrl: 'https://cdn.jsdelivr.net/gh/pointhi/leaflet-color-markers@master/img/marker-shadow.png',
            iconSize: [18, 30],
            iconAnchor: [9, 30],
            popupAnchor: [1, -24],
            shadowSize: [30, 30]
          }),
          task: new L.Icon({
            iconUrl: 'https://cdn.jsdelivr.net/gh/pointhi/leaflet-color-markers@master/img/marker-icon-blue.png',
            shadowUrl: 'https://cdn.jsdelivr.net/gh/pointhi/leaflet-color-markers@master/img/marker-shadow.png',
            iconSize: [18, 30],
            iconAnchor: [9, 30],
            popupAnchor: [1, -24],
            shadowSize: [30, 30]
          }),
          challenge: new L.Icon({
            iconUrl: 'https://cdn.jsdelivr.net/gh/pointhi/leaflet-color-markers@master/img/marker-icon-yellow.png',
            shadowUrl: 'https://cdn.jsdelivr.net/gh/pointhi/leaflet-color-markers@master/img/marker-shadow.png',
            iconSize: [18, 30],
            iconAnchor: [9, 30],
            popupAnchor: [1, -24],
            shadowSize: [30, 30]
          }),
          volunteering: new L.Icon({
            iconUrl: 'https://cdn.jsdelivr.net/gh/pointhi/leaflet-color-markers@master/img/marker-icon-green.png',
            shadowUrl: 'https://cdn.jsdelivr.net/gh/pointhi/leaflet-color-markers@master/img/marker-shadow.png',
            iconSize: [18, 30],
            iconAnchor: [9, 30],
            popupAnchor: [1, -24],
            shadowSize: [30, 30]
          })
        };
     
        const mapElement = document.getElementById('profile-map');
        if (mapElement) {
          // Estadísticas de ubicación
          const allLocations = [
            ...causes.map(c => ({ city: c.city, country: c.country })),
            ...tasks.map(t => ({ city: t.city, country: t.country })),
            ...challenges.map(ch => ({ city: ch.city, country: ch.country })),
            ...volunteering.map(v => ({ city: v.city, country: v.country }))
          ].filter(loc => loc.city || loc.country);

          const uniqueCities = [...new Set(allLocations.map(loc => loc.city).filter(Boolean))];
          const uniqueCountries = [...new Set(allLocations.map(loc => loc.country).filter(Boolean))];
          
          document.getElementById('city-count').textContent = uniqueCities.length;
          document.getElementById('country-count').textContent = uniqueCountries.length;

          // Inicializar mapa
          const map = L.map('profile-map').setView([30, 0], 2);
          L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; OpenStreetMap contributors'
          }).addTo(map);

          // Agregar marcadores para todas las actividades con ubicación
          const markers = [];
          
          allActivities.forEach(activity => {
            // Convertir lat/lng a números si son strings
            const lat = typeof activity.lat === 'string' ? parseFloat(activity.lat) : activity.lat;
            const lng = typeof activity.lng === 'string' ? parseFloat(activity.lng) : activity.lng;

            // Verificar que sean números válidos
            if (typeof lat === 'number' && typeof lng === 'number' && !isNaN(lat) && !isNaN(lng)) {
              const marker = L.marker([lat, lng], {
                icon: markerIcons[activity.type] || markerIcons.cause
              }).addTo(map);

              marker.bindPopup(`
                <div class="map-popup">
                  <div class="popup-header" style="background-color: ${activity.color}">
                    <i class="fas ${activity.icon}"></i>
                    <span>${
                      activity.type === 'cause' ? 'Causa' :
                      activity.type === 'task' ? 'Tarea' :
                      activity.type === 'challenge' ? 'Reto' : 'Voluntariado'
                    }</span>
                  </div>
                  <div class="popup-content">
                    <h4>${activity.title || 'Sin título'}</h4>
                    <p><i class="fas fa-map-marker-alt"></i> ${activity.city || 'Sin ubicación'}${activity.country ? ', ' + activity.country : ''}</p>
                    <p><i class="fas fa-calendar-alt"></i> ${activity.formattedDate}</p>
                    <a href="/${activity.type}s/${activity.id}" class="popup-link">Ver detalles</a>
                  </div>
                </div>
              `);
            }
          });

          // Ajustar vista del mapa si hay marcadores
          if (markers.length > 0) {
            const group = new L.featureGroup(markers);
            map.fitBounds(group.getBounds().pad(0.2));
          }
        }

      } catch (error) {
        console.error('Error cargando perfil:', error);
        const container = document.querySelector('.profile-main-container');
        if (container) {
          container.innerHTML = `
            <div class="error-message">
              <i class="fas fa-exclamation-triangle"></i>
              <h2>Error al cargar el perfil</h2>
              <p>Por favor, intenta recargar la página o contacta con soporte.</p>
              <button onclick="window.location.reload()">Recargar página</button>
            </div>
          `;
        }
      }
    });
  </script>
{% endblock %}

==== C:\Users\gabi2\Desktop\Solidarity-web\views\ranking\index.njk ====
<!-- filepath: c:\Users\gabi2\Desktop\Solidarity-web\views\ranking\index.njk -->
{% extends "layout.njk" %}

{% block title %}Ranking Solidario | Solidarity{% endblock %}

{% block head %}
  {{ super() }}
  <style>
    /* SOLO estilos específicos de ranking, no navbar ni footer */
    .ranking-container {
      max-width: 1200px;
      margin: 2rem auto;
      padding: 0 1rem;
    }
    .ranking-header {
      text-align: center;
      margin-bottom: 2rem;
    }
    .ranking-header h1 {
      font-size: 2.2rem;
      color: var(--primary, #4a6fa5);
      margin-bottom: 0.5rem;
    }
    .ranking-header p {
      color: #666;
      max-width: 700px;
      margin: 0 auto;
    }
    .league-system {
      display: flex;
      justify-content: center;
      gap: 1rem;
      margin-bottom: 2rem;
      flex-wrap: wrap;
    }
    .league-card {
      background: white;
      border-radius: 10px;
      padding: 1.5rem;
      width: 180px;
      text-align: center;
      box-shadow: 0 4px 6px rgba(0,0,0,0.05);
      transition: transform 0.3s, box-shadow 0.3s;
      cursor: pointer;
      border: 3px solid transparent;
    }
    .league-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 15px rgba(0,0,0,0.1);
    }
    .league-card.active {
      border-color: var(--accent, #eab308);
    }
    .league-icon {
      font-size: 2.5rem;
      margin-bottom: 0.5rem;
    }
    .league-1 .league-icon { color: var(--gold, #ffd700); }
    .league-2 .league-icon { color: var(--silver, #c0c0c0); }
    .league-3 .league-icon { color: var(--bronze, #cd7f32); }
    .league-4 .league-icon { color: #4a6fa5; }
    .league-5 .league-icon { color: #6b7280; }
    .league-card h3 {
      margin-bottom: 0.5rem;
      color: var(--text, #333);
    }
    .league-card p {
      font-size: 0.9rem;
      color: #666;
    }
    .ranking-tabs {
      display: flex;
      justify-content: center;
      margin-bottom: 1.5rem;
      border-bottom: 1px solid #eee;
    }
    .ranking-tab {
      padding: 0.8rem 1.5rem;
      cursor: pointer;
      font-weight: 500;
      color: #666;
      border-bottom: 3px solid transparent;
      transition: all 0.3s;
      background: none;
      border: none;
      outline: none;
    }
    .ranking-tab.active {
      color: var(--primary, #4a6fa5);
      border-bottom-color: var(--primary, #4a6fa5);
    }
    .subranking-tabs {
      display: flex;
      gap: 0.7rem;
      margin-bottom: 1.2rem;
      justify-content: center;
    }
    .subranking-tab {
      background: #f1f5f9;
      color: var(--primary, #4a6fa5);
      border-radius: 999px;
      padding: 0.4rem 1.1rem;
      font-size: 1rem;
      font-weight: 600;
      border: none;
      cursor: pointer;
      transition: background 0.18s, color 0.18s;
      outline: none;
    }
    .subranking-tab.active, .subranking-tab:hover {
      background: var(--accent, #eab308);
      color: #fff;
    }
    .ranking-info {
      font-size: 1.05rem;
      color: #4b5563;
      margin-bottom: 1.2rem;
      background: #f8fafc;
      border-radius: 8px;
      padding: 0.7rem 1.1rem;
      text-align: center;
    }
    .ranking-table {
      background: white;
      border-radius: 10px;
      overflow: hidden;
      box-shadow: 0 4px 6px rgba(0,0,0,0.05);
      margin-bottom: 2rem;
    }
    table {
      width: 100%;
      border-collapse: collapse;
    }
    th {
      background-color: var(--primary, #4a6fa5);
      color: white;
      padding: 1rem;
      text-align: left;
    }
    td {
      padding: 1rem;
      border-bottom: 1px solid #eee;
    }
    tr:last-child td {
      border-bottom: none;
    }
    tr:hover {
      background-color: #f8f9fa;
    }
    .user-cell {
      display: flex;
      align-items: center;
      gap: 0.8rem;
    }
    .user-avatar-sm, .team-avatar-sm {
      width: 36px;
      height: 36px;
      border-radius: 50%;
      object-fit: cover;
      background-color: #f0f0f0;
      display: flex;
      align-items: center;
      justify-content: center;
      color: var(--primary, #4a6fa5);
      font-size: 1rem;
    }
    .rank {
      font-weight: 700;
      color: var(--primary, #4a6fa5);
      width: 30px;
      display: inline-block;
      text-align: center;
    }
    .rank-1 { color: var(--gold, #ffd700); }
    .rank-2 { color: var(--silver, #c0c0c0); }
    .rank-3 { color: var(--bronze, #cd7f32); }
    .score {
      font-weight: 600;
      color: var(--secondary, #3da58a);
    }
    .movement {
      display: inline-block;
      width: 20px;
      text-align: center;
    }
    .up { color: #4CAF50; }
    .down { color: #e74c3c; }
    .same { color: #666; }
    .league-info {
      background: white;
      border-radius: 10px;
      padding: 2.2rem 1.5rem 2.2rem 1.5rem;
      margin-top: 2rem;
      box-shadow: 0 4px 16px rgba(0,0,0,0.07);
      text-align: center;
      max-width: 420px;
      margin-left: auto;
      margin-right: auto;
    }
    .league-info .user-cell {
      flex-direction: column;
      align-items: center;
      gap: 0.7rem;
      display: flex;
      margin-bottom: 1.1rem;
    }
    .user-avatar-lg {
      width: 80px;
      height: 80px;
      border-radius: 50%;
      object-fit: cover;
      border: 4px solid var(--primary, #4a6fa5);
      box-shadow: 0 2px 8px rgba(74,111,165,0.10);
      background: #f0f0f0;
      margin-bottom: 0.5rem;
    }
    #user-league {
      font-size: 1.05rem;
      color: #374151;
      margin-bottom: 0.4rem;
    }
    #user-progress {
      font-size: 1.08rem;
      color: #3da58a;
      margin-bottom: 0.7rem;
    }
    .progreso-title {
      color: var(--primary, #4a6fa5);
      font-size: 1.5rem;
      font-weight: 800;
      margin-bottom: 1.2rem;
      margin-top: 0.5rem;
      text-align: center;
      letter-spacing: 0.01em;
    }
    .user-avatar-xl {
      width: 100px;
      height: 100px;
      border-radius: 50%;
      object-fit: cover;
      border: 4px solid var(--primary, #4a6fa5);
      box-shadow: 0 2px 8px rgba(74,111,165,0.10);
      background: #f0f0f0;
      margin-bottom: 0.5rem;
    }
    .user-league-badge {
      display: inline-block;
      margin-top: 0.5rem;
      padding: 0.35em 1em;
      border-radius: 999px;
      font-weight: 700;
      font-size: 1.08em;
      color: #fff;
      background: linear-gradient(90deg, #4a6fa5 60%, #3da58a 100%);
      box-shadow: 0 2px 8px rgba(74,111,165,0.08);
    }
    .user-league-badge.bronce {
      background: linear-gradient(90deg, #cd7f32 60%, #b87333 100%);
    }
    .user-league-badge.plata {
      background: linear-gradient(90deg, #bfc1c2 60%, #e0e0e0 100%);
      color: #374151;
    }
    .user-league-badge.oro {
      background: linear-gradient(90deg, #ffd700 60%, #ffec8b 100%);
      color: #7c6f00;
    }
    .user-league-badge.platino {
      background: linear-gradient(90deg, #b3e0ff 60%, #c0c0c0 100%);
      color: #2a4a5c;
    }
    .user-league-badge.diamante {
      background: linear-gradient(90deg, #00c3ff 60%, #ffff1c 100%);
      color: #1a3a4a;
    }
    .progress-container {
      margin: 1.2rem 0 0.7rem 0;
      width: 100%;
    }
    .progress-bar-bg {
      background: #e5e7eb;
      border-radius: 20px;
      height: 18px;
      position: relative;
      width: 100%;
      margin: 0 auto;
      overflow: hidden;
    }
    .progress-bar {
      height: 100%;
      background: linear-gradient(90deg, var(--secondary, #3da58a), var(--primary, #4a6fa5));
      border-radius: 20px;
      transition: width 0.5s;
    }
    .progress-label {
      position: absolute;
      top: 0;
      left: 50%;
      transform: translateX(-50%);
      font-size: 0.98em;
      color: #222;
      font-weight: 600;
      height: 100%;
      display: flex;
      align-items: center;
    }
    .modal {
      display: none;
      position: fixed;
      z-index: 9999;
      left: 0; top: 0;
      width: 100vw; height: 100vh;
      background: rgba(0,0,0,0.35);
      align-items: center;
      justify-content: center;
    }
    .modal.active, .modal[style*="display: block"] {
      display: flex !important;
    }
    .modal-content {
      background: #fff;
      border-radius: 18px;
      max-width: 480px;
      width: 95vw;
      padding: 2.5rem 2.5rem 2rem 2.5rem;
      box-shadow: 0 8px 32px rgba(74,111,165,0.13);
      position: relative;
      border: 2.5px solid var(--primary,#4a6fa5);
      font-family: inherit;
      animation: fadeIn 0.2s;
    }
    @keyframes fadeIn {
      from { opacity: 0; transform: scale(0.97);}
      to { opacity: 1; transform: scale(1);}
    }
    @media (max-width: 600px) {
      .league-info {
        max-width: 98vw;
        padding: 1.2rem 0.5rem;
      }
      .user-avatar-lg {
        width: 60px;
        height: 60px;
      }
      .user-avatar-xl { width: 70px; height: 70px; }
    }
    @media (max-width: 768px) {
      .league-system { flex-direction: column; align-items: center; }
      .league-card { width: 100%; max-width: 300px; }
      table { display: block; overflow-x: auto; }
    }
  </style>
{% endblock %}

{% block content %}
<main class="ranking-container">
    <div class="ranking-header">
        <h1><i class="fas fa-trophy"></i> Ranking Solidario</h1>
        <p>Descubre tu posición y compite por alcanzar la cima. Los rankings se actualizan semanalmente según tu impacto social.</p>
    </div>
    <!-- League System -->
    <div class="league-system">
        <div class="league-card league-1 active" onclick="showLeague(1)">
            <i class="fas fa-crown league-icon"></i>
            <h3>Liga Diamante</h3>
            <p>4,000+ pts</p>
        </div>
        <div class="league-card league-2" onclick="showLeague(2)">
            <i class="fas fa-gem league-icon"></i>
            <h3>Liga Platino</h3>
            <p>3,000-3,999 pts</p>
        </div>
        <div class="league-card league-3" onclick="showLeague(3)">
            <i class="fas fa-award league-icon"></i>
            <h3>Liga Oro</h3>
            <p>2,000-2,999 pts</p>
        </div>
        <div class="league-card league-4" onclick="showLeague(4)">
            <i class="fas fa-star league-icon"></i>
            <h3>Liga Plata</h3>
            <p>1,000-1,999 pts</p>
        </div>
        <div class="league-card league-5" onclick="showLeague(5)">
            <i class="fas fa-seedling league-icon"></i>
            <h3>Liga Bronce</h3>
            <p>0-999 pts</p>
        </div>
    </div>
    <!-- Ranking Tabs -->
    <div class="ranking-tabs">
        <button class="ranking-tab active" data-tab="individual">Individual</button>
        <button class="ranking-tab" data-tab="comunidades">Comunidades</button>
        <button class="btn btn-info" id="open-score-system" type="button" style="margin-left:1rem;">
            <i class="fas fa-info-circle"></i> Sistema de puntuación
        </button>
    </div>
    <!-- Subtabs para Individual -->
    <div id="subranking-tabs" style="display:block;">
      <div class="subranking-tabs">
        <button class="subranking-tab active" data-type="historico">Ranking histórico</button>
        <button class="subranking-tab" data-type="dinamico">Ranking dinámico semanal</button>
      </div>
      <div class="ranking-info" id="ranking-info">
        <b>Ranking histórico:</b> Acumula todos los puntos de impacto desde que te registraste.<br>
        <b>Ranking dinámico:</b> Se reinicia cada semana. Sube o baja de liga según tu puntuación semanal. ¡Los 10 mejores de cada liga ascienden y los 10 últimos descienden!
      </div>
    </div>
    <!-- Individual Ranking Table -->
    <div class="ranking-table" id="individual-table">
        <table>
            <thead>
                <tr>
                    <th>#</th>
                    <th>Usuario</th>
                    <th>Puntos</th>
                    <th>Cambio</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody id="individual-ranking">
                <!-- Filled by JavaScript -->
            </tbody>
        </table>
    </div>
    <!-- Communities Ranking Table (hidden by default) -->
    <div class="ranking-table" id="comunidades-table" style="display: none;">
        <table>
            <thead>
                <tr>
                    <th>#</th>
                    <th>Comunidad</th>
                    <th>Puntos</th>
                    <th>Beneficiarios</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody id="communities-ranking">
                <!-- Filled by JavaScript -->
            </tbody>
        </table>
    </div>
    <!-- Your League Info -->
    <div class="league-info">
        <h3 class="progreso-title"><i class="fas fa-shield-alt"></i> Tu Progreso</h3>
        <div class="user-cell">
            <img id="user-photo" src="/img/avatar-default.jpg" class="user-avatar-xl">
            <div style="margin-top: 0.7rem;">
                <span id="user-name"></span>
                <div id="user-league" class="user-league-badge"></div>
            </div>
        </div>
        <div class="progress-container">
            <div class="progress-bar-bg">
                <div class="progress-bar" style="width: 0%"></div>
                <div id="progress-label" class="progress-label"></div>
            </div>
        </div>
        <p id="user-progress"></p>
        <p style="color:#666;">Próxima actualización del ranking: <strong id="next-update"></strong></p>
        <div style="margin-top: 1.5rem;">
            <button class="btn btn-primary"><i class="fas fa-bullhorn"></i> Compartir</button>
            <button class="btn btn-outline"><i class="fas fa-trophy"></i> Ver Logros</button>
        </div>
    </div>
</main>

<!-- Modal Sistema de Puntuación -->
<div id="score-system-modal" class="modal" style="display:none;">
  <div class="modal-content" style="padding:2.5rem 2.5rem 2rem 2.5rem; border-radius:18px; max-width:480px; border:2.5px solid var(--primary,#4a6fa5); box-shadow:0 8px 32px rgba(74,111,165,0.13); font-family:inherit;">
    <span class="close-modal" id="close-score-system" style="top:16px; right:22px; color:var(--primary,#4a6fa5); font-size:2.2rem;">&times;</span>
    <div style="text-align:center;">
      <i class="fas fa-star" style="color:var(--accent,#eab308); font-size:2.3rem; margin-bottom:0.5rem;"></i>
      <h2 style="color:var(--primary,#4a6fa5); font-size:1.6rem; margin-bottom:1.2rem; font-weight:800;">Sistema de Puntuación Solidarity</h2>
    </div>
    <ul style="font-size:1.13em;line-height:1.8; color:#374151; margin-bottom:1.2rem; padding-left:1.2em;">
      <li><b style="color:var(--accent,#eab308);">+100 puntos</b> al registrarte por primera vez.</li>
      <li><b style="color:var(--accent,#eab308);">+5 puntos</b> por cada día que hagas login.</li>
      <li><b style="color:var(--accent,#eab308);">+50 puntos</b> por hacer login 7 días seguidos.</li>
      <li><b style="color:var(--accent,#eab308);">+50 puntos</b> por cada causa, tarea, reto o voluntariado que publiques.</li>
      <li><b style="color:var(--accent,#eab308);">Puntos variables</b> al unirte a una causa, reto, tarea o voluntariado (según lo definido al crearla).</li>
      <li><b style="color:var(--accent,#eab308);">+5 puntos</b> por cada euro donado a una causa.</li>
      <li><b style="color:var(--accent,#eab308);">+5 puntos</b> cada vez que compartas una causa, tarea, reto, voluntariado o comunidad en redes sociales o apps externas.</li>
    </ul>
    <div style="background:#f8fafc; border-radius:8px; padding:0.8em 1em; color:#4a6fa5; font-size:1em; display:flex; align-items:center; gap:0.7em;">
      <i class="fas fa-info-circle" style="font-size:1.2em; color:var(--primary,#4a6fa5);"></i>
      <span>Los puntos se suman automáticamente y afectan tu posición en el ranking.</span>
    </div>
  </div>
</div>
{% endblock %}

{% block scripts %}
{{ super() }}
<script>
async function fetchRankingData() {
  // Ranking histórico: suma total de puntos de impacto
  const { data: usersHistorico, error: errorHistorico } = await supabase
    .from('profiles')
    .select('id, username, photo_url, impact_points, actions_count')
    .order('impact_points', { ascending: false })
    .limit(100);

  // Ranking dinámico: puntos de la semana (requiere campo semanal en tu BD)
  const { data: usersDinamico, error: errorDinamico } = await supabase
    .from('profiles')
    .select('id, username, photo_url, weekly_points, actions_count')
    .order('weekly_points', { ascending: false })
    .limit(100);

  return { usersHistorico, usersDinamico };
}

function getLeague(points) {
  if (points >= 4000) return { name: "Diamante", idx: 1 };
  if (points >= 3000) return { name: "Platino", idx: 2 };
  if (points >= 2000) return { name: "Oro", idx: 3 };
  if (points >= 1000) return { name: "Plata", idx: 4 };
  return { name: "Bronce", idx: 5 };
}

function renderIndividualRanking(users, type = "historico", currentUserId = null) {
  const tbody = document.getElementById('individual-ranking');
  tbody.innerHTML = '';
  if (!Array.isArray(users)) return;
  users.forEach((user, index) => {
    const points = type === "dinamico"
      ? (user.weekly_points ?? 0)
      : (user.impact_points ?? 0);
    const name = user.username ?? 'Usuario';
    const avatar = user.photo_url || '/img/avatar-default.jpg';
    const actions = user.actions_count ?? 0;
    tbody.innerHTML += `
      <tr${user.id === currentUserId ? ' style="background:#e6f7f1;"' : ''}>
        <td><span class="rank">${index + 1}</span></td>
        <td>
          <div class="user-cell">
            <img src="${avatar}" class="user-avatar-sm">
            <span>${name}</span>
          </div>
        </td>
        <td class="score">${points.toLocaleString()}</td>
        <td>-</td>
        <td>${actions}</td>
      </tr>
    `;
  });
}

function renderUserLeague(user) {
  const userPhoto = document.getElementById('user-photo');
  const userName = document.getElementById('user-name');
  const userLeague = document.getElementById('user-league');
  const progressBar = document.querySelector('.progress-bar');
  const progressLabel = document.getElementById('progress-label');
  const userProgress = document.getElementById('user-progress');

  if (!userPhoto || !userName || !userLeague || !progressBar || !progressLabel || !userProgress) return;

  if (!user) {
    userPhoto.src = '/img/avatar-default.jpg';
    userName.textContent = 'Inicia sesión para ver tu progreso';
    userLeague.textContent = '';
    userLeague.className = 'user-league-badge';
    progressBar.style.width = '0%';
    progressLabel.textContent = '';
    userProgress.innerHTML = '';
    return;
  }

  const points = user.impact_points ?? 0;
  const league = getLeague(points);
  const avatar = user.photo_url || '/img/avatar-default.jpg';
  const name = user.username ?? 'Usuario';

  userPhoto.src = avatar;
  userName.textContent = name;

  // Liga visual
  let leagueClass = '';
  switch (league.name.toLowerCase()) {
    case 'bronce': leagueClass = 'bronce'; break;
    case 'plata': leagueClass = 'plata'; break;
    case 'oro': leagueClass = 'oro'; break;
    case 'platino': leagueClass = 'platino'; break;
    case 'diamante': leagueClass = 'diamante'; break;
  }
  userLeague.textContent = `Liga ${league.name} | ${points} pts`;
  userLeague.className = `user-league-badge ${leagueClass}`;

  // Barra de progreso y texto
  const nextLevel = (Math.floor(points / 1000) + 1) * 1000;
  const progress = Math.min(100, ((points % 1000) / 1000) * 100);
  progressBar.style.width = `${progress}%`;
  progressLabel.textContent = ''; // Elimina el texto dentro de la barra

  userProgress.innerHTML =
    points >= 4000
      ? '¡Estás en la liga más alta! Sigue ayudando.'
      : `Te faltan <strong>${nextLevel - points}</strong> puntos para ascender de liga.`;
}

// Cuenta atrás vistosa hasta el próximo domingo a medianoche
function updateCountdown() {
  const now = new Date();
  // Domingo = 0, pero getDay() devuelve 0 para domingo, 1 para lunes, etc.
  let daysUntilSunday = (7 - now.getDay()) % 7;
  if (daysUntilSunday === 0 && (now.getHours() >= 24 || (now.getHours() === 0 && now.getMinutes() === 0 && now.getSeconds() === 0))) {
    daysUntilSunday = 7;
  }
  // Próximo domingo a medianoche
  const nextSunday = new Date(now);
  nextSunday.setDate(now.getDate() + daysUntilSunday);
  nextSunday.setHours(0, 0, 0, 0);

  // Si hoy es domingo pero aún no es medianoche, apunta a la próxima medianoche
  if (daysUntilSunday === 0 && now < nextSunday) {
    // ya está bien
  } else if (daysUntilSunday === 0) {
    nextSunday.setDate(nextSunday.getDate() + 7);
  }

  const diff = nextSunday - now;
  const totalSeconds = Math.floor(diff / 1000);
  const days = Math.floor(totalSeconds / (60 * 60 * 24));
  const hours = Math.floor((totalSeconds % (60 * 60 * 24)) / (60 * 60));
  const minutes = Math.floor((totalSeconds % (60 * 60)) / 60);
  const seconds = totalSeconds % 60;

  // Formato vistoso
  document.getElementById('next-update').innerHTML =
    `<span style="color:#4a6fa5;font-weight:700;font-size:1.1em;">
      ${days}d&nbsp;${hours}h&nbsp;${minutes}m&nbsp;${seconds}s
    </span>`;
}
setInterval(updateCountdown, 1000);
updateCountdown();

// Función para obtener el usuario currente y su perfil
async function fetchCurrentUser() {
  const { data: { user }, error } = await supabase.auth.getUser();
  if (error || !user) return null;

  const { data: profile, error: profileError } = await supabase
    .from('profiles')
    .select('id, username, photo_url, impact_points, weekly_points, actions_count')
    .eq('id', user.id)
    .single();

  return profileError ? null : profile;
}

document.addEventListener('DOMContentLoaded', async function() {
  const currentUser = await fetchCurrentUser();
  const currentUserId = currentUser?.id;
  const { usersHistorico, usersDinamico } = await fetchRankingData();
  renderIndividualRanking(usersHistorico, "historico", currentUserId);
  renderUserLeague(currentUser); // <-- PASA EL USUARIO, NO EL ARRAY

  document.querySelectorAll('.subranking-tab').forEach(tab => {
    tab.addEventListener('click', function() {
      document.querySelector('.subranking-tab.active').classList.remove('active');
      this.classList.add('active');
      const type = this.getAttribute('data-type');
      if (type === "dinamico") {
        document.getElementById('ranking-info').innerHTML = `
          <b>Ranking dinámico:</b> Se reinicia cada semana. Sube o baja de liga según tu puntuación semanal.<br>
          Los 10 mejores de cada liga ascienden, los 10 últimos descienden. ¡Sigue sumando puntos para subir!
        `;
        renderIndividualRanking(usersDinamico, "dinamico", currentUserId);
      } else {
        document.getElementById('ranking-info').innerHTML = `
          <b>Ranking histórico:</b> Acumula todos los puntos de impacto desde que te registraste.<br>
          ¡Compite por estar en el top histórico de Solidarity!
        `;
        renderIndividualRanking(usersHistorico, "historico", currentUserId);
      }
    });
  });

  document.querySelectorAll('.ranking-tab').forEach(tab => {
    tab.addEventListener('click', function () {
      document.querySelectorAll('.ranking-tab').forEach(t => t.classList.remove('active'));
      this.classList.add('active');
      // Oculta todas las secciones
      document.getElementById('individual-table').style.display = 'none';
      document.getElementById('comunidades-table').style.display = 'none';
      document.getElementById('subranking-tabs').style.display = 'none';

      // Muestra la sección correspondiente
      const tabType = this.getAttribute('data-tab');
      if (tabType === "individual") {
        document.getElementById('individual-table').style.display = '';
        document.getElementById('subranking-tabs').style.display = 'block';
      }
      if (tabType === "comunidades") {
        document.getElementById('comunidades-table').style.display = '';
      }
    });
  });

  // Modal sistema de puntuación
  const openBtn = document.getElementById('open-score-system');
  const closeBtn = document.getElementById('close-score-system');
  const modal = document.getElementById('score-system-modal');
  if (openBtn && closeBtn && modal) {
    openBtn.addEventListener('click', function() {
      modal.classList.add('active');
      modal.style.display = 'flex';
    });
    closeBtn.addEventListener('click', function() {
      modal.classList.remove('active');
      modal.style.display = 'none';
    });
    window.addEventListener('click', function(e) {
      if (e.target === modal) {
        modal.classList.remove('active');
        modal.style.display = 'none';
      }
    });
  }
});

function showLeague(leagueNumber) {
  document.querySelectorAll('.league-card').forEach(card => {
    card.classList.remove('active');
  });
  document.querySelector(`.league-${leagueNumber}`).classList.add('active');
}

const typeLabels = {
  cause: 'Causa',
  task: 'Tarea',
  challenge: 'Reto',
  volunteering: 'Voluntariado'
};
const badge = `<div class="activity-badge ${activity.type}">
  <i class="fas ${activity.icon}"></i> ${typeLabels[activity.type] || 'Otro'}
</div>`;
</script>
{% endblock %}

==== C:\Users\gabi2\Desktop\Solidarity-web\views\takeaction\index.njk ====
{% extends "layout.njk" %}

{% block title %}Take Action | Solidarity{% endblock %}

{% block head %}
  {{ super() }}
  <style>
    /* Variables y estilos base */
    :root {
      --primary: #4a6fa5;
      --secondary: #166088;
      --accent: #4fc3a1;
      --light: #f8f9fa;
      --dark: #2d3748;
      --gray: #e2e8f0;
    }
    
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      line-height: 1.6;
      color: var(--dark);
      margin: 0;
      padding: 0;
    }
    
    .main-content {
      max-width: 1400px;
      margin: 0 auto;
      padding: 0 2rem;
    }
    
    /* Hero Section (manteniendo tu versión favorita) */
    .hero {
      background: linear-gradient(135deg, var(--primary), var(--secondary));
      color: white;
      padding: 6rem 2rem;
      text-align: center;
      margin: 0 -2rem 2rem;
    }
    
    .hero h1 {
      font-size: 2.8rem;
      margin-bottom: 1.5rem;
      font-weight: 800;
    }
    
    .hero p {
      font-size: 1.3rem;
      max-width: 700px;
      margin: 0 auto 3rem;
      font-weight: 400;
    }
    
    .hero-buttons {
      display: flex;
      justify-content: center;
      gap: 1.5rem;
      margin-top: 2rem;
    }
    
    /* Stats Section mejorada */
    .stats-bar {
      display: grid;
      grid-template-columns: repeat(5, 1fr);
      gap: 1.5rem;
      padding: 3rem 0;
      margin: 0 auto;
      max-width: 1200px;
      text-align: center;
    }
    
    .stat-item {
      padding: 1rem;
    }
    
    .stat-number {
      font-size: 2.4rem;
      font-weight: 800;
      margin-bottom: 0.5rem;
      line-height: 1;
    }
    
    .stat-label {
      font-size: 1rem;
      color: var(--dark);
      opacity: 0.8;
    }
    
    /* Action Cards (2 columnas con imágenes) */
    .action-section {
      padding: 4rem 0;
    }
    
    .section-header {
      text-align: center;
      margin-bottom: 3rem;
    }
    
    .section-header h2 {
      font-size: 2.2rem;
      margin-bottom: 1rem;
      color: var(--primary);
    }
    
    .section-header p {
      font-size: 1.1rem;
      color: #666;
      max-width: 700px;
      margin: 0 auto;
    }
    
    .action-grid {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 2.5rem;
      margin: 0 auto;
      max-width: 1200px;
    }
    
    .action-card {
      background: white;
      border-radius: 12px;
      overflow: hidden;
      box-shadow: 0 5px 15px rgba(0,0,0,0.08);
      transition: all 0.3s ease;
    }
    
    .action-card:hover {
      transform: translateY(-10px);
      box-shadow: 0 15px 30px rgba(0,0,0,0.12);
    }
    
    .card-image {
      width: 100%;
      height: 220px;
      object-fit: cover;
    }
    
    .card-content {
      padding: 1.8rem;
    }
    
    .card-header {
      display: flex;
      align-items: center;
      margin-bottom: 1.2rem;
    }
    
    .card-icon {
      width: 50px;
      height: 50px;
      background: rgba(74, 111, 165, 0.1);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-right: 1.2rem;
    }
    
    .card-icon i {
      font-size: 1.5rem;
      color: var(--primary);
    }
    
    .card-icon.accent {
      background: rgba(79, 195, 161, 0.1);
    }
    
    .card-icon.accent i {
      color: var(--accent);
    }
    
    .card-icon.secondary {
      background: rgba(22, 96, 136, 0.1);
    }
    
    .card-icon.secondary i {
      color: var(--secondary);
    }
    
    .card-title {
      font-size: 1.5rem;
      margin: 0;
      color: var(--dark);
    }
    
    .card-text {
      color: #666;
      margin-bottom: 1.8rem;
      line-height: 1.6;
    }
    
    .card-features {
      margin-bottom: 2rem;
    }
    
    .feature-item {
      display: flex;
      align-items: center;
      margin-bottom: 0.8rem;
    }
    
    .feature-dot {
      width: 10px;
      height: 10px;
      background: var(--accent);
      border-radius: 50%;
      margin-right: 0.8rem;
    }
    
    .feature-text {
      font-size: 0.95rem;
    }
    
    .card-button {
      display: inline-block;
      padding: 0.8rem 1.8rem;
      background: var(--primary);
      color: white;
      border-radius: 6px;
      text-decoration: none;
      font-weight: 600;
      transition: all 0.3s ease;
    }
    
    .card-button:hover {
      background: var(--secondary);
      transform: translateY(-2px);
    }
    
    .card-button.accent {
      background: var(--accent);
    }
    
    .card-button.accent:hover {
      background: #3da58a;
    }
    
    .card-button.secondary {
      background: var(--secondary);
    }
    
    .card-button.secondary:hover {
      background: #0f4d6e;
    }
    
    /* Gamification Section mejorada */
    .gamification-section {
      background: var(--light);
      padding: 5rem 0;
      margin: 0 -2rem;
      padding-left: 2rem;
      padding-right: 2rem;
    }
    
    .gamification-container {
      max-width: 1200px;
      margin: 0 auto;
    }
    
    .gamification-header {
      text-align: center;
      margin-bottom: 3rem;
    }
    
    .gamification-header h2 {
      font-size: 2.2rem;
      color: var(--primary);
      margin-bottom: 1rem;
    }
    
    .gamification-header p {
      font-size: 1.1rem;
      color: #666;
      max-width: 700px;
      margin: 0 auto;
    }
    
    .gamification-cards {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 2rem;
    }
    
    .gamification-card {
      background: white;
      border-radius: 12px;
      padding: 2rem;
      box-shadow: 0 5px 15px rgba(0,0,0,0.05);
      text-align: center;
      transition: all 0.3s ease;
    }
    
    .gamification-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 25px rgba(0,0,0,0.1);
    }
    
    .gamification-card h3 {
      font-size: 1.4rem;
      margin-top: 1.5rem;
      margin-bottom: 1rem;
      color: var(--dark);
    }
    
    .gamification-card p {
      color: #666;
      margin-bottom: 1.5rem;
    }
    
    .progress-container {
      margin-bottom: 1.5rem;
    }
    
    .progress-bar {
      height: 8px;
      background: var(--gray);
      border-radius: 4px;
      overflow: hidden;
      margin-bottom: 0.5rem;
    }
    
    .progress {
      height: 100%;
      background: var(--accent);
      width: 65%;
    }
    
    .progress-info {
      display: flex;
      justify-content: space-between;
      font-size: 0.9rem;
      color: #666;
    }
    
    .badges-container {
      display: flex;
      justify-content: center;
      gap: 1.5rem;
      margin: 2rem 0;
    }
    
    .badge {
      width: 80px;
      height: 80px;
      border-radius: 50%;
      background: white;
      display: flex;
      align-items: center;
      justify-content: center;
      box-shadow: 0 5px 15px rgba(0,0,0,0.1);
      transition: all 0.3s ease;
    }
    
    .badge:hover {
      transform: scale(1.1);
    }
    
    .badge i {
      font-size: 2rem;
      color: var(--accent);
    }
    
    .ranking-container {
      background: white;
      border-radius: 12px;
      padding: 2rem;
      margin-top: 3rem;
      box-shadow: 0 5px 15px rgba(0,0,0,0.05);
    }
    
    .ranking-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1.5rem;
    }
    
    .ranking-header h3 {
      font-size: 1.4rem;
      color: var(--dark);
      margin: 0;
    }
    
    .user-rank {
      background: var(--accent);
      color: white;
      padding: 0.3rem 1rem;
      border-radius: 20px;
      font-weight: 600;
    }
    
    .ranking-grid {
      display: grid;
      grid-template-columns: repeat(5, 1fr);
      gap: 1.5rem;
      text-align: center;
    }
    
    .ranking-item {
      background: var(--light);
      padding: 1rem;
      border-radius: 8px;
    }
    
    .ranking-avatar {
      width: 50px;
      height: 50px;
      border-radius: 50%;
      margin: 0 auto 0.5rem;
      overflow: hidden;
    }
    
    .ranking-avatar img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
    
    .ranking-name {
      font-weight: 600;
      margin-bottom: 0.3rem;
    }
    
    .ranking-points {
      color: var(--accent);
      font-weight: 700;
    }
    
    .cta-section {
      background: linear-gradient(135deg, var(--primary), var(--secondary));
      color: white;
      padding: 5rem 2rem;
      text-align: center;
      margin: 0 -2rem;
      margin-top: 4rem;
    }
    
    .cta-content {
      max-width: 700px;
      margin: 0 auto;
    }
    
    .cta-content h2 {
      font-size: 2.2rem;
      margin-bottom: 1.5rem;
    }
    
    .cta-content p {
      font-size: 1.2rem;
      margin-bottom: 2rem;
      opacity: 0.9;
    }
    
    .cta-buttons {
      display: flex;
      justify-content: center;
      gap: 1.5rem;
    }
    
    .btn {
      padding: 1rem 2rem;
      border-radius: 6px;
      font-weight: 600;
      text-decoration: none;
      transition: all 0.3s ease;
    }
    
    .btn-accent {
      background: var(--accent);
      color: white;
    }
    
    .btn-accent:hover {
      background: #3da58a;
      transform: translateY(-3px);
    }
    
    .btn-outline-white {
      border: 2px solid white;
      color: white;
      background: transparent;
    }
    
    .btn-outline-white:hover {
      background: rgba(255,255,255,0.1);
      transform: translateY(-3px);
    }
    
    /* Responsive */
    @media (max-width: 1024px) {
      .action-grid {
        grid-template-columns: 1fr;
        max-width: 600px;
      }
      
      .gamification-cards {
        grid-template-columns: 1fr;
        max-width: 600px;
        margin: 0 auto;
      }
      
      .ranking-grid {
        grid-template-columns: repeat(3, 1fr);
      }
    }
    
    @media (max-width: 768px) {
      .stats-bar {
        grid-template-columns: repeat(2, 1fr);
      }
      
      .hero {
        padding: 4rem 1rem;
      }
      
      .hero h1 {
        font-size: 2.2rem;
      }
      
      .hero-buttons {
        flex-direction: column;
        gap: 1rem;
      }
      
      .btn {
        width: 100%;
        text-align: center;
      }
      
      .ranking-grid {
        grid-template-columns: repeat(2, 1fr);
      }
      
      .cta-buttons {
        flex-direction: column;
      }
    }
    
    @media (max-width: 480px) {
      .stats-bar {
        grid-template-columns: 1fr;
      }
      
      .ranking-grid {
        grid-template-columns: 1fr;
      }
    }
  </style>
{% endblock %}

{% block content %}
  <!-- Hero Section (mantenido como te gusta) -->
  <section class="hero">
    <div class="main-content">
      <h1>¡Tu Acción Genera Impacto!</h1>
      <p>Cada clic, cada participación y cada esfuerzo suma. Descubre cómo convertir tu solidaridad en cambios reales.</p>
      <div class="hero-buttons">
        <a href="#action-sections" class="btn btn-accent">
          <i class="fas fa-play-circle"></i> Cómo funciona
        </a>
        <a href="#cta" class="btn btn-outline-white">
          <i class="fas fa-rocket"></i> Empezar ahora
        </a>
      </div>
    </div>
  </section>

  <!-- Stats Section mejorada -->
  <div class="stats-bar">
    <div class="stat-item">
      <div class="stat-number">1,250+</div>
      <div class="stat-label">Causas activas</div>
    </div>
    <div class="stat-item">
      <div class="stat-number">58K+</div>
      <div class="stat-label">Tareas completadas</div>
    </div>
    <div class="stat-item">
      <div class="stat-number">3.2M+</div>
      <div class="stat-label">Puntos de impacto</div>
    </div>
    <div class="stat-item">
      <div class="stat-number">42K+</div>
      <div class="stat-label">Voluntarios</div>
    </div>
    <div class="stat-item">
      <div class="stat-number">250K+</div>
      <div class="stat-label">Beneficiarios</div>
    </div>
  </div>

  <!-- Action Section con 2 columnas -->
  <section id="action-sections" class="action-section">
    <div class="main-content">
      <div class="section-header">
        <h2>Transforma tu solidaridad en acción</h2>
        <p>Elige cómo quieres contribuir y comienza a generar impacto hoy mismo</p>
      </div>
      
      <div class="action-grid">
        <!-- Causas -->
        <div class="action-card">
          <img src="https://images.unsplash.com/photo-1522202176988-66273c2fd55f?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&q=80" alt="Causas sociales" class="card-image">
          <div class="card-content">
            <div class="card-header">
              <div class="card-icon">
                <i class="fas fa-hand-holding-heart"></i>
              </div>
              <h3 class="card-title">Causas</h3>
            </div>
            <p class="card-text">Apoya proyectos verificados con objetivos claros y medibles. Cada contribución suma puntos y avances visibles.</p>
            <div class="card-features">
              <div class="feature-item">
                <div class="feature-dot"></div>
                <span class="feature-text">+10 pts por cada €1 donado</span>
              </div>
              <div class="feature-item">
                <div class="feature-dot"></div>
                <span class="feature-text">Impacto directo en comunidades</span>
              </div>
              <div class="feature-item">
                <div class="feature-dot"></div>
                <span class="feature-text">Progreso visible hacia la meta</span>
              </div>
            </div>
            <a href="/causas" class="card-button">Explorar causas</a>
          </div>
        </div>
        
        <!-- Tareas -->
        <div class="action-card">
          <img src="https://images.unsplash.com/photo-1507679799987-c73779587ccf?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&q=80" alt="Tareas solidarias" class="card-image">
          <div class="card-content">
            <div class="card-header">
              <div class="card-icon accent">
                <i class="fas fa-tasks"></i>
              </div>
              <h3 class="card-title">Tareas</h3>
            </div>
            <p class="card-text">Acciones concretas que puedes hacer hoy mismo, desde tu casa o en tu comunidad local.</p>
            <div class="card-features">
              <div class="feature-item">
                <div class="feature-dot"></div>
                <span class="feature-text">+20 a +100 pts por tarea</span>
              </div>
              <div class="feature-item">
                <div class="feature-dot"></div>
                <span class="feature-text">Filtros por tiempo y dificultad</span>
              </div>
              <div class="feature-item">
                <div class="feature-dot"></div>
                <span class="feature-text">Resultados inmediatos</span>
              </div>
            </div>
            <a href="/tareas" class="card-button accent">Ver tareas</a>
          </div>
        </div>
        
        <!-- Retos -->
        <div class="action-card">
          <img src="https://images.unsplash.com/photo-1542601906990-b4d3fb778b09?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&q=80" alt="Retos comunitarios" class="card-image">
          <div class="card-content">
            <div class="card-header">
              <div class="card-icon secondary">
                <i class="fas fa-trophy"></i>
              </div>
              <h3 class="card-title">Retos</h3>
            </div>
            <p class="card-text">Supera objetivos junto a otros voluntarios. La competencia sana multiplica el impacto colectivo.</p>
            <div class="card-features">
              <div class="feature-item">
                <div class="feature-dot"></div>
                <span class="feature-text">+200 pts por reto completado</span>
              </div>
              <div class="feature-item">
                <div class="feature-dot"></div>
                <span class="feature-text">Premios especiales para los primeros</span>
              </div>
              <div class="feature-item">
                <div class="feature-dot"></div>
                <span class="feature-text">Tabla de posiciones en tiempo real</span>
              </div>
            </div>
            <a href="/retos" class="card-button secondary">Aceptar retos</a>
          </div>
        </div>
        
        <!-- Voluntariado -->
        <div class="action-card">
          <img src="https://images.unsplash.com/photo-1521791136064-7986c2920216?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&q=80" alt="Voluntariado" class="card-image">
          <div class="card-content">
            <div class="card-header">
              <div class="card-icon">
                <i class="fas fa-hands-helping"></i>
              </div>
              <h3 class="card-title">Voluntariado</h3>
            </div>
            <p class="card-text">Conecta con oportunidades presenciales o remotas que necesitan tus habilidades específicas.</p>
            <div class="card-features">
              <div class="feature-item">
                <div class="feature-dot"></div>
                <span class="feature-text">+50 pts por hora de voluntariado</span>
              </div>
              <div class="feature-item">
                <div class="feature-dot"></div>
                <span class="feature-text">Certificados verificables</span>
              </div>
              <div class="feature-item">
                <div class="feature-dot"></div>
                <span class="feature-text">Experiencias transformadoras</span>
              </div>
            </div>
            <a href="/voluntariado" class="card-button">Ser voluntario</a>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Gamification Section mejorada -->
  <section class="gamification-section">
    <div class="gamification-container">
      <div class="gamification-header">
        <h2>Convierte tu impacto en logros</h2>
        <p>Gana reconocimiento y recompensas mientras haces el bien</p>
      </div>
      
      <div class="gamification-cards">
        <!-- Puntos -->
        <div class="gamification-card">
          <div class="card-icon" style="margin: 0 auto;">
            <i class="fas fa-star" style="font-size: 2rem;"></i>
          </div>
          <h3>Puntos de Impacto</h3>
          <p>Cada acción suma puntos que reflejan tu contribución real al cambio social.</p>
          <div class="progress-container">
            <div class="progress-bar">
              <div class="progress" style="width: 75%;"></div>
            </div>
            <div class="progress-info">
              <span>2,450 pts</span>
              <span>75%</span>
            </div>
          </div>
          <p>Próximo nivel: 3,000 pts</p>
        </div>
        
        <!-- Insignias -->
        <div class="gamification-card">
          <div class="badges-container">
            <div class="badge">
              <i class="fas fa-leaf"></i>
            </div>
            <div class="badge">
              <i class="fas fa-heart"></i>
            </div>
            <div class="badge">
              <i class="fas fa-medal"></i>
            </div>
          </div>
          <h3>Insignias</h3>
          <p>Desbloquea logros especiales al alcanzar hitos importantes en tu viaje solidario.</p>
          <a href="#" class="card-button" style="display: inline-block; margin-top: 1rem;">Ver mis insignias</a>
        </div>
        
        <!-- Ranking -->
        <div class="gamification-card">
          <div class="card-icon" style="margin: 0 auto;">
            <i class="fas fa-trophy" style="font-size: 2rem;"></i>
          </div>
          <h3>Ranking Global</h3>
          <p>Compite sanamente con otros voluntarios y llega a lo más alto.</p>
          <div style="margin-top: 1.5rem;">
            <div style="display: flex; justify-content: center; align-items: center;">
              <span style="font-weight: 600; margin-right: 0.5rem;">Tu posición:</span>
              <span style="background: var(--accent); color: white; padding: 0.3rem 1rem; border-radius: 20px;">#1,245</span>
            </div>
          </div>
          <a href="#" class="card-button" style="display: inline-block; margin-top: 1.5rem;">Ver ranking completo</a>
        </div>
      </div>
      
      <div class="ranking-container">
        <div class="ranking-header">
          <h3>Top Contribuidores este Mes</h3>
          <div class="user-rank">Tú: #1,245</div>
        </div>
        <div class="ranking-grid">
          <div class="ranking-item">
            <div class="ranking-avatar">
              <img src="https://randomuser.me/api/portraits/women/44.jpg" alt="Top 1">
            </div>
            <div class="ranking-name">Ana M.</div>
            <div class="ranking-points">8,450 pts</div>
          </div>
          <div class="ranking-item">
            <div class="ranking-avatar">
              <img src="https://randomuser.me/api/portraits/men/32.jpg" alt="Top 2">
            </div>
            <div class="ranking-name">Carlos R.</div>
            <div class="ranking-points">7,890 pts</div>
          </div>
          <div class="ranking-item">
            <div class="ranking-avatar">
              <img src="https://randomuser.me/api/portraits/women/68.jpg" alt="Top 3">
            </div>
            <div class="ranking-name">María L.</div>
            <div class="ranking-points">7,450 pts</div>
          </div>
          <div class="ranking-item">
            <div class="ranking-avatar">
              <img src="https://randomuser.me/api/portraits/men/75.jpg" alt="Top 4">
            </div>
            <div class="ranking-name">Juan P.</div>
            <div class="ranking-points">6,920 pts</div>
          </div>
          <div class="ranking-item">
            <div class="ranking-avatar">
              <img src="https://randomuser.me/api/portraits/women/63.jpg" alt="Top 5">
            </div>
            <div class="ranking-name">Laura S.</div>
            <div class="ranking-points">6,780 pts</div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- CTA Section -->
  <section id="cta" class="cta-section">
    <div class="cta-content">
      <h2>¿Listo para marcar la diferencia?</h2>
      <p>Únete a miles de personas que están transformando realidades con sus acciones diarias.</p>
      <div class="cta-buttons">
        <a href="/registro" class="btn btn-accent">
          <i class="fas fa-user-plus"></i> Crear cuenta gratis
        </a>
        <a href="/login" class="btn btn-outline-white">
          <i class="fas fa-sign-in-alt"></i> Iniciar sesión
        </a>
      </div>
    </div>
  </section>
{% endblock %}

{% block scripts %}
  {{ super() }}
  <script>
    // Animaciones simples
    document.addEventListener('DOMContentLoaded', function() {
      // Scroll suave
      document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function(e) {
          e.preventDefault();
          document.querySelector(this.getAttribute('href')).scrollIntoView({
            behavior: 'smooth'
          });
        });
      });
      
      // Efecto hover en tarjetas
      const cards = document.querySelectorAll('.action-card, .gamification-card');
      cards.forEach(card => {
        card.addEventListener('mouseenter', function() {
          this.style.transform = 'translateY(-10px)';
        });
        card.addEventListener('mouseleave', function() {
          this.style.transform = 'translateY(0)';
        });
      });
    });

    document.addEventListener('DOMContentLoaded', async () => {
      const { data: { user } } = await supabase.auth.getUser();
      if (user) {
        const pendingProfile = localStorage.getItem('pendingProfile');
        if (pendingProfile) {
          // Verifica si el perfil ya existe antes de insertar
          const { data: existingProfile } = await supabase
            .from('profiles')
            .select('id')
            .eq('id', user.id)
            .single();

          if (!existingProfile) {
            const profile = JSON.parse(pendingProfile);
            let photo_url = '';

            // Si hay foto pendiente, súbela ahora
            const pendingPhoto = localStorage.getItem('pendingPhoto');
            if (pendingPhoto) {
              function base64ToBlob(base64, mime) {
                const byteChars = atob(base64.split(',')[1]);
                const byteNumbers = new Array(byteChars.length);
                for (let i = 0; i < byteChars.length; i++) {
                  byteNumbers[i] = byteChars.charCodeAt(i);
                }
                const byteArray = new Uint8Array(byteNumbers);
                return new Blob([byteArray], { type: mime });
              }
              const mime = pendingPhoto.match(/^data:(.*);base64,/)[1];
              const photoBlob = base64ToBlob(pendingPhoto, mime);
              const fileExt = mime.split('/')[1];
              const filePath = `${user.id}.${fileExt}`;
              const { error: uploadError } = await supabase.storage.from('avatars').upload(filePath, photoBlob, { upsert: true });
              if (!uploadError) {
                const { data: publicUrl } = supabase.storage.from('avatars').getPublicUrl(filePath);
                photo_url = publicUrl.publicUrl;
              }
            }

            // Inserta el perfil en la tabla profiles
            await supabase.from('profiles').insert([{
              id: user.id,
              email: user.email,
              username: profile.username,
              first_name: profile.firstName,
              last_name: profile.lastName,
              birthdate: profile.birthdate,
              photo_url,
              country: profile.country,
              slogan: profile.slogan,
              bio: profile.bio,
              interests: profile.interests
            }]);
          }

          // Limpia los datos temporales siempre, para que no se repita
          localStorage.removeItem('pendingProfile');
          localStorage.removeItem('pendingPhoto');
        }
      }
    });
  </script>
{% endblock %}

==== C:\Users\gabi2\Desktop\Solidarity-web\views\tasks\create.njk ====
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Crear Tarea o Reto | Solidarity</title>
    <link rel="stylesheet" href="/styles.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
    <style>
        .create-task-container {
            max-width: 600px;
            margin: 4rem auto 0 auto;
            background: var(--white);
            border-radius: 16px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.07);
            border: 1px solid var(--gray);
            padding: 2.5rem 2rem 2rem 2rem;
        }
        .create-task-title {
            font-size: 2rem;
            font-weight: 700;
            color: var(--primary);
            margin-bottom: 1.2rem;
            text-align: center;
        }
        .create-task-desc {
            color: #6b7280;
            font-size: 1.05rem;
            margin-bottom: 2rem;
            text-align: center;
        }
        .task-form {
            display: flex;
            flex-direction: column;
            gap: 1.3rem;
        }
        .form-group {
            display: flex;
            flex-direction: column;
            gap: 0.4rem;
        }
        .form-group label {
            font-weight: 500;
            color: var(--darker);
        }
        .form-group input,
        .form-group textarea,
        .form-group select {
            padding: 0.75rem 1rem;
            border-radius: 8px;
            border: 1px solid var(--gray);
            font-size: 1rem;
            background: var(--light);
            transition: border 0.2s;
        }
        .form-group input:focus,
        .form-group textarea:focus,
        .form-group select:focus {
            border: 1.5px solid var(--primary);
            outline: none;
            background: #fff;
        }
        .form-group textarea {
            min-height: 90px;
            resize: vertical;
        }
        .form-group input[type="file"] {
            padding: 0.5rem 0.2rem;
            background: none;
        }
        .preview-img {
            width: 100%;
            max-width: 320px;
            height: 180px;
            object-fit: cover;
            border-radius: 10px;
            margin-top: 0.5rem;
            border: 1px solid var(--gray);
            display: none;
        }
        .task-form .btn {
            margin-top: 0.5rem;
            width: 100%;
            font-size: 1.1rem;
        }
        .deadline-info {
            background: var(--accent);
            color: #fff;
            border-radius: 8px;
            padding: 0.7rem 1rem;
            margin-bottom: 1.2rem;
            font-size: 1.05rem;
            display: flex;
            align-items: center;
            gap: 0.7rem;
        }
        .progress-section {
            margin: 1.5rem 0 1rem 0;
            display: none;
        }
        .progress-label {
            font-size: 1rem;
            color: var(--darker);
            margin-bottom: 0.3rem;
        }
        .progress-bar-bg {
            background: var(--gray);
            border-radius: 8px;
            height: 14px;
            width: 100%;
            overflow: hidden;
        }
        .progress-bar {
            background: var(--primary);
            height: 100%;
            border-radius: 8px;
            width: 0%;
            transition: width 0.5s;
        }
        .after-create {
            display: none;
            margin-top: 2rem;
            background: var(--primary-light);
            color: #fff;
            border-radius: 10px;
            padding: 1.5rem 1rem;
            text-align: center;
        }
        .after-create .btn {
            margin-top: 1.2rem;
        }
        @media (max-width: 600px) {
            .create-task-container {
                margin: 2rem 0 0 0;
                border-radius: 10px;
                padding: 1.5rem 0.7rem 1.2rem 0.7rem;
            }
        }
    </style>
</head>
<body>
    <header>
        <nav class="navbar">
            <a href="/" class="logo">
                <i class="fas fa-hands-helping logo-icon"></i>
                <span class="logo-text">Solidarity</span>
            </a>
            <div class="nav-links">
                <a href="/">Home</a>
                <a href="/causes">Causas</a>
                <a href="/tasks">Tareas</a>
                <a href="/profile">Perfil</a>
                <a href="/contact">Contacto</a>
            </div>
            <div class="auth-buttons">
                <a href="/login" class="btn btn-outline">Iniciar Sesión</a>
                <a href="/register" class="btn btn-primary">Registrarse</a>
            </div>
        </nav>
    </header>

    <main>
        <div class="create-task-container">
            <div class="create-task-title">
                <i class="fas fa-tasks"></i> Crear Nueva Tarea o Reto
            </div>
            <div class="create-task-desc">
                Define una tarea solidaria o un reto para la comunidad.<br>
                ¡Motiva a otros a participar y suma impacto positivo!
            </div>
            <form class="task-form" id="taskForm" autocomplete="off">
                <div class="form-group">
                    <label for="title">Título de la tarea/reto</label>
                    <input type="text" id="title" name="title" placeholder="Ej: Recolecta 10 abrigos" required>
                </div>
                <div class="form-group">
                    <label for="photo">Foto principal</label>
                    <input type="file" id="photo" name="photo" accept="image/*">
                    <img id="previewImg" class="preview-img" alt="Vista previa de la foto">
                </div>
                <div class="form-group">
                    <label for="description">Descripción</label>
                    <textarea id="description" name="description" placeholder="Explica en qué consiste la tarea o reto..." required></textarea>
                </div>
                <div class="form-group">
                    <label for="type">Tipo de tarea</label>
                    <select id="type" name="type" required>
                        <option value="comunitaria">Comunitaria</option>
                        <option value="reto">Reto</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="deadline">Fecha límite</label>
                    <input type="datetime-local" id="deadline" name="deadline" required>
                </div>
                <div class="deadline-info" id="deadlineInfo" style="display:none;">
                    <i class="fas fa-hourglass-half"></i>
                    <span id="countdownText"></span>
                </div>
                <div class="form-group">
                    <label for="participants">Nº de participantes objetivo</label>
                    <input type="number" id="participants" name="participants" min="1" placeholder="Ej: 20" required>
                </div>
                <div class="form-group">
                    <label for="points">Puntos por completar</label>
                    <input type="number" id="points" name="points" min="1" max="1000" value="30" required>
                </div>
                <div class="progress-section" id="progressSection">
                    <div class="progress-label">
                        Progreso de la tarea: <span id="progressPercent">0%</span>
                    </div>
                    <div class="progress-bar-bg">
                        <div class="progress-bar" id="progressBar"></div>
                    </div>
                </div>
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-paper-plane"></i> Crear Tarea/Reto
                </button>
            </form>
            <div class="after-create" id="afterCreate">
                <h3>¡Tarea/Reto creado con éxito!</h3>
                <div style="margin:1rem 0;">
                    <strong>Título:</strong> <span id="summaryTitle"></span><br>
                    <strong>Tipo:</strong> <span id="summaryType"></span><br>
                    <strong>Participantes objetivo:</strong> <span id="summaryParticipants"></span><br>
                    <strong>Puntos por completar:</strong> <span id="summaryPoints"></span>
                </div>
                <a href="/tasks" class="btn btn-accent">
                    <i class="fas fa-arrow-left"></i> Volver a tareas
                </a>
            </div>
        </div>
    </main>

    <footer>
        <div class="footer-content">
            <div class="footer-logo">
                <i class="fas fa-hands-helping"></i>
                <h3>Solidarity</h3>
            </div>
            <div class="footer-links">
                <a href="/about">Acerca de</a>
                <a href="/contact">Contacto</a>
                <a href="/privacy">Privacidad</a>
            </div>
            <div class="social-links">
                <a href="#"><i class="fab fa-twitter"></i></a>
                <a href="#"><i class="fab fa-facebook-f"></i></a>
                <a href="#"><i class="fab fa-instagram"></i></a>
            </div>
            <div class="footer-bottom">
                &copy; 2025 Solidarity. Todos los derechos reservados.
            </div>
        </div>
    </footer>
    <script>
        // Vista previa de la imagen
        document.getElementById('photo').addEventListener('change', function(e) {
            const file = e.target.files[0];
            const preview = document.getElementById('previewImg');
            if (file) {
                const reader = new FileReader();
                reader.onload = function(evt) {
                    preview.src = evt.target.result;
                    preview.style.display = 'block';
                };
                reader.readAsDataURL(file);
            } else {
                preview.src = '';
                preview.style.display = 'none';
            }
        });

        // Deadline y cuenta atrás dinámica
        const deadlineInput = document.getElementById('deadline');
        const deadlineInfo = document.getElementById('deadlineInfo');
        const countdownText = document.getElementById('countdownText');
        let countdownInterval;

        deadlineInput.addEventListener('change', function() {
            updateCountdown();
            deadlineInfo.style.display = 'flex';
            if (countdownInterval) clearInterval(countdownInterval);
            countdownInterval = setInterval(updateCountdown, 1000);
        });

        function updateCountdown() {
            const deadline = new Date(deadlineInput.value);
            const now = new Date();
            let diff = deadline - now;
            if (isNaN(deadline.getTime()) || diff <= 0) {
                countdownText.textContent = "¡Deadline alcanzado!";
                clearInterval(countdownInterval);
                return;
            }
            const days = Math.floor(diff / (1000 * 60 * 60 * 24));
            diff -= days * (1000 * 60 * 60 * 24);
            const hours = Math.floor(diff / (1000 * 60 * 60));
            diff -= hours * (1000 * 60 * 60);
            const minutes = Math.floor(diff / (1000 * 60));
            diff -= minutes * (1000 * 60);
            const seconds = Math.floor(diff / 1000);
            countdownText.textContent = `Faltan ${days}d ${hours}h ${minutes}m ${seconds}s`;
        }

        // Barra de progreso dinámica (simulación)
        const progressSection = document.getElementById('progressSection');
        const progressBar = document.getElementById('progressBar');
        const progressPercent = document.getElementById('progressPercent');
        let progress = 0;

        // Simulación: muestra la barra al cambiar participantes
        document.getElementById('participants').addEventListener('input', function() {
            progressSection.style.display = 'block';
            progress = 0;
            updateProgressBar();
        });

        // Simulación: clic en la barra para aumentar progreso
        progressBar.addEventListener('click', function() {
            if (progress < 100) {
                progress += 10;
                if (progress > 100) progress = 100;
                updateProgressBar();
            }
        });

        function updateProgressBar() {
            progressBar.style.width = progress + '%';
            progressPercent.textContent = progress + '%';
        }

        // Simulación de envío de formulario
        document.getElementById('taskForm').addEventListener('submit', function(e) {
            e.preventDefault();
            document.getElementById('taskForm').style.display = 'none';
            document.getElementById('afterCreate').style.display = 'block';
            document.getElementById('summaryTitle').textContent = document.getElementById('title').value;
            document.getElementById('summaryType').textContent = document.getElementById('type').value.charAt(0).toUpperCase() + document.getElementById('type').value.slice(1);
            document.getElementById('summaryParticipants').textContent = document.getElementById('participants').value;
            document.getElementById('summaryPoints').textContent = document.getElementById('points').value;
            window.scrollTo({ top: 0, behavior: 'smooth' });
        });
    </script>
</body>
</html>

==== C:\Users\gabi2\Desktop\Solidarity-web\views\tasks\details.njk ====

==== C:\Users\gabi2\Desktop\Solidarity-web\views\teams\index copy 2.njk ====
{% extends "layout.njk" %}

{% block title %}Solidarity - Comunidades{% endblock %}

{% block head %}
  {{ super() }}
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
  <style>
    :root {
      --primary: #4a6fa5;
      --primary-dark: #166088;
      --gray: #e2e8f0;
      --white: #fff;
      --accent: #4fc3a1;
      --accent-dark: #3da58a;
      --urgent: #e53e3e;
      --radius: 1.7rem;
    }

    .main-container {
      max-width: 1200px;
      margin: 2rem auto;
      padding: 0 2rem;
    }

    .section-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;
    }

    .section-header h1 {
      font-size: 2rem;
      color: var(--primary);
      font-weight: 700;
    }

    .search-container {
      margin-bottom: 2rem;
      display: flex;
      align-items: center;
      gap: 0.7rem;
    }

    .search-container input {
      flex: 1;
      padding: 0.6rem 1.2rem;
      border-radius: 7px;
      border: 1.5px solid var(--gray);
      font-size: 1.05rem;
      outline: none;
      transition: border 0.2s;
      background: #fff;
    }

    .search-container input:focus {
      border-color: var(--primary);
    }

    .tabs {
      display: flex;
      border-bottom: 1px solid var(--gray);
      margin-bottom: 2rem;
    }

    .tab {
      padding: 0.75rem 1.5rem;
      cursor: pointer;
      position: relative;
      font-weight: 500;
      color: #6b7280;
      background: none;
      border: none;
      outline: none;
    }

    .tab.active {
      color: var(--primary);
      font-weight: 600;
    }

    .tab.active::after {
      content: '';
      position: absolute;
      bottom: -1px;
      left: 0;
      width: 100%;
      height: 3px;
      background: var(--primary);
    }

    /* Intro y destacados */
    .teams-intro {
      background: linear-gradient(135deg, #f0f7ff 0%, #e6f0fa 100%);
      border-radius: 16px;
      padding: 2.5rem;
      margin-bottom: 3rem;
      display: flex;
      align-items: center;
      gap: 2rem;
      border: 1px solid var(--gray);
    }

    .teams-intro-icon {
      font-size: 3.5rem;
      color: var(--accent);
    }

    .teams-intro-content h2 {
      font-size: 1.8rem;
      color: var(--primary);
      margin-bottom: 0.5rem;
    }

    .teams-intro-content p {
      color: #4a5568;
      line-height: 1.6;
    }

    .teams-highlights {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
      gap: 1.5rem;
      margin-bottom: 3rem;
    }

    .highlight-card {
      background: white;
      border-radius: 10px;
      padding: 1.5rem;
      box-shadow: 0 5px 15px rgba(0,0,0,0.05);
      border: 1px solid var(--gray);
      transition: all 0.3s ease;
    }

    .highlight-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 25px rgba(0,0,0,0.1);
      border-color: var(--accent);
    }

    .highlight-icon {
      font-size: 1.8rem;
      color: var(--accent);
      margin-bottom: 1rem;
    }

    .highlight-title {
      font-size: 1.1rem;
      font-weight: 600;
      color: var(--primary);
      margin-bottom: 0.5rem;
    }

    .highlight-desc {
      color: #6b7280;
      font-size: 0.95rem;
      line-height: 1.5;
    }

    /* Modal y formulario */
    .modal-bg {
      display: none;
      position: fixed;
      top: 0; left: 0; width: 100vw; height: 100vh;
      background: rgba(0,0,0,0.35);
      z-index: 9999;
      align-items: center;
      justify-content: center;
    }
    .modal-bg.active { display: flex; }
    .modal-content {
      background: #fff;
      border-radius: 18px;
      max-width: 540px;
      width: 95vw;
      padding: 2.5rem 1.5rem 2rem 1.5rem;
      box-shadow: 0 8px 32px rgba(0,0,0,0.13);
      position: relative;
      animation: fadeIn 0.3s;
      max-height: 90vh;
      overflow-y: auto;
    }
    .close-modal {
      position: absolute;
      top: 1.1rem; right: 1.3rem;
      background: none;
      border: none;
      font-size: 2rem;
      color: #aaa;
      cursor: pointer;
      transition: color 0.2s;
    }
    .close-modal:hover { color: var(--primary, #4a6fa5); }
    .create-team-title {
      font-size: 1.5rem;
      font-weight: 800;
      color: var(--primary, #4a6fa5);
      margin-bottom: 1.2rem;
      text-align: center;
    }
    .team-form .form-group label { 
      font-weight: 600; 
      color: var(--primary, #4a6fa5); 
      margin-bottom: 0.5rem;
      display: block;
    }
    .team-form .form-group input,
    .team-form .form-group textarea,
    .team-form .form-group select {
      width: 100%;
      padding: 0.7rem 1rem;
      border-radius: 8px;
      border: 1px solid #e5e7eb;
      margin-bottom: 0.2rem;
      font-size: 1rem;
      background: #f8fafc;
      transition: border 0.2s;
    }
    .team-form .form-group input:focus,
    .team-form .form-group textarea:focus,
    .team-form .form-group select:focus {
      border: 1.5px solid var(--accent, #4fc3a1);
      outline: none;
      background: #fff;
    }
    .team-form .form-group textarea {
      min-height: 90px;
      resize: vertical;
    }
    .form-inline-group {
      display: flex;
      gap: 1rem;
    }
    .form-inline-group .form-group { flex: 1; }
    .preview-img {
      width: 100%;
      max-width: 320px;
      height: 180px;
      object-fit: cover;
      border-radius: 10px;
      margin-top: 0.5rem;
      border: 1px solid #e5e7eb;
      display: none;
    }
    .after-create {
      margin-top: 2rem;
      background: var(--primary-light, #e6f0fa);
      color: #444;
      border-radius: 10px;
      padding: 1.5rem 1rem;
      text-align: center;
    }

    /* Grid clásico de comunidades */
    .teams-grid-classic {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
      gap: 2rem;
    }
    .team-card-classic {
      background: white;
      border-radius: 12px;
      overflow: hidden;
      box-shadow: 0 5px 15px rgba(0,0,0,0.05);
      transition: all 0.3s ease;
      border: 1px solid var(--gray);
    }
    .team-card-classic:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 25px rgba(0,0,0,0.1);
    }
    .team-image-classic {
      height: 180px;
      overflow: hidden;
      position: relative;
    }
    .team-image-classic img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: transform 0.3s ease;
    }
    .team-card-classic:hover .team-image-classic img {
      transform: scale(1.05);
    }
    .team-badge-classic {
      position: absolute;
      top: 1rem;
      right: 1rem;
      background: rgba(255, 255, 255, 0.9);
      padding: 0.3rem 0.8rem;
      border-radius: 50px;
      font-size: 0.8rem;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
      z-index: 2;
    }
    .team-badge-classic.points {
      background: var(--primary);
      color: white;
      left: 1rem;
      right: auto;
    }
    .team-badge-classic[style*="background:#ffe066"] {
      background: #ffe066 !important;
      color: #b8860b !important;
    }
    .team-badge-classic[style*="background:var(--gray)"] {
      background: var(--gray) !important;
      color: var(--primary-dark) !important;
    }
    .team-badge-classic[style*="background:#ffd600"] {
      background: #ffd600 !important;
      color: #a67c00 !important;
    }
    .team-content-classic {
      padding: 1.5rem;
    }
    .team-content-classic h3 {
      font-size: 1.3rem;
      margin-bottom: 0.8rem;
      color: #2d3748;
    }
    .team-content-classic p {
      color: #6b7280;
      margin-bottom: 1.5rem;
      font-size: 0.95rem;
      line-height: 1.6;
    }
    .team-meta-classic {
      display: flex;
      gap: 1rem;
      margin-bottom: 1.5rem;
      font-size: 0.85rem;
      flex-wrap: wrap;
    }
    .meta-item-classic {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      color: #6b7280;
    }
    .meta-item-classic i {
      color: var(--primary);
    }
    .members-count-classic {
      display: inline-flex;
      align-items: center;
      background: #f0f9ff;
      color: var(--primary);
      padding: 0.3rem 0.8rem;
      border-radius: 50px;
      font-size: 0.85rem;
      font-weight: 600;
    }
    .members-count-classic i {
      margin-right: 0.3rem;
    }
    .team-progress-classic {
      margin-bottom: 1.5rem;
    }
    .team-actions-classic {
      display: flex;
      gap: 0.8rem;
    }

    /* Barra de progreso y tags (si no están en tu style.css) */
    /* Barra de progreso igual que causas */
    .progress-bar {
      width: 100%;
      background: var(--gray);
      border-radius: 4px;
      height: 8px;
      position: relative;
      overflow: hidden;
      margin-bottom: 0.5rem;
      box-shadow: none;
    }
    .progress-fill {
      height: 100%;
      background: var(--primary);
      border-radius: 4px;
      transition: width 0.4s cubic-bezier(.4,1,.7,1);
      color: #fff;
      font-size: 0.95em;
      font-weight: 700;
      display: flex;
      align-items: center;
      justify-content: flex-end;
      padding-right: 8px;
      box-shadow: none;
    }
    .progress-info {
      display: flex;
      justify-content: space-between;
      font-size: 0.9rem;
      color: #6b7280;
    }
    .team-badge-classic[style*="background:#ffe600"] {
      background: #ffe600 !important;
      color: #b8860b !important;
    }

    .pagination {
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 1.2rem;
      margin: 3rem 0 1.5rem 0;
    }
    .pagination .btn {
      min-width: 40px;
      height: 40px;
      border-radius: 50%;
      padding: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.15rem;
    }
    #pageInfo {
      font-weight: 600;
      color: var(--primary);
      font-size: 1.1rem;
      min-width: 38px;
      text-align: center;
      letter-spacing: 0.03em;
    }

    .team-tags-classic {
      display: flex;
      flex-wrap: wrap;
      gap: 0.3em;
      margin-bottom: 0.7em;
    }
    .team-tag-classic {
      background: #e6f0fa;
      color: var(--primary);
      border-radius: 50px;
      padding: 0.22em 0.95em;
      font-size: 0.92em;
      font-weight: 600;
      margin-bottom: 0.2em;
      margin-right: 0.3em;
      transition: background 0.2s, color 0.2s;
      border: 1px solid #dbeafe;
      letter-spacing: 0.01em;
      white-space: nowrap;
    }
    .team-tag-classic.tag-more {
      background: #ffe600;
      color: #a67c00;
      border: 1px solid #ffe600;
    }

    @media (max-width: 768px) {
      .teams-intro {
        flex-direction: column;
        text-align: center;
        padding: 1.5rem;
      }
      .teams-highlights {
        grid-template-columns: 1fr;
      }
      .team-card-classic {
        margin-bottom: 1.5rem;
      }
    }
    /* Forzar el mismo border-radius en todos los botones, aunque tengan estilos inline */
    button,
    .btn,
    .btn-primary,
    .btn-accent,
    .btn-outline,
    .btn-secondary,
    .modal-content button,
    .team-actions-classic .btn {
      border-radius: 2rem !important;
      font-weight: 600;
    }
  </style>
{% endblock %}

{% block content %}
  <!-- Modal para usuarios no logueados -->
  <div class="modal-bg" id="loginModal">
    <div class="modal-content">
      <h3>Para crear una comunidad</h3>
      <p>Debes ser un usuario registrado. ¿Deseas iniciar sesión o registrarte ahora?</p>
      <div class="modal-buttons">
        <a href="/login?return=/teams" class="btn btn-primary">Iniciar Sesión</a>
        <a href="/register?return=/teams" class="btn btn-outline">Registrarse</a>
        <button id="cancelModal" class="btn">Cancelar</button>
      </div>
    </div>
  </div>

  <!-- Modal CREAR COMUNIDAD (idéntico a tareas, solo cambia el contenido específico) -->
  <div class="modal-bg" id="createTeamModal">
    <div class="modal-content">
      <button class="close-modal" id="closeCreateTeamModal" title="Cerrar">&times;</button>
      <div class="create-task-title" style="font-size:1.5rem; font-weight:800; color:var(--primary,#4a6fa5); margin-bottom:1.2rem; text-align:center;">
        <i class="fas fa-users"></i> Crear Nueva Comunidad
      </div>
      <form class="team-form" id="teamForm" autocomplete="off" enctype="multipart/form-data">
        <div class="form-group">
          <label for="teamName">Nombre de la comunidad</label>
          <input type="text" id="teamName" name="name" placeholder="Ej: Voluntarios por el Bosque" required>
        </div>
        <div class="form-group">
          <label for="teamPhoto">Foto o logo</label>
          <input type="file" id="teamPhoto" name="photo" accept="image/*">
          <img id="previewTeamImg" class="preview-img" alt="Vista previa de la foto" style="display:none;">
        </div>
        <div class="form-group">
          <label for="teamSummary">Resumen (opcional)</label>
          <input type="text" id="teamSummary" name="summary" maxlength="120" placeholder="Breve resumen visible en la tarjeta">
        </div>
        <div class="form-group">
          <label for="teamDesc">Descripción</label>
          <textarea id="teamDesc" name="description" rows="4" required placeholder="Describe la misión, valores y objetivos de la comunidad"></textarea>
        </div>
        <div class="form-group">
          <label for="teamCategory">Categoría</label>
          <select id="teamCategory" name="category" required>
            <option value="">Selecciona una</option>
            <option value="medio_ambiente">Medio Ambiente</option>
            <option value="educacion">Educación</option>
            <option value="salud">Salud</option>
            <option value="animales">Animales</option>
            <option value="comunidad">Comunidad</option>
            <option value="otros">Otros</option>
          </select>
        </div>
        <div class="form-inline-group">
          <div class="form-group">
            <label for="teamPrivacy">Privacidad</label>
            <select id="teamPrivacy" name="privacy" required>
              <option value="public">Pública (cualquiera puede unirse)</option>
              <option value="private">Privada (requiere invitación)</option>
            </select>
          </div>
          <div class="form-group">
            <label for="teamGoal">Meta de recaudación (€) (opcional)</label>
            <input type="number" id="teamGoal" name="goal" min="0" placeholder="Ej: 1000">
          </div>
        </div>
        <div class="form-group">
          <label for="teamTags">Etiquetas (separadas por comas)</label>
          <input type="text" id="teamTags" name="tags" placeholder="ej: reciclaje, voluntariado, jóvenes">
        </div>
        <button type="submit" class="btn btn-primary" style="margin-top:1rem;">
          <i class="fas fa-plus"></i> Crear Comunidad
        </button>
      </form>
      <div class="after-create" id="afterCreateTeam" style="display:none;">
        <h3>¡Comunidad creada con éxito!</h3>
        <p>¿Quieres invitar miembros o ver todas las comunidades?</p>
        <a href="#" id="inviteMembersBtn" class="btn btn-accent">
          <i class="fas fa-user-plus"></i> Invitar miembros
        </a>
        <br>
        <a href="/teams" class="btn btn-outline" style="margin-top:1rem;">
          <i class="fas fa-users"></i> Ver comunidades
        </a>
      </div>
    </div>
  </div>

  <!-- Modal de ver más comunidad (idéntico a tareas, solo cambia textos/campos) -->
  <div id="teamModal" class="modal-bg">
    <div class="modal-content" style="background:#fff; border-radius:18px; max-width:800px; width:95vw; padding:2rem; box-shadow:0 8px 32px rgba(74,111,165,0.13); position:relative; max-height:90vh; overflow-y:auto;">
      <button id="closeTeamModal" style="position:absolute; top:1.5rem; right:1.5rem; background:none; border:none; font-size:1.8rem; color:#6b7280; cursor:pointer; transition:color 0.2s;" onmouseover="this.style.color='#4a6fa5'" onmouseout="this.style.color='#6b7280'">&times;</button>
      <div id="teamModalBody" style="padding:0.5rem;">
        <!-- Contenido dinámico -->
      </div>
    </div>
  </div>

  <!-- Contenido principal de la página de comunidades -->
  <div class="main-container">
    <!-- Sección introductoria -->
    <div class="teams-intro">
      <div class="teams-intro-icon">
        <i class="fas fa-people-group"></i>
      </div>
      <div class="teams-intro-content">
        <h2>Comunidades Solidarias</h2>
        <p>Únete a grupos de personas que trabajan juntas para generar impacto positivo. Colabora en causas, tareas y retos compartidos, y multiplica tu capacidad de ayudar a quienes más lo necesitan.</p>
      </div>
    </div>
    
    <!-- Destacados -->
    <div class="teams-highlights">
      <div class="highlight-card">
        <div class="highlight-icon"><i class="fas fa-layer-group"></i></div>
        <div class="highlight-title">Multi-actividad</div>
        <div class="highlight-desc">Cada comunidad gestiona múltiples acciones simultáneas: causas, tareas, retos y voluntariados.</div>
      </div>
      <div class="highlight-card">
        <div class="highlight-icon"><i class="fas fa-comments"></i></div>
        <div class="highlight-title">Coordinación</div>
        <div class="highlight-desc">Organizaos mediante el chat interno, calendario compartido y tableros de progreso.</div>
      </div>
      <div class="highlight-card">
        <div class="highlight-icon"><i class="fas fa-heart"></i></div>
        <div class="highlight-title">Impacto colectivo</div>
        <div class="highlight-desc">Suma tus puntos individuales al impacto total de la comunidad.</div>
      </div>
      <div class="highlight-card">
        <div class="highlight-icon"><i class="fas fa-hands-helping"></i></div>
        <div class="highlight-title">Beneficiarios</div>
        <div class="highlight-desc">Visualiza el número total de personas y causas beneficiadas por vuestro equipo.</div>
      </div>
    </div>
    
    <!-- Cabecera con búsqueda y creación -->
    <div class="section-header">
      <h1>Explora Comunidades</h1>
      <a href="#" id="create-team-btn" class="btn btn-primary">
        <i class="fas fa-plus"></i> Crear Comunidad
      </a>
    </div>
    
    <div class="search-container">
      <input type="text" id="search-input" placeholder="Buscar por nombre, descripción, etiquetas...">
      <i class="fas fa-search" style="color:#4a6fa5;"></i>
    </div>
    
    <!-- Tabs de categorías -->
    <div class="tabs">
      <button class="tab active" data-filter="all">Todas</button>
      <button class="tab" data-filter="medio_ambiente">Medio Ambiente</button>
      <button class="tab" data-filter="educacion">Educación</button>
      <button class="tab" data-filter="salud">Salud</button>
      <button class="tab" data-filter="animales">Animales</button>
      <button class="tab" data-filter="comunidad">Comunidad</button>
    </div>
    
    <!-- Grid de comunidades -->
    <div class="teams-grid" id="teamsGrid">
      <!-- Las comunidades se cargarán dinámicamente -->
    </div>
    
    <!-- Paginación -->
    <div class="pagination" id="pagination">
      <button id="prevPage" class="btn btn-outline" disabled>
        <i class="fas fa-chevron-left"></i>
      </button>
      <span id="pageInfo">1</span>
      <button id="nextPage" class="btn btn-outline" disabled>
        <i class="fas fa-chevron-right"></i>
      </button>
    </div>
  </div>
{% endblock %}

{% block scripts %}
  {{ super() }}
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Variables para paginación
      let currentPage = 1;
      const itemsPerPage = 9;
      let allTeams = [];
      let filteredTeams = [];
      
      // Inicializar
      loadTeams();
      
      // Modal para crear equipo
      document.getElementById('create-team-btn').onclick = async function(e) {
        e.preventDefault();
        const { data: { session } } = await supabase.auth.getSession();
        if (session?.user) {
          document.getElementById('createTeamModal').classList.add('active');
          document.body.style.overflow = 'hidden';
        } else {
          document.getElementById('loginModal').classList.add('active');
        }
      };
      document.getElementById('closeCreateTeamModal').onclick = function() {
        document.getElementById('createTeamModal').classList.remove('active');
        document.body.style.overflow = '';
        document.getElementById('teamForm').reset();
        document.getElementById('previewTeamImg').style.display = 'none';
        document.getElementById('teamForm').style.display = 'block';
        document.getElementById('afterCreateTeam').style.display = 'none';
      };
      document.getElementById('createTeamModal').onclick = function(e) {
        if (e.target === this) {
          this.classList.remove('active');
          document.body.style.overflow = '';
          document.getElementById('teamForm').style.display = 'block';
          document.getElementById('afterCreateTeam').style.display = 'none';
        }
      };
      document.getElementById('cancelModal').onclick = function() {
        document.getElementById('loginModal').classList.remove('active');
      };
      document.getElementById('loginModal').onclick = function(e) {
        if (e.target === this) this.classList.remove('active');
      };
      // Vista previa de imagen
      document.getElementById('teamPhoto').addEventListener('change', function(e) {
        const file = e.target.files[0];
        const preview = document.getElementById('previewTeamImg');
        if (file) {
          const reader = new FileReader();
          reader.onload = function(evt) {
            preview.src = evt.target.result;
            preview.style.display = 'block';
          };
          reader.readAsDataURL(file);
        } else {
          preview.src = '';
          preview.style.display = 'none';
        }
      });

      // Envío del formulario de creación de comunidad
      document.getElementById('teamForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        const { data: { session } } = await supabase.auth.getSession();
        if (!session?.user) {
          alert('Debes iniciar sesión para crear una comunidad');
          return;
        }

        const name = document.getElementById('teamName').value;
        const description = document.getElementById('teamDesc').value;
        const summary = document.getElementById('teamSummary').value;
        const category = document.getElementById('teamCategory').value;
        const privacy = document.getElementById('teamPrivacy').value;
        const tags = document.getElementById('teamTags').value
          .split(',')
          .map(t => t.trim())
          .filter(Boolean);
        const goal = document.getElementById('teamGoal').value || null;
        // Si usas ciudad, país, beneficiarios:
        // const city = document.getElementById('teamCity').value;
        // const country = document.getElementById('teamCountry').value;
        // const beneficiaries = parseInt(document.getElementById('teamBeneficiaries').value) || 0;

        const fileInput = document.getElementById('teamPhoto');
        let photo = null;

        try {
          // Subir imagen si existe
          if (fileInput.files && fileInput.files[0]) {
            const file = fileInput.files[0];
            const fileExt = file.name.split('.').pop();
            const fileName = `${Date.now()}_${Math.random().toString(36).substring(2)}.${fileExt}`;
            const filePath = `teams/${fileName}`;
            const { error: uploadError } = await supabase.storage
              .from('teams')
              .upload(filePath, file);
            if (uploadError) throw uploadError;
            const { data: urlData } = supabase.storage
              .from('teams')
              .getPublicUrl(filePath);
            photo = urlData.publicUrl;
          }

          // Crear la comunidad
          const { data, error } = await supabase
            .from('teams')
            .insert([{
              name,
              description,
              summary,
              category,
              privacy,
              tags,
              photo,
              goal,
              creator_id: session.user.id,
              created_at: new Date().toISOString()
              // city,
              // country,
              // beneficiaries
            }])
            .select();

          if (error) throw error;

          // Añadir al usuario como admin de la comunidad
          await supabase
            .from('team_members')
            .insert([{
              team_id: data[0].id,
              user_id: session.user.id,
              role: 'admin',
              joined_at: new Date().toISOString()
            }]);

          document.getElementById('teamForm').style.display = 'none';
          document.getElementById('afterCreateTeam').style.display = 'block';
          document.getElementById('inviteMembersBtn').href = `/teams/${data[0].id}/invite`;
          await loadTeams(); // O la función que recarga los equipos desde Supabase

        } catch (error) {
          console.error('Error creating team:', error);
          alert(`Error al crear la comunidad: ${error.message}`);
        }
      });

      // Tabs de categorías
      document.querySelectorAll('.tab').forEach(tab => {
        tab.addEventListener('click', function() {
          document.querySelector('.tab.active').classList.remove('active');
          this.classList.add('active');
          currentPage = 1; // Resetear a primera página
          filterAndRenderTeams();
        });
      });

      // Búsqueda
      document.getElementById('search-input').addEventListener('input', function() {
        currentPage = 1; // Resetear a primera página
        filterAndRenderTeams();
      });

      // Paginación
      document.getElementById('prevPage').addEventListener('click', function() {
        if (currentPage > 1) {
          currentPage--;
          renderTeams();
        }
      });

      document.getElementById('nextPage').addEventListener('click', function() {
        const totalPages = Math.ceil(filteredTeams.length / itemsPerPage);
        if (currentPage < totalPages) {
          currentPage++;
          renderTeams();
        }
      });

      // Función para cargar equipos desde Supabase
      async function loadTeams() {
        try {
          const { data: teams, error } = await supabase
            .from('teams')
            .select('*, team_members(user_id)')
            .order('created_at', { ascending: false });

          if (error) throw error;

          allTeams = teams || [];
          filteredTeams = [...allTeams];
          currentPage = 1;
          renderTeams();

        } catch (error) {
          console.error('Error loading teams:', error);
          allTeams = [];
          filteredTeams = [];
          renderTeams();
        }
      }

      // Función para cargar equipos del usuario
      async function loadUserTeams() {
        try {
          // 1. Obtener los equipos donde el usuario es miembro
          const { data: memberships, error: membershipsError } = await supabase
            .from('team_members')
            .select('team_id, role')
            .eq('user_id', session.user.id);

          if (membershipsError) throw membershipsError;

          // 2. Obtener los equipos donde el usuario es el creador
          const { data: createdTeams, error: createdTeamsError } = await supabase
            .from('teams')
            .select('*')
            .eq('created_by', session.user.id); // Asegúrate de tener este campo en tu tabla teams

          if (createdTeamsError) throw createdTeamsError;

          // 3. Obtener los detalles de los equipos donde es miembro
          const teamIds = memberships.map(m => m.team_id);
          let { data: teams, error: teamsError } = await supabase
            .from('teams')
            .select('*')
            .in('id', teamIds)
            .order('created_at', { ascending: false });

          if (teamsError) throw teamsError;

          // 4. Combinar y eliminar duplicados (si el creador también es miembro)
          let allTeams = [
            ...teams.map(team => ({
              ...team,
              user_role: memberships.find(m => m.team_id === team.id)?.role,
              is_admin: memberships.find(m => m.team_id === team.id)?.role === 'admin',
              is_moderator: memberships.find(m => m.team_id === team.id)?.role === 'moderator'
            })),
            ...createdTeams
              .filter(team => !teamIds.includes(team.id))
              .map(team => ({
                ...team,
                user_role: 'founder',
                is_admin: true,
                is_moderator: false
              }))
          ]; // <-- CORRECTO

          filteredTeams = [...allTeams];
          currentPage = 1;
          renderTeams();

        } catch (error) {
          console.error('Error loading user teams:', error);
          showEmptyState();
        }
      }

      // Función para filtrar equipos
      function filterAndRenderTeams() {
        const activeFilter = document.querySelector('.tab.active').getAttribute('data-filter');
        const searchTerm = document.getElementById('search-input').value.toLowerCase();
        
        filteredTeams = allTeams.filter(team => {
          // Filtrar por categoría
          if (activeFilter !== 'all' && team.category !== activeFilter) {
            return false;
          }
          
          // Filtrar por búsqueda
          if (searchTerm) {
            const matchesName = team.name && team.name.toLowerCase().includes(searchTerm);
            const matchesDesc = team.description && team.description.toLowerCase().includes(searchTerm);
            const matchesTags = team.tags && team.tags.some(tag => tag && tag.toLowerCase().includes(searchTerm));
            return matchesName || matchesDesc || matchesTags;
          }
          
          return true;
        });
        
        renderTeams();
      }

      // Función para renderizar equipos con paginación
      async function renderTeams() {
        const { data: { session } } = await supabase.auth.getSession();
        const userId = session?.user?.id;

        const startIdx = (currentPage - 1) * itemsPerPage;
        const endIdx = startIdx + itemsPerPage;
        const paginatedTeams = filteredTeams.slice(startIdx, endIdx);

        const container = document.getElementById('teamsGrid');
        container.className = 'teams-grid-classic';
        container.innerHTML = '';

        if (paginatedTeams.length === 0) {
          container.innerHTML = `
            <div class="empty-state">
              <i class="fas fa-users-slash"></i>
              <h3>No se encontraron comunidades</h3>
              <p>No hay comunidades que coincidan con tu búsqueda.</p>
              <button id="createTeamEmptyBtn" class="btn btn-primary">
                <i class="fas fa-plus"></i> Crear primera comunidad
              </button>
            </div>
          `;
          document.getElementById('createTeamEmptyBtn').addEventListener('click', () => {
            document.getElementById('create-team-btn').click();
          });
          document.getElementById('pagination').style.display = 'none';
          return;
        }

        document.getElementById('pagination').style.display = 'flex';

        paginatedTeams.forEach(team => {
          // Calcula badges y tags
          const membersCount = team.members_count || 0;
          const tagsHtml = team.tags?.length
            ? `<div class="team-tags-classic" style="margin-bottom:0.8em;">${team.tags.slice(0, 4).map(tag => `<span class="team-tag-classic">${tag}</span>`).join('')}${team.tags.length > 4 ? `<span class="team-tag-classic tag-more">+${team.tags.length - 4}</span>` : ''}</div>`
            : '';
          const isTrending = membersCount >= 20 || (team.impact || 0) >= 1000;
          const recaudado = team.funds_raised || 0;
          const meta = team.goal || 1000;
          const porcentaje = meta ? Math.min(100, Math.round((recaudado / meta) * 100)) : 0;
          let badgePrivada = team.privacy === 'private'
            ? `<div class="team-badge-classic" style="top:1rem;right:1rem;background:var(--gray);color:var(--primary-dark);"><i class="fas fa-lock"></i> Privada</div>`
            : '';
          let badgeTrending = isTrending
            ? `<div class="team-badge-classic" style="top:${team.privacy === 'private' ? '3.2rem' : '1rem'};right:1rem;background:#ffe600;color:#b8860b;"><i class="fas fa-arrow-trend-up"></i> Trending</div>`
            : '';

          // ¿Es miembro?
          const isMember = team.team_members?.some(m => m.user_id === userId);

          const joinBtnHtml = isMember
            ? `<button class="btn btn-outline join-team-btn" data-team-id="${team.id}" disabled>
                <i class="fas fa-user-check"></i> Miembro
              </button>`
            : `<button class="btn btn-accent join-team-btn" data-team-id="${team.id}">
                <i class="fas fa-user-plus"></i> Unirse
              </button>`;

          const card = document.createElement('div');
          card.className = 'team-card-classic';
          card.innerHTML = `
            <div class="team-image-classic">
              <img src="${team.photo || 'https://via.placeholder.com/350x180?text=Comunidad'}" alt="${team.name}">
              <div class="team-badge-classic points" style="top:1rem;left:1rem;right:auto;background:var(--primary);color:#fff;">
                <i class="fas fa-bolt"></i> +${team.impact || 0} pts
              </div>
              ${badgePrivada}${badgeTrending}
            </div>
            <div class="team-content-classic">
              <h3>${team.name}</h3>
              <p>${team.summary || 'Esta comunidad no tiene resumen aún.'}</p>
              <div class="team-meta-classic" style="margin-bottom:1em;">
                <div class="meta-item-classic"><i class="fas fa-layer-group"></i> ${getCategoryName(team.category)}</div>
                <div class="meta-item-classic"><i class="fas fa-tasks"></i> ${team.activities_count || 0} actividades</div>
                <div class="meta-item-classic"><i class="fas fa-heart"></i> ${team.beneficiaries || 0} beneficiarios</div>
                <div class="meta-item-classic"><i class="fas fa-users"></i> <span class="members-count-classic">${membersCount}</span> miembros</div>
              </div>
              ${tagsHtml}
              <div class="team-progress-classic" style="margin-bottom:1.2em;">
                <div class="progress-bar">
                  <div class="progress-fill" style="width:${porcentaje}%;">${porcentaje > 10 ? porcentaje + '%' : ''}</div>
                </div>
                <div class="progress-info">
                  <span>${porcentaje}% completado</span>
                  <span>${recaudado} € de ${meta} €</span>
                </div>
              </div>
              <div class="team-actions-classic" style="margin-top:1.2em;">
                <button class="btn btn-primary btn-vermas-team" data-team-id="${team.id}">
                  <i class="fas fa-eye"></i> Ver más
                </button>
                ${joinBtnHtml}
              </div>
            </div>
          `;
          container.appendChild(card);
        });
        
        // Configurar botones de unirse
        document.querySelectorAll('.join-team-btn').forEach(btn => {
          btn.addEventListener('click', async function() {
            const teamId = this.getAttribute('data-team-id');
            const { data: { session } } = await supabase.auth.getSession();

            if (!session?.user) {
              document.getElementById('loginModal').classList.add('active');
              return;
            }

            // Bloquear UI
            this.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
            this.disabled = true;

            try {
              // 1. Insertar membresía (solo si no existe)
              const { data: existing, error: checkError } = await supabase
                .from('team_members')
                .select('id')
                .eq('team_id', teamId)
                .eq('user_id', session.user.id);

              if (checkError) throw checkError;
              if (existing && existing.length > 0) throw new Error('Ya eres miembro');

              const { error: insertError } = await supabase
                .from('team_members')
                .insert({
                  team_id: teamId,
                  user_id: session.user.id,
                  role: 'member'
                });

              if (insertError) throw insertError;

              // 2. Actualizar contador en la base de datos (RPC)
              const { error: updateError } = await supabase
                .rpc('increment_team_counter', {
                  team_id_input: teamId,
                  field_name: 'members_count'
                });

              if (updateError) throw updateError;

              // 3. Leer el número real de miembros desde Supabase
              const { data: teamData, error: fetchError } = await supabase
                .from('teams')
                .select('members_count')
                .eq('id', teamId)
                .single();

              if (fetchError) throw fetchError;

              // 4. Actualizar el número en la tarjeta SOLO con el valor real
              const card = this.closest('.team-card-classic');
              const countElement = card.querySelector('.members-count-classic');
              if (countElement) {
                countElement.textContent = teamData.members_count;
              }

              // 5. Cambiar el botón a "Miembro" y desactivar
              this.innerHTML = '<i class="fas fa-user-check"></i> Miembro';
              this.classList.remove('btn-accent');
              this.classList.add('btn-outline');
              this.disabled = true;

            } catch (error) {
              console.error('Error joining team:', error);
              this.innerHTML = '<i class="fas fa-user-plus"></i> Unirse';
              this.disabled = false;
              alert(error.message || 'Error al unirse');
            }
          });
        });

        updatePagination();
      }
      
      // Función para actualizar controles de paginación
      function updatePagination() {
        const totalPages = Math.max(1, Math.ceil(filteredTeams.length / itemsPerPage));
        document.getElementById('pageInfo').textContent = `${currentPage} / ${totalPages}`;
        document.getElementById('prevPage').disabled = currentPage <= 1;
        document.getElementById('nextPage').disabled = currentPage >= totalPages;
      }
      
      // Función auxiliar para nombres de categoría
      function getCategoryName(category) {
        const categories = {
          'medio_ambiente': 'Medio Ambiente',
          'educacion': 'Educación',
          'salud': 'Salud',
          'animales': 'Animales',
          'comunidad': 'Comunidad',
          'otros': 'Otros'
        };
        return categories[category] || 'General';
      }

      // Crear causa asociada a una comunidad y actualizar contador
      async function crearCausa({ title, description, teamId }) {
        // 1. Crear la causa con el team_id
        const { data, error } = await supabase
          .from('causes')
          .insert([{ title, description, team_id: teamId }]);
        if (error) {
          alert('Error al crear causa');
          return;
        }

        // 2. Incrementar el contador solo en esa comunidad
        await supabase.rpc('increment_team_counter', {
          team_id_input: teamId,
          field_name: 'causes_count'
        });
      }

      // Crear tarea asociada a una comunidad y actualizar contador
      async function crearTarea({ title, description, teamId }) {
        // 1. Crear la tarea con el team_id
        await supabase
          .from('tasks')
          .insert([{ title, description, team_id: teamId }]);
        // 2. Incrementar el contador de tareas en esa comunidad
        await supabase.rpc('increment_team_counter', {
          team_id_input: teamId,
          field_name: 'tasks_count'
        });
      }

      // Crear reto asociado a una comunidad y actualizar contador
      async function crearReto({ title, description, teamId }) {
        // 1. Crear el reto con el team_id
        await supabase
          .from('challenges')
          .insert([{ title, description, team_id: teamId }]);
        // 2. Incrementar el contador de retos en esa comunidad
        await supabase.rpc('increment_team_counter', {
          team_id_input: teamId,
          field_name: 'challenges_count'
        });
      }

      // Crear voluntariado asociado a una comunidad y actualizar contador
      async function crearVoluntariado({ title, description, teamId }) {
        // 1. Crear el voluntariado con el team_id
        await supabase
          .from('volunteering')
          .insert([{ title, description, team_id: teamId }]);
        // 2. Incrementar el contador de voluntariados en esa comunidad
        await supabase.rpc('increment_team_counter', {
          team_id_input: teamId,
          field_name: 'volunteering_count'
        });
      }

      // Crear o actualizar el contador de beneficiarios en una comunidad
      async function actualizarBeneficiarios(teamId, delta) {
        // 1. Actualizar el campo beneficiaries de la comunidad
        await supabase
          .from('teams')
          .update({ beneficiaries: supabase.raw(`beneficiaries + ${delta}`) })
          .eq('id', teamId);

        // 2. Llamar a la función RPC para actualizar el contador
        await supabase.rpc('increment_team_counter', {
          team_id_input: teamId,
          field_name: 'beneficiaries'
        });
      }

      // Abrir modal de ver más comunidad
      document.addEventListener('click', function(e) {
        const verMasBtn = e.target.closest('.btn-vermas-team');
        if (verMasBtn) {
          e.preventDefault();
          e.stopPropagation();
          const teamId = verMasBtn.dataset.teamId;
          showTeamModal(teamId);
        }
      });

      // Cerrar modal de ver más
      document.getElementById('closeTeamModal').onclick = function() {
        document.getElementById('teamModal').classList.remove('active');
        document.body.style.overflow = '';
      };
      document.getElementById('teamModal').onclick = function(e) {
        if (e.target === this) {
          this.classList.remove('active');
          document.body.style.overflow = '';
        }
      };

      // Modal de detalle de comunidad (igual que tasks/challenges)
      async function showTeamModal(teamId) {
        // 1. Carga la comunidad
        const { data: team, error } = await supabase
          .from('teams')
          .select('*')
          .eq('id', teamId)
          .single();

        if (error || !team) {
          alert('Error al cargar la comunidad');
          return;
        }

        // 2. Prepara datos
        const createdDate = new Date(team.created_at).toLocaleDateString('es-ES', {
          year: 'numeric',
          month: 'long',
          day: 'numeric'
        });
        const recaudado = team.funds_raised || 0;
        const meta = team.goal || 0;
        const porcentaje = meta ? Math.min(100, Math.round((recaudado / meta) * 100)) : 0;
        const beneficiaries = team.beneficiaries || 0;
        const membersCount = team.members?.length || 1;
        const impact = team.impact || 0;
        const category = getCategoryName(team.category);
        const privacy = team.privacy === 'private' ? 'Privada' : 'Pública';

        // 3. Renderiza el modal (estructura igual que tareas)
        document.getElementById('teamModalBody').innerHTML = `
          <div class="modal-task-container" style="padding:0;">
            <h1 class="modal-task-title" style="font-size:2rem; font-weight:800; color:var(--primary); margin-bottom:1.2rem; text-align:center; width:100%;">${team.name}</h1>
            <div style="display:flex; flex-wrap:wrap; gap:2.2rem; margin-bottom:1.5rem;">
              <div style="flex:1; min-width:320px; max-width:350px; position:relative;">
                <img src="${team.photo || 'https://via.placeholder.com/350x180?text=Comunidad'}" alt="Imagen de la comunidad" style="width:100%;height:200px;object-fit:cover;border-radius:12px;box-shadow:0 4px 12px rgba(0,0,0,0.08);">
                <div style="position:absolute;top:1rem;left:1rem;background:var(--primary);color:#fff;padding:0.4rem 1rem;border-radius:50px;font-size:0.95rem;font-weight:600;display:flex;align-items:center;gap:0.6rem;">
                  <i class="fas fa-users"></i> Comunidad
                </div>
                ${team.privacy === 'private' ? `
                <div style="position:absolute;top:1rem;right:1rem;background:var(--gray);color:var(--primary-dark);padding:0.4rem 1rem;border-radius:50px;font-size:0.95rem;font-weight:600;display:flex;align-items:center;gap:0.6rem;">
                  <i class="fas fa-lock"></i> Privada
                </div>` : ''}
              </div>
              <div style="flex:2;min-width:260px;display:flex;flex-direction:column;gap:1.2rem;justify-content:flex-start;">
                <div class="modal-cause-progress-container" style="background:#f8fafc;padding:1.2rem 1.2rem 1rem 1.2rem;border-radius:12px;margin-bottom:0.5rem;border:1px solid #e5e7eb;">
                  <div class="progress-bar">
                    <div class="progress-fill" style="width:${porcentaje}%"></div>
                  </div>
                  <div class="progress-info">
                    <span>${porcentaje}% completado</span>
                    <span>${recaudado} € de ${meta} €</span>
                  </div>
                </div>
                <div style="display:grid;grid-template-columns:1fr 1fr;gap:0.5rem 1.2rem;margin-bottom:0.7rem;">
                  <div style="color:var(--primary);font-size:0.98rem;"><i class="fas fa-calendar-alt"></i> Creada el ${createdDate}</div>
                  <div style="color:var(--primary);font-size:0.98rem;"><i class="fas fa-users"></i> ${membersCount} miembros</div>
                  <div style="color:var(--primary);font-size:0.98rem;"><i class="fas fa-heart"></i> ${beneficiaries} beneficiarios</div>
                  <div style="color:var(--primary);font-size:0.98rem;"><i class="fas fa-layer-group"></i> ${category}</div>
                </div>
                <div style="background:#f0f9ff;border-left:4px solid var(--accent);padding:0.8rem;border-radius:0 8px 8px 0;font-size:0.97rem;display:flex;align-items:center;gap:0.7rem;color:var(--primary);">
                  <i class="fas fa-bolt" style="color:var(--accent);"></i>
                  Participar en esta comunidad otorgará <strong>${impact} puntos</strong> de impacto
                </div>
              </div>
            </div>
            <div style="margin-bottom:1.2rem;">
              <h3 class="content-title" style="font-size:1.1rem;font-weight:600;color:var(--primary);margin-bottom:0.5rem;display:flex;align-items:center;gap:0.7rem;">
                <i class="fas fa-quote-left"></i> Resumen
              </h3>
              <p class="content-text" style="line-height:1.6;color:#4b5563;font-size:1.05rem;margin-left:0;margin-right:0;text-align:justify;">${team.summary || 'Sin resumen.'}</p>
            </div>
            <div class="content-section" style="margin-bottom:1.7rem;">
              <h3 class="content-title" style="font-size:1.1rem;font-weight:600;color:var(--primary);margin-bottom:0.5rem;display:flex;align-items:center;gap:0.7rem;">
                <i class="fas fa-align-left"></i> Descripción
              </h3>
              <p class="content-text" style="line-height:1.7;color:#4b5563;font-size:1.05rem;margin-left:0;margin-right:0;text-align:justify;">${team.description || 'Esta comunidad no tiene descripción.'}</p>
            </div>
            <div class="content-section" style="margin-bottom:2.2rem;">
              <h3 class="content-title" style="font-size:1.1rem;font-weight:600;color:var(--primary);margin-bottom:0.5rem;display:flex;align-items:center;gap:0.7rem;">
                <i class="fas fa-info-circle"></i> Detalles adicionales
              </h3>
              <div style="display:grid;grid-template-columns:1fr 1fr;gap:1rem;">
                <div>
                  <p style="font-weight:600;color:var(--primary);margin-bottom:0.3rem;">Privacidad</p>
                  <p style="color:#6b7280;">${privacy}</p>
                </div>
                <div>
                  <p style="font-weight:600;color:var(--primary);margin-bottom:0.3rem;">Meta de recaudación</p>
                  <p style="color:#6b7280;">${meta} €</p>
                </div>
                <div>
                  <p style="font-weight:600;color:var(--primary);margin-bottom:0.3rem;">ID</p>
                  <p style="color:#6b7280;">${team.id}</p>
                </div>
              </div>
            </div>
            <div class="task-actions" style="display:flex;gap:0.8rem;margin-top:2.2rem;">
              <button class="btn btn-primary" style="flex:1;" id="joinTeamBtn">
                <i class="fas fa-user-plus"></i> Unirse
              </button>
              <button class="btn btn-accent" style="flex:1;" id="shareTeamBtn">
                <i class="fas fa-share-alt"></i> Compartir
              </button>
            </div>
            <div class="share-section" id="shareSectionTeam"></div>
          </div>
        `;

        document.getElementById('teamModal').classList.add('active');
        document.body.style.overflow = 'hidden';

        // Botón Unirse
        document.getElementById('joinTeamBtn').onclick = async function() {
          const { data: { session } } = await supabase.auth.getSession();
          if (!session?.user) {
            alert('Debes iniciar sesión para unirte a la comunidad.');
            return;
          }
          alert('¡Solicitud de unión enviada! (Aquí puedes poner tu lógica real)');
        };

        // Botón Compartir
        document.getElementById('shareTeamBtn').onclick = function() {
          showShareOptionsTeam(team.id, team);
        };
      }

      // Compartir comunidad (idéntico a tareas, botones con fondo de color y letras blancas)
      function showShareOptionsTeam(teamId, teamObj) {
        let team = teamObj || (window.allTeams || []).find(t => t.id == teamId);
        if (!team) return;
        const shareSection = document.getElementById('shareSectionTeam');
        shareSection.innerHTML = `
          <h3 class="share-title" style="color:var(--primary);font-size:1.1rem;">
            <i class="fas fa-share-alt"></i> Ayuda a difundir esta comunidad
          </h3>
          <div class="share-content">
            <p class="share-text" style="color:#4b5563;">
              <span class="share-highlight" style="color:var(--primary);font-weight:600;">"${team.summary ? team.summary.substring(0, 120) + '...' : 'Únete a esta comunidad solidaria'}"</span><br><br>
              Cada nuevo miembro suma impacto colectivo.
            </p>
            <div class="share-buttons" style="display:flex;gap:0.7rem;flex-wrap:wrap;">
              <a href="#" class="share-btn btn btn-primary" onclick="shareOnSocialTeam('facebook', '${team.id}')" style="background:#1877f2;color:#fff;">
                <i class="fab fa-facebook-f"></i> Facebook
              </a>
              <a href="#" class="share-btn btn btn-primary" onclick="shareOnSocialTeam('twitter', '${team.id}')" style="background:#1da1f2;color:#fff;">
                <i class="fab fa-twitter"></i> Twitter
              </a>
              <a href="#" class="share-btn btn btn-primary" onclick="shareOnSocialTeam('whatsapp', '${team.id}')" style="background:#25d366;color:#fff;">
                <i class="fab fa-whatsapp"></i> WhatsApp
              </a>
              <a href="#" class="share-btn btn btn-outline" onclick="copyTeamLink('${team.id}')" style="background:#fff;color:var(--primary);border:1px solid var(--primary);">
                <i class="fas fa-link"></i> Copiar enlace
              </a>
            </div>
          </div>
        `;
      }

      // Función para compartir en redes sociales
      function shareOnSocialTeam(platform, teamId) {
        let team = (window.allTeams || []).find(t => t.id == teamId);
        if (!team) return;
        const url = `${window.location.origin}/teams/${team.id}`;
        const text = `Únete a la comunidad: "${team.name}" - ${team.summary ? team.summary.substring(0, 100) + '...' : 'Haz la diferencia en equipo!'} ${url}`;
        let shareUrl;
        switch(platform) {
          case 'facebook':
            shareUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}&quote=${encodeURIComponent(text)}`;
            break;
          case 'twitter':
            shareUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}`;
            break;
          case 'whatsapp':
            shareUrl = `https://wa.me/?text=${encodeURIComponent(text)}`;
            break;
          default:
            return;
        }
        window.open(shareUrl, '_blank', 'width=600,height=400');
      }

      function copyTeamLink(teamId) {
        const url = `${window.location.origin}/teams/${teamId}`;
        navigator.clipboard.writeText(url).then(() => {
          alert('¡Enlace copiado!');
        }).catch(() => {
          prompt('Por favor, copia este enlace:', url);
        });
      }

      // Unirse a la comunidad
      function joinTeam(teamId) {
        // Puedes reutilizar tu lógica de unirse aquí
        alert('Funcionalidad de unirse próximamente.');
      }

      // --- Gestión centralizada de canales realtime ---
      if (!window.teamChannels) window.teamChannels = {};

      document.addEventListener('click', async (e) => {
        const joinBtn = e.target.closest('.join-team-btn');
        if (!joinBtn) return;

        const teamId = joinBtn.dataset.teamId;
        const { data: { session } } = await supabase.auth.getSession();

        if (!session?.user) {
          document.getElementById('loginModal').classList.add('active');
          return;
        }

        // Bloquear UI
        joinBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
        joinBtn.disabled = true;

        try {
          // 1. Verificar membresía real en Supabase
          const { count, error: checkError } = await supabase
            .from('team_members')
            .select('*', { count: 'exact', head: true })
            .eq('team_id', teamId)
            .eq('user_id', session.user.id);

          console.log('Check membership:', { count, checkError });
          if (checkError) throw checkError;
          if (count > 0) throw new Error('Ya eres miembro');

          // 2. Insertar membresía real en Supabase
          const { error: insertError } = await supabase
            .from('team_members')
            .insert({
              team_id: teamId,
              user_id: session.user.id,
              role: 'member'
            });

          if (insertError) throw insertError;

          // 3. Actualizar contador en la base de datos (RPC)
          const { error: updateError } = await supabase
            .rpc('increment_team_counter', {
              team_id_input: teamId,
              field_name: 'members_count'
            });

          if (updateError) throw updateError;

          // 4. Leer el contador real desde Supabase
          const { data: teamData, error: fetchError } = await supabase
            .from('teams')
            .select('members_count')
            .eq('id', teamId)
            .single();

          if (fetchError) throw fetchError;

          // Actualiza el contador en la tarjeta SOLO con el valor real de Supabase
          const card = joinBtn.closest('.team-card-classic');
          const countElement = card.querySelector('.members-count-classic') ||
                               card.querySelector('.meta-item-classic:nth-child(4)');
          if (countElement) {
            countElement.textContent = `${teamData.members_count} miembros`;
          }

          // Tras unirse correctamente:
          joinBtn.innerHTML = '<i class="fas fa-user-check"></i> Miembro';
          joinBtn.classList.remove('btn-accent');
          joinBtn.classList.add('btn-outline');
          joinBtn.disabled = true;

        } catch (error) {
          console.error('Error joining team:', error);
          joinBtn.innerHTML = '<i class="fas fa-user-plus"></i> Unirse';
          joinBtn.disabled = false;
          alert(error.message || 'Error al unirse');
        }
      });

      // --- Limpieza automática de canales realtime ---
      window.addEventListener('beforeunload', () => {
        if (window.teamChannels) {
          Object.values(window.teamChannels).forEach(channel => {
            if (channel) supabase.removeChannel(channel);
          });
          window.teamChannels = {};
        }
      });
    });
  </script>
{% endblock %}

==== C:\Users\gabi2\Desktop\Solidarity-web\views\teams\indexDEEPSEEK.njk ====
{% extends "layout.njk" %}

{% block title %}Solidarity - Comunidades{% endblock %}

{% block head %}
  {{ super() }}
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
  <style>
    :root {
      --primary: #4a6fa5;
      --primary-dark: #166088;
      --gray: #e2e8f0;
      --white: #fff;
      --accent: #4fc3a1;
      --accent-dark: #3da58a;
      --urgent: #e53e3e;
      --radius: 1.7rem;
    }

    .main-container {
      max-width: 1200px;
      margin: 2rem auto;
      padding: 0 2rem;
    }

    .section-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;
    }

    .section-header h1 {
      font-size: 2rem;
      color: var(--primary);
      font-weight: 700;
    }

    .search-container {
      margin-bottom: 2rem;
      display: flex;
      align-items: center;
      gap: 0.7rem;
    }

    .search-container input {
      flex: 1;
      padding: 0.6rem 1.2rem;
      border-radius: 7px;
      border: 1.5px solid var(--gray);
      font-size: 1.05rem;
      outline: none;
      transition: border 0.2s;
      background: #fff;
    }

    .search-container input:focus {
      border-color: var(--primary);
    }

    .tabs {
      display: flex;
      border-bottom: 1px solid var(--gray);
      margin-bottom: 2rem;
    }

    .tab {
      padding: 0.75rem 1.5rem;
      cursor: pointer;
      position: relative;
      font-weight: 500;
      color: #6b7280;
      background: none;
      border: none;
      outline: none;
    }

    .tab.active {
      color: var(--primary);
      font-weight: 600;
    }

    .tab.active::after {
      content: '';
      position: absolute;
      bottom: -1px;
      left: 0;
      width: 100%;
      height: 3px;
      background: var(--primary);
    }

    /* Intro y destacados */
    .teams-intro {
      background: linear-gradient(135deg, #f0f7ff 0%, #e6f0fa 100%);
      border-radius: 16px;
      padding: 2.5rem;
      margin-bottom: 3rem;
      display: flex;
      align-items: center;
      gap: 2rem;
      border: 1px solid var(--gray);
    }

    .teams-intro-icon {
      font-size: 3.5rem;
      color: var(--accent);
    }

    .teams-intro-content h2 {
      font-size: 1.8rem;
      color: var(--primary);
      margin-bottom: 0.5rem;
    }

    .teams-intro-content p {
      color: #4a5568;
      line-height: 1.6;
    }

    .teams-highlights {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
      gap: 1.5rem;
      margin-bottom: 3rem;
    }

    .highlight-card {
      background: white;
      border-radius: 10px;
      padding: 1.5rem;
      box-shadow: 0 5px 15px rgba(0,0,0,0.05);
      border: 1px solid var(--gray);
      transition: all 0.3s ease;
    }

    .highlight-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 25px rgba(0,0,0,0.1);
      border-color: var(--accent);
    }

    .highlight-icon {
      font-size: 1.8rem;
      color: var(--accent);
      margin-bottom: 1rem;
    }

    .highlight-title {
      font-size: 1.1rem;
      font-weight: 600;
      color: var(--primary);
      margin-bottom: 0.5rem;
    }

    .highlight-desc {
      color: #6b7280;
      font-size: 0.95rem;
      line-height: 1.5;
    }

    /* Modal y formulario */
    .modal-bg {
      display: none;
      position: fixed;
      top: 0; left: 0; width: 100vw; height: 100vh;
      background: rgba(0,0,0,0.35);
      z-index: 9999;
      align-items: center;
      justify-content: center;
    }
    .modal-bg.active { display: flex; }
    .modal-content {
      background: #fff;
      border-radius: 18px;
      max-width: 540px;
      width: 95vw;
      padding: 2.5rem 1.5rem 2rem 1.5rem;
      box-shadow: 0 8px 32px rgba(0,0,0,0.13);
      position: relative;
      animation: fadeIn 0.3s;
      max-height: 90vh;
      overflow-y: auto;
    }
    .close-modal {
      position: absolute;
      top: 1.1rem; right: 1.3rem;
      background: none;
      border: none;
      font-size: 2rem;
      color: #aaa;
      cursor: pointer;
      transition: color 0.2s;
    }
    .close-modal:hover { color: var(--primary, #4a6fa5); }
    .create-team-title {
      font-size: 1.5rem;
      font-weight: 800;
      color: var(--primary, #4a6fa5);
      margin-bottom: 1.2rem;
      text-align: center;
    }
    .team-form .form-group label { 
      font-weight: 600; 
      color: var(--primary, #4a6fa5); 
      margin-bottom: 0.5rem;
      display: block;
    }
    .team-form .form-group input,
    .team-form .form-group textarea,
    .team-form .form-group select {
      width: 100%;
      padding: 0.7rem 1rem;
      border-radius: 8px;
      border: 1px solid #e5e7eb;
      margin-bottom: 0.2rem;
      font-size: 1rem;
      background: #f8fafc;
      transition: border 0.2s;
    }
    .team-form .form-group input:focus,
    .team-form .form-group textarea:focus,
    .team-form .form-group select:focus {
      border: 1.5px solid var(--accent, #4fc3a1);
      outline: none;
      background: #fff;
    }
    .team-form .form-group textarea {
      min-height: 90px;
      resize: vertical;
    }
    .form-inline-group {
      display: flex;
      gap: 1rem;
    }
    .form-inline-group .form-group { flex: 1; }
    .preview-img {
      width: 100%;
      max-width: 320px;
      height: 180px;
      object-fit: cover;
      border-radius: 10px;
      margin-top: 0.5rem;
      border: 1px solid #e5e7eb;
      display: none;
    }
    .after-create {
      margin-top: 2rem;
      background: var(--primary-light, #e6f0fa);
      color: #444;
      border-radius: 10px;
      padding: 1.5rem 1rem;
      text-align: center;
    }

    /* Grid clásico de comunidades */
    .teams-grid-classic {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
      gap: 2rem;
    }
    .team-card-classic {
      background: white;
      border-radius: 12px;
      overflow: hidden;
      box-shadow: 0 5px 15px rgba(0,0,0,0.05);
      transition: all 0.3s ease;
      border: 1px solid var(--gray);
    }
    .team-card-classic:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 25px rgba(0,0,0,0.1);
    }
    .team-image-classic {
      height: 180px;
      overflow: hidden;
      position: relative;
    }
    .team-image-classic img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: transform 0.3s ease;
    }
    .team-card-classic:hover .team-image-classic img {
      transform: scale(1.05);
    }
    .team-badge-classic {
      position: absolute;
      top: 1rem;
      right: 1rem;
      background: rgba(255, 255, 255, 0.9);
      padding: 0.3rem 0.8rem;
      border-radius: 50px;
      font-size: 0.8rem;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
      z-index: 2;
    }
    .team-badge-classic.points {
      background: var(--primary);
      color: white;
      left: 1rem;
      right: auto;
    }
    .team-badge-classic[style*="background:#ffe066"] {
      background: #ffe066 !important;
      color: #b8860b !important;
    }
    .team-badge-classic[style*="background:var(--gray)"] {
      background: var(--gray) !important;
      color: var(--primary-dark) !important;
    }
    .team-badge-classic[style*="background:#ffd600"] {
      background: #ffd600 !important;
      color: #a67c00 !important;
    }
    .team-content-classic {
      padding: 1.5rem;
    }
    .team-content-classic h3 {
      font-size: 1.3rem;
      margin-bottom: 0.8rem;
      color: #2d3748;
    }
    .team-content-classic p {
      color: #6b7280;
      margin-bottom: 1.5rem;
      font-size: 0.95rem;
      line-height: 1.6;
    }
    .team-meta-classic {
      display: flex;
      gap: 1rem;
      margin-bottom: 1.5rem;
      font-size: 0.85rem;
      flex-wrap: wrap;
    }
    .meta-item-classic {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      color: #6b7280;
    }
    .meta-item-classic i {
      color: var(--primary);
    }
    .members-count-classic {
      display: inline-flex;
      align-items: center;
      background: #f0f9ff;
      color: var(--primary);
      padding: 0.3rem 0.8rem;
      border-radius: 50px;
      font-size: 0.85rem;
      font-weight: 600;
    }
    .members-count-classic i {
      margin-right: 0.3rem;
    }
    .team-progress-classic {
      margin-bottom: 1.5rem;
    }
    .team-actions-classic {
      display: flex;
      gap: 0.8rem;
    }

    /* Barra de progreso y tags (si no están en tu style.css) */
    /* Barra de progreso igual que causas */
    .progress-bar {
      width: 100%;
      background: var(--gray);
      border-radius: 4px;
      height: 8px;
      position: relative;
      overflow: hidden;
      margin-bottom: 0.5rem;
      box-shadow: none;
    }
    .progress-fill {
      height: 100%;
      background: var(--primary);
      border-radius: 4px;
      transition: width 0.4s cubic-bezier(.4,1,.7,1);
      color: #fff;
      font-size: 0.95em;
      font-weight: 700;
      display: flex;
      align-items: center;
      justify-content: flex-end;
      padding-right: 8px;
      box-shadow: none;
    }
    .progress-info {
      display: flex;
      justify-content: space-between;
      font-size: 0.9rem;
      color: #6b7280;
    }
    .team-badge-classic[style*="background:#ffe600"] {
      background: #ffe600 !important;
      color: #b8860b !important;
    }

    .pagination {
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 1.2rem;
      margin: 3rem 0 1.5rem 0;
    }
    .pagination .btn {
      min-width: 40px;
      height: 40px;
      border-radius: 50%;
      padding: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.15rem;
    }
    #pageInfo {
      font-weight: 600;
      color: var(--primary);
      font-size: 1.1rem;
      min-width: 38px;
      text-align: center;
      letter-spacing: 0.03em;
    }

    .team-tags-classic {
      display: flex;
      flex-wrap: wrap;
      gap: 0.3em;
      margin-bottom: 0.7em;
    }
    .team-tag-classic {
      background: #e6f0fa;
      color: var(--primary);
      border-radius: 50px;
      padding: 0.22em 0.95em;
      font-size: 0.92em;
      font-weight: 600;
      margin-bottom: 0.2em;
      margin-right: 0.3em;
      transition: background 0.2s, color 0.2s;
      border: 1px solid #dbeafe;
      letter-spacing: 0.01em;
      white-space: nowrap;
    }
    .team-tag-classic.tag-more {
      background: #ffe600;
      color: #a67c00;
      border: 1px solid #ffe600;
    }

    @media (max-width: 768px) {
      .teams-intro {
        flex-direction: column;
        text-align: center;
        padding: 1.5rem;
      }
      .teams-highlights {
        grid-template-columns: 1fr;
      }
      .team-card-classic {
        margin-bottom: 1.5rem;
      }
    }
    /* Forzar el mismo border-radius en todos los botones, aunque tengan estilos inline */
    button,
    .btn,
    .btn-primary,
    .btn-accent,
    .btn-outline,
    .btn-secondary,
    .modal-content button,
    .team-actions-classic .btn {
      border-radius: 2rem !important;
      font-weight: 600;
    }
    .btn-success {
      background: #22c55e !important;
      color: #fff !important;
      border: none;
    }
    .btn-success:hover, .btn-success:focus {
      background: #16a34a !important;
      color: #fff !important;
    }

    /* Nuevos estilos para la solución robusta */
    .btn-secondary {
      background-color: #64748b !important;
      color: white !important;
      cursor: not-allowed;
    }
    
    .fa-spinner {
      animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    #solidarity-alerts {
      position: fixed;
      bottom: 20px;
      right: 20px;
      z-index: 10000;
      max-width: 400px;
    }
    
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    @keyframes fadeOut {
      from { opacity: 1; transform: translateY(0); }
      to { opacity: 0; transform: translateY(20px); }
    }
  </style>
{% endblock %}

{% block content %}
  <!-- Modal para usuarios no logueados -->
  <div class="modal-bg" id="loginModal">
    <div class="modal-content">
      <h3>Para crear una comunidad</h3>
      <p>Debes ser un usuario registrado. ¿Deseas iniciar sesión o registrarte ahora?</p>
      <div class="modal-buttons">
        <a href="/login?return=/teams" class="btn btn-primary">Iniciar Sesión</a>
        <a href="/register?return=/teams" class="btn btn-outline">Registrarse</a>
        <button id="cancelModal" class="btn">Cancelar</button>
      </div>
    </div>
  </div>

  <!-- Modal CREAR COMUNIDAD -->
  <div class="modal-bg" id="createTeamModal">
    <div class="modal-content">
      <button class="close-modal" id="closeCreateTeamModal" title="Cerrar">&times;</button>
      <div class="create-task-title" style="font-size:1.5rem; font-weight:800; color:var(--primary,#4a6fa5); margin-bottom:1.2rem; text-align:center;">
        <i class="fas fa-users"></i> Crear Nueva Comunidad
      </div>
      <form class="team-form" id="teamForm" autocomplete="off" enctype="multipart/form-data">
        <div class="form-group">
          <label for="teamName">Nombre de la comunidad</label>
          <input type="text" id="teamName" name="name" placeholder="Ej: Voluntarios por el Bosque" required>
        </div>
        <div class="form-group">
          <label for="teamPhoto">Foto o logo</label>
          <input type="file" id="teamPhoto" name="photo" accept="image/*">
          <img id="previewTeamImg" class="preview-img" alt="Vista previa de la foto" style="display:none;">
        </div>
        <div class="form-group">
          <label for="teamSummary">Resumen (opcional)</label>
          <input type="text" id="teamSummary" name="summary" maxlength="120" placeholder="Breve resumen visible en la tarjeta">
        </div>
        <div class="form-group">
          <label for="teamDesc">Descripción</label>
          <textarea id="teamDesc" name="description" rows="4" required placeholder="Describe la misión, valores y objetivos de la comunidad"></textarea>
        </div>
        <div class="form-group">
          <label for="teamCategory">Categoría</label>
          <select id="teamCategory" name="category" required>
            <option value="">Selecciona una</option>
            <option value="medio_ambiente">Medio Ambiente</option>
            <option value="educacion">Educación</option>
            <option value="salud">Salud</option>
            <option value="animales">Animales</option>
            <option value="comunidad">Comunidad</option>
            <option value="otros">Otros</option>
          </select>
        </div>
        <div class="form-inline-group">
          <div class="form-group">
            <label for="teamPrivacy">Privacidad</label>
            <select id="teamPrivacy" name="privacy" required>
              <option value="public">Pública (cualquiera puede unirse)</option>
              <option value="private">Privada (requiere invitación)</option>
            </select>
          </div>
          <div class="form-group">
            <label for="teamGoal">Meta de recaudación (€) (opcional)</label>
            <input type="number" id="teamGoal" name="goal" min="0" placeholder="Ej: 1000">
          </div>
        </div>
        <div class="form-group">
          <label for="teamTags">Etiquetas (separadas por comas)</label>
          <input type="text" id="teamTags" name="tags" placeholder="ej: reciclaje, voluntariado, jóvenes">
        </div>
        <button type="submit" class="btn btn-primary" style="margin-top:1rem;">
          <i class="fas fa-plus"></i> Crear Comunidad
        </button>
      </form>
      <div class="after-create" id="afterCreateTeam" style="display:none;">
        <h3>¡Comunidad creada con éxito!</h3>
        <p>¿Quieres invitar miembros o ver todas las comunidades?</p>
        <a href="#" id="inviteMembersBtn" class="btn btn-accent">
          <i class="fas fa-user-plus"></i> Invitar miembros
        </a>
        <br>
        <a href="/teams" class="btn btn-outline" style="margin-top:1rem;">
          <i class="fas fa-users"></i> Ver comunidades
        </a>
      </div>
    </div>
  </div>

  <!-- Modal de ver más comunidad -->
  <div id="teamModal" class="modal-bg">
    <div class="modal-content" style="background:#fff; border-radius:18px; max-width:800px; width:95vw; padding:2rem; box-shadow:0 8px 32px rgba(74,111,165,0.13); position:relative; max-height:90vh; overflow-y:auto;">
      <button id="closeTeamModal" style="position:absolute; top:1.5rem; right:1.5rem; background:none; border:none; font-size:1.8rem; color:#6b7280; cursor:pointer; transition:color 0.2s;" onmouseover="this.style.color='#4a6fa5'" onmouseout="this.style.color='#6b7280'">&times;</button>
      <div id="teamModalBody" style="padding:0.5rem;">
        <!-- Contenido dinámico -->
      </div>
    </div>
  </div>

  <!-- Contenido principal de la página de comunidades -->
  <div class="main-container">
    <!-- Sección introductoria -->
    <div class="teams-intro">
      <div class="teams-intro-icon">
        <i class="fas fa-people-group"></i>
      </div>
      <div class="teams-intro-content">
        <h2>Comunidades Solidarias</h2>
        <p>Únete a grupos de personas que trabajan juntas para generar impacto positivo. Colabora en causas, tareas y retos compartidos, y multiplica tu capacidad de ayudar a quienes más lo necesitan.</p>
      </div>
    </div>
    
    <!-- Destacados -->
    <div class="teams-highlights">
      <div class="highlight-card">
        <div class="highlight-icon"><i class="fas fa-layer-group"></i></div>
        <div class="highlight-title">Multi-actividad</div>
        <div class="highlight-desc">Cada comunidad gestiona múltiples acciones simultáneas: causas, tareas, retos y voluntariados.</div>
      </div>
      <div class="highlight-card">
        <div class="highlight-icon"><i class="fas fa-comments"></i></div>
        <div class="highlight-title">Coordinación</div>
        <div class="highlight-desc">Organizaos mediante el chat interno, calendario compartido y tableros de progreso.</div>
      </div>
      <div class="highlight-card">
        <div class="highlight-icon"><i class="fas fa-heart"></i></div>
        <div class="highlight-title">Impacto colectivo</div>
        <div class="highlight-desc">Suma tus puntos individuales al impacto total de la comunidad.</div>
      </div>
      <div class="highlight-card">
        <div class="highlight-icon"><i class="fas fa-hands-helping"></i></div>
        <div class="highlight-title">Beneficiarios</div>
        <div class="highlight-desc">Visualiza el número total de personas y causas beneficiadas por vuestro equipo.</div>
      </div>
    </div>
    
    <!-- Cabecera con búsqueda y creación -->
    <div class="section-header">
      <h1>Explora Comunidades</h1>
      <a href="#" id="create-team-btn" class="btn btn-primary">
        <i class="fas fa-plus"></i> Crear Comunidad
      </a>
    </div>
    
    <div class="search-container">
      <input type="text" id="search-input" placeholder="Buscar por nombre, descripción, etiquetas...">
      <i class="fas fa-search" style="color:#4a6fa5;"></i>
    </div>
    
    <!-- Tabs de categorías -->
    <div class="tabs">
      <button class="tab active" data-filter="all">Todas</button>
      <button class="tab" data-filter="medio_ambiente">Medio Ambiente</button>
      <button class="tab" data-filter="educacion">Educación</button>
      <button class="tab" data-filter="salud">Salud</button>
      <button class="tab" data-filter="animales">Animales</button>
      <button class="tab" data-filter="comunidad">Comunidad</button>
    </div>
    
    <!-- Grid de comunidades -->
    <div class="teams-grid" id="teamsGrid">
      <!-- Las comunidades se cargarán dinámicamente -->
    </div>
    
    <!-- Paginación -->
    <div class="pagination" id="pagination">
      <button id="prevPage" class="btn btn-outline" disabled>
        <i class="fas fa-chevron-left"></i>
      </button>
      <span id="pageInfo">1</span>
      <button id="nextPage" class="btn btn-outline" disabled>
        <i class="fas fa-chevron-right"></i>
      </button>
    </div>
  </div>

  <!-- Sección de alertas (solidaridad) -->
  <div id="solidarity-alerts"></div>
{% endblock %}

{% block scripts %}
  {{ super() }}
  <script>
    // Variables globales para el sistema robusto
    let currentUserId = null;
    let userMemberships = [];
    let allTeams = [];
    let filteredTeams = [];
    let currentPage = 1;
    const itemsPerPage = 9;

    // Función para obtener usuario actual y membresías
    async function getCurrentUserAndMemberships() {
      try {
        const { data: { session } } = await supabase.auth.getSession();
        if (session?.user) {
          currentUserId = session.user.id;
          const { data: memberships, error } = await supabase
            .from('team_members')
            .select('team_id')
            .eq('user_id', currentUserId)
            .neq('role', 'pending');
          
          if (error) throw error;
          
          userMemberships = memberships ? memberships.map(m => m.team_id) : [];
        } else {
          currentUserId = null;
          userMemberships = [];
        }
        return userMemberships;
      } catch (error) {
        console.error('Error obteniendo membresías:', error);
        return [];
      }
    }

    // Función robusta para unirse a comunidades
    async function joinTeam(teamId, btnElement) {
      try {
        // 1. Verificar sesión
        const { data: { session } } = await supabase.auth.getSession();
        if (!session?.user) {
          showSolidarityAlert('Debes iniciar sesión para unirte a una comunidad', 'error');
          document.getElementById('loginModal').classList.add('active');
          return false;
        }

        // 2. Mostrar estado "Procesando"
        if (btnElement) {
          btnElement.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Procesando...';
          btnElement.disabled = true;
        }

        // 3. Verificar si ya es miembro
        const { data: existingMembership } = await supabase
          .from('team_members')
          .select('id')
          .eq('team_id', teamId)
          .eq('user_id', session.user.id)
          .neq('role', 'pending')
          .maybeSingle();

        if (existingMembership) {
          showSolidarityAlert('Ya eres miembro de esta comunidad', 'info');
          return true;
        }

        // 4. Obtener información de la comunidad
        const { data: team, error: teamError } = await supabase
          .from('teams')
          .select('privacy, members_count')
          .eq('id', teamId)
          .single();

        if (teamError || !team) {
          showSolidarityAlert('Error al obtener información de la comunidad', 'error');
          if (btnElement) {
            btnElement.innerHTML = '<i class="fas fa-user-plus"></i> Unirse';
            btnElement.disabled = false;
          }
          return false;
        }

        // 5. Procesar unión según privacidad
        if (team.privacy === 'public') {
          // Comunidad pública - unirse directamente
          const { error } = await supabase
            .from('team_members')
            .insert([{
              team_id: teamId,
              user_id: session.user.id,
              role: 'member',
              joined_at: new Date().toISOString()
            }]);

          if (error) throw error;

          // Actualizar contador de miembros
          await supabase
            .from('teams')
            .update({ members_count: (team.members_count || 0) + 1 })
            .eq('id', teamId);

          showSolidarityAlert('¡Te has unido a la comunidad! 🎉', 'success');
        } else {
          // Comunidad privada - enviar solicitud
          const { error } = await supabase
            .from('team_members')
            .insert([{
              team_id: teamId,
              user_id: session.user.id,
              role: 'pending',
              joined_at: new Date().toISOString()
            }]);

          if (error) throw error;

          showSolidarityAlert('Solicitud enviada. Espera aprobación.', 'success');
        }

        // 6. Actualizar UI
        await getCurrentUserAndMemberships();
        await updateTeamCard(teamId);
        
        return true;

      } catch (error) {
        console.error('Error uniéndose al equipo:', error);
        showSolidarityAlert(`Error al unirse: ${error.message}`, 'error');
        if (btnElement) {
          btnElement.innerHTML = '<i class="fas fa-user-plus"></i> Unirse';
          btnElement.disabled = false;
        }
        return false;
      }
    }

    // Actualizar tarjeta de equipo específica
    async function updateTeamCard(teamId) {
      try {
        // 1. Obtener datos actualizados del equipo
        const { data: team, error } = await supabase
          .from('teams')
          .select('*')
          .eq('id', teamId)
          .single();

        if (error || !team) return;

        // 2. Actualizar contador de miembros en todas las tarjetas correspondientes
        document.querySelectorAll(`[data-team-id="${teamId}"] .members-count-classic`).forEach(el => {
          el.textContent = team.members_count || 0;
        });

        // 3. Actualizar botones de unirse
        document.querySelectorAll(`[data-team-id="${teamId}"] .join-team-btn`).forEach(btn => {
          const isMember = userMemberships.includes(teamId);
          btn.innerHTML = `<i class="fas fa-${isMember ? 'check' : 'user-plus'}"></i> ${isMember ? 'Miembro' : 'Unirse'}`;
          btn.disabled = isMember;
          if (isMember) {
            btn.classList.add('btn-secondary');
            btn.classList.remove('btn-success');
          } else {
            btn.classList.add('btn-success');
            btn.classList.remove('btn-secondary');
          }
        });

      } catch (error) {
        console.error('Error actualizando tarjeta:', error);
      }
    }

    // Mostrar alertas de solidaridad
    function showSolidarityAlert(message, type = 'success') {
      const alerts = document.getElementById('solidarity-alerts');
      if (!alerts) return;
      
      const alert = document.createElement('div');
      alert.className = `alert-${type}`;
      alert.style.cssText = `
        background: ${type === 'success' ? '#d1fae5' : type === 'error' ? '#fee2e2' : '#fef3c7'};
        color: ${type === 'success' ? '#166534' : type === 'error' ? '#991b1b' : '#92400e'};
        border: 2px solid ${type === 'success' ? '#22c55e' : type === 'error' ? '#ef4444' : '#f59e0b'};
        border-radius: 8px;
        padding: 1rem 1.5rem;
        margin-bottom: 1.2rem;
        font-size: 1.1rem;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 0.7rem;
        box-shadow: 0 2px 8px rgba(0,0,0,0.08);
        position: relative;
        animation: fadeIn 0.3s ease-in-out;
      `;
      
      alert.innerHTML = `
        <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-triangle' : 'info-circle'}"></i>
        ${message}
        <span style="margin-left:auto;cursor:pointer;font-size:1.3rem;" onclick="this.parentElement.remove()">&times;</span>
      `;
      
      alerts.appendChild(alert);
      
      setTimeout(() => {
        alert.style.animation = 'fadeOut 0.3s ease-in-out';
        setTimeout(() => alert.remove(), 300);
      }, 3500);
    }

    document.addEventListener('DOMContentLoaded', function() {
      // Variables para paginación
      currentPage = 1;

      // Inicializar
      getCurrentUserAndMemberships().then(loadTeams);
      
      // Modal para crear equipo
      document.getElementById('create-team-btn').onclick = async function(e) {
        e.preventDefault();
        const { data: { session } } = await supabase.auth.getSession();
        if (session?.user) {
          document.getElementById('createTeamModal').classList.add('active');
          document.body.style.overflow = 'hidden';
        } else {
          document.getElementById('loginModal').classList.add('active');
        }
      };
      
      document.getElementById('closeCreateTeamModal').onclick = function() {
        document.getElementById('createTeamModal').classList.remove('active');
        document.body.style.overflow = '';
        document.getElementById('teamForm').reset();
        document.getElementById('previewTeamImg').style.display = 'none';
        document.getElementById('teamForm').style.display = 'block';
        document.getElementById('afterCreateTeam').style.display = 'none';
      };
      
      document.getElementById('createTeamModal').onclick = function(e) {
        if (e.target === this) {
          this.classList.remove('active');
          document.body.style.overflow = '';
          document.getElementById('teamForm').style.display = 'block';
          document.getElementById('afterCreateTeam').style.display = 'none';
        }
      };
      
      document.getElementById('cancelModal').onclick = function() {
        document.getElementById('loginModal').classList.remove('active');
      };
      
      document.getElementById('loginModal').onclick = function(e) {
        if (e.target === this) this.classList.remove('active');
      };
      
      // Vista previa de imagen
      document.getElementById('teamPhoto').addEventListener('change', function(e) {
        const file = e.target.files[0];
        const preview = document.getElementById('previewTeamImg');
        if (file) {
          const reader = new FileReader();
          reader.onload = function(evt) {
            preview.src = evt.target.result;
            preview.style.display = 'block';
          };
          reader.readAsDataURL(file);
        } else {
          preview.src = '';
          preview.style.display = 'none';
        }
      });

      // Envío del formulario de creación de comunidad
      document.getElementById('teamForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        const { data: { session } } = await supabase.auth.getSession();
        if (!session?.user) {
          alert('Debes iniciar sesión para crear una comunidad');
          return;
        }

        // ... (resto del código de creación de comunidad) ...
      });

      // Tabs de categorías
      document.querySelectorAll('.tab').forEach(tab => {
        tab.addEventListener('click', function() {
          document.querySelector('.tab.active').classList.remove('active');
          this.classList.add('active');
          currentPage = 1; // Resetear a primera página
          filterAndRenderTeams();
        });
      });

      // Búsqueda
      document.getElementById('search-input').addEventListener('input', function() {
        currentPage = 1; // Resetear a primera página
        filterAndRenderTeams();
      });

      // Paginación
      document.getElementById('prevPage').addEventListener('click', function() {
        if (currentPage > 1) {
          currentPage--;
          renderTeams();
        }
      });

      document.getElementById('nextPage').addEventListener('click', function() {
        const totalPages = Math.ceil(filteredTeams.length / itemsPerPage);
        if (currentPage < totalPages) {
          currentPage++;
          renderTeams();
        }
      });

      // Event listener para botones de unirse
      document.addEventListener('click', async function(e) {
        const joinBtn = e.target.closest('.join-team-btn');
        if (joinBtn) {
          e.preventDefault();
          const teamId = joinBtn.getAttribute('data-team-id');
          await joinTeam(teamId, joinBtn);
        }
        
        // Botón Ver Más
        const verMasBtn = e.target.closest('.btn-vermas-team');
        if (verMasBtn) {
          e.preventDefault();
          e.stopPropagation();
          const teamId = verMasBtn.dataset.teamId || verMasBtn.getAttribute('data-team-id');
          showTeamModal(teamId);
        }
      });

      // Función para cargar equipos desde Supabase
      async function loadTeams() {
        try {
          const { data: teams, error } = await supabase
            .from('teams')
            .select('*')
            .order('created_at', { ascending: false });
          
          if (error) throw error;
          
          allTeams = teams || [];
          filteredTeams = [...allTeams];
          currentPage = 1;
          renderTeams();
          
        } catch (error) {
          console.error('Error cargando equipos:', error);
          allTeams = [];
          filteredTeams = [];
          renderTeams();
        }
      }

      // Función para filtrar equipos
      function filterAndRenderTeams() {
        const activeFilter = document.querySelector('.tab.active').getAttribute('data-filter');
        const searchTerm = document.getElementById('search-input').value.toLowerCase();
        
        filteredTeams = allTeams.filter(team => {
          // Filtrar por categoría
          if (activeFilter !== 'all' && team.category !== activeFilter) {
            return false;
          }
          
          // Filtrar por búsqueda
          if (searchTerm) {
            const matchesName = team.name && team.name.toLowerCase().includes(searchTerm);
            const matchesDesc = team.description && team.description.toLowerCase().includes(searchTerm);
            const matchesTags = team.tags && team.tags.some(tag => tag && tag.toLowerCase().includes(searchTerm));
            return matchesName || matchesDesc || matchesTags;
          }
          
          return true;
        });
        
        renderTeams();
      }

      // Función para renderizar equipos con paginación
      async function renderTeams() {
        const startIdx = (currentPage - 1) * itemsPerPage;
        const endIdx = startIdx + itemsPerPage;
        const paginatedTeams = filteredTeams.slice(startIdx, endIdx);

        const container = document.getElementById('teamsGrid');
        container.className = 'teams-grid-classic';
        container.innerHTML = '';

        if (!paginatedTeams.length) {
          container.innerHTML = `
            <div class="empty-state">
              <i class="fas fa-users-slash"></i>
              <h3>No se encontraron comunidades</h3>
              <p>No hay comunidades que coincidan con tu búsqueda.</p>
              <button id="createTeamEmptyBtn" class="btn btn-primary">
                <i class="fas fa-plus"></i> Crear primera comunidad
              </button>
            </div>
          `;
          document.getElementById('createTeamEmptyBtn').addEventListener('click', () => {
            document.getElementById('create-team-btn').click();
          });
          document.getElementById('pagination').style.display = 'none';
          return;
        }

        document.getElementById('pagination').style.display = 'flex';

        paginatedTeams.forEach(team => {
          const isMember = userMemberships.includes(team.id);
          const membersCount = team.members_count || 0;

          const badgePrivada = team.privacy === 'private'
            ? `<div class="team-badge-classic" style="top:1rem;right:1rem;background:var(--gray);color:var(--primary-dark);"><i class="fas fa-lock"></i> Privada</div>`
            : '';

          const isTrending = membersCount >= 20 || (team.impact || 0) >= 1000;
          const badgeTrending = isTrending
            ? `<div class="team-badge-classic" style="top:${team.privacy === 'private' ? '3.2rem' : '1rem'};right:1rem;background:#ffe600;color:#b8860b;"><i class="fas fa-arrow-trend-up"></i> Trending</div>`
            : '';

          const tagsHtml = team.tags?.length
            ? `<div class="team-tags-classic" style="margin-bottom:0.8em;">${team.tags.slice(0, 4).map(tag => `<span class="team-tag-classic">${tag}</span>`).join('')}${team.tags.length > 4 ? `<span class="team-tag-classic tag-more">+${team.tags.length - 4}</span>` : ''}</div>`
            : '';

          const recaudado = team.funds_raised || 0;
          const meta = team.goal || 1000;
          const porcentaje = meta ? Math.min(100, Math.round((recaudado / meta) * 100)) : 0;

          const card = document.createElement('div');
          card.className = 'team-card-classic';
          card.dataset.teamId = team.id;
          card.innerHTML = `
            <div class="team-image-classic">
              <img src="${team.photo || 'https://via.placeholder.com/350x180?text=Comunidad'}" alt="${team.name}">
              <div class="team-badge-classic points" style="top:1rem;left:1rem;right:auto;background:var(--primary);color:#fff;">
                <i class="fas fa-bolt"></i> +${team.impact || 0} pts
              </div>
              ${badgePrivada}${badgeTrending}
            </div>
            <div class="team-content-classic">
              <h3>${team.name}</h3>
              <p>${team.summary || 'Esta comunidad no tiene resumen aún.'}</p>
              <div class="team-meta-classic">
                <div class="meta-item-classic"><i class="fas fa-layer-group"></i> ${getCategoryName(team.category)}</div>
                <div class="meta-item-classic"><i class="fas fa-tasks"></i> ${team.activities_count || 0} actividades</div>
                <div class="meta-item-classic"><i class="fas fa-heart"></i> ${team.beneficiaries || 0} beneficiarios</div>
                <div class="meta-item-classic">
                  <i class="fas fa-users"></i>
                  <span class="members-count-classic">${membersCount}</span> miembros
                </div>
              </div>
              ${tagsHtml}
              <div class="team-progress-classic" style="margin-bottom:1.2em;">
                <div class="progress-bar">
                  <div class="progress-fill" style="width:${porcentaje}%;${porcentaje > 10 ? '' : 'min-width:32px;'}">
                    ${porcentaje > 10 ? porcentaje + '%' : ''}
                  </div>
                </div>
                <div class="progress-info">
                  <span>${porcentaje}% completado</span>
                  <span>${recaudado} € de ${meta} €</span>
                </div>
              </div>
              <div class="team-actions-classic" style="margin-top:1.2em;">
                <button class="btn btn-primary btn-vermas-team" data-team-id="${team.id}">
                  <i class="fas fa-eye"></i> Ver más
                </button>
                <button class="btn ${isMember ? 'btn-secondary' : 'btn-success'} join-team-btn"
                  data-team-id="${team.id}" ${isMember ? 'disabled' : ''}>
                  <i class="fas fa-${isMember ? 'check' : 'user-plus'}"></i>
                  ${isMember ? 'Miembro' : 'Unirse'}
                </button>
              </div>
            </div>
          `;
          container.appendChild(card);
        });
        
        updatePagination();
      }
      
      // Función para actualizar controles de paginación
      function updatePagination() {
        const totalPages = Math.max(1, Math.ceil(filteredTeams.length / itemsPerPage));
        document.getElementById('pageInfo').textContent = `${currentPage} / ${totalPages}`;
        document.getElementById('prevPage').disabled = currentPage <= 1;
        document.getElementById('nextPage').disabled = currentPage >= totalPages;
      }
      
      // Función auxiliar para nombres de categoría
      function getCategoryName(category) {
        const categories = {
          'medio_ambiente': 'Medio Ambiente',
          'educacion': 'Educación',
          'salud': 'Salud',
          'animales': 'Animales',
          'comunidad': 'Comunidad',
          'otros': 'Otros'
        };
        return categories[category] || 'General';
      }

      // Cerrar modal de ver más
      document.getElementById('closeTeamModal').onclick = function() {
        document.getElementById('teamModal').classList.remove('active');
        document.body.style.overflow = '';
      };
      
      document.getElementById('teamModal').onclick = function(e) {
        if (e.target === this) {
          this.classList.remove('active');
          document.body.style.overflow = '';
        }
      };

      // Modal de detalle de comunidad
      async function showTeamModal(teamId) {
        // ... (código para mostrar el modal de detalle) ...
      }
    });
  </script>
{% endblock %}

==== C:\Users\gabi2\Desktop\Solidarity-web\views\teams\myteams copy.njk ====
{% extends "layout.njk" %}

{% block title %}Solidarity - Mis Comunidades{% endblock %}

{% block head %}
  {{ super() }}
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
  <style>
    :root {
      --primary: #4a6fa5;
      --primary-dark: #166088;
      --gray: #e2e8f0;
      --white: #fff;
      --accent: #4fc3a1;
      --accent-dark: #3da58a;
      --urgent: #e53e3e;
    }

    .main-container {
      max-width: 1200px;
      margin: 2rem auto;
      padding: 0 2rem;
    }

    .section-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;
    }

    .section-header h1 {
      font-size: 2rem;
      color: var(--primary);
      font-weight: 700;
    }

    .search-container {
      margin-bottom: 2rem;
      display: flex;
      align-items: center;
      gap: 0.7rem;
    }

    .search-container input {
      flex: 1;
      padding: 0.6rem 1.2rem;
      border-radius: 7px;
      border: 1.5px solid var(--gray);
      font-size: 1.05rem;
      outline: none;
      transition: border 0.2s;
      background: #fff;
    }

    .search-container input:focus {
      border-color: var(--primary);
    }

    .tabs {
      display: flex;
      border-bottom: 1px solid var(--gray);
      margin-bottom: 2rem;
      flex-wrap: wrap;
    }

    .tab {
      padding: 0.75rem 1.5rem;
      cursor: pointer;
      position: relative;
      font-weight: 500;
      color: #6b7280;
      background: none;
      border: none;
      outline: none;
    }

    .tab.active {
      color: var(--primary);
      font-weight: 600;
    }

    .tab.active::after {
      content: '';
      position: absolute;
      bottom: -1px;
      left: 0;
      width: 100%;
      height: 3px;
      background: var(--primary);
    }

    /* Intro y destacados */
    .teams-intro {
      background: linear-gradient(135deg, #f0f7ff 0%, #e6f0fa 100%);
      border-radius: 16px;
      padding: 2.5rem;
      margin-bottom: 3rem;
      display: flex;
      align-items: center;
      gap: 2rem;
      border: 1px solid var(--gray);
    }

    .teams-intro-icon {
      font-size: 3.5rem;
      color: var(--accent);
    }

    .teams-intro-content h2 {
      font-size: 1.8rem;
      color: var(--primary);
      margin-bottom: 0.5rem;
    }

    .teams-intro-content p {
      color: #4a5568;
      line-height: 1.6;
    }

    .teams-highlights {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
      gap: 1.5rem;
      margin-bottom: 3rem;
    }

    .highlight-card {
      background: white;
      border-radius: 10px;
      padding: 1.5rem;
      box-shadow: 0 5px 15px rgba(0,0,0,0.05);
      border: 1px solid var(--gray);
      transition: all 0.3s ease;
    }

    .highlight-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 25px rgba(0,0,0,0.1);
      border-color: var(--accent);
    }

    .highlight-icon {
      font-size: 1.8rem;
      color: var(--accent);
      margin-bottom: 1rem;
    }

    .highlight-title {
      font-size: 1.1rem;
      font-weight: 600;
      color: var(--primary);
      margin-bottom: 0.5rem;
    }

    .highlight-desc {
      color: #6b7280;
      font-size: 0.95rem;
      line-height: 1.5;
    }

    /* Grid de comunidades */
    .teams-grid-classic {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
      gap: 2rem;
    }

    .team-card-classic {
      background: white;
      border-radius: 12px;
      overflow: hidden;
      box-shadow: 0 5px 15px rgba(0,0,0,0.05);
      transition: all 0.3s ease;
      border: 1px solid var(--gray);
    }

    .team-card-classic:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 25px rgba(0,0,0,0.1);
    }

    .team-image-classic {
      height: 180px;
      overflow: hidden;
      position: relative;
    }

    .team-image-classic img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: transform 0.3s ease;
    }

    .team-card-classic:hover .team-image-classic img {
      transform: scale(1.05);
    }

    .team-badge-classic {
      position: absolute;
      top: 1rem;
      right: 1rem;
      background: rgba(255, 255, 255, 0.9);
      padding: 0.3rem 0.8rem;
      border-radius: 50px;
      font-size: 0.8rem;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
      z-index: 2;
    }

    .team-badge-classic.points {
      background: var(--primary);
      color: white;
      left: 1rem;
      right: auto;
    }

    .team-badge-classic[style*="background:#ffe066"] {
      background: #ffe066 !important;
      color: #b8860b !important;
    }

    .team-badge-classic[style*="background:var(--gray)"] {
      background: var(--gray) !important;
      color: var(--primary-dark) !important;
    }

    .team-badge-classic[style*="background:#ffd600"] {
      background: #ffd600 !important;
      color: #a67c00 !important;
    }

    .team-content-classic {
      padding: 1.5rem;
    }

    .team-content-classic h3 {
      font-size: 1.3rem;
      margin-bottom: 0.8rem;
      color: #2d3748;
    }

    .team-content-classic p {
      color: #6b7280;
      margin-bottom: 1.5rem;
      font-size: 0.95rem;
      line-height: 1.6;
    }

    .team-meta-classic {
      display: flex;
      gap: 1rem;
      margin-bottom: 1.5rem;
      font-size: 0.85rem;
      flex-wrap: wrap;
    }

    .meta-item-classic {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      color: #6b7280;
    }

    .meta-item-classic i {
      color: var(--primary);
    }

    .members-count-classic {
      display: inline-flex;
      align-items: center;
      background: #f0f9ff;
      color: var(--primary);
      padding: 0.3rem 0.8rem;
      border-radius: 50px;
      font-size: 0.85rem;
      font-weight: 600;
    }

    .members-count-classic i {
      margin-right: 0.3rem;
    }

    .team-progress-classic {
      margin-bottom: 1.5rem;
    }

    .team-actions-classic {
      display: flex;
      gap: 0.8rem;
    }

    /* Barra de progreso */
    .progress-bar {
      width: 100%;
      background: var(--gray);
      border-radius: 4px;
      height: 8px;
      position: relative;
      overflow: hidden;
      margin-bottom: 0.5rem;
      box-shadow: none;
    }

    .progress-fill {
      height: 100%;
      background: var(--primary);
      border-radius: 4px;
      transition: width 0.4s cubic-bezier(.4,1,.7,1);
      color: #fff;
      font-size: 0.95em;
      font-weight: 700;
      display: flex;
      align-items: center;
      justify-content: flex-end;
      padding-right: 8px;
      box-shadow: none;
    }

    .progress-info {
      display: flex;
      justify-content: space-between;
      font-size: 0.9rem;
      color: #6b7280;
    }

    .team-badge-classic[style*="background:#ffe600"] {
      background: #ffe600 !important;
      color: #b8860b !important;
    }

    /* Tags */
    .team-tags-classic {
      display: flex;
      flex-wrap: wrap;
      gap: 0.3em;
      margin-bottom: 0.7em;
    }

    .team-tag-classic {
      background: #e6f0fa;
      color: var(--primary);
      border-radius: 50px;
      padding: 0.22em 0.95em;
      font-size: 0.92em;
      font-weight: 600;
      margin-bottom: 0.2em;
      margin-right: 0.3em;
      transition: background 0.2s, color 0.2s;
      border: 1px solid #dbeafe;
      letter-spacing: 0.01em;
      white-space: nowrap;
    }

    .team-tag-classic.tag-more {
      background: #ffe600;
      color: #a67c00;
      border: 1px solid #ffe600;
    }

    /* Badges de rol */
    .role-badge {
      padding: 0.3rem 0.8rem;
      border-radius: 50px;
      font-size: 0.85rem;
      font-weight: 600;
      display: inline-flex;
      align-items: center;
      gap: 0.3rem;
    }

    .role-badge.admin {
      background: #4a6fa5;
      color: white;
    }

    .role-badge.moderator {
      background: #4fc3a1;
      color: white;
    }

    .role-badge.member {
      background: #e2e8f0;
      color: #4a5568;
    }

    /* Paginación */
    .pagination {
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 1.2rem;
      margin: 3rem 0 1.5rem 0;
    }

    .pagination .btn {
      min-width: 40px;
      height: 40px;
      border-radius: 50%;
      padding: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.15rem;
    }

    #pageInfo {
      font-weight: 600;
      color: var(--primary);
      font-size: 1.1rem;
      min-width: 38px;
      text-align: center;
      letter-spacing: 0.03em;
    }

    /* Modal de administración */
    .admin-modal {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.5);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1000;
      opacity: 0;
      visibility: hidden;
      transition: all 0.3s;
    }

    .admin-modal.active {
      opacity: 1;
      visibility: visible;
    }

    .admin-modal-content {
      background: white;
      border-radius: 12px;
      width: 90%;
      max-width: 800px;
      max-height: 90vh;
      overflow-y: auto;
      padding: 2rem;
      box-shadow: 0 5px 20px rgba(0,0,0,0.2);
      position: relative;
    }

    .close-admin-modal {
      position: absolute;
      top: 1rem;
      right: 1rem;
      background: none;
      border: none;
      font-size: 1.5rem;
      cursor: pointer;
      color: #6b7280;
    }

    .admin-tabs {
      display: flex;
      border-bottom: 1px solid #e2e8f0;
      margin-bottom: 1.5rem;
    }

    .admin-tab {
      padding: 0.75rem 1.5rem;
      cursor: pointer;
      position: relative;
      font-weight: 500;
      color: #6b7280;
      background: none;
      border: none;
      outline: none;
    }

    .admin-tab.active {
      color: var(--primary);
      font-weight: 600;
    }

    .admin-tab.active::after {
      content: '';
      position: absolute;
      bottom: -1px;
      left: 0;
      width: 100%;
      height: 3px;
      background: var(--primary);
    }

    .admin-tab-content {
      display: none;
    }

    .admin-tab-content.active {
      display: block;
    }

    .members-list {
      margin-top: 1rem;
    }

    .member-item {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 1rem;
      border-bottom: 1px solid #e2e8f0;
    }

    .member-info {
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    .member-avatar {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      object-fit: cover;
    }

    .member-name {
      font-weight: 600;
    }

    .member-actions {
      display: flex;
      gap: 0.5rem;
    }

    .invite-form {
      margin-top: 1.5rem;
    }

    .invite-form input {
      width: 100%;
      padding: 0.75rem;
      border: 1px solid #e2e8f0;
      border-radius: 6px;
      margin-bottom: 1rem;
    }

    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 1rem;
      margin-bottom: 1.5rem;
    }

    .stat-card {
      background: #f8fafc;
      border-radius: 8px;
      padding: 1.5rem;
      text-align: center;
    }

    .stat-value {
      font-size: 2rem;
      font-weight: 700;
      color: var(--primary);
      margin-bottom: 0.5rem;
    }

    .stat-label {
      color: #6b7280;
      font-size: 0.9rem;
    }

    /* Responsive */
    @media (max-width: 768px) {
      .teams-intro {
        flex-direction: column;
        text-align: center;
        padding: 1.5rem;
      }

      .teams-highlights {
        grid-template-columns: 1fr;
      }

      .team-card-classic {
        margin-bottom: 1.5rem;
      }

      .teams-grid-classic {
        grid-template-columns: 1fr;
      }

      .admin-modal-content {
        width: 95%;
        padding: 1rem;
      }

      .member-item {
        flex-direction: column;
        align-items: flex-start;
        gap: 1rem;
      }

      .member-actions {
        width: 100%;
        justify-content: flex-end;
      }
    }

    .teams-tabs {
      display: flex;
      border-bottom: 1.5px solid var(--gray);
      margin-bottom: 2rem;
      gap: 0.5rem;
      flex-wrap: wrap;
    }

    .teams-tab {
      background: none;
      border: none;
      outline: none;
      padding: 0.75rem 1.5rem;
      font-size: 1rem;
      color: #6b7280;
      cursor: pointer;
      font-weight: 500;
      border-radius: 8px 8px 0 0;
      transition: color 0.2s, background 0.2s;
      position: relative;
    }

    .teams-tab.active {
      color: var(--primary);
      background: #f8fafc;
      font-weight: 700;
    }

    .teams-tab.active::after {
      content: '';
      position: absolute;
      left: 0; right: 0; bottom: -1.5px;
      height: 3px;
      background: var(--primary);
      border-radius: 2px 2px 0 0;
    }
  </style>
{% endblock %}

{% block content %}
  <!-- Modal de administración -->
  <div class="admin-modal" id="adminModal">
    <div class="admin-modal-content">
      <button class="close-admin-modal" id="closeAdminModal">&times;</button>
      <h2 id="adminModalTitle">Administrar Comunidad</h2>
      
      <div class="admin-tabs">
        <button class="admin-tab active" data-tab="overview">Resumen</button>
        <button class="admin-tab" data-tab="members">Miembros</button>
        <button class="admin-tab" data-tab="settings">Configuración</button>
        <button class="admin-tab" data-tab="content">Contenido</button>
      </div>
      
      <div class="admin-tab-content active" id="overviewTab">
        <div class="stats-grid">
          <div class="stat-card">
            <div class="stat-value" id="membersCount">0</div>
            <div class="stat-label">Miembros</div>
          </div>
          <div class="stat-card">
            <div class="stat-value" id="activitiesCount">0</div>
            <div class="stat-label">Actividades</div>
          </div>
          <div class="stat-card">
            <div class="stat-value" id="impactPoints">0</div>
            <div class="stat-label">Puntos de Impacto</div>
          </div>
          <div class="stat-card">
            <div class="stat-value" id="beneficiariesCount">0</div>
            <div class="stat-label">Beneficiarios</div>
          </div>
        </div>
        
        <h3>Progreso de la comunidad</h3>
        <div class="progress-bar">
          <div class="progress-fill" id="communityProgress" style="width: 0%"></div>
        </div>
        <div class="progress-info">
          <span id="progressPercent">0% completado</span>
          <span id="progressAmount">0 € de 0 €</span>
        </div>
        
        <h3 style="margin-top: 2rem;">Acciones rápidas</h3>
        <div class="team-actions-classic" style="margin-top: 1rem;">
          <button class="btn btn-primary" id="createCauseBtn">
            <i class="fas fa-heart"></i> Crear Causa
          </button>
          <button class="btn btn-accent" id="createTaskBtn">
            <i class="fas fa-tasks"></i> Crear Tarea
          </button>
          <button class="btn btn-primary" id="createChallengeBtn">
            <i class="fas fa-trophy"></i> Crear Reto
          </button>
          <button class="btn btn-accent" id="createVolunteeringBtn">
            <i class="fas fa-hands-helping"></i> Crear Voluntariado
          </button>
        </div>
      </div>
      
      <div class="admin-tab-content" id="membersTab">
        <h3>Miembros actuales</h3>
        <div class="members-list" id="membersList">
          <!-- Los miembros se cargarán aquí dinámicamente -->
        </div>
        
        <h3 style="margin-top: 2rem;">Invitar nuevos miembros</h3>
        <div class="invite-form">
          <input type="email" id="inviteEmail" placeholder="Correo electrónico del usuario a invitar">
          <select id="inviteRole" class="form-control">
            <option value="member">Miembro</option>
            <option value="coordinator">Coordinador</option>
            <option value="founder">Fundador</option>
          </select>
          <button class="btn btn-primary" id="sendInviteBtn" style="margin-top: 1rem;">
            <i class="fas fa-paper-plane"></i> Enviar Invitación
          </button>
        </div>
      </div>
      
      <div class="admin-tab-content" id="settingsTab">
        <form id="teamSettingsForm">
          <div class="form-group">
            <label for="editTeamName">Nombre de la comunidad</label>
            <input type="text" id="editTeamName" name="editTeamName" required>
          </div>
          
          <div class="form-group">
            <label for="editTeamDesc">Descripción</label>
            <textarea id="editTeamDesc" name="editTeamDesc" rows="4" required></textarea>
          </div>
          
          <div class="form-group">
            <label for="editTeamPhoto">Foto/logo de la comunidad</label>
            <input type="file" id="editTeamPhoto" name="editTeamPhoto" accept="image/*">
            <img id="editTeamPhotoPreview" style="max-width: 200px; margin-top: 1rem; display: none;">
          </div>
          
          <div class="form-inline-group">
            <div class="form-group">
              <label for="editTeamCategory">Categoría</label>
              <select id="editTeamCategory" name="editTeamCategory" required>
                <option value="medio_ambiente">Medio Ambiente</option>
                <option value="educacion">Educación</option>
                <option value="salud">Salud</option>
                <option value="animales">Animales</option>
                <option value="comunidad">Comunidad</option>
                <option value="otros">Otros</option>
              </select>
            </div>
            <div class="form-group">
              <label for="editTeamPrivacy">Privacidad</label>
              <select id="editTeamPrivacy" name="editTeamPrivacy" required>
                <option value="public">Pública</option>
                <option value="private">Privada</option>
              </select>
            </div>
          </div>
          
          <div class="form-group">
            <label for="editTeamTags">Etiquetas (separadas por comas)</label>
            <input type="text" id="editTeamTags" name="editTeamTags">
          </div>
          
          <div class="form-group">
            <label for="editTeamGoal">Meta de recaudación (€)</label>
            <input type="number" id="editTeamGoal" name="editTeamGoal" min="0">
          </div>
          
          <button type="submit" class="btn btn-primary">
            <i class="fas fa-save"></i> Guardar Cambios
          </button>
        </form>
      </div>
      
      <div class="admin-tab-content" id="contentTab">
        <h3>Mensaje para la comunidad</h3>
        <textarea id="teamMessage" rows="5" style="width: 100%; margin-bottom: 1rem;"></textarea>
        <button class="btn btn-primary" id="saveMessageBtn">
          <i class="fas fa-bullhorn"></i> Publicar Mensaje
        </button>
        
        <h3 style="margin-top: 2rem;">Actividades recientes</h3>
        <div id="recentActivities">
          <!-- Las actividades se cargarán aquí dinámicamente -->
        </div>
      </div>
    </div>
  </div>

  <!-- Contenido principal de la página Mis Comunidades -->
  <div class="main-container">
    <!-- Sección introductoria -->
    <div class="teams-intro">
      <div class="teams-intro-icon">
        <i class="fas fa-user-group"></i>
      </div>
      <div class="teams-intro-content">
        <h2>Mis Comunidades</h2>
        <p>Aquí puedes gestionar todas las comunidades de las que formas parte. Como administrador, podrás modificar la configuración, invitar miembros, crear actividades y mucho más.</p>
      </div>
    </div>
    
    <!-- Destacados -->
    <div class="teams-highlights">
      <div class="highlight-card">
        <div class="highlight-icon"><i class="fas fa-crown"></i></div>
        <div class="highlight-title">Tus comunidades</div>
        <div class="highlight-desc">Gestiona las comunidades que has creado o donde tienes permisos de administración.</div>
      </div>
      <div class="highlight-card">
        <div class="highlight-icon"><i class="fas fa-users"></i></div>
        <div class="highlight-title">Miembro activo</div>
        <div class="highlight-desc">Tus comunidades donde participas como miembro regular.</div>
      </div>
      <div class="highlight-card">
        <div class="highlight-icon"><i class="fas fa-bell"></i></div>
        <div class="highlight-title">Solicitudes</div>
        <div class="highlight-desc">Gestiona las solicitudes pendientes para unirse a tus comunidades.</div>
      </div>
      <div class="highlight-card">
        <div class="highlight-icon"><i class="fas fa-chart-line"></i></div>
        <div class="highlight-title">Tu impacto</div>
        <div class="highlight-desc">Revisa el impacto colectivo de todas tus comunidades.</div>
      </div>
    </div>
    
    <!-- Cabecera con búsqueda -->
    <div class="section-header">
      <h1>Tus Comunidades</h1>
    </div>
    
    <div class="search-container">
      <input type="text" id="search-input" placeholder="Buscar entre tus comunidades...">
      <i class="fas fa-search" style="color:#4a6fa5;"></i>
    </div>
    
    <!-- Tabs para filtrar -->
    <div class="tabs">
      <button class="tab active" data-filter="all">Todas</button>
      <button class="tab" data-filter="founder">Founder</button>
      <button class="tab" data-filter="coordinator">Coordinator</button>
      <button class="tab" data-filter="member">Miembro</button>
      <button class="tab" data-filter="pending">Requests</button>
    </div>
    
    <!-- Grid de comunidades -->
    <div class="teams-grid-classic" id="teamsGrid">
      <!-- Las comunidades se cargarán aquí dinámicamente -->
    </div>
    
    <!-- Paginación -->
    <div class="pagination" id="pagination">
      <button id="prevPage" class="btn btn-outline" disabled>
        <i class="fas fa-chevron-left"></i>
      </button>
      <span id="pageInfo">1</span>
      <button id="nextPage" class="btn btn-outline" disabled>
        <i class="fas fa-chevron-right"></i>
      </button>
    </div>
  </div>
{% endblock %}

{% block scripts %}
  {{ super() }}
  <script>
    document.addEventListener('DOMContentLoaded', async function() {
      let currentPage = 1;
      const itemsPerPage = 9;
      let allTeams = [];
      let filteredTeams = [];
      let currentAdminTeam = null;

      // 1. Obtener usuario actual
      const { data: { session } } = await supabase.auth.getSession();
      if (!session?.user) {
        window.location.href = '/login?return=/my-teams';
        return;
      }
      const userId = session.user.id;

      // 2. Cargar comunidades del usuario
      await loadUserTeams();

      // 3. Eventos UI
      document.querySelectorAll('.tab').forEach(tab => {
        tab.addEventListener('click', function() {
          document.querySelector('.tab.active').classList.remove('active');
          this.classList.add('active');
          currentPage = 1;
          filterAndRenderTeams();
        });
      });
      document.getElementById('search-input').addEventListener('input', function() {
        currentPage = 1;
        filterAndRenderTeams();
      });
      document.getElementById('prevPage').addEventListener('click', function() {
        if (currentPage > 1) { currentPage--; renderTeams(); }
      });
      document.getElementById('nextPage').addEventListener('click', function() {
        const totalPages = Math.ceil(filteredTeams.length / itemsPerPage);
        if (currentPage < totalPages) { currentPage++; renderTeams(); }
      });
      document.getElementById('closeAdminModal').addEventListener('click', function() {
        document.getElementById('adminModal').classList.remove('active');
        document.body.style.overflow = '';
      });

      // Tabs del modal de administración
      document.querySelectorAll('.admin-tab').forEach(tab => {
        tab.addEventListener('click', function() {
          const tabId = this.getAttribute('data-tab');
          document.querySelectorAll('.admin-tab-content').forEach(content => content.classList.remove('active'));
          document.querySelectorAll('.admin-tab').forEach(t => t.classList.remove('active'));
          this.classList.add('active');
          document.getElementById(`${tabId}Tab`).classList.add('active');
          if (tabId === 'members' && currentAdminTeam) loadTeamMembers(currentAdminTeam.id);
          if (tabId === 'content' && currentAdminTeam) loadRecentActivities(currentAdminTeam.id);
        });
      });

      // --- FUNCIONES PRINCIPALES ---

      async function loadUserTeams() {
        try {
          // 1. Obtener todos los memberships del usuario
          const { data: memberships, error: membershipsError } = await supabase
            .from('team_members')
            .select('team_id, role')
            .eq('user_id', userId);
          if (membershipsError) throw membershipsError;

          // 2. Obtener los equipos donde el usuario es el creador
          const { data: createdTeams, error: createdTeamsError } = await supabase
            .from('teams')
            .select('*')
            .eq('creator_id', userId);
          if (createdTeamsError) throw createdTeamsError;

          // 3. Obtener los detalles de los equipos donde es miembro
          const teamIds = memberships.map(m => m.team_id);
          let { data: teams, error: teamsError } = await supabase
            .from('teams')
            .select('*')
            .in('id', teamIds.length ? teamIds : ['00000000-0000-0000-0000-000000000000'])
            .order('created_at', { ascending: false });
          if (teamsError) throw teamsError;

          // 4. Combinar y eliminar duplicados (si el creador también es miembro)
          const allTeamIds = new Set();
          allTeams = [
            ...teams.map(team => {
              const membership = memberships.find(m => m.team_id === team.id);
              allTeamIds.add(team.id);
              const role = membership ? membership.role : (team.creator_id === userId ? 'founder' : 'member');
              return {
                ...team,
                user_role: role,
                is_admin: ['founder', 'admin', 'coordinator'].includes(role),
                is_moderator: ['admin', 'coordinator'].includes(role),
                is_founder: role === 'founder',
                tags: Array.isArray(team.tags) ? team.tags : [],
              };
            }),
            ...createdTeams
              .filter(team => !allTeamIds.has(team.id))
              .map(team => ({
                ...team,
                user_role: 'founder',
                is_admin: true,
                is_moderator: false,
                is_founder: true,
                tags: Array.isArray(team.tags) ? team.tags : [],
              }))
          ];

          filteredTeams = [...allTeams];
          currentPage = 1;
          renderTeams();
        } catch (error) {
          console.error('Error loading user teams:', error);
          showEmptyState();
        }
      }

      function showEmptyState() {
        const container = document.getElementById('teamsGrid');
        container.innerHTML = `
          <div class="empty-state" style="grid-column: 1 / -1; text-align: center; padding: 3rem;">
            <i class="fas fa-users-slash" style="font-size: 3rem; color: #a0aec0; margin-bottom: 1rem;"></i>
            <h3 style="color: #4a5568; margin-bottom: 0.5rem;">No formas parte de ninguna comunidad aún</h3>
            <p style="color: #718096; margin-bottom: 1.5rem;">Únete a una comunidad existente o crea una nueva para empezar.</p>
            <a href="/teams" class="btn btn-primary" style="margin-right: 1rem;">
              <i class="fas fa-search"></i> Explorar Comunidades
            </a>
            <a href="/teams/create" class="btn btn-accent">
              <i class="fas fa-plus"></i> Crear Comunidad
            </a>
          </div>
        `;
        document.getElementById('pagination').style.display = 'none';
      }

      function filterAndRenderTeams() {
        const activeFilter = document.querySelector('.tab.active').getAttribute('data-filter');
        const searchTerm = document.getElementById('search-input').value.toLowerCase();
        filteredTeams = allTeams.filter(team => {
          if (activeFilter !== 'all') {
            if (activeFilter === 'founder' && team.user_role !== 'founder') return false;
            if (activeFilter === 'coordinator' && !['coordinator', 'admin'].includes(team.user_role)) return false;
            if (activeFilter === 'member' && team.user_role !== 'member') return false;
            if (activeFilter === 'pending' && team.user_role !== 'pending') return false;
          }
          if (searchTerm) {
            const matchesName = team.name && team.name.toLowerCase().includes(searchTerm);
            const matchesDesc = team.description && team.description.toLowerCase().includes(searchTerm);
            const matchesTags = team.tags && team.tags.some(tag => tag && tag.toLowerCase().includes(searchTerm));
            return matchesName || matchesDesc || matchesTags;
          }
          return true;
        });
        renderTeams();
      }

      function renderTeams() {
        const startIdx = (currentPage - 1) * itemsPerPage;
        const endIdx = startIdx + itemsPerPage;
        const paginatedTeams = filteredTeams.slice(startIdx, endIdx);
        const container = document.getElementById('teamsGrid');
        container.innerHTML = '';
        if (paginatedTeams.length === 0) {
          container.innerHTML = `
            <div class="empty-state" style="grid-column: 1 / -1; text-align: center; padding: 3rem;">
              <i class="fas fa-search" style="font-size: 3rem; color: #a0aec0; margin-bottom: 1rem;"></i>
              <h3 style="color: #4a5568; margin-bottom: 0.5rem;">No se encontraron comunidades</h3>
              <p style="color: #718096;">No hay comunidades que coincidan con tu búsqueda.</p>
            </div>
          `;
          document.getElementById('pagination').style.display = 'none';
          return;
        }
        document.getElementById('pagination').style.display = 'flex';

        paginatedTeams.forEach(team => {
          const membersCount = team.members_count || 1;
          const tagsHtml = team.tags?.length
            ? `<div class="team-tags-classic">${team.tags.slice(0, 4).map(tag => `<span class="team-tag-classic">${tag}</span>`).join('')}${team.tags.length > 4 ? `<span class="team-tag-classic tag-more">+${team.tags.length - 4}</span>` : ''}</div>`
            : '';
          const isTrending = membersCount >= 20 || (team.impact || 0) >= 1000;
          const recaudado = team.funds_raised || 0;
          const meta = team.goal || 1000;
          const porcentaje = meta ? Math.min(100, Math.round((recaudado / meta) * 100)) : 0;
          const roleBadgeClass = {
            'founder': 'role-badge admin',
            'coordinator': 'role-badge moderator',
            'admin': 'role-badge moderator',
            'member': 'role-badge member',
            'pending': 'role-badge member'
          }[team.user_role] || 'role-badge member';
          const roleBadgeText = {
            'founder': 'Fundador',
            'coordinator': 'Coordinador',
            'admin': 'Coordinador',
            'member': 'Miembro',
            'pending': 'Solicitud pendiente'
          }[team.user_role] || 'Miembro';
          const roleBadge = `<span class="${roleBadgeClass}"><i class="fas fa-${team.user_role === 'admin' ? 'crown' : team.user_role === 'moderator' ? 'star' : 'user'}"></i> ${roleBadgeText}</span>`;
          let badgePrivada = team.privacy === 'private'
            ? `<div class="team-badge-classic" style="top:1rem;right:1rem;background:var(--gray);color:var(--primary-dark);"><i class="fas fa-lock"></i> Privada</div>`
            : '';
          let badgeTrending = isTrending
            ? `<div class="team-badge-classic" style="top:${team.privacy === 'private' ? '3.2rem' : '1rem'};right:1rem;background:#ffe600;color:#b8860b;"><i class="fas fa-arrow-trend-up"></i> Trending</div>`
            : '';
          const card = document.createElement('div');
          card.className = 'team-card-classic';
          card.innerHTML = `
            <div class="team-image-classic">
              <img src="${team.photo || 'https://via.placeholder.com/350x180?text=Comunidad'}" alt="${team.name}">
              <div class="team-badge-classic points" style="top:1rem;left:1rem;right:auto;background:var(--primary);color:#fff;">
                <i class="fas fa-bolt"></i> +${team.impact || 0} pts
              </div>
              ${badgePrivada}${badgeTrending}
            </div>
            <div class="team-content-classic">
              <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.5rem;">
                <h3>${team.name}</h3>
                ${roleBadge}
              </div>
              <p>${team.description || 'Esta comunidad no tiene descripción aún.'}</p>
              <div class="team-meta-classic">
                <div class="meta-item-classic"><i class="fas fa-layer-group"></i> ${getCategoryName(team.category)}</div>
                <div class="meta-item-classic"><i class="fas fa-tasks"></i> ${team.activities_count || 0} actividades</div>
                <div class="meta-item-classic"><i class="fas fa-heart"></i> ${team.beneficiaries || 0} beneficiarios</div>
                <div class="meta-item-classic"><i class="fas fa-users"></i> ${membersCount} miembros</div>
              </div>
              ${tagsHtml}
              <div class="team-progress-classic">
                <div class="progress-bar">
                  <div class="progress-fill" style="width:${porcentaje}%;">
                    ${porcentaje > 10 ? porcentaje + '%' : ''}
                  </div>
                </div>
                <div class="progress-info">
                  <span>${porcentaje}% completado</span>
                  <span>${recaudado} € de ${meta} €</span>
                </div>
              </div>
              <div class="team-actions-classic">
                <a href="/teams/${team.id}" class="btn btn-primary">
                  Ver más
                </a>
                ${team.user_role === 'pending' ? `
                  <button class="btn btn-outline" disabled>
                    <i class="fas fa-clock"></i> Pendiente
                  </button>
                ` : team.is_admin || team.is_moderator ? `
                  <button class="btn btn-accent admin-team-btn" data-team-id="${team.id}">
                    <i class="fas fa-cog"></i> Administrar
                  </button>
                ` : `
                  <button class="btn btn-outline leave-team-btn" data-team-id="${team.id}">
                    <i class="fas fa-sign-out-alt"></i> Salir
                  </button>
                `}
              </div>
            </div>
          `;
          container.appendChild(card);
        });

        // Botones de administrar
        document.querySelectorAll('.admin-team-btn').forEach(btn => {
          btn.addEventListener('click', function() {
            const teamId = this.getAttribute('data-team-id');
            const team = allTeams.find(t => t.id === teamId);
            if (team) openAdminModal(team);
          });
        });
        // Botones de salir
        document.querySelectorAll('.leave-team-btn').forEach(btn => {
          btn.addEventListener('click', async function() {
            const teamId = this.getAttribute('data-team-id');
            if (confirm('¿Estás seguro de que quieres salir de esta comunidad?')) {
              try {
                const { error } = await supabase
                  .from('team_members')
                  .delete()
                  .eq('team_id', teamId)
                  .eq('user_id', userId);
                if (error) throw error;
                await loadUserTeams();
                alert('Has salido de la comunidad correctamente.');
              } catch (error) {
                console.error('Error leaving team:', error);
                alert('Error al salir de la comunidad: ' + error.message);
              }
            }
          });
        });
        updatePagination();
      }

      function updatePagination() {
        const totalPages = Math.max(1, Math.ceil(filteredTeams.length / itemsPerPage));
        document.getElementById('pageInfo').textContent = `${currentPage} / ${totalPages}`;
        document.getElementById('prevPage').disabled = currentPage <= 1;
        document.getElementById('nextPage').disabled = currentPage >= totalPages;
      }

      function getCategoryName(category) {
        const categories = {
          'medio_ambiente': 'Medio Ambiente',
          'educacion': 'Educación',
          'salud': 'Salud',
          'animales': 'Animales',
          'comunidad': 'Comunidad',
          'otros': 'Otros'
        };
        return categories[category] || 'General';
      }

      // --- FUNCIONES MODAL Y COMPLEMENTARIAS ---

      function openAdminModal(team) {
        currentAdminTeam = team;
        document.getElementById('adminModalTitle').textContent = `Administrar ${team.name}`;
        document.getElementById('adminModal').classList.add('active');
        document.body.style.overflow = 'hidden';

        // Actualizar datos en el modal
        document.getElementById('membersCount').textContent = team.members_count || 0;
        document.getElementById('activitiesCount').textContent = team.activities_count || 0;
        document.getElementById('impactPoints').textContent = team.impact || 0;
        document.getElementById('beneficiariesCount').textContent = team.beneficiaries || 0;

        // Configurar progreso
        const recaudado = team.funds_raised || 0;
        const meta = team.goal || 1000;
        const porcentaje = meta ? Math.min(100, Math.round((recaudado / meta) * 100)) : 0;
        document.getElementById('communityProgress').style.width = `${porcentaje}%`;
        document.getElementById('progressPercent').textContent = `${porcentaje}% completado`;
        document.getElementById('progressAmount').textContent = `${recaudado} € de ${meta} €`;
      }

      async function loadTeamMembers(teamId) {
        try {
          const { data: members, error } = await supabase
            .from('team_members')
            .select('user:profiles(id, name, avatar_url), role')
            .eq('team_id', teamId);

          if (error) throw error;

          const membersList = document.getElementById('membersList');
          membersList.innerHTML = '';

          members.forEach(member => {
            const memberItem = document.createElement('div');
            memberItem.className = 'member-item';
            memberItem.innerHTML = `
              <div class="member-info">
                <img src="${member.user.avatar_url || '/default-avatar.png'}" class="member-avatar" alt="${member.user.name}">
                <span class="member-name">${member.user.name}</span>
              </div>
              <div class="member-actions">
                <span class="role-badge ${member.role === 'founder' ? 'admin' : member.role === 'coordinator' ? 'moderator' : 'member'}">
                  ${member.role === 'founder' ? 'Fundador' : member.role === 'coordinator' ? 'Coordinador' : 'Miembro'}
                </span>
              </div>
            `;
            membersList.appendChild(memberItem);
          });
        } catch (error) {
          console.error('Error loading team members:', error);
        }
      }

      async function loadRecentActivities(teamId) {
        try {
          const { data: activities, error } = await supabase
            .from('activities')
            .select('*')
            .eq('team_id', teamId)
            .order('created_at', { ascending: false })
            .limit(5);

          if (error) throw error;

          const activitiesContainer = document.getElementById('recentActivities');
          activitiesContainer.innerHTML = '';

          if (!activities || activities.length === 0) {
            activitiesContainer.innerHTML = '<p>No hay actividades recientes.</p>';
            return;
          }

          activities.forEach(activity => {
            const activityElement = document.createElement('div');
            activityElement.className = 'activity-item';
            activityElement.innerHTML = `
              <h4>${activity.title}</h4>
              <p>${activity.description}</p>
              <small>${new Date(activity.created_at).toLocaleDateString()}</small>
            `;
            activitiesContainer.appendChild(activityElement);
          });
        } catch (error) {
          console.error('Error loading recent activities:', error);
        }
      }
    }); // Fin del DOMContentLoaded
  </script>
{% endblock %}

==== C:\Users\gabi2\Desktop\Solidarity-web\views\teams\myteams.njk ====
{% extends "layout.njk" %}

{% block title %}Solidarity - Mis Comunidades{% endblock %}

{% block head %}
  {{ super() }}
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
  <style>
    :root {
      --primary: #4a6fa5;
      --primary-dark: #166088;
      --gray: #e2e8f0;
      --white: #fff;
      --accent: #4fc3a1;
      --accent-dark: #3da58a;
      --urgent: #e53e3e;
    }

    .main-container {
      max-width: 1200px;
      margin: 2rem auto;
      padding: 0 2rem;
    }

    .section-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;
    }

    .section-header h1 {
      font-size: 2rem;
      color: var(--primary);
      font-weight: 700;
    }

    .search-container {
      margin-bottom: 2rem;
      display: flex;
      align-items: center;
      gap: 0.7rem;
    }

    .search-container input {
      flex: 1;
      padding: 0.6rem 1.2rem;
      border-radius: 7px;
      border: 1.5px solid var(--gray);
      font-size: 1.05rem;
      outline: none;
      transition: border 0.2s;
      background: #fff;
    }

    .search-container input:focus {
      border-color: var(--primary);
    }

    .tabs {
      display: flex;
      border-bottom: 1px solid var(--gray);
      margin-bottom: 2rem;
      flex-wrap: wrap;
    }

    .tab {
      padding: 0.75rem 1.5rem;
      cursor: pointer;
      position: relative;
      font-weight: 500;
      color: #6b7280;
      background: none;
      border: none;
      outline: none;
    }

    .tab.active {
      color: var(--primary);
      font-weight: 600;
    }

    .tab.active::after {
      content: '';
      position: absolute;
      bottom: -1px;
      left: 0;
      width: 100%;
      height: 3px;
      background: var(--primary);
    }

    /* Intro y destacados */
    .teams-intro {
      background: linear-gradient(135deg, #f0f7ff 0%, #e6f0fa 100%);
      border-radius: 16px;
      padding: 2.5rem;
      margin-bottom: 3rem;
      display: flex;
      align-items: center;
      gap: 2rem;
      border: 1px solid var(--gray);
    }

    .teams-intro-icon {
      font-size: 3.5rem;
      color: var(--accent);
    }

    .teams-intro-content h2 {
      font-size: 1.8rem;
      color: var(--primary);
      margin-bottom: 0.5rem;
    }

    .teams-intro-content p {
      color: #4a5568;
      line-height: 1.6;
    }

    .teams-highlights {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
      gap: 1.5rem;
      margin-bottom: 3rem;
    }

    .highlight-card {
      background: white;
      border-radius: 10px;
      padding: 1.5rem;
      box-shadow: 0 5px 15px rgba(0,0,0,0.05);
      border: 1px solid var(--gray);
      transition: all 0.3s ease;
    }

    .highlight-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 25px rgba(0,0,0,0.1);
      border-color: var(--accent);
    }

    .highlight-icon {
      font-size: 1.8rem;
      color: var(--accent);
      margin-bottom: 1rem;
    }

    .highlight-title {
      font-size: 1.1rem;
      font-weight: 600;
      color: var(--primary);
      margin-bottom: 0.5rem;
    }

    .highlight-desc {
      color: #6b7280;
      font-size: 0.95rem;
      line-height: 1.5;
    }

    /* Grid de comunidades */
    .teams-grid-classic {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
      gap: 2rem;
    }

    .team-card-classic {
      background: white;
      border-radius: 12px;
      overflow: hidden;
      box-shadow: 0 5px 15px rgba(0,0,0,0.05);
      transition: all 0.3s ease;
      border: 1px solid var(--gray);
    }

    .team-card-classic:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 25px rgba(0,0,0,0.1);
    }

    .team-image-classic {
      height: 180px;
      overflow: hidden;
      position: relative;
    }

    .team-image-classic img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: transform 0.3s ease;
    }

    .team-card-classic:hover .team-image-classic img {
      transform: scale(1.05);
    }

    .team-badge-classic {
      position: absolute;
      top: 1rem;
      right: 1rem;
      background: rgba(255, 255, 255, 0.9);
      padding: 0.3rem 0.8rem;
      border-radius: 50px;
      font-size: 0.8rem;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
      z-index: 2;
    }

    .team-badge-classic.points {
      background: var(--primary);
      color: white;
      left: 1rem;
      right: auto;
    }

    .team-badge-classic[style*="background:#ffe066"] {
      background: #ffe066 !important;
      color: #b8860b !important;
    }

    .team-badge-classic[style*="background:var(--gray)"] {
      background: var(--gray) !important;
      color: var(--primary-dark) !important;
    }

    .team-badge-classic[style*="background:#ffd600"] {
      background: #ffd600 !important;
      color: #a67c00 !important;
    }

    .team-content-classic {
      padding: 1.5rem;
    }

    .team-content-classic h3 {
      font-size: 1.3rem;
      margin-bottom: 0.8rem;
      color: #2d3748;
    }

    .team-content-classic p {
      color: #6b7280;
      margin-bottom: 1.5rem;
      font-size: 0.95rem;
      line-height: 1.6;
    }

    .team-meta-classic {
      display: flex;
      gap: 1rem;
      margin-bottom: 1.5rem;
      font-size: 0.85rem;
      flex-wrap: wrap;
    }

    .meta-item-classic {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      color: #6b7280;
    }

    .meta-item-classic i {
      color: var(--primary);
    }

    .members-count-classic {
      display: inline-flex;
      align-items: center;
      background: #f0f9ff;
      color: var(--primary);
      padding: 0.3rem 0.8rem;
      border-radius: 50px;
      font-size: 0.85rem;
      font-weight: 600;
    }

    .members-count-classic i {
      margin-right: 0.3rem;
    }

    .team-progress-classic {
      margin-bottom: 1.5rem;
    }

    .team-actions-classic {
      display: flex;
      gap: 0.8rem;
    }

    /* Barra de progreso */
    .progress-bar {
      width: 100%;
      background: var(--gray);
      border-radius: 4px;
      height: 8px;
      position: relative;
      overflow: hidden;
      margin-bottom: 0.5rem;
      box-shadow: none;
    }

    .progress-fill {
      height: 100%;
      background: var(--primary);
      border-radius: 4px;
      transition: width 0.4s cubic-bezier(.4,1,.7,1);
      color: #fff;
      font-size: 0.95em;
      font-weight: 700;
      display: flex;
      align-items: center;
      justify-content: flex-end;
      padding-right: 8px;
      box-shadow: none;
    }

    .progress-info {
      display: flex;
      justify-content: space-between;
      font-size: 0.9rem;
      color: #6b7280;
    }

    .team-badge-classic[style*="background:#ffe600"] {
      background: #ffe600 !important;
      color: #b8860b !important;
    }

    /* Tags */
    .team-tags-classic {
      display: flex;
      flex-wrap: wrap;
      gap: 0.3em;
      margin-bottom: 0.7em;
    }

    .team-tag-classic {
      background: #e6f0fa;
      color: var(--primary);
      border-radius: 50px;
      padding: 0.22em 0.95em;
      font-size: 0.92em;
      font-weight: 600;
      margin-bottom: 0.2em;
      margin-right: 0.3em;
      transition: background 0.2s, color 0.2s;
      border: 1px solid #dbeafe;
      letter-spacing: 0.01em;
      white-space: nowrap;
    }

    .team-tag-classic.tag-more {
      background: #ffe600;
      color: #a67c00;
      border: 1px solid #ffe600;
    }

    /* Badges de rol */
    .role-badge {
      padding: 0.3rem 0.8rem;
      border-radius: 50px;
      font-size: 0.85rem;
      font-weight: 600;
      display: inline-flex;
      align-items: center;
      gap: 0.3rem;
    }

    .role-badge.admin {
      background: #4a6fa5;
      color: white;
    }

    .role-badge.moderator {
      background: #4fc3a1;
      color: white;
    }

    .role-badge.member {
      background: #e2e8f0;
      color: #4a5568;
    }

    /* Paginación */
    .pagination {
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 1.2rem;
      margin: 3rem 0 1.5rem 0;
    }

    .pagination .btn {
      min-width: 40px;
      height: 40px;
      border-radius: 50%;
      padding: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.15rem;
    }

    #pageInfo {
      font-weight: 600;
      color: var(--primary);
      font-size: 1.1rem;
      min-width: 38px;
      text-align: center;
      letter-spacing: 0.03em;
    }

    /* Modal de administración */
    .admin-modal {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.5);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1000;
      opacity: 0;
      visibility: hidden;
      transition: all 0.3s;
    }

    .admin-modal.active {
      opacity: 1;
      visibility: visible;
    }

    .admin-modal-content {
      background: white;
      border-radius: 12px;
      width: 90%;
      max-width: 800px;
      max-height: 90vh;
      overflow-y: auto;
      padding: 2rem;
      box-shadow: 0 5px 20px rgba(0,0,0,0.2);
      position: relative;
    }

    .close-admin-modal {
      position: absolute;
      top: 1rem;
      right: 1rem;
      background: none;
      border: none;
      font-size: 1.5rem;
      cursor: pointer;
      color: #6b7280;
    }

    .admin-tabs {
      display: flex;
      border-bottom: 1px solid #e2e8f0;
      margin-bottom: 1.5rem;
    }

    .admin-tab {
      padding: 0.75rem 1.5rem;
      cursor: pointer;
      position: relative;
      font-weight: 500;
      color: #6b7280;
      background: none;
      border: none;
      outline: none;
    }

    .admin-tab.active {
      color: var(--primary);
      font-weight: 600;
    }

    .admin-tab.active::after {
      content: '';
      position: absolute;
      bottom: -1px;
      left: 0;
      width: 100%;
      height: 3px;
      background: var(--primary);
    }

    .admin-tab-content {
      display: none;
    }

    .admin-tab-content.active {
      display: block;
    }

    .members-list {
      margin-top: 1rem;
    }

    .member-item {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 1rem;
      border-bottom: 1px solid #e2e8f0;
    }

    .member-info {
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    .member-avatar {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      object-fit: cover;
    }

    .member-name {
      font-weight: 600;
    }

    .member-actions {
      display: flex;
      gap: 0.5rem;
    }

    .invite-form {
      margin-top: 1.5rem;
    }

    .invite-form input {
      width: 100%;
      padding: 0.75rem;
      border: 1px solid #e2e8f0;
      border-radius: 6px;
      margin-bottom: 1rem;
    }

    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 1rem;
      margin-bottom: 1.5rem;
    }

    .stat-card {
      background: #f8fafc;
      border-radius: 8px;
      padding: 1.5rem;
      text-align: center;
    }

    .stat-value {
      font-size: 2rem;
      font-weight: 700;
      color: var(--primary);
      margin-bottom: 0.5rem;
    }

    .stat-label {
      color: #6b7280;
      font-size: 0.9rem;
    }

    /* Responsive */
    @media (max-width: 768px) {
      .teams-intro {
        flex-direction: column;
        text-align: center;
        padding: 1.5rem;
      }

      .teams-highlights {
        grid-template-columns: 1fr;
      }

      .team-card-classic {
        margin-bottom: 1.5rem;
      }

      .teams-grid-classic {
        grid-template-columns: 1fr;
      }

      .admin-modal-content {
        width: 95%;
        padding: 1rem;
      }

      .member-item {
        flex-direction: column;
        align-items: flex-start;
        gap: 1rem;
      }

      .member-actions {
        width: 100%;
        justify-content: flex-end;
      }
    }

    .teams-tabs {
      display: flex;
      border-bottom: 1.5px solid var(--gray);
      margin-bottom: 2rem;
      gap: 0.5rem;
      flex-wrap: wrap;
    }

    .teams-tab {
      background: none;
      border: none;
      outline: none;
      padding: 0.75rem 1.5rem;
      font-size: 1rem;
      color: #6b7280;
      cursor: pointer;
      font-weight: 500;
      border-radius: 8px 8px 0 0;
      transition: color 0.2s, background 0.2s;
      position: relative;
    }

    .teams-tab.active {
      color: var(--primary);
      background: #f8fafc;
      font-weight: 700;
    }

    .teams-tab.active::after {
      content: '';
      position: absolute;
      left: 0; right: 0; bottom: -1.5px;
      height: 3px;
      background: var(--primary);
      border-radius: 2px 2px 0 0;
    }

    /* Modal de ver más comunidad */
    #teamModal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.7);
      z-index: 1001;
      justify-content: center;
      align-items: center;
    }

    #teamModal.active {
      display: flex;
    }

    #teamModal .modal-content {
      background: #fff;
      border-radius: 18px;
      max-width: 800px;
      width: 95vw;
      padding: 2rem;
      box-shadow: 0 8px 32px rgba(74,111,165,0.13);
      position: relative;
      max-height: 90vh;
      overflow-y: auto;
    }

    #teamModal .close-admin-modal {
      position: absolute;
      top: 1.5rem;
      right: 1.5rem;
      background: none;
      border: none;
      font-size: 1.8rem;
      color: #6b7280;
      cursor: pointer;
      transition: color 0.2s;
    }

    #teamModal .close-admin-modal:hover {
      color: #4a6fa5;
    }

    #teamModal #teamModalBody {
      padding: 0.5rem;
    }
  </style>
{% endblock %}

{% block content %}
  <!-- Modal de administración -->
  <div class="admin-modal" id="adminModal">
    <div class="admin-modal-content">
      <button class="close-admin-modal" id="closeAdminModal">&times;</button>
      <h2 id="adminModalTitle">Administrar Comunidad</h2>
      
      <div class="admin-tabs">
        <button class="admin-tab active" data-tab="overview">Resumen</button>
        <button class="admin-tab" data-tab="members">Miembros</button>
        <button class="admin-tab" data-tab="settings">Configuración</button>
        <button class="admin-tab" data-tab="content">Contenido</button>
      </div>
      
      <div class="admin-tab-content active" id="overviewTab">
        <div class="stats-grid">
          <div class="stat-card">
            <div class="stat-value" id="membersCount">0</div>
            <div class="stat-label">Miembros</div>
          </div>
          <div class="stat-card">
            <div class="stat-value" id="activitiesCount">0</div>
            <div class="stat-label">Actividades</div>
          </div>
          <div class="stat-card">
            <div class="stat-value" id="impactPoints">0</div>
            <div class="stat-label">Puntos de Impacto</div>
          </div>
          <div class="stat-card">
            <div class="stat-value" id="beneficiariesCount">0</div>
            <div class="stat-label">Beneficiarios</div>
          </div>
        </div>
        
        <h3>Progreso de la comunidad</h3>
        <div class="progress-bar">
          <div class="progress-fill" id="communityProgress" style="width: 0%"></div>
        </div>
        <div class="progress-info">
          <span id="progressPercent">0% completado</span>
          <span id="progressAmount">0 € de 0 €</span>
        </div>
        
        <h3 style="margin-top: 2rem;">Acciones rápidas</h3>
        <div class="team-actions-classic" style="margin-top: 1rem;">
          <button class="btn btn-primary" id="createCauseBtn">
            <i class="fas fa-heart"></i> Crear Causa
          </button>
          <button class="btn btn-accent" id="createTaskBtn">
            <i class="fas fa-tasks"></i> Crear Tarea
          </button>
          <button class="btn btn-primary" id="createChallengeBtn">
            <i class="fas fa-trophy"></i> Crear Reto
          </button>
          <button class="btn btn-accent" id="createVolunteeringBtn">
            <i class="fas fa-hands-helping"></i> Crear Voluntariado
          </button>
        </div>
      </div>
      
      <div class="admin-tab-content" id="membersTab">
        <h3>Miembros actuales</h3>
        <div class="members-list" id="membersList">
          <!-- Los miembros se cargarán aquí dinámicamente -->
        </div>
        
        <h3 style="margin-top: 2rem;">Invitar nuevos miembros</h3>
        <div class="invite-form">
          <input type="email" id="inviteEmail" placeholder="Correo electrónico del usuario a invitar">
          <select id="inviteRole" class="form-control">
            <option value="member">Miembro</option>
            <option value="coordinator">Coordinador</option>
            <option value="founder">Fundador</option>
          </select>
          <button class="btn btn-primary" id="sendInviteBtn" style="margin-top: 1rem;">
            <i class="fas fa-paper-plane"></i> Enviar Invitación
          </button>
        </div>
      </div>
      
      <div class="admin-tab-content" id="settingsTab">
        <form id="teamSettingsForm">
          <div class="form-group">
            <label for="editTeamName">Nombre de la comunidad</label>
            <input type="text" id="editTeamName" name="editTeamName" required>
          </div>
          
          <div class="form-group">
            <label for="editTeamDesc">Descripción</label>
            <textarea id="editTeamDesc" name="editTeamDesc" rows="4" required></textarea>
          </div>
          
          <div class="form-group">
            <label for="editTeamPhoto">Foto/logo de la comunidad</label>
            <input type="file" id="editTeamPhoto" name="editTeamPhoto" accept="image/*">
            <img id="editTeamPhotoPreview" style="max-width: 200px; margin-top: 1rem; display: none;">
          </div>
          
          <div class="form-inline-group">
            <div class="form-group">
              <label for="editTeamCategory">Categoría</label>
              <select id="editTeamCategory" name="editTeamCategory" required>
                <option value="medio_ambiente">Medio Ambiente</option>
                <option value="educacion">Educación</option>
                <option value="salud">Salud</option>
                <option value="animales">Animales</option>
                <option value="comunidad">Comunidad</option>
                <option value="otros">Otros</option>
              </select>
            </div>
            <div class="form-group">
              <label for="editTeamPrivacy">Privacidad</label>
              <select id="editTeamPrivacy" name="editTeamPrivacy" required>
                <option value="public">Pública</option>
                <option value="private">Privada</option>
              </select>
            </div>
          </div>
          
          <div class="form-group">
            <label for="editTeamTags">Etiquetas (separadas por comas)</label>
            <input type="text" id="editTeamTags" name="editTeamTags">
          </div>
          
          <div class="form-group">
            <label for="editTeamGoal">Meta de recaudación (€)</label>
            <input type="number" id="editTeamGoal" name="editTeamGoal" min="0">
          </div>
          
          <button type="submit" class="btn btn-primary">
            <i class="fas fa-save"></i> Guardar Cambios
          </button>
        </form>
      </div>
      
      <div class="admin-tab-content" id="contentTab">
        <h3>Mensaje para la comunidad</h3>
        <textarea id="teamMessage" rows="5" style="width: 100%; margin-bottom: 1rem;"></textarea>
        <button class="btn btn-primary" id="saveMessageBtn">
          <i class="fas fa-bullhorn"></i> Publicar Mensaje
        </button>
        
        <h3 style="margin-top: 2rem;">Actividades recientes</h3>
        <div id="recentActivities">
          <!-- Las actividades se cargarán aquí dinámicamente -->
        </div>
      </div>
    </div>
  </div>

  <!-- Modal de ver más comunidad -->
  <div id="teamModal" class="modal-bg">
    <div class="modal-content" style="background:#fff; border-radius:18px; max-width:800px; width:95vw; padding:2rem; box-shadow:0 8px 32px rgba(74,111,165,0.13); position:relative; max-height:90vh; overflow-y:auto;">
      <button id="closeTeamModal" style="position:absolute; top:1.5rem; right:1.5rem; background:none; border:none; font-size:1.8rem; color:#6b7280; cursor:pointer; transition:color 0.2s;" onmouseover="this.style.color='#4a6fa5'" onmouseout="this.style.color='#6b7280'">&times;</button>
      <div id="teamModalBody" style="padding:0.5rem;">
        <!-- Contenido dinámico -->
      </div>
    </div>
  </div>

  <!-- Contenido principal de la página Mis Comunidades -->
  <div class="main-container">
    <!-- Sección introductoria -->
    <div class="teams-intro">
      <div class="teams-intro-icon">
        <i class="fas fa-user-group"></i>
      </div>
      <div class="teams-intro-content">
        <h2>Mis Comunidades</h2>
        <p>Aquí puedes gestionar todas las comunidades de las que formas parte. Como administrador, podrás modificar la configuración, invitar miembros, crear actividades y mucho más.</p>
      </div>
    </div>
    
    <!-- Destacados -->
    <div class="teams-highlights">
      <div class="highlight-card">
        <div class="highlight-icon"><i class="fas fa-crown"></i></div>
        <div class="highlight-title">Tus comunidades</div>
        <div class="highlight-desc">Gestiona las comunidades que has creado o donde tienes permisos de administración.</div>
      </div>
      <div class="highlight-card">
        <div class="highlight-icon"><i class="fas fa-users"></i></div>
        <div class="highlight-title">Miembro activo</div>
        <div class="highlight-desc">Tus comunidades donde participas como miembro regular.</div>
      </div>
      <div class="highlight-card">
        <div class="highlight-icon"><i class="fas fa-bell"></i></div>
        <div class="highlight-title">Solicitudes</div>
        <div class="highlight-desc">Gestiona las solicitudes pendientes para unirse a tus comunidades.</div>
      </div>
      <div class="highlight-card">
        <div class="highlight-icon"><i class="fas fa-chart-line"></i></div>
        <div class="highlight-title">Tu impacto</div>
        <div class="highlight-desc">Revisa el impacto colectivo de todas tus comunidades.</div>
      </div>
    </div>
    
    <!-- Cabecera con búsqueda -->
    <div class="section-header">
      <h1>Tus Comunidades</h1>
    </div>
    
    <div class="search-container">
      <input type="text" id="search-input" placeholder="Buscar entre tus comunidades...">
      <i class="fas fa-search" style="color:#4a6fa5;"></i>
    </div>
    
    <!-- Tabs para filtrar -->
    <div class="tabs">
      <button class="tab active" data-filter="all">Todas</button>
      <button class="tab" data-filter="founder">Founder</button>
      <button class="tab" data-filter="coordinator">Coordinator</button>
      <button class="tab" data-filter="member">Miembro</button>
      <button class="tab" data-filter="pending">Requests</button>
    </div>
    
    <!-- Grid de comunidades -->
    <div class="teams-grid-classic" id="teamsGrid">
      <!-- Las comunidades se cargarán aquí dinámicamente -->
    </div>
    
    <!-- Paginación -->
    <div class="pagination" id="pagination">
      <button id="prevPage" class="btn btn-outline" disabled>
        <i class="fas fa-chevron-left"></i>
      </button>
      <span id="pageInfo">1</span>
      <button id="nextPage" class="btn btn-outline" disabled>
        <i class="fas fa-chevron-right"></i>
      </button>
    </div>
  </div>
{% endblock %}

{% block scripts %}
  {{ super() }}
  <script>
    document.addEventListener('DOMContentLoaded', async function() {
      let currentPage = 1;
      const itemsPerPage = 9;
      let allTeams = [];
      let filteredTeams = [];
      let currentAdminTeam = null;

      // 1. Obtener usuario actual
      const { data: { session } } = await supabase.auth.getSession();
      if (!session?.user) {
        window.location.href = '/login?return=/my-teams';
        return;
      }
      const userId = session.user.id;

      // 2. Cargar comunidades del usuario
      await loadUserTeams();

      // 3. Eventos UI
      document.querySelectorAll('.tab').forEach(tab => {
        tab.addEventListener('click', function() {
          document.querySelector('.tab.active').classList.remove('active');
          this.classList.add('active');
          currentPage = 1;
          filterAndRenderTeams();
        });
      });
      document.getElementById('search-input').addEventListener('input', function() {
        currentPage = 1;
        filterAndRenderTeams();
      });
      document.getElementById('prevPage').addEventListener('click', function() {
        if (currentPage > 1) { currentPage--; renderTeams(); }
      });
      document.getElementById('nextPage').addEventListener('click', function() {
        const totalPages = Math.ceil(filteredTeams.length / itemsPerPage);
        if (currentPage < totalPages) { currentPage++; renderTeams(); }
      });
      document.getElementById('closeAdminModal').addEventListener('click', function() {
        document.getElementById('adminModal').classList.remove('active');
        document.body.style.overflow = '';
      });

      // Tabs del modal de administración
      document.querySelectorAll('.admin-tab').forEach(tab => {
        tab.addEventListener('click', function() {
          const tabId = this.getAttribute('data-tab');
          document.querySelectorAll('.admin-tab-content').forEach(content => content.classList.remove('active'));
          document.querySelectorAll('.admin-tab').forEach(t => t.classList.remove('active'));
          this.classList.add('active');
          document.getElementById(`${tabId}Tab`).classList.add('active');
          if (tabId === 'members' && currentAdminTeam) loadTeamMembers(currentAdminTeam.id);
          if (tabId === 'content' && currentAdminTeam) loadRecentActivities(currentAdminTeam.id);
        });
      });

      // --- FUNCIONES PRINCIPALES ---

      async function loadUserTeams() {
        try {
          // 1. Obtener todos los memberships del usuario
          const { data: memberships } = await supabase
            .from('team_members')
            .select('team_id, role')
            .eq('user_id', userId)
            .neq('role', 'pending');

          // 2. Obtener los equipos donde el usuario es el creador
          const { data: createdTeams, error: createdTeamsError } = await supabase
            .from('teams')
            .select('*')
            .eq('creator_id', userId);
          if (createdTeamsError) throw createdTeamsError;

          // 3. Obtener los detalles de los equipos donde es miembro
          const teamIds = memberships.map(m => m.team_id);
          const { data: teams, error: teamsError } = await supabase
            .from('teams')
            .select('*')
            .in('id', teamIds.length ? teamIds : ['00000000-0000-0000-0000-000000000000'])
            .order('created_at', { ascending: false });
          if (teamsError) throw teamsError;

          // 4. Combinar y eliminar duplicados (si el creador también es miembro)
          const allTeamIds = new Set();
          allTeams = [
            ...teams.map(team => {
              const membership = memberships.find(m => m.team_id === team.id);
              allTeamIds.add(team.id);
              const role = membership ? membership.role : (team.creator_id === userId ? 'founder' : 'member');
              return {
                ...team,
                user_role: role,
                is_admin: ['founder', 'admin', 'coordinator'].includes(role),
                is_moderator: ['admin', 'coordinator'].includes(role),
                is_founder: role === 'founder',
                tags: Array.isArray(team.tags) ? team.tags : [],
              };
            }),
            ...createdTeams
              .filter(team => !allTeamIds.has(team.id))
              .map(team => ({
                ...team,
                user_role: 'founder',
                is_admin: true,
                is_moderator: false,
                is_founder: true,
                tags: Array.isArray(team.tags) ? team.tags : [],
              }))
          ];

          filteredTeams = [...allTeams];
          currentPage = 1;
          renderTeams();
        } catch (error) {
          console.error('Error loading user teams:', error);
          showEmptyState();
        }
      }

      function showEmptyState() {
        const container = document.getElementById('teamsGrid');
        container.innerHTML = `
          <div class="empty-state" style="grid-column: 1 / -1; text-align: center; padding: 3rem;">
            <i class="fas fa-users-slash" style="font-size: 3rem; color: #a0aec0; margin-bottom: 1rem;"></i>
            <h3 style="color: #4a5568; margin-bottom: 0.5rem;">No formas parte de ninguna comunidad aún</h3>
            <p style="color: #718096; margin-bottom: 1.5rem;">Únete a una comunidad existente o crea una nueva para empezar.</p>
            <a href="/teams" class="btn btn-primary" style="margin-right: 1rem;">
              <i class="fas fa-search"></i> Explorar Comunidades
            </a>
            <a href="/teams/create" class="btn btn-accent">
              <i class="fas fa-plus"></i> Crear Comunidad
            </a>
          </div>
        `;
        document.getElementById('pagination').style.display = 'none';
      }

      function filterAndRenderTeams() {
        const activeFilter = document.querySelector('.tab.active').getAttribute('data-filter');
        const searchTerm = document.getElementById('search-input').value.toLowerCase();
        filteredTeams = allTeams.filter(team => {
          if (activeFilter !== 'all') {
            if (activeFilter === 'founder' && team.user_role !== 'founder') return false;
            if (activeFilter === 'coordinator' && !['coordinator', 'admin'].includes(team.user_role)) return false;
            if (activeFilter === 'member' && team.user_role !== 'member') return false;
            if (activeFilter === 'pending' && team.user_role !== 'pending') return false;
          }
          if (searchTerm) {
            const matchesName = team.name && team.name.toLowerCase().includes(searchTerm);
            const matchesDesc = team.description && team.description.toLowerCase().includes(searchTerm);
            const matchesTags = team.tags && team.tags.some(tag => tag && tag.toLowerCase().includes(searchTerm));
            return matchesName || matchesDesc || matchesTags;
          }
          return true;
        });
        renderTeams();
      }

      function renderTeams() {
        const startIdx = (currentPage - 1) * itemsPerPage;
        const endIdx = startIdx + itemsPerPage;
        const paginatedTeams = filteredTeams.slice(startIdx, endIdx);
        const container = document.getElementById('teamsGrid');
        container.innerHTML = '';
        if (paginatedTeams.length === 0) {
          container.innerHTML = `
            <div class="empty-state" style="grid-column: 1 / -1; text-align: center; padding: 3rem;">
              <i class="fas fa-search" style="font-size: 3rem; color: #a0aec0; margin-bottom: 1rem;"></i>
              <h3 style="color: #4a5568; margin-bottom: 0.5rem;">No se encontraron comunidades</h3>
              <p style="color: #718096;">No hay comunidades que coincidan con tu búsqueda.</p>
            </div>
          `;
          document.getElementById('pagination').style.display = 'none';
          return;
        }
        document.getElementById('pagination').style.display = 'flex';

        paginatedTeams.forEach(team => {
          const membersCount = team.members_count || 1;
          const tagsHtml = team.tags?.length
            ? `<div class="team-tags-classic">${team.tags.slice(0, 4).map(tag => `<span class="team-tag-classic">${tag}</span>`).join('')}${team.tags.length > 4 ? `<span class="team-tag-classic tag-more">+${team.tags.length - 4}</span>` : ''}</div>`
            : '';

          const isTrending = membersCount >= 20 || (team.impact || 0) >= 1000;
          const recaudado = team.funds_raised || 0;
          const meta = team.goal || 1000;
          const porcentaje = meta ? Math.min(100, Math.round((recaudado / meta) * 100)) : 0;

          // Badge de rol del usuario
          const roleBadgeClass = {
            'founder': 'role-badge admin',
            'coordinator': 'role-badge moderator',
            'admin': 'role-badge moderator',
            'member': 'role-badge member',
            'pending': 'role-badge member'
          }[team.user_role] || 'role-badge member';

          const roleBadgeText = {
            'founder': 'Fundador',
            'coordinator': 'Coordinador',
            'admin': 'Coordinador',
            'member': 'Miembro',
            'pending': 'Solicitud pendiente'
          }[team.user_role] || 'Miembro';

          const roleBadge = `<span class="${roleBadgeClass}"><i class="fas fa-${team.user_role === 'admin' ? 'crown' : team.user_role === 'moderator' ? 'star' : 'user'}"></i> ${roleBadgeText}</span>`;

          // Badge trending y privada
          let badgePrivada = team.privacy === 'private'
            ? `<div class="team-badge-classic" style="top:1rem;right:1rem;background:var(--gray);color:var(--primary-dark);"><i class="fas fa-lock"></i> Privada</div>`
            : '';
          let badgeTrending = isTrending
            ? `<div class="team-badge-classic" style="top:${team.privacy === 'private' ? '3.2rem' : '1rem'};right:1rem;background:#ffe600;color:#b8860b;"><i class="fas fa-arrow-trend-up"></i> Trending</div>`
            : '';

          const card = document.createElement('div');
          card.className = 'team-card-classic';
          card.innerHTML = `
            <div class="team-image-classic">
              <img src="${team.photo || 'https://via.placeholder.com/350x180?text=Comunidad'}" alt="${team.name}">
              <div class="team-badge-classic points" style="top:1rem;left:1rem;right:auto;background:var(--primary);color:#fff;">
                <i class="fas fa-bolt"></i> +${team.impact || 0} pts
              </div>
              ${badgePrivada}${badgeTrending}
            </div>
            <div class="team-content-classic">
              <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.5rem;">
                <h3>${team.name}</h3>
                ${roleBadge}
              </div>
              <p>${team.description || 'Esta comunidad no tiene descripción aún.'}</p>
              <div class="team-meta-classic">
                <div class="meta-item-classic"><i class="fas fa-layer-group"></i> ${getCategoryName(team.category)}</div>
                <div class="meta-item-classic"><i class="fas fa-tasks"></i> ${team.activities_count || 0} actividades</div>
                <div class="meta-item-classic"><i class="fas fa-heart"></i> ${team.beneficiaries || 0} beneficiarios</div>
                <div class="meta-item-classic"><i class="fas fa-users"></i> ${membersCount} miembros</div>
              </div>
              ${tagsHtml}
              <div class="team-progress-classic">
                <div class="progress-bar">
                  <div class="progress-fill" style="width:${porcentaje}%;">${porcentaje > 10 ? porcentaje + '%' : ''}</div>
                </div>
                <div class="progress-info">
                  <span>${porcentaje}% completado</span>
                  <span>${recaudado} € de ${meta} €</span>
                </div>
              </div>
              <div class="team-actions-classic">
                <button class="btn btn-primary btn-vermas-team" data-team-id="${team.id}">
                  <i class="fas fa-eye"></i> Ver más
                </button>
                ${team.user_role === 'pending' ? `
                  <button class="btn btn-outline" disabled>
                    <i class="fas fa-clock"></i> Pendiente
                  </button>
                ` : team.is_admin || team.is_moderator ? `
                  <button class="btn btn-accent admin-team-btn" data-team-id="${team.id}">
                    <i class="fas fa-cog"></i> Administrar
                  </button>
                ` : `
                  <button class="btn btn-outline leave-team-btn" data-team-id="${team.id}">
                    <i class="fas fa-sign-out-alt"></i> Salir
                  </button>
                `}
              </div>
            </div>
          `;
          container.appendChild(card);
        });

        // Listeners para los botones "Ver más"
        document.querySelectorAll('.btn-vermas-team').forEach(btn => {
          btn.addEventListener('click', function() {
            showTeamModal(this.getAttribute('data-team-id'));
          });
        });

        // Listeners para los botones "Administrar"
        document.querySelectorAll('.admin-team-btn').forEach(btn => {
          btn.addEventListener('click', function() {
            const teamId = this.getAttribute('data-team-id');
            const team = allTeams.find(t => t.id === teamId);
            if (team) openAdminModal(team);
          });
        });
        // Botones de salir
        document.querySelectorAll('.leave-team-btn').forEach(btn => {
          btn.addEventListener('click', async function() {
            const teamId = this.getAttribute('data-team-id');
            if (confirm('¿Estás seguro de que quieres salir de esta comunidad?')) {
              try {
                const { error } = await supabase
                  .from('team_members')
                  .delete()
                  .eq('team_id', teamId)
                  .eq('user_id', userId);
                if (error) throw error;
                await loadUserTeams();
                alert('Has salido de la comunidad correctamente.');
              } catch (error) {
                console.error('Error leaving team:', error);
                alert('Error al salir de la comunidad: ' + error.message);
              }
            }
          });
        });
        updatePagination();
      }

      updatePagination();
      function updatePagination() {
        const totalPages = Math.max(1, Math.ceil(filteredTeams.length / itemsPerPage));
        document.getElementById('pageInfo').textContent = `${currentPage} / ${totalPages}`;
        document.getElementById('prevPage').disabled = currentPage <= 1;
        document.getElementById('nextPage').disabled = currentPage >= totalPages;
      }

      // --- FUNCIONES MODAL Y COMPLEMENTARIAS ---

      function openAdminModal(team) {
        currentAdminTeam = team;
        document.getElementById('adminModalTitle').textContent = `Administrar ${team.name}`;
        document.getElementById('adminModal').classList.add('active');
        document.body.style.overflow = 'hidden';

        // Actualizar datos en el modal
        document.getElementById('membersCount').textContent = team.members_count || 0;
        document.getElementById('activitiesCount').textContent = team.activities_count || 0;
        document.getElementById('impactPoints').textContent = team.impact || 0;
        document.getElementById('beneficiariesCount').textContent = team.beneficiaries || 0;

        // Configurar progreso
        const recaudado = team.funds_raised || 0;
        const meta = team.goal || 1000;
        const porcentaje = meta ? Math.min(100, Math.round((recaudado / meta) * 100)) : 0;
        document.getElementById('communityProgress').style.width = `${porcentaje}%`;
        document.getElementById('progressPercent').textContent = `${porcentaje}% completado`;
        document.getElementById('progressAmount').textContent = `${recaudado} € de ${meta} €`;
      }

      async function loadTeamMembers(teamId) {
        try {
          // 1. Obtener los miembros
          const { data: members, error: membersError } = await supabase
            .from('team_members')
            .select('user_id, role')
            .eq('team_id', team.id)
            .neq('role', 'pending');

          if (membersError) {
            console.error('Error cargando miembros:', membersError);
          }

          // 2. Añadir el founder si no está
          let membersList = members ? [...members] : [];
          if (team.creator_id && !membersList.some(m => m.user_id === team.creator_id)) {
            membersList.unshift({
              user_id: team.creator_id,
              role: 'founder'
            });
          }

          // 3. Obtener los perfiles de todos los miembros
          let profilesMap = {};
          if (membersList.length) {
            const userIds = membersList.map(m => m.user_id);
            const { data: profiles, error: profilesError } = await supabase
              .from('profiles')
              .select('id, username, photo_url')
              .in('id', userIds);

            if (profilesError) {
              console.error('Error cargando perfiles:', profilesError);
            } else {
              profilesMap = Object.fromEntries(profiles.map(p => [p.id, p]));
            }
          }

          // 4. Renderizar miembros (siempre muestra la sección)
          const membersHtml = `
            <div style="margin-top:1.5rem;">
              <h4 style="color:var(--primary);font-size:1.05rem;margin-bottom:0.5rem;">
                <i class="fas fa-users"></i> Miembros (${membersList.length})
              </h4>
              <div style="display:flex;flex-wrap:wrap;gap:0.7rem;">
                ${membersList.map(m => {
                  const profile = profilesMap[m.user_id] || {};
                  return `
                    <div style="display:flex;align-items:center;gap:0.4rem;">
                      <img src="${profile.photo_url ? profile.photo_url : 'https://ui-avatars.com/api/?name=' + encodeURIComponent(profile.username || 'Usuario')}" alt="${profile.username || 'Usuario'}" style="width:32px;height:32px;border-radius:50%;object-fit:cover;">
                      <span style="font-size:0.98rem;color:#4a6fa5;">${profile.username || 'Usuario'}</span>
                      <span class="role-badge ${m.role === 'founder' ? 'admin' : m.role}">
                        ${m.role === 'founder' ? 'Fundador' : m.role.charAt(0).toUpperCase() + m.role.slice(1)}
                      </span>
                    </div>
                  `;
                }).join('')}
              </div>
            </div>
          `;

          const membersListContainer = document.getElementById('membersList');
          membersListContainer.innerHTML = membersHtml;
        } catch (error) {
          console.error('Error loading team members:', error);
        }
      }

      async function loadRecentActivities(teamId) {
        try {
          const { data: activities, error } = await supabase
            .from('activities')
            .select('*')
            .eq('team_id', teamId)
            .order('created_at', { ascending: false })
            .limit(5);

          if (error) throw error;

          const activitiesContainer = document.getElementById('recentActivities');
          activitiesContainer.innerHTML = '';

          if (!activities || activities.length === 0) {
            activitiesContainer.innerHTML = '<p>No hay actividades recientes.</p>';
            return;
          }

          activities.forEach(activity => {
            const activityElement = document.createElement('div');
            activityElement.className = 'activity-item';
            activityElement.innerHTML = `
              <h4>${activity.title}</h4>
              <p>${activity.description}</p>
              <small>${new Date(activity.created_at).toLocaleDateString()}</small>
            `;
            activitiesContainer.appendChild(activityElement);
          });
        } catch (error) {
          console.error('Error loading recent activities:', error);
        }
      }

      // 1. Define la función renderTeamModal en el ámbito global del script
      async function renderTeamModal(teamId, isAdmin = false) {
        // Asegura que el modal existe
        let modal = document.getElementById('teamModal');
        let content = document.getElementById('teamModalContent');
        if (!modal || !content) {
          // Si no existe, créalo
          modal = document.createElement('div');
          modal.id = 'teamModal';
          modal.className = 'admin-modal';
          modal.innerHTML = `<div class="admin-modal-content" id="teamModalContent"></div>`;
          document.body.appendChild(modal);
          content = document.getElementById('teamModalContent');
        }

        // Muestra el modal y bloquea el scroll
        modal.classList.add('active');
        document.body.style.overflow = 'hidden';
        content.innerHTML = `<div style="text-align:center;padding:2rem;"><i class="fas fa-spinner fa-spin fa-2x"></i></div>`;

        // Carga los datos del equipo
        try {
          const { data: team, error: teamError } = await supabase
            .from('teams')
            .select('*')
            .eq('id', teamId)
            .single();
          if (teamError || !team) {
            content.innerHTML = `<p style="color:var(--urgent);">Error al cargar la comunidad.</p>`;
            return;
          }

          // Carga los miembros
          const { data: members, error: membersError } = await supabase
            .from('team_members')
            .select('profiles:user_id (full_name, avatar_url), role')
            .eq('team_id', team.id)
            .neq('role', 'pending');

          if (membersError) {
            console.error('Error cargando miembros:', membersError);
          }

          const membersHtml = members && members.length ? `
            <div style="margin-top:1.5rem;">
              <h4 style="color:var(--primary);font-size:1.05rem;margin-bottom:0.5rem;">
                <i class="fas fa-users"></i> Miembros (${members.length})
              </h4>
              <div style="display:flex;flex-wrap:wrap;gap:0.7rem;">
                ${members.map(m => `
                  <div style="display:flex;align-items:center;gap:0.4rem;">
                    <img src="${m.profiles?.avatar_url || 'https://via.placeholder.com/32'}" alt="${m.profiles?.full_name || 'Usuario'}" style="width:32px;height:32px;border-radius:50%;object-fit:cover;">
                    <span style="font-size:0.98rem;color:#4a6fa5;">${m.profiles?.full_name || 'Usuario'}</span>
                    <span class="role-badge ${m.role === 'founder' ? 'admin' : m.role}">
                      ${m.role === 'founder' ? 'Fundador' : m.role.charAt(0).toUpperCase() + m.role.slice(1)}
                    </span>
                  </div>
                `).join('')}
              </div>
            </div>
          ` : '';

          // Acciones rápidas solo si isAdmin
          const quickActions = isAdmin ? `
            <h3 style="margin-top:2rem;">Acciones rápidas</h3>
            <div class="team-actions-classic" style="margin-top:1rem;">
              <button class="btn btn-primary" id="createCauseBtn">
                <i class="fas fa-heart"></i> Crear Causa
              </button>
              <button class="btn btn-accent" id="createTaskBtn">
                <i class="fas fa-tasks"></i> Crear Tarea
              </button>
              <button class="btn btn-primary" id="createChallengeBtn">
                <i class="fas fa-trophy"></i> Crear Reto
              </button>
              <button class="btn btn-accent" id="createVolunteeringBtn">
                <i class="fas fa-hands-helping"></i> Crear Voluntariado
              </button>
            </div>
          ` : `
            <h3 style="margin-top:2rem;">Detalles de la comunidad</h3>
          `;

          // Render principal del modal
          content.innerHTML = `
            <button class="close-admin-modal" id="closeTeamModalBtn">&times;</button>
            <div style="display:flex;align-items:center;gap:1.5rem;">
              <img src="${team.photo || 'https://via.placeholder.com/120x120?text=Comunidad'}" alt="${team.name}" style="width:120px;height:120px;border-radius:16px;object-fit:cover;border:2px solid var(--gray);">
              <div>
                <h2 style="color:var(--primary);font-size:2rem;font-weight:700;margin-bottom:0.3em;">${team.name}</h2>
                <div style="color:#4a5568;font-size:1.1rem;margin-bottom:0.7em;">${team.description || 'Esta comunidad no tiene descripción.'}</div>
                <div style="display:flex;gap:1.2em;flex-wrap:wrap;">
                  <span class="team-tag-classic">${getCategoryName(team.category)}</span>
                  <span class="team-tag-classic" style="background:${team.privacy === 'private' ? 'var(--gray)' : '#e6f0fa'};color:${team.privacy === 'private' ? 'var(--primary-dark)' : 'var(--primary)'};">
                    <i class="fas fa-${team.privacy === 'private' ? 'lock' : 'globe'}"></i> ${team.privacy === 'private' ? 'Privada' : 'Pública'}
                  </span>
                  ${(team.tags || []).slice(0, 3).map(tag => `<span class="team-tag-classic">${tag}</span>`).join('')}
                </div>
              </div>
            </div>
            <div style="margin-top:1.5rem;">
              <div class="progress-bar">
                <div class="progress-fill" style="width:${team.goal ? Math.min(100, Math.round((team.funds_raised || 0) / team.goal * 100)) : 0}%;"></div>
              </div>
              <div class="progress-info">
                <span>${team.funds_raised || 0} € de ${team.goal || 0} €</span>
              </div>
            </div>
            ${quickActions}
          `;

          // Acciones rápidas: redirección a páginas de creación
          if (isAdmin) {
            document.getElementById('createCauseBtn').onclick = () =>
              window.location.href = `/causes/create?team_id=${team.id}`;
            document.getElementById('createTaskBtn').onclick = () =>
              window.location.href = `/tasks/create?team_id=${team.id}`;
            document.getElementById('createChallengeBtn').onclick = () =>
              window.location.href = `/challenges/create?team_id=${team.id}`;
            document.getElementById('createVolunteeringBtn').onclick = () =>
              window.location.href = `/volunteering/create?team_id=${team.id}`;
          }

          // Cerrar modal
          document.getElementById('closeTeamModalBtn').onclick = () => {
            modal.classList.remove('active');
            document.body.style.overflow = '';
          };
          // Cerrar modal al hacer click fuera del contenido
          modal.onclick = (e) => {
            if (e.target === modal) {
              modal.classList.remove('active');
              document.body.style.overflow = '';
            }
          };

        } catch (err) {
          content.innerHTML = `<p style="color:var(--urgent);">Error al cargar la comunidad.</p>`;
        }
      }

      // 2. Después de renderizar las tarjetas, añade los listeners:
      document.querySelectorAll('.view-team-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          renderTeamModal(this.getAttribute('data-team-id'), false);
        });
      });
      document.querySelectorAll('.admin-team-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          renderTeamModal(this.getAttribute('data-team-id'), true);
        });
      });

      // 3. Helper para categoría (debe estar en el ámbito global)
      function getCategoryName(category) {
        const categories = {
          'medio_ambiente': 'Medio Ambiente',
          'educacion': 'Educación',
          'salud': 'Salud',
          'animales': 'Animales',
          'comunidad': 'Comunidad',
          'otros': 'Otros'
        };
        return categories[category] || 'General';
      }

      // Helper para nombres de categoría
      function getCategoryName(category) {
        const categories = {
          'medio_ambiente': 'Medio Ambiente',
          'educacion': 'Educación',
          'salud': 'Salud',
          'animales': 'Animales',
          'comunidad': 'Comunidad',
          'otros': 'Otros'
        };
        return categories[category] || 'General';
      }

      // Modal de detalle de comunidad (idéntico a index.njk)
      async function showTeamModal(teamId) {
        // 1. Cargar la comunidad
        const { data: team, error } = await supabase
          .from('teams')
          .select('*')
          .eq('id', teamId)
          .single();

        if (error || !team) {
          alert('Error al cargar la comunidad');
          return;
        }

        // 2. Cargar miembros (user_id y role)
        const { data: members, error: membersError } = await supabase
          .from('team_members')
          .select('user_id, role')
          .eq('team_id', team.id)
          .neq('role', 'pending');

        if (membersError) {
          console.error('Error cargando miembros:', membersError);
        }

        // 3. Añadir founder si no está
        let membersList = members ? [...members] : [];
        if (team.creator_id && !membersList.some(m => m.user_id === team.creator_id)) {
          membersList.unshift({
            user_id: team.creator_id,
            role: 'founder'
          });
        }

        // 4. Cargar perfiles de todos los miembros
        let profilesMap = {};
        if (membersList.length) {
          const userIds = membersList.map(m => m.user_id);
          const { data: profiles, error: profilesError } = await supabase
            .from('profiles')
            .select('id, username, photo_url')
            .in('id', userIds);

          if (profilesError) {
            console.error('Error cargando perfiles:', profilesError);
          } else {
            profilesMap = Object.fromEntries(profiles.map(p => [p.id, p]));
          }
        }

        // 5. Renderizar miembros (siempre muestra la sección)
        const membersHtml = `
          <div style="margin-top:1.5rem;">
            <h4 style="color:var(--primary);font-size:1.05rem;margin-bottom:0.5rem;">
              <i class="fas fa-users"></i> Miembros (${membersList.length})
            </h4>
            <div style="display:flex;flex-wrap:wrap;gap:0.7rem;">
              ${membersList.map(m => {
                const profile = profilesMap[m.user_id] || {};
                return `
                  <div style="display:flex;align-items:center;gap:0.4rem;">
                    <img src="${profile.photo_url ? profile.photo_url : 'https://ui-avatars.com/api/?name=' + encodeURIComponent(profile.username || 'Usuario')}" alt="${profile.username || 'Usuario'}" style="width:32px;height:32px;border-radius:50%;object-fit:cover;">
                    <span style="font-size:0.98rem;color:#4a6fa5;">${profile.username || 'Usuario'}</span>
                    <span class="role-badge ${m.role === 'founder' ? 'admin' : m.role}">
                      ${m.role === 'founder' ? 'Fundador' : m.role.charAt(0).toUpperCase() + m.role.slice(1)}
                    </span>
                  </div>
                `;
              }).join('')}
            </div>
          </div>
        `;

        // 6. Prepara datos
        const createdDate = new Date(team.created_at).toLocaleDateString('es-ES', {
          year: 'numeric',
          month: 'long',
          day: 'numeric'
        });
        const recaudado = team.funds_raised || 0;
        const meta = team.goal || 1000;
        const porcentaje = meta ? Math.min(100, Math.round((recaudado / meta) * 100)) : 0;
        const beneficiaries = team.beneficiaries || 0;
        const membersCount = team.members_count || membersList.length || 1;
        const impact = team.impact || 0;
        const category = getCategoryName ? getCategoryName(team.category) : (team.category || '');
        const privacy = team.privacy === 'private' ? 'Privada' : 'Pública';

        // 7. Renderiza el modal
        document.getElementById('teamModalBody').innerHTML = `
          <div class="modal-task-container" style="padding:0;">
            <h1 class="modal-task-title" style="font-size:2rem; font-weight:800; color:var(--primary); margin-bottom:1.2rem; text-align:center; width:100%;">${team.name}</h1>
            <div style="display:flex; flex-wrap:wrap; gap:2.2rem; margin-bottom:1.5rem;">
              <div style="flex:1; min-width:320px; max-width:350px; position:relative;">
                <img src="${team.photo || 'https://via.placeholder.com/350x180?text=Comunidad'}" alt="Imagen de la comunidad" style="width:100%;height:200px;object-fit:cover;border-radius:12px;box-shadow:0 4px 12px rgba(0,0,0,0.08);">
                <div style="position:absolute;top:1rem;left:1rem;background:var(--primary);color:#fff;padding:0.4rem 1rem;border-radius:50px;font-size:0.9rem;font-weight:600;display:flex;align-items:center;gap:0.6rem;">
                  <i class="fas fa-users"></i> Comunidad
                </div>
                ${team.privacy === 'private' ? `
                <div style="position:absolute;top:1rem;right:1rem;background:var(--gray);color:var(--primary-dark);padding:0.4rem 1rem;border-radius:50px;font-size:0.9rem;font-weight:600;display:flex;align-items:center;gap:0.6rem;">
                  <i class="fas fa-lock"></i> Privada
                </div>` : ''}
              </div>
              <div style="flex:2;min-width:260px;display:flex;flex-direction:column;gap:1.2rem;justify-content:flex-start;">
                <div class="modal-cause-progress-container" style="background:#f8fafc;padding:1.2rem 1.2rem 1rem 1.2rem;border-radius:12px;margin-bottom:0.5rem;border:1px solid #e5e7eb;">
                  <div class="progress-bar">
                    <div class="progress-fill" style="width: ${porcentaje}%; background: var(--primary);"></div>
                  </div>
                  <div class="progress-info" style="display:flex; justify-content:space-between; margin-top:0.8rem; font-size:0.95rem; color:#6b7280;">
                    <span>${porcentaje}% completado</span>
                    <span>${team.funds_raised || 0} € de ${team.goal || 0} €</span>
                  </div>
                </div>
                <div class="modal-cause-meta-grid" style="display:grid; grid-template-columns:1fr 1fr; gap:0.7rem 1.2rem; margin-bottom:1.2rem;">
                  <div class="meta-item" style="display:flex;align-items:center;gap:0.8rem;font-size:0.95rem;">
                    <span class="meta-icon" style="color:var(--primary);font-size:1.1rem;width:1.5rem;text-align:center;"><i class="fas fa-layer-group"></i></span>
                    <span>${team.category || 'Sin categoría'}</span>
                  </div>
                  <div class="meta-item" style="display:flex;align-items:center;gap:0.8rem;font-size:0.95rem;">
                    <span class="meta-icon" style="color:var(--primary);font-size:1.1rem;width:1.5rem;text-align:center;"><i class="fas fa-users"></i></span>
                    <span>${team.members_count || membersList.length || 1} miembros</span>
                  </div>
                  <div class="meta-item" style="display:flex;align-items:center;gap:0.8rem;font-size:0.95rem;">
                    <span class="meta-icon" style="color:var(--primary);font-size:1.1rem;width:1.5rem;text-align:center;"><i class="fas fa-heart"></i></span>
                    <span>${team.beneficiaries || 0} beneficiarios</span>
                  </div>
                  <div class="meta-item" style="display:flex;align-items:center;gap:0.8rem;font-size:0.95rem;">
                    <span class="meta-icon" style="color:var(--primary);font-size:1.1rem;width:1.5rem;text-align:center;"><i class="fas fa-calendar-alt"></i></span>
                    <span>${createdDate}</span>
                  </div>
                </div>
                <div class="points-notice" style="background:#f0f9ff; border-left:4px solid var(--accent); padding:0.8rem; border-radius:0 8px 8px 0; font-size:0.97rem; display:flex; align-items:center; gap:0.7rem;color:var(--primary);">
                  <i class="fas fa-bolt" style="color:var(--accent);"></i>
                  Participar en esta comunidad otorga <strong>${team.impact || 0} puntos</strong> de impacto
                </div>
              </div>
            </div>
            <div style="margin-bottom:1.2rem;">
              <div class="content-section" style="margin-bottom:1.7rem;">
                <h3 class="content-title" style="font-size:1.1rem;font-weight:600;color:var(--primary);margin-bottom:0.5rem;display:flex;align-items:center;gap:0.7rem;">
                  <i class="fas fa-quote-left"></i> Resumen
                </h3>
                <p class="content-text" style="line-height:1.6;color:#4b5563;font-size:1.05rem;margin-left:0;margin-right:0;text-align:justify;">${team.summary || 'Sin resumen.'}</p>
              </div>
              <div class="content-section" style="margin-bottom:2.2rem;">
                <h3 class="content-title" style="font-size:1.1rem;font-weight:600;color:var(--primary);margin-bottom:0.5rem;display:flex;align-items:center;gap:0.7rem;">
                  <i class="fas fa-align-left"></i> Descripción
                </h3>
                <p class="content-text" style="line-height:1.7;color:#4b5563;font-size:1.05rem;margin-left:0;margin-right:0;text-align:justify;">${team.description || 'Esta comunidad no tiene descripción.'}</p>
                ${membersHtml}
              </div>
              <div class="content-section" style="margin-bottom:2.2rem;">
                <h3 class="content-title" style="font-size:1.1rem;font-weight:600;color:var(--primary);margin-bottom:0.5rem;display:flex;align-items:center;gap:0.7rem;">
                  <i class="fas fa-info-circle"></i> Detalles adicionales
                </h3>
                <div style="display:grid;grid-template-columns:1fr 1fr;gap:1rem;">
                  <div>
                    <p style="font-weight:600;color:var(--primary);margin-bottom:0.3rem;">Privacidad</p>
                    <p style="color:#6b7280;">${privacy}</p>
                  </div>
                  <div>
                    <p style="font-weight:600;color:var(--primary);margin-bottom:0.3rem;">Meta de recaudación</p>
                    <p style="color:#6b7280;">${meta} €</p>
                  </div>
                  <div>
                    <p style="font-weight:600;color:var(--primary);margin-bottom:0.3rem;">ID</p>
                    <p style="color:#6b7280;">${team.id}</p>
                  </div>
                </div>
              </div>
            </div>
            <div class="task-actions" style="display:flex;gap:0.8rem;margin-top:2.2rem;">
              <button class="btn btn-primary" style="flex:1;" id="joinTeamBtn">
                <i class="fas fa-user-plus"></i> Unirse
              </button>
              <button class="btn btn-accent" style="flex:1;" id="shareTeamBtn">
                <i class="fas fa-share-alt"></i> Compartir
              </button>
            </div>
            <div class="share-section" id="shareSectionTeam"></div>
          </div>
        `;

        document.getElementById('teamModal').classList.add('active');
        document.body.style.overflow = 'hidden';

        // Botón Unirse
        document.getElementById('joinTeamBtn').onclick = async function() {
          const { data: { session } } = await supabase.auth.getSession();
          if (!session?.user) {
            alert('Debes iniciar sesión para unirte a la comunidad.');
            return;
          }
          alert('¡Solicitud de unión enviada! (Aquí puedes poner tu lógica real)');
        };

        // Botón Compartir
        document.getElementById('shareTeamBtn').onclick = function() {
          showShareOptionsTeam(team.id, team);
        };
      }

      // Compartir comunidad (idéntico a index.njk)
      function showShareOptionsTeam(teamId, teamObj) {
        let team = teamObj;
        if (!team) return;
        const shareSection = document.getElementById('shareSectionTeam');
        shareSection.innerHTML = `
          <h3 class="share-title" style="color:var(--primary);font-size:1.1rem;">
            <i class="fas fa-share-alt"></i> Ayuda a difundir esta comunidad
          </h3>
          <div class="share-content">
            <p class="share-text" style="color:#4b5563;">
              <span class="share-highlight" style="color:var(--primary);font-weight:600;">"${team.summary ? team.summary : 'Únete a nosotros y sé parte del cambio.'}"</span>
              <br>
              Comparte este enlace: <span id="shareableLink" style="color:var(--primary);font-weight:600;">${window.location.origin}/teams/${teamId}</span>
            </p>
            <div class="share-buttons" style="display:flex;gap:0.8rem;margin-top:1rem;">
              <button class="btn btn-primary" id="copyLinkBtnTeam">
                <i class="fas fa-link"></i> Copiar enlace
              </button>
              <button class="btn btn-accent" id="whatsappShareBtnTeam">
                <i class="fab fa-whatsapp"></i> Compartir en WhatsApp
              </button>
              <button class="btn btn-info" id="twitterShareBtnTeam">
                <i class="fab fa-twitter"></i> Compartir en Twitter
              </button>
              <button class="btn btn-danger" id="facebookShareBtnTeam">
                <i class="fab fa-facebook-f"></i> Compartir en Facebook
              </button>
            </div>
          </div>
        `;

        // Copiar enlace
        document.getElementById('copyLinkBtnTeam').onclick = function() {
          const link = document.getElementById('shareableLink');
          navigator.clipboard.writeText(link.textContent).then(() => {
            alert('Enlace copiado al portapapeles');
          }).catch(err => {
            console.error('Error al copiar el enlace: ', err);
            alert('Error al copiar el enlace. Por favor, intenta nuevamente.');
          });
        };

        // Compartir en WhatsApp
        document.getElementById('whatsappShareBtnTeam').onclick = function() {
          const message = `¡Únete a nuestra comunidad en Solidarity! ${team.summary} ${window.location.origin}/teams/${team.id}`;
          const whatsappUrl = `https://api.whatsapp.com/send?text=${encodeURIComponent(message)}`;
          window.open(whatsappUrl, '_blank');
        };

        // Compartir en Twitter
        document.getElementById('twitterShareBtnTeam').onclick = function() {
          const tweet = `¡Únete a nuestra comunidad en Solidarity! ${team.summary} ${window.location.origin}/teams/${team.id}`;
          const twitterUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(tweet)}`;
          window.open(twitterUrl, '_blank');
        };

        // Compartir en Facebook
        document.getElementById('facebookShareBtnTeam').onclick = function() {
          const fbShareUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(window.location.origin + '/teams/' + team.id)}`;
          window.open(fbShareUrl, '_blank');
        };
      }

      // Función para obtener el enlace compartible (idéntico a index.njk)
      function getShareableLink(teamId) {
        return `${window.location.origin}/teams/${teamId}`;
      }
    }); // Fin del DOMContentLoaded

    // Permite cerrar el modal "Ver más" con la cruz o haciendo clic fuera
    document.addEventListener('DOMContentLoaded', function() {
      const teamModal = document.getElementById('teamModal');
      const closeTeamModal = document.getElementById('closeTeamModal');
      if (closeTeamModal) {
        closeTeamModal.onclick = function() {
          teamModal.classList.remove('active');
          document.body.style.overflow = '';
        };
      }
     
      if (teamModal) {
        teamModal.onclick = function(e) {
          if (e.target === teamModal) {
            teamModal.classList.remove('active');
            document.body.style.overflow = '';
          }
        };
      }
    });
  </script>
{% endblock %}

==== C:\Users\gabi2\Desktop\Solidarity-web\views\index.njk ====
{% extends "layout.njk" %}

{% block title %}Solidarity - Plataforma de Impacto Social{% endblock %}

{% block head %}
  {{ super() }}
  <style>
    :root {
      --primary: #4a6fa5;
      --primary-dark: #166088;
      --accent: #4fc3a1;
      --accent-dark: #3da58a;
      --urgent: #e53e3e;
      --warning: #f59e42;
      --gold: #eab308;
      --light: #f8fafc;
      --dark: #2d3748;
      --gray: #e2e8f0;
    }

    /* Hero Section Rediseñada */
    .hero {
      background: linear-gradient(135deg, var(--primary), var(--primary-dark));
      color: white;
      padding: 4rem 2rem 6rem;
      text-align: center;
      position: relative;
      overflow: hidden;
      margin-bottom: 0;
    }

    .hero-container {
      display: flex;
      align-items: center;
      max-width: 1200px;
      margin: 0 auto;
      position: relative;
      z-index: 2;
      gap: 3rem;
    }

    .hero-content {
      flex: 1;
      text-align: left;
      padding: 2rem 0;
    }

    .hero-image {
      flex: 1;
      position: relative;
      display: none; /* Oculto en móvil */
    }

    .hero-image img {
      width: 100%;
      max-width: 500px;
      border-radius: 16px;
      box-shadow: 0 20px 40px rgba(0,0,0,0.2);
      transform: rotate(-3deg);
      transition: transform 0.3s ease;
    }

    .hero-image:hover img {
      transform: rotate(0) scale(1.02);
    }

    .hero h1 {
      font-size: 2.8rem;
      margin-bottom: 1.5rem;
      font-weight: 800;
      line-height: 1.2;
      text-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .hero p {
      font-size: 1.2rem;
      margin: 0 auto 2rem;
      font-weight: 400;
      opacity: 0.9;
      max-width: 600px;
    }

    .hero-buttons {
      display: flex;
      gap: 1.5rem;
      margin-top: 2rem;
      flex-wrap: wrap;
    }

    .hero-features {
      display: flex;
      gap: 1.5rem;
      margin-top: 2rem;
      flex-wrap: wrap;
    }

    .feature-badge {
      background: rgba(255,255,255,0.15);
      border-radius: 50px;
      padding: 0.5rem 1.2rem;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      font-size: 0.9rem;
      backdrop-filter: blur(5px);
    }

    /* Sección de Acciones */
    .actions-section {
      padding: 5rem 2rem;
      background: white;
    }

    .actions-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 2rem;
      max-width: 1200px;
      margin: 0 auto;
    }

    .action-card {
      background: white;
      border-radius: 16px;
      overflow: hidden;
      box-shadow: 0 10px 30px rgba(0,0,0,0.08);
      transition: all 0.3s ease;
      border: 1px solid var(--gray);
      position: relative;
    }

    .action-card:hover {
      transform: translateY(-10px);
      box-shadow: 0 15px 40px rgba(0,0,0,0.12);
    }

    .action-image {
      height: 180px;
      overflow: hidden;
      position: relative;
    }

    .action-image img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: transform 0.5s ease;
    }

    .action-card:hover .action-image img {
      transform: scale(1.1);
    }

    .action-badge {
      position: absolute;
      top: 1rem;
      right: 1rem;
      background: white;
      padding: 0.3rem 0.8rem;
      border-radius: 50px;
      font-size: 0.8rem;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .action-badge.points {
      background: var(--primary);
      color: white;
    }

    .action-content {
      padding: 1.5rem;
    }

    .action-content h3 {
      font-size: 1.4rem;
      margin-bottom: 0.8rem;
      color: var(--dark);
      display: flex;
      align-items: center;
      gap: 0.7rem;
    }

    .action-icon {
      width: 40px;
      height: 40px;
      background: rgba(79, 195, 161, 0.1);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      color: var(--accent);
    }

    .action-content p {
      color: #6b7280;
      margin-bottom: 1.5rem;
      font-size: 0.95rem;
      line-height: 1.6;
    }

    .action-stats {
      display: flex;
      gap: 1rem;
      margin-bottom: 1rem;
      font-size: 0.85rem;
      flex-wrap: wrap;
    }

    .stat-item {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      color: #6b7280;
    }

    .stat-item i {
      color: var(--primary);
    }

    .action-button {
      width: 100%;
      text-align: center;
      padding: 0.8rem;
      border-radius: 8px;
      font-weight: 600;
      margin-top: 1rem;
    }

    /* Sección Comunidades */
    .communities-section {
      padding: 5rem 2rem;
      background: var(--light);
    }

    .communities-container {
      max-width: 1200px;
      margin: 0 auto;
    }

    .communities-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
      gap: 2rem;
      margin-top: 3rem;
    }

    .community-card {
      background: white;
      border-radius: 16px;
      padding: 1.5rem;
      box-shadow: 0 5px 20px rgba(0,0,0,0.05);
      transition: all 0.3s ease;
      border: 1px solid var(--gray);
      text-align: center;
    }

    .community-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 30px rgba(0,0,0,0.1);
    }

    .community-avatar {
      width: 80px;
      height: 80px;
      border-radius: 50%;
      object-fit: cover;
      border: 3px solid var(--accent);
      margin: 0 auto 1rem;
      box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }

    .community-card h3 {
      font-size: 1.3rem;
      margin-bottom: 0.5rem;
      color: var(--primary);
    }

    .community-card p {
      color: #6b7280;
      font-size: 0.95rem;
      margin-bottom: 1.5rem;
    }

    .community-members {
      display: flex;
      justify-content: center;
      gap: 0.5rem;
      margin-bottom: 1.5rem;
    }

    .member-avatar {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      object-fit: cover;
      border: 2px solid white;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }

    .community-stats {
      display: flex;
      justify-content: space-around;
      margin-top: 1.5rem;
    }

    .community-stat {
      text-align: center;
    }

    .community-stat span {
      font-weight: 700;
      color: var(--primary);
      display: block;
    }

    .community-stat small {
      font-size: 0.8rem;
      color: #6b7280;
    }

    /* Responsive */
    @media (min-width: 768px) {
      .hero {
        padding: 6rem 2rem;
      }
      .hero-container {
        text-align: left;
      }
      .hero-content {
        padding: 3rem 0;
      }
      .hero-image {
        display: block;
      }
      .hero h1 {
        font-size: 3.2rem;
      }
      .hero p {
        font-size: 1.3rem;
        margin: 0 0 2rem;
      }
    }

    @media (max-width: 768px) {
      .hero-buttons {
        justify-content: center;
      }
      .hero-features {
        justify-content: center;
      }
    }

    /* Animaciones */
    @keyframes float {
      0%, 100% { transform: translateY(0); }
      50% { transform: translateY(-10px); }
    }

    .floating {
      animation: float 4s ease-in-out infinite;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }

    .animate-fade {
      animation: fadeIn 0.8s ease-out forwards;
    }

    .delay-1 { animation-delay: 0.2s; }
    .delay-2 { animation-delay: 0.4s; }
    .delay-3 { animation-delay: 0.6s; }
  </style>
{% endblock %}

{% block content %}
  <!-- Hero Section Rediseñada -->
  <section class="hero">
    <div class="hero-container">
      <div class="hero-content">
        <h1 class="animate-fade">¡Transforma tu solidaridad en impacto real!</h1>
        <p class="animate-fade delay-1">Únete a miles de personas que están cambiando el mundo a través de acciones concretas. Gana puntos, supera retos y forma parte de comunidades que marcan la diferencia.</p>
        
        <div class="hero-buttons animate-fade delay-2">
          <a href="/register" class="btn btn-accent">
            <i class="fas fa-rocket"></i> Empieza ahora
          </a>
          <a href="#actions" class="btn btn-outline-white">
            <i class="fas fa-play-circle"></i> Ver acciones
          </a>
        </div>
        
        <div class="hero-features animate-fade delay-3">
          <div class="feature-badge">
            <i class="fas fa-star" style="color: var(--gold);"></i>
            Sistema de puntos
          </div>
          <div class="feature-badge">
            <i class="fas fa-trophy" style="color: var(--warning);"></i>
            Retos emocionantes
          </div>
          <div class="feature-badge">
            <i class="fas fa-users" style="color: white;"></i>
            Comunidades activas
          </div>
        </div>
      </div>
      
      <div class="hero-image floating">
        <img src="https://images.unsplash.com/photo-1529333166437-7750a6dd5a70?auto=format&fit=crop&w=800&q=80" alt="Personas ayudando y sonriendo" class="animate-fade delay-2">
      </div>
    </div>
  </section>

  <!-- Sección de Acciones -->
  <section class="actions-section" id="actions">
    <div class="communities-container">
      <div class="section-header">
        <h2>Elige cómo quieres impactar</h2>
        <p>Diferentes formas de contribuir, todas generan cambios positivos</p>
      </div>
      
      <div class="actions-grid">
        <!-- Causas -->
        <div class="action-card animate-fade">
          <div class="action-image">
            <img src="https://images.unsplash.com/photo-1522202176988-66273c2fd55f?auto=format&fit=crop&w=600&q=80" alt="Causas sociales">
            <div class="action-badge points">
              <i class="fas fa-star"></i> +10 pts/€
            </div>
          </div>
          <div class="action-content">
            <h3><div class="action-icon"><i class="fas fa-hand-holding-heart"></i></div> Causas Solidarias</h3>
            <p>Apoya proyectos verificados con objetivos claros. Cada donación suma puntos y avances medibles hacia la meta.</p>
            <div class="action-stats">
              <div class="stat-item">
                <i class="fas fa-map-marker-alt"></i> 58 países
              </div>
              <div class="stat-item">
                <i class="fas fa-users"></i> 1,250+ activas
              </div>
            </div>
            <a href="/causes" class="action-button btn btn-primary">
              <i class="fas fa-search"></i> Explorar causas
            </a>
          </div>
        </div>
        
        <!-- Retos -->
        <div class="action-card animate-fade delay-1">
          <div class="action-image">
            <img src="https://images.unsplash.com/photo-1542601906990-b4d3fb778b09?auto=format&fit=crop&w=600&q=80" alt="Retos comunitarios">
            <div class="action-badge points">
              <i class="fas fa-star"></i> +200 pts
            </div>
          </div>
          <div class="action-content">
            <h3><div class="action-icon"><i class="fas fa-trophy"></i></div> Retos Solidarios</h3>
            <p>Supera objetivos junto a otros voluntarios. La competencia sana multiplica el impacto colectivo.</p>
            <div class="action-stats">
              <div class="stat-item">
                <i class="fas fa-medal"></i> Premios especiales
              </div>
              <div class="stat-item">
                <i class="fas fa-bolt"></i> Tabla de posiciones
              </div>
            </div>
            <a href="/challenges" class="action-button btn btn-accent">
              <i class="fas fa-flag-checkered"></i> Ver retos
            </a>
          </div>
        </div>
        
        <!-- Voluntariado -->
        <div class="action-card animate-fade delay-2">
          <div class="action-image">
            <img src="https://images.unsplash.com/photo-1521791136064-7986c2920216?auto=format&fit=crop&w=600&q=80" alt="Voluntariado">
            <div class="action-badge points">
              <i class="fas fa-star"></i> +50 pts/hora
            </div>
          </div>
          <div class="action-content">
            <h3><div class="action-icon"><i class="fas fa-hands-helping"></i></div> Voluntariados</h3>
            <p>Conecta con oportunidades presenciales o remotas que necesitan tus habilidades específicas.</p>
            <div class="action-stats">
              <div class="stat-item">
                <i class="fas fa-certificate"></i> Certificados
              </div>
              <div class="stat-item">
                <i class="fas fa-heart"></i> Experiencias únicas
              </div>
            </div>
            <a href="/volunteering" class="action-button btn btn-primary">
              <i class="fas fa-search"></i> Buscar voluntariados
            </a>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Sección Comunidades -->
  <section class="communities-section">
    <div class="communities-container">
      <div class="section-header">
        <h2>Únete a comunidades activas</h2>
        <p>Colabora con equipos que comparten tus intereses y multiplica tu impacto</p>
      </div>
      
      <div class="communities-grid">
        <div class="community-card animate-fade">
          <img src="https://images.unsplash.com/photo-1506744038136-46273834b3fb?auto=format&fit=facearea&w=80&h=80&facepad=2&q=80" alt="EcoBarrio Solidario" class="community-avatar">
          <h3>EcoBarrio Solidario</h3>
          <p>Acciones ambientales y sociales en tu comunidad local</p>
          
          <div class="community-members">
            <img src="https://randomuser.me/api/portraits/women/44.jpg" class="member-avatar" title="Laura">
            <img src="https://randomuser.me/api/portraits/men/32.jpg" class="member-avatar" title="Carlos">
            <img src="https://randomuser.me/api/portraits/women/65.jpg" class="member-avatar" title="Ana">
            <span style="align-self:center; font-size:0.9rem;">+24</span>
          </div>
          
          <div class="community-stats">
            <div class="community-stat">
              <span>1.2K</span>
              <small>Puntos</small>
            </div>
            <div class="community-stat">
              <span>5</span>
              <small>Causas</small>
            </div>
            <div class="community-stat">
              <span>245</span>
              <small>Impacto</small>
            </div>
          </div>
          
          <a href="/teams/ecobarrio" class="btn btn-outline" style="width:100%; margin-top:1rem;">
            <i class="fas fa-users"></i> Ver comunidad
          </a>
        </div>
        
        <div class="community-card animate-fade delay-1">
          <img src="https://images.unsplash.com/photo-1515378791036-0648a3ef77b2?auto=format&fit=facearea&w=80&h=80&facepad=2&q=80" alt="Cocina Comunitaria" class="community-avatar">
          <h3>Cocina Comunitaria</h3>
          <p>Preparamos comidas para personas en situación vulnerable</p>
          
          <div class="community-members">
            <img src="https://randomuser.me/api/portraits/men/41.jpg" class="member-avatar" title="Pedro">
            <img src="https://randomuser.me/api/portraits/women/43.jpg" class="member-avatar" title="Lucía">
            <span style="align-self:center; font-size:0.9rem;">+18</span>
          </div>
          
          <div class="community-stats">
            <div class="community-stat">
              <span>870</span>
              <small>Puntos</small>
            </div>
            <div class="community-stat">
              <span>2</span>
              <small>Causas</small>
            </div>
            <div class="community-stat">
              <span>180</span>
              <small>Impacto</small>
            </div>
          </div>
          
          <a href="/teams/cocina-comunitaria" class="btn btn-outline" style="width:100%; margin-top:1rem;">
            <i class="fas fa-users"></i> Ver comunidad
          </a>
        </div>
        
        <div class="community-card animate-fade delay-2">
          <img src="https://images.unsplash.com/photo-1517841905240-472988babdf9?auto=format&fit=facearea&w=80&h=80&facepad=2&q=80" alt="Lectura Accesible" class="community-avatar">
          <h3>Lectura Accesible</h3>
          <p>Hacemos la lectura accesible a personas con discapacidad</p>
          
          <div class="community-members">
            <img src="https://randomuser.me/api/portraits/women/68.jpg" class="member-avatar" title="María">
            <img src="https://randomuser.me/api/portraits/men/42.jpg" class="member-avatar" title="Javier">
            <span style="align-self:center; font-size:0.9rem;">+12</span>
          </div>
          
          <div class="community-stats">
            <div class="community-stat">
              <span>650</span>
              <small>Puntos</small>
            </div>
            <div class="community-stat">
              <span>1</span>
              <small>Causas</small>
            </div>
            <div class="community-stat">
              <span>95</span>
              <small>Impacto</small>
            </div>
          </div>
          
          <a href="/teams/lectura-accesible" class="btn btn-outline" style="width:100%; margin-top:1rem;">
            <i class="fas fa-users"></i> Ver comunidad
          </a>
        </div>
      </div>
      
      <div style="text-align: center; margin-top: 3rem;">
        <a href="/teams" class="btn btn-primary" style="padding: 0.8rem 2.5rem;">
          <i class="fas fa-search"></i> Explorar todas las comunidades
        </a>
      </div>
    </div>
  </section>

  <!-- CTA Final -->
  <section style="background: var(--primary); color: white; padding: 4rem 2rem; text-align: center;">
    <div style="max-width: 800px; margin: 0 auto;">
      <h2 style="font-size: 2rem; margin-bottom: 1.5rem;">¿Listo para unirte al movimiento?</h2>
      <p style="font-size: 1.2rem; margin-bottom: 2rem; opacity: 0.9;">Regístrate ahora y comienza a ganar puntos, completar retos y conectar con una comunidad global de agentes de cambio.</p>
      <div style="display: flex; gap: 1.5rem; justify-content: center; flex-wrap: wrap;">
        <a href="/register" class="btn btn-accent" style="padding: 0.8rem 2rem;">
          <i class="fas fa-user-plus"></i> Crear cuenta gratis
        </a>
        <a href="/login" class="btn btn-outline-white" style="padding: 0.8rem 2rem;">
          <i class="fas fa-sign-in-alt"></i> Iniciar sesión
        </a>
      </div>
    </div>
  </section>
{% endblock %}

{% block scripts %}
  {{ super() }}
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Animaciones y efectos visuales, NO lógica de supabase aquí
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add('animate-fade');
          }
        });
      }, { threshold: 0.1 });

      document.querySelectorAll('.action-card, .community-card').forEach(card => {
        observer.observe(card);
      });

      // Efecto hover en tarjetas
      const cards = document.querySelectorAll('.action-card, .community-card');
      cards.forEach(card => {
        card.addEventListener('mouseenter', function() {
          this.style.transform = 'translateY(-10px)';
        });
        card.addEventListener('mouseleave', function() {
          this.style.transform = '';
        });
      });

      // Mostrar imagen hero en desktop
      if (window.innerWidth >= 768) {
        document.querySelector('.hero-image').style.display = 'block';
      }

      // Actualizar al cambiar tamaño
      window.addEventListener('resize', function() {
        if (window.innerWidth >= 768) {
          document.querySelector('.hero-image').style.display = 'block';
        } else {
          document.querySelector('.hero-image').style.display = 'none';
        }
      });
    });
  </script>
{% endblock %}

==== C:\Users\gabi2\Desktop\Solidarity-web\views\layout - copia.njk ====
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>{% block title %}Solidarity{% endblock %}</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="description" content="Plataforma colaborativa para impulsar la solidaridad y el impacto social">
  
  <!-- Favicon (ajusta la ruta si es necesario) -->
  <link rel="icon" href="/images/favicon.ico" type="image/x-icon">
  
  <!-- CSS -->
  <link rel="stylesheet" href="/css/style.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
  
  <!-- Bloques para extensiones -->
  {% block head %}{% endblock %}
</head>
<body>
  <!-- Navbar -->
  <header>
    {% include "partials/navbar.njk" %}
  </header>

  <!-- Contenido principal -->
  <main class="main-content">
    {% block content %}{% endblock %}
  </main>

  <!-- Footer -->
  {% include "partials/footer.njk" %}

  <!-- Scripts base -->
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
  <script>
    const supabaseUrl = 'https://cyftasxlrzuynzbrfgkd.supabase.co';
    const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImN5ZnRhc3hscnp1eW56YnJmZ2tkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDgwMzUzMTksImV4cCI6MjA2MzYxMTMxOX0.I56ZqFTfLgdwWlcozMVncGNGBZ4A2_5VpAbHeNmtDhA';
    window.supabase = window.supabase.createClient(supabaseUrl, supabaseKey);

    // Hacer global la función waitForSupabase
    window.waitForSupabase = function(callback) {
      if (window.supabase) {
        callback(window.supabase);
      } else {
        setTimeout(() => window.waitForSupabase(callback), 30);
      }
    };
  </script>
  <script src="/js/navbar.js"></script>
  
  <!-- Bloques para scripts específicos -->
  {% block scripts %}{% endblock %}

  <!-- Notificaciones (ejemplo) -->
  <div id="notifications" class="notifications-container"></div>
</body>
</html>

==== C:\Users\gabi2\Desktop\Solidarity-web\app.js ====
require('dotenv').config();
const express = require('express');
const path = require('path');
const session = require('express-session');
const fs = require('fs');
const multer = require('multer');
const nunjucks = require('nunjucks');
const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);
const app = express();
const PORT = 3000;

const USERS_FILE = path.join(__dirname, 'users.json');

// Middleware para parsear JSON
app.use(express.json());

// Sesiones (añadido cookie: { sameSite: 'lax' } para compatibilidad frontend-backend)
app.use(session({
    secret: 'secreto-super-seguro',
    resave: false,
    saveUninitialized: false,
    cookie: { secure: false, sameSite: 'lax' }
}));

// Servir archivos estáticos (NO HTML aquí, solo CSS, JS, imágenes)
app.use(express.static(path.join(__dirname)));
app.use(express.static(path.join(__dirname, 'public'))); // Para scripts y assets

// --- Multer config para subir imágenes ---
const uploadDir = path.join(__dirname, 'public', 'uploads');
if (!fs.existsSync(uploadDir)) fs.mkdirSync(uploadDir, { recursive: true });

const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, uploadDir);
    },
    filename: function (req, file, cb) {
        // Nombre único: fecha + nombre original
        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
        const ext = path.extname(file.originalname);
        cb(null, file.fieldname + '-' + uniqueSuffix + ext);
    }
});
const upload = multer({ storage: storage });

// --- Subida de foto de perfil ---
app.post('/upload-photo', upload.single('photo'), (req, res) => {
    if (!req.file) {
        return res.json({ ok: false, error: 'No se subió ninguna imagen.' });
    }
    // URL accesible desde el navegador
    const url = '/uploads/' + req.file.filename;
    res.json({ ok: true, url });
});

// --- Leer y guardar usuarios ---
function readUsers() {
    if (!fs.existsSync(USERS_FILE)) return [];
    const data = fs.readFileSync(USERS_FILE, 'utf8');
    if (!data) return [];
    return JSON.parse(data);
}
function writeUsers(users) {
    fs.writeFileSync(USERS_FILE, JSON.stringify(users, null, 2));
}

// --- Registro de usuario ---
app.post('/register', (req, res) => {
    const { username, password, name, email, photo } = req.body;
    if (!username || !password || !name || !email) {
        return res.status(400).json({ ok: false, error: 'Faltan campos obligatorios' });
    }
    let users = readUsers();
    if (users.find(u => u.username === username)) {
        return res.status(400).json({ ok: false, error: 'Usuario ya existe' });
    }
    const newUser = { username, password, name, email, photo: photo || '' };
    users.push(newUser);
    writeUsers(users);
    res.json({ ok: true });
});

// --- Login ---
app.post('/login', (req, res) => {
    // Permitir login por username o email
    const { username, password, email } = req.body;
    let users = readUsers();
    let user = null;
    if (username && password) {
        user = users.find(u => u.username === username && u.password === password);
    } else if (email && password) {
        user = users.find(u => u.email === email && u.password === password);
    }
    if (user) {
        req.session.user = { name: user.name, photo: user.photo || '', username: user.username, email: user.email };
        res.json({ ok: true, user: req.session.user });
    } else {
        res.status(401).json({ ok: false, error: 'Credenciales incorrectas' });
    }
});

// --- Saber si hay sesión ---
app.get('/me', (req, res) => {
    if (req.session.user) {
        res.json({ logged: true, user: req.session.user });
    } else {
        res.json({ logged: false });
    }
});

// --- Logout ---
app.post('/logout', (req, res) => {
    req.session.destroy(() => res.json({ ok: true }));
});

// --- Configura nunjucks para usar la carpeta 'views' ---
nunjucks.configure('views', {
  autoescape: true,
  express: app
});
app.set('view engine', 'njk');

// --- Rutas para las páginas principales (usa .njk) ---
app.get('/', (req, res) => {
    res.render('index.njk');
});
app.get('/login', (req, res) => {
    res.render('auth/login.njk');
});
app.get('/register', (req, res) => {
    res.render('auth/register.njk');
});
app.get('/causes', (req, res) => {
    res.render('causes/index.njk');
});
app.get('/tasks', (req, res) => {
    res.render('tasks/index.njk');
});
app.get('/volunteering', (req, res) => {
    res.render('volunteering/index.njk');
});
app.get('/profile', (req, res) => {
    res.render('profile/index.njk');
});
app.get('/causes/create', (req, res) => {
    res.render('causes/create.njk');
});
app.get('/tasks/create', (req, res) => {
    res.render('tasks/create.njk');
});
app.get('/volunteering/create', (req, res) => {
    res.render('volunteering/create.njk');
});
app.get('/maps', (req, res) => {
    res.render('maps/index.njk');
});
app.get('/challenges', (req, res) => {
    res.render('challenges/index.njk');
});
app.get('/teams', (req, res) => {
    res.render('teams/index.njk');
});
app.get('/teams/myteams', (req, res) => {
    res.render('teams/myteams.njk');
});
app.get('/ranking', (req, res) => {
    res.render('ranking/index.njk');
});
app.get('/takeaction', (req, res) => {
    res.render('takeaction/index.njk');
});

// --- Ruta para 404 ---
app.use((req, res) => {
    res.status(404).send('Página no encontrada');
});

// 1. Crear cuenta Express para el creador de la causa
app.post('/connect-account', async (req, res) => {
  const { userId, email } = req.body;
  try {
    const account = await stripe.accounts.create({
      type: 'express',
      email,
      capabilities: { transfers: { requested: true } }
    });
    // Guarda account.id en tu BD, asociado al usuario
    // ...
    res.json({ accountId: account.id });
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
});

// 2. Crear link de onboarding para que el usuario complete su cuenta
app.post('/connect-onboarding', async (req, res) => {
  const { accountId } = req.body;
  try {
    const accountLink = await stripe.accountLinks.create({
      account: accountId,
      refresh_url: 'https://tusitio.com/stripe/refresh',
      return_url: 'https://tusitio.com/stripe/return',
      type: 'account_onboarding',
    });
    res.json({ url: accountLink.url });
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
});

// 3. Crear sesión de pago para donar a una causa
app.post('/donate', async (req, res) => {
  const { amount, causeId, creatorStripeAccountId, donorEmail } = req.body;
  try {
    const session = await stripe.checkout.sessions.create({
      payment_method_types: ['card'],
      line_items: [{
        price_data: {
          currency: 'eur',
          product_data: { name: `Donación a causa #${causeId}` },
          unit_amount: amount * 100, // en céntimos
        },
        quantity: 1,
      }],
      mode: 'payment',
      success_url: 'https://tusitio.com/donacion-exitosa',
      cancel_url: 'https://tusitio.com/donacion-cancelada',
      payment_intent_data: {
        application_fee_amount: 100, // comisión para la plataforma (opcional)
        transfer_data: {
          destination: creatorStripeAccountId, // el Stripe Account del creador
        },
      },
      customer_email: donorEmail,
    });
    res.json({ url: session.url });
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
});

app.listen(PORT, () => {
    console.log(`Servidor iniciado en http://localhost:${PORT}`);
});
