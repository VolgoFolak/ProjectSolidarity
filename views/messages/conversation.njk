{% extends "layout.njk" %}
{% block title %}ConversaciÃ³n | Solidarity{% endblock %}
{% block head %}
{{ super() }}
<style>
  .conversation-container { max-width: 700px; margin: 2.5rem auto; background: #fff; border-radius: 14px; box-shadow: 0 2px 12px rgba(74,111,165,0.07); display: flex; flex-direction: column; height: 70vh; min-height: 420px; padding: 0; }
  .conversation-header { display: flex; align-items: center; gap: 1.2rem; padding: 1.2rem 1.5rem; border-bottom: 1.5px solid #e2e8f0; background: #f8fafc; }
  .conversation-avatar { width: 54px; height: 54px; border-radius: 50%; object-fit: cover; border: 2px solid #e2e8f0; background: #fff; }
  .conversation-username { font-size: 1.3rem; font-weight: 700; color: var(--primary); }
  .conversation-messages { flex: 1; overflow-y: auto; padding: 1.5rem 1.5rem 1rem 1.5rem; display: flex; flex-direction: column; gap: 1.1rem; background: #f8fafc; }
  .message { max-width: 75%; padding: 0.85rem 1.2rem; border-radius: 18px; position: relative; font-size: 1.05rem; word-break: break-word; box-shadow: 0 2px 8px rgba(76,163,161,0.07); }
  .message-sent { background: var(--primary-light); color: white; align-self: flex-end; border-bottom-right-radius: 4px; }
  .message-received { background: #e2e8f0; color: #222; align-self: flex-start; border-bottom-left-radius: 4px; }
  .message-time { font-size: 0.78rem; color: #6b7280; text-align: right; margin-top: 0.2rem; }
  .message-input-area { display: flex; gap: 0.7rem; padding: 1.2rem 1.5rem; border-top: 1.5px solid #e2e8f0; background: #fff; }
  .message-input { flex: 1; padding: 0.85rem 1.1rem; border: 1.5px solid #e2e8f0; border-radius: 24px; outline: none; font-size: 1rem; }
  .send-button { background: var(--primary); color: white; border: none; border-radius: 50%; width: 44px; height: 44px; display: flex; align-items: center; justify-content: center; cursor: pointer; font-size: 1.2rem; transition: background 0.18s; }
  .send-button:hover { background: var(--secondary); }
</style>
{% endblock %}
{% block content %}
<div class="conversation-container">
  <div class="conversation-header">
    <img id="conversation-avatar" src="/img/default-user.png" alt="" class="conversation-avatar" onerror="this.src='/img/default-user.png'">
    <span id="conversation-username" class="conversation-username"></span>
  </div>
  <div class="conversation-messages" id="messages-container"></div>
  <div class="message-input-area">
    <input type="text" id="message-input" class="message-input" placeholder="Escribe un mensaje...">
    <button id="send-button" class="send-button"><i class="fas fa-paper-plane"></i></button>
  </div>
</div>
{% endblock %}
{% block scripts %}
{{ super() }}
<script>
document.addEventListener('DOMContentLoaded', async () => {
  const conversationId = window.location.pathname.split('/')[2];
  const messagesContainer = document.getElementById('messages-container');
  const messageInput = document.getElementById('message-input');
  const sendButton = document.getElementById('send-button');
  const conversationAvatar = document.getElementById('conversation-avatar');
  const conversationUsername = document.getElementById('conversation-username');

  // Solo usamos fetch a /api/conversations (no Supabase JS ni REST API directa)
  let conversation;
  try {
    const res = await fetch('/api/conversations');
    const conversations = await res.json();
    conversation = conversations.find(c => String(c.id) === String(conversationId));
  } catch {
    conversation = null;
  }
  if (!conversation) {
    messagesContainer.innerHTML = `<div style="text-align:center; color:#4a6fa5; margin-top:3rem;">
      <div style="font-size:3rem;">ðŸ’¬</div>
      <h3 style="margin:1rem 0 0.5rem 0;">No existe esta conversaciÃ³n</h3>
      <p>Vuelve a la <a href="/messages" style="color:#4a6fa5;">bandeja de mensajes</a>.</p>
    </div>`;
    document.querySelector('.message-input-area').style.display = 'none';
    document.querySelector('.conversation-header').style.display = 'none';
    return;
  }
  // Busca el otro participante (no el usuario actual)
  const other = (conversation.participants || []).find(p => !p.profile.is_current_user);
  if (other && other.profile) {
    conversationAvatar.src = other.profile.photo_url || '/img/default-user.png';
    conversationAvatar.onerror = function() { this.src = '/img/default-user.png'; };
    conversationUsername.textContent = other.profile.username;
  } else {
    conversationAvatar.src = '/img/default-user.png';
    conversationUsername.textContent = 'Usuario';
  }

  // Mostrar cabecera e input
  document.querySelector('.message-input-area').style.display = '';
  document.querySelector('.conversation-header').style.display = '';

  // Cargar mensajes solo desde /api/messages/:conversationId
  async function loadMessages(scrollToEnd = true) {
    try {
      const res = await fetch(`/api/messages/${conversationId}`);
      const messages = await res.json();
      messagesContainer.innerHTML = '';
      if (!messages.length) {
        messagesContainer.innerHTML = `
          <div style="text-align:center; color:#4a6fa5; margin-top:3rem;">
            <div style="font-size:3rem;">ðŸ’¬</div>
            <h3 style="margin:1rem 0 0.5rem 0;">Â¡AÃºn no hay mensajes!</h3>
            <p>Empieza la conversaciÃ³n con un saludo o una pregunta.<br>
            <span style="color:#6b7280;">Â¡Los mensajes que envÃ­es aparecerÃ¡n aquÃ­!</span></p>
          </div>
        `;
        return;
      }
      messages.forEach(msg => {
        const isSent = msg.sender && msg.sender.is_current_user;
        const el = document.createElement('div');
        el.className = `message ${isSent ? 'message-sent' : 'message-received'}`;
        el.innerHTML = `<div>${escapeHtml(msg.content)}</div>
          <div class="message-time">${new Date(msg.created_at).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</div>`;
        messagesContainer.appendChild(el);
      });
      if (scrollToEnd) messagesContainer.scrollTop = messagesContainer.scrollHeight;
    } catch {
      messagesContainer.innerHTML = `<div style="color:#e53e3e;text-align:center;padding:2rem 0;">Error al cargar mensajes.<br>Intenta recargar la pÃ¡gina.</div>`;
    }
  }
  function escapeHtml(text) {
    return text.replace(/[&<>"']/g, function(m) {
      return ({
        '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;'
      })[m];
    });
  }
  await loadMessages();

  // Enviar mensaje solo usando /api/messages
  sendButton.onclick = async () => {
    const content = messageInput.value.trim();
    if (!content) return;
    sendButton.disabled = true;
    sendButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
    try {
      await fetch('/api/messages', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ conversation_id: conversationId, content })
      });
      messageInput.value = '';
      await loadMessages();
    } catch {
      alert('Error al enviar el mensaje.');
    }
    sendButton.disabled = false;
    sendButton.innerHTML = '<i class="fas fa-paper-plane"></i>';
  };
  messageInput.addEventListener('keydown', e => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendButton.click();
    }
  });
});
</script>
{% endblock %}