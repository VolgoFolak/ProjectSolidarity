{% extends "layout.njk" %}

{% block title %}Conversación | Solidarity{% endblock %}

{% block head %}
{{ super() }}
<style>
  .conversation-container {
    max-width: 800px;
    margin: 2rem auto;
    padding: 0 1rem;
    display: flex;
    flex-direction: column;
    height: calc(100vh - 150px);
  }
  
  .conversation-header {
    display: flex;
    align-items: center;
    padding: 1rem;
    border-bottom: 1px solid var(--gray);
    margin-bottom: 1rem;
  }
  
  .conversation-avatar {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    object-fit: cover;
    margin-right: 1rem;
  }
  
  .conversation-messages {
    flex: 1;
    overflow-y: auto;
    padding: 1rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  
  .message {
    max-width: 80%;
    padding: 0.8rem 1rem;
    border-radius: 18px;
    position: relative;
  }
  
  .message-sent {
    background: var(--primary-light);
    color: white;
    align-self: flex-end;
    border-bottom-right-radius: 4px;
  }
  
  .message-received {
    background: var(--gray);
    align-self: flex-start;
    border-bottom-left-radius: 4px;
  }
  
  .message-time {
    font-size: 0.7rem;
    color: rgba(255,255,255,0.7);
    text-align: right;
    margin-top: 0.2rem;
  }
  
  .message-input-area {
    display: flex;
    gap: 0.5rem;
    padding: 1rem 0;
    border-top: 1px solid var(--gray);
    margin-top: auto;
  }
  
  .message-input {
    flex: 1;
    padding: 0.8rem 1rem;
    border: 1px solid var(--gray);
    border-radius: 24px;
    outline: none;
  }
  
  .send-button {
    background: var(--primary);
    color: white;
    border: none;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
  }
</style>
{% endblock %}

{% block content %}
<div class="conversation-container">
  <div class="conversation-header">
    <img id="conversation-avatar" src="" alt="" class="conversation-avatar">
    <h2 id="conversation-username"></h2>
  </div>
  
  <div class="conversation-messages" id="messages-container">
    <!-- Los mensajes se cargarán aquí dinámicamente -->
  </div>
  
  <div class="message-input-area">
    <input type="text" id="message-input" class="message-input" placeholder="Escribe un mensaje...">
    <button id="send-button" class="send-button">
      <i class="fas fa-paper-plane"></i>
    </button>
  </div>
</div>
{% endblock %}

{% block scripts %}
{{ super() }}
<script>
document.addEventListener('DOMContentLoaded', async () => {
  const { data: { user } } = await supabase.auth.getUser();
  if (!user) return;

  const conversationId = window.location.pathname.split('/')[2];
  const messagesContainer = document.getElementById('messages-container');
  const messageInput = document.getElementById('message-input');
  const sendButton = document.getElementById('send-button');
  const conversationAvatar = document.getElementById('conversation-avatar');
  const conversationUsername = document.getElementById('conversation-username');
  let isSending = false;

  // Cargar información de la conversación y participante
  const { data: conversation, error: convError } = await supabase
    .from('conversations')
    .select(`
      id,
      participants: conversation_participants (
        profile: profiles!conversation_participants_profile_id_fkey (id, username, photo_url)
      )
    `)
    .eq('id', conversationId)
    .single();

  if (convError || !conversation) {
    alert('No se pudo cargar la conversación.');
    return;
  }

  // Encontrar el otro participante
  const other = (conversation.participants || []).find(
    p => p.profile && p.profile.id !== user.id
  );
  if (!other) {
    alert('No tienes permiso para ver esta conversación.');
    return;
  }
  const otherProfile = other.profile;
  conversationAvatar.src = otherProfile.photo_url || '/img/default-user.png';
  conversationAvatar.alt = otherProfile.username;
  conversationUsername.textContent = otherProfile.username;

  // Cargar mensajes
  async function loadMessages(scrollToEnd = true) {
    const { data: messages, error } = await supabase
      .from('messages')
      .select('id, content, created_at, sender:profiles!messages_sender_id_fkey (id, username)')
      .eq('conversation_id', conversationId)
      .order('created_at', { ascending: true });

    if (error) {
      messagesContainer.innerHTML = `<div style="color:#e53e3e;">Error al cargar mensajes</div>`;
      return;
    }

    messagesContainer.innerHTML = '';
    messages.forEach(msg => {
      const isSent = msg.sender && msg.sender.id === user.id;
      const messageEl = document.createElement('div');
      messageEl.className = `message ${isSent ? 'message-sent' : 'message-received'}`;
      const date = new Date(msg.created_at);
      const timeString = date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
      messageEl.innerHTML = `
        <div>${escapeHtml(msg.content)}</div>
        <div class="message-time">${timeString}</div>
      `;
      messagesContainer.appendChild(messageEl);
    });
    if (scrollToEnd) {
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }
  }

  // Escapar HTML para evitar XSS
  function escapeHtml(text) {
    return text.replace(/[&<>"']/g, function(m) {
      return ({
        '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;'
      })[m];
    });
  }

  await loadMessages();

  // Enviar nuevo mensaje
  async function sendMessage() {
    if (isSending) return;
    const content = messageInput.value.trim();
    if (!content) return;
    isSending = true;
    sendButton.disabled = true;
    sendButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';

    const { error } = await supabase
      .from('messages')
      .insert({
        conversation_id: conversationId,
        sender_id: user.id,
        content: content
      });

    if (error) {
      alert('Error al enviar el mensaje.');
      console.error(error);
    } else {
      messageInput.value = '';
      await loadMessages();
    }
    isSending = false;
    sendButton.disabled = false;
    sendButton.innerHTML = '<i class="fas fa-paper-plane"></i>';
  }

  sendButton.addEventListener('click', sendMessage);

  messageInput.addEventListener('keydown', (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  });

  // Suscribirse a nuevos mensajes en tiempo real
  const channel = supabase
    .channel(`conversation:${conversationId}`)
    .on('postgres_changes', {
      event: 'INSERT',
      schema: 'public',
      table: 'messages',
      filter: `conversation_id=eq.${conversationId}`
    }, async () => {
      await loadMessages();
    })
    .subscribe();

  // Limpieza al salir
  window.addEventListener('beforeunload', () => {
    supabase.removeChannel(channel);
  });
});
</script>
{% endblock %}