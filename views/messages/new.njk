{% extends "layout.njk" %}
{% block title %}Nuevo mensaje | Solidarity{% endblock %}
{% block head %}
{{ super() }}
<style>
  .new-message-container { max-width: 520px; margin: 2.5rem auto; background: #fff; border-radius: 14px; box-shadow: 0 2px 12px rgba(74,111,165,0.07); padding: 2.2rem 2rem 2rem 2rem; }
  .recipient-selector { margin-bottom: 1.5rem; }
  .search-input { width: 100%; padding: 0.8rem 1rem; border: 1.5px solid var(--gray); border-radius: 8px; font-size: 1rem; margin-bottom: 0.5rem; }
  .search-results { background: #f8fafc; border: 1px solid #e2e8f0; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.07); max-height: 220px; overflow-y: auto; margin-bottom: 0.5rem; z-index: 10; position: relative; }
  .user-result { display: flex; align-items: center; gap: 1rem; padding: 0.7rem 1rem; cursor: pointer; border-bottom: 1px solid #f0f0f0; transition: background 0.15s; }
  .user-result:last-child { border-bottom: none; }
  .user-result:hover { background: #eaf3fb; }
  .user-avatar { width: 38px; height: 38px; border-radius: 50%; object-fit: cover; border: 2px solid #e2e8f0; background: #fff; }
  #selected-user { display: flex; align-items: center; gap: 1rem; background: #f8fafc; border: 1.5px solid #e2e8f0; border-radius: 8px; padding: 0.7rem 1rem; margin-bottom: 0.5rem; }
  #remove-recipient { background: transparent; border: none; color: #e53e3e; font-size: 1.2rem; cursor: pointer; margin-left: 0.5rem; }
  .message-content label { font-weight: 600; margin-bottom: 0.3rem; display: block; }
  #message-content { width: 100%; min-height: 110px; padding: 1rem; border: 1.5px solid var(--gray); border-radius: 8px; font-size: 1rem; margin-bottom: 1.2rem; resize: vertical; }
</style>
{% endblock %}
{% block content %}
<div class="new-message-container">
  <h1 style="color:var(--primary);font-weight:800;margin-bottom:1.5rem;">Nuevo mensaje</h1>
  <div class="recipient-selector">
    <label for="user-search" style="font-weight:600;">Para:</label>
    <input type="text" class="search-input" id="user-search" placeholder="Buscar usuario por nombre..." autocomplete="off">
    <div class="search-results" id="search-results"></div>
    <div id="selected-user" style="display:none;">
      <img id="selected-avatar" src="/img/default-user.png" class="user-avatar" alt="Avatar usuario seleccionado" onerror="this.src='/img/default-user.png'">
      <span id="selected-username" style="font-weight:600;"></span>
      <input type="hidden" id="recipient-id">
      <button id="remove-recipient" title="Quitar destinatario">&times;</button>
    </div>
    <div style="font-size:0.97em;color:#6b7280;margin-top:0.3rem;">
      Busca y selecciona un usuario para enviarle un mensaje privado.
    </div>
  </div>
  <div class="message-content">
    <label for="message-content">Mensaje:</label>
    <textarea id="message-content" placeholder="Escribe tu mensaje aquí..."></textarea>
  </div>
  <button id="send-message" class="btn btn-primary" style="width:100%;max-width:220px;">
    <i class="fas fa-paper-plane"></i> Enviar mensaje
  </button>
</div>
{% endblock %}
{% block scripts %}
{{ super() }}
<script>
document.addEventListener('DOMContentLoaded', () => {
  const searchInput = document.getElementById('user-search');
  const searchResults = document.getElementById('search-results');
  const selectedUser = document.getElementById('selected-user');
  const selectedAvatar = document.getElementById('selected-avatar');
  const selectedUsername = document.getElementById('selected-username');
  const recipientId = document.getElementById('recipient-id');
  const removeRecipient = document.getElementById('remove-recipient');
  const sendButton = document.getElementById('send-message');
  const messageContent = document.getElementById('message-content');

  searchInput.addEventListener('input', async () => {
    const term = searchInput.value.trim();
    if (term.length < 2) {
      searchResults.innerHTML = '';
      return;
    }
    searchResults.innerHTML = `<div style="padding:1rem;text-align:center;color:#888;"><i class="fas fa-spinner fa-spin"></i> Buscando...</div>`;
    try {
      const res = await fetch(`/api/users?search=${encodeURIComponent(term)}`);
      const users = await res.json();
      searchResults.innerHTML = '';
      if (!users.length) {
        searchResults.innerHTML = `<div style="padding:1rem;text-align:center;color:#888;">No se encontraron usuarios</div>`;
        return;
      }
      users.forEach(u => {
        const el = document.createElement('div');
        el.className = 'user-result';
        el.innerHTML = `<img src="${u.photo_url || '/img/default-user.png'}" class="user-avatar" alt="${u.username}" onerror="this.src='/img/default-user.png'"><span>${u.username}</span>`;
        el.onclick = () => {
          selectedAvatar.src = u.photo_url || '/img/default-user.png';
          selectedAvatar.onerror = function() { this.src = '/img/default-user.png'; };
          selectedUsername.textContent = u.username;
          recipientId.value = u.id;
          selectedUser.style.display = '';
          searchResults.innerHTML = '';
          searchInput.value = '';
          selectedUser.style.display = '';
        };
        searchResults.appendChild(el);
      });
    } catch {
      searchResults.innerHTML = `<div style="padding:1rem;text-align:center;color:#e53e3e;">Error al buscar usuarios</div>`;
    }
  });

  removeRecipient.onclick = () => {
    selectedUser.style.display = 'none';
    recipientId.value = '';
  };

  sendButton.onclick = async () => {
    if (!recipientId.value || !messageContent.value.trim()) {
      alert('Selecciona un usuario y escribe un mensaje.');
      return;
    }
    sendButton.disabled = true;
    sendButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Enviando...';
    try {
      const res = await fetch('/api/conversations', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ recipient_id: recipientId.value, content: messageContent.value.trim() })
      });
      const conversation = await res.json();
      if (conversation && conversation.id) {
        window.location.href = `/messages/${conversation.id}`;
      } else {
        alert('No se pudo crear la conversación.');
      }
    } catch {
      alert('Error al enviar el mensaje.');
    }
    sendButton.disabled = false;
    sendButton.innerHTML = '<i class="fas fa-paper-plane"></i> Enviar mensaje';
  };
});
</script>
{% endblock %}