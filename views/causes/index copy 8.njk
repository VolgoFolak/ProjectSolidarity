{% extends "layout.njk" %}

{% block title %}Causas - Solidarity{% endblock %}

{% block head %}
  {{ super() }}
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
  <style>
    :root {
      --primary: #4a6fa5;
      --primary-dark: #166088;
      --gray: #e2e8f0;
      --white: #fff;
      --accent: #4fc3a1;
      --accent-dark: #3da58a;
      --urgent: #e53e3e;
    }
    body {
      background: #f8fafc;
      font-family: 'Inter', Arial, sans-serif;
      color: #2d3748;
      font-size: 1rem;
    }
    
    /* Modal de creación de causa */
    .modal-bg {
      display: none;
      position: fixed;
      top: 0; left: 0; width: 100vw; height: 100vh;
      background: rgba(0,0,0,0.35);
      z-index: 9999;
      align-items: center;
      justify-content: center;
    }
    .modal-bg.active { display: flex; }
    .modal-content {
      background: #fff;
      border-radius: 18px;
      max-width: 540px;
      width: 95vw;
      padding: 2.5rem 1.5rem 2rem 1.5rem;
      box-shadow: 0 8px 32px rgba(0,0,0,0.13);
      position: relative;
      animation: fadeIn 0.3s;
      max-height: 90vh;
      overflow-y: auto;
    }
    .close-modal {
      position: absolute;
      top: 1.1rem; right: 1.3rem;
      background: none;
      border: none;
      font-size: 2rem;
      color: #aaa;
      cursor: pointer;
      transition: color 0.2s;
    }
    .close-modal:hover { color: var(--primary, #4a6fa5); }
    .create-cause-title {
      font-size: 1.5rem;
      font-weight: 800;
      color: var(--primary, #4a6fa5);
      margin-bottom: 1.2rem;
      text-align: center;
    }
    .cause-form .form-group label { font-weight: 600; color: var(--primary, #4a6fa5); }
    .cause-form .form-group input,
    .cause-form .form-group textarea {
      width: 100%;
      padding: 0.7rem 1rem;
      border-radius: 8px;
      border: 1px solid #e5e7eb;
      margin-bottom: 0.2rem;
      font-size: 1rem;
      background: #f8fafc;
      transition: border 0.2s;
    }
    .cause-form .form-group input:focus,
    .cause-form .form-group textarea:focus {
      border: 1.5px solid var(--accent, #4fc3a1);
      outline: none;
      background: #fff;
    }
    .cause-form .form-group textarea {
      min-height: 90px;
      resize: vertical;
    }
    .form-inline-group {
      display: flex;
      gap: 1rem;
    }
    .form-inline-group .form-group { flex: 1; }
    .preview-img {
      width: 100%;
      max-width: 320px;
      height: 180px;
      object-fit: cover;
      border-radius: 10px;
      margin-top: 0.5rem;
      border: 1px solid #e5e7eb;
      display: none;
    }
    .points-info {
      background: var(--accent, #4fc3a1);
      color: #fff;
      border-radius: 8px;
      padding: 0.7rem 1rem;
      margin-top: 0.5rem;
      font-size: 1.05rem;
      display: flex;
      align-items: center;
      gap: 0.7rem;
    }
    .after-create {
      margin-top: 2rem;
      background: var(--primary-light, #e6f0fa);
      color: #444;
      border-radius: 10px;
      padding: 1.5rem 1rem;
      text-align: center;
    }
    
    /* Modal de Stripe */
    .stripe-setup-modal {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.7);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 10000;
    }
    .stripe-setup-modal .modal-content {
      background: white;
      border-radius: 12px;
      padding: 2rem;
      max-width: 500px;
      width: 90%;
      box-shadow: 0 10px 30px rgba(0,0,0,0.2);
    }
    .stripe-setup-modal h3 {
      color: #635bff;
      margin-bottom: 1.5rem;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }
    .stripe-setup-modal p {
      margin-bottom: 2rem;
      line-height: 1.6;
    }
    .stripe-setup-modal .modal-actions {
      display: flex;
      gap: 1rem;
      justify-content: center;
    }
    
    /* Modal de éxito de Stripe */
    .stripe-success-modal {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.7);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 10000;
    }
    .stripe-success-modal .modal-content {
      background: white;
      border-radius: 12px;
      padding: 2rem;
      max-width: 500px;
      width: 90%;
      box-shadow: 0 10px 30px rgba(0,0,0,0.2);
      text-align: center;
    }
    .stripe-success-modal .icon-success {
      background: #4fc3a1;
      width: 80px;
      height: 80px;
      border-radius: 50%;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 1.5rem;
    }
    .stripe-success-modal .icon-success i {
      color: white;
      font-size: 2.5rem;
    }
    .stripe-success-modal h2 {
      color: var(--primary);
      margin-bottom: 1rem;
    }
    .stripe-success-modal .btn-container {
      display: flex;
      gap: 1rem;
      justify-content: center;
      margin-top: 2rem;
    }
    
    /* Notificaciones */
    .global-notification {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      padding: 1rem 1.5rem;
      border-radius: 8px;
      display: flex;
      align-items: center;
      gap: 0.8rem;
      z-index: 10000;
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
      animation: slideInDown 0.3s ease-out;
    }
    .global-notification.info {
      background: #dbeafe;
      color: #3b82f6;
      border: 1px solid #bfdbfe;
    }
    .global-notification.success {
      background: #dcfce7;
      color: #16a34a;
      border: 1px solid #bbf7d0;
    }
    .global-notification.error {
      background: #fee2e2;
      color: #ef4444;
      border: 1px solid #fecaca;
    }
    .global-notification.fade-out {
      animation: slideOutUp 0.3s ease-in;
      opacity: 0;
    }
    
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(-20px); }
      to { opacity: 1; transform: translateY(0); }
    }
    @keyframes slideInDown {
      from { opacity: 0; transform: translateX(-50%) translateY(-20px); }
      to { opacity: 1; transform: translateX(-50%) translateY(0); }
    }
    @keyframes slideOutUp {
      from { opacity: 1; transform: translateX(-50%) translateY(0); }
      to { opacity: 0; transform: translateX(-50%) translateY(-20px); }
    }
    
    /* Estilos para la sección principal de causas */
.main-container {
  max-width: 1200px;
  margin: 2rem auto;
  padding: 0 2rem;
}

.causes-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
}

.causes-header h1 {
  font-size: 2rem;
  color: var(--primary);
  font-weight: 700;
}

.causes-search {
  margin-bottom: 2rem;
  display: flex;
  align-items: center;
  gap: 0.7rem;
}

.causes-search input {
  flex: 1;
  padding: 0.6rem 1.2rem;
  border-radius: 7px;
  border: 1.5px solid var(--gray);
  font-size: 1.05rem;
  outline: none;
  transition: border 0.2s;
  background: #fff;
}

.causes-search input:focus {
  border-color: var(--primary);
}

.tabs {
  display: flex;
  border-bottom: 1px solid var(--gray);
  margin-bottom: 2rem;
}

.tab {
  padding: 0.75rem 1.5rem;
  cursor: pointer;
  position: relative;
  font-weight: 500;
  color: #6b7280;
  background: none;
  border: none;
  outline: none;
}

.tab.active {
  color: var(--primary);
  font-weight: 600;
}

.tab.active::after {
  content: '';
  position: absolute;
  bottom: -1px;
  left: 0;
  width: 100%;
  height: 3px;
  background: var(--primary);
}

/* Estilos para el modal de causa */
.modal-cause-container {
  font-family: 'Poppins', sans-serif;
  color: #2d3748;
}

.modal-cause-header {
  display: flex;
  gap: 2rem;
  margin-bottom: 2rem;
}

.modal-cause-image-wrapper {
  flex: 1;
  min-width: 300px;
  height: 280px;
  border-radius: 12px;
  overflow: hidden;
  position: relative;
  box-shadow: 0 4px 12px rgba(0,0,0,0.08);
}

.modal-cause-image {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: transform 0.3s ease;
}

.modal-cause-badge {
  position: absolute;
  top: 1.5rem;
  right: 1.5rem;
  background: rgba(255,255,255,0.95);
  padding: 0.5rem 1rem;
  border-radius: 50px;
  font-size: 0.9rem;
  font-weight: 600;
  display: flex;
  align-items: center;
  gap: 0.6rem;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  z-index: 2;
}

.modal-cause-badge.urgent {
  background: var(--urgent);
  color: white;
}

.modal-cause-info {
  flex: 1.5;
  display: flex;
  flex-direction: column;
}

.modal-cause-title {
  font-size: 1.8rem;
  font-weight: 700;
  color: var(--primary);
  margin-bottom: 1rem;
  line-height: 1.3;
}

.modal-cause-progress-container {
  background: #f8fafc;
  padding: 1.5rem;
  border-radius: 12px;
  margin-bottom: 1.5rem;
  border: 1px solid #e5e7eb;
}

.progress-info {
  display: flex;
  justify-content: space-between;
  margin-top: 0.8rem;
  font-size: 0.95rem;
  color: #6b7280;
}

.modal-cause-meta-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
  gap: 1.2rem;
  margin-bottom: 1.5rem;
}

.meta-item {
  display: flex;
  align-items: center;
  gap: 0.8rem;
  font-size: 0.95rem;
}

.meta-icon {
  color: var(--primary);
  font-size: 1.1rem;
  width: 1.5rem;
  text-align: center;
}

.points-notice {
  background: #f0f9ff;
  border-left: 4px solid var(--accent);
  padding: 1rem;
  border-radius: 0 8px 8px 0;
  margin: 1rem 0;
  font-size: 0.95rem;
  display: flex;
  align-items: center;
  gap: 0.7rem;
}

.modal-cause-content { margin-top: 1.5rem; }
.content-section { margin-bottom: 2rem; }
.content-title {
  font-size: 1.3rem;
  font-weight: 600;
  color: var(--primary);
  margin-bottom: 1rem;
  display: flex;
  align-items: center;
  gap: 0.7rem;
}

.content-text {
  line-height: 1.7;
  color: #4b5563;
  font-size: 1.05rem;
}

.modal-cause-actions {
  display: flex;
  gap: 1rem;
  margin-top: 1.5rem;
  flex-wrap: wrap;
}

.action-btn {
  flex: 1;
  min-width: 180px;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.7rem;
  padding: 1rem;
  border-radius: 8px;
  font-weight: 600;
  font-size: 1.05rem;
  transition: all 0.2s ease;
  border: none;
  cursor: pointer;
}

.action-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(0,0,0,0.1);
}

.action-btn-primary {
  background: var(--primary);
  color: white;
}

.action-btn-accent {
  background: var(--accent);
  color: white;
}

.action-btn-secondary {
  background: #f8fafc;
  color: var(--primary);
  border: 1px solid var(--primary-light);
}

.share-section {
  margin-top: 2rem;
  padding-top: 2rem;
  border-top: 1px solid #e5e7eb;
}

.share-title {
  font-size: 1.3rem;
  font-weight: 600;
  color: var(--primary);
  margin-bottom: 1.5rem;
  text-align: center;
}

.share-content {
  background: #f8fafc;
  border-radius: 12px;
  padding: 1.5rem;
  margin-bottom: 1.5rem;
  position: relative;
}

.share-text {
  font-size: 1rem;
  line-height: 1.6;
  color: #4b5563;
  margin-bottom: 1rem;
}

.share-highlight {
  color: var(--primary);
  font-weight: 600;
}

.share-buttons {
  display: flex;
  justify-content: center;
  gap: 1rem;
  flex-wrap: wrap;
}

.share-btn {
  display: flex;
  align-items: center;
  gap: 0.7rem;
  padding: 0.8rem 1.5rem;
  border-radius: 8px;
  font-weight: 600;
  color: white;
  transition: all 0.2s;
  text-decoration: none;
}

.share-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.share-btn-facebook { background: #3b5998; }
.share-btn-twitter { background: #1da1f2; }
.share-btn-whatsapp { background: #25d366; }
.share-btn-link { background: var(--primary); }

/* Estilos para la sección de introducción de causas */
.causes-intro {
  background: linear-gradient(135deg, #f0f9ff 0%, #e6f0fa 100%);
  border-radius: 12px;
  padding: 2rem;
  margin-bottom: 2rem;
  border: 1px solid #e2e8f0;
}

.causes-intro h2 {
  font-size: 1.8rem;
  color: #166088;
  margin-bottom: 1rem;
  display: flex;
  align-items: center;
  gap: 0.8rem;
}

.causes-intro h2 i {
  color: #4fc3a1;
}

.causes-intro p {
  color: #4a6fa5;
  font-size: 1.1rem;
  line-height: 1.6;
}

/* Estilos responsivos */
@media (max-width: 900px) {
  .main-container {
    padding: 1.2rem 0.5rem;
  }
}

@media (max-width: 768px) {
  .causes-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 1rem;
  }
  
  .modal-cause-header {
    flex-direction: column;
  }
  
  .modal-cause-image-wrapper {
    min-width: 100%;
  }
  
  .cause-actions {
    flex-direction: column;
  }
  
  .action-btn {
    min-width: 100%;
  }
}

/* Animaciones adicionales */
@keyframes slideInUp {
  from { opacity: 0; transform: translateY(20px); }
  to { opacity: 1; transform: translateY(0); }
}

@keyframes slideOutDown {
  from { opacity: 1; transform: translateY(0); }
  to { opacity: 0; transform: translateY(20px); }
}

@keyframes fadeOut {
  from { opacity: 1; }
  to { opacity: 0; }
}
    
    /* Estilos para la sección principal de causas */
.causes-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
  gap: 2rem;
}

.cause-card {
  background: white;
  border-radius: 12px;
  overflow: hidden;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
  transition: all 0.3s ease;
  border: 1px solid var(--gray);
  display: flex;
  flex-direction: column;
}

.cause-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
}

.cause-image {
  height: 180px;
  overflow: hidden;
  position: relative;
}

.cause-image img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: transform 0.3s ease;
}

.cause-card:hover .cause-image img {
  transform: scale(1.05);
}

.cause-badge {
  position: absolute;
  top: 1rem;
  right: 1rem;
  background: rgba(255, 255, 255, 0.9);
  padding: 0.3rem 0.8rem;
  border-radius: 50px;
  font-size: 0.8rem;
  font-weight: 600;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

.cause-badge.urgent {
  background: var(--urgent);
  color: white;
}

.cause-badge.points {
  background: var(--primary);
  color: white;
  left: 1rem;
  right: auto;
}

.cause-content {
  padding: 1.5rem;
  display: flex;
  flex-direction: column;
  flex: 1;
}

.cause-content h3 {
  font-size: 1.3rem;
  margin-bottom: 0.8rem;
  color: #2d3748;
}

.cause-content p {
  color: #6b7280;
  margin-bottom: 1.5rem;
  font-size: 0.95rem;
  line-height: 1.6;
  flex-grow: 1;
}

.cause-meta {
  display: flex;
  gap: 1rem;
  margin-bottom: 1.5rem;
  font-size: 0.85rem;
  flex-wrap: wrap;
}

.meta-item {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  color: #6b7280;
}

.meta-item i {
  color: var(--primary);
}

.beneficiaries-count {
  display: inline-flex;
  align-items: center;
  background: #f0f9ff;
  color: var(--primary);
  padding: 0.3rem 0.8rem;
  border-radius: 50px;
  font-size: 0.85rem;
  font-weight: 600;
}

.beneficiaries-count i {
  margin-right: 0.3rem;
}

.cause-progress {
  margin-bottom: 1.5rem;
}

.progress-bar {
  height: 8px;
  background: var(--gray);
  border-radius: 4px;
  overflow: hidden;
  margin-bottom: 0.5rem;
}

.progress-fill {
  height: 100%;
  background: var(--primary);
  border-radius: 4px;
}

.progress-info {
  display: flex;
  justify-content: space-between;
  font-size: 0.9rem;
  color: #6b7280;
}

.cause-actions {
  display: flex;
  gap: 0.8rem;
}

.cause-actions .btn {
  flex: 1;
  text-align: center;
  justify-content: center;
}

.btn-accent {
  background: var(--accent);
  color: white;
}

.btn-accent:hover {
  background: var(--accent-dark);
  transform: translateY(-2px);
}

.btn-sm {
  padding: 0.4rem 0.8rem;
  font-size: 0.85rem;
}
  </style>
{% endblock %}

{% block content %}
  <!-- Modal para usuarios no logueados -->
  <div class="modal-bg" id="loginModal">
    <div class="modal-content">
      <h3>Para crear una causa</h3>
      <p>Debes ser un usuario registrado. ¿Deseas iniciar sesión o registrarte ahora?</p>
      <div class="modal-buttons">
        <a href="/login?return=/causes" class="btn btn-primary">Iniciar Sesión</a>
        <a href="/register?return=/causes" class="btn btn-outline">Registrarse</a>
        <button id="cancelModal" class="btn">Cancelar</button>
      </div>
    </div>
  </div>

  <!-- Modal emergente para crear causa -->
  <div id="createCauseModal" class="modal-bg">
    <div class="modal-content">
      <button class="close-modal" id="closeCreateCauseModal" title="Cerrar">&times;</button>
      <div class="create-cause-title">
        <i class="fas fa-plus-circle"></i> Crear Nueva Causa Solidaria
      </div>
      <form class="cause-form" id="causeForm" autocomplete="off">
        <!-- Título de la causa -->
        <div class="form-group">
          <label for="title">Título de la causa</label>
          <input type="text" id="title" name="title" placeholder="Ej: Agua limpia para todos" required>
        </div>
        <!-- Foto principal -->
        <div class="form-group">
          <label for="photo">Foto principal</label>
          <input type="file" id="photo" name="photo" accept="image/*">
          <img id="previewImg" class="preview-img" alt="Vista previa de la foto" style="display:none;">
        </div>
        <!-- Resumen corto -->
        <div class="form-group">
          <label for="short_description">Descripción corta (máx. 3 líneas)</label>
          <textarea id="short_description" name="short_description" maxlength="180" placeholder="Resumen breve para mostrar en la tarjeta..." required></textarea>
        </div>
        <!-- Descripción larga -->
        <div class="form-group">
          <label for="description">Descripción exhaustiva</label>
          <textarea id="description" name="description" placeholder="Describe la causa, el objetivo, contexto, cómo se usará la ayuda..." required></textarea>
        </div>
        <!-- Meta y beneficiarios -->
        <div class="form-inline-group">
          <div class="form-group">
            <label for="goal">Meta de recaudación (€)</label>
            <input type="number" id="goal" name="goal" min="1" step="0.01" placeholder="Ej: 5000" required>
          </div>
          <div class="form-group">
            <label for="beneficiaries">Nº de beneficiarios</label>
            <input type="number" id="beneficiaries" name="beneficiaries" min="1" placeholder="Ej: 100" required>
          </div>
        </div>
        <!-- Ciudad y país -->
        <div class="form-inline-group">
          <div class="form-group">
            <label for="city">Ciudad</label>
            <input type="text" id="city" name="city" placeholder="Ej: Madrid" required>
          </div>
          <div class="form-group">
            <label for="country">País</label>
            <input type="text" id="country" name="country" placeholder="Ej: España" required>
          </div>
        </div>
        <!-- Puntos -->
        <div class="form-group">
          <label for="points">Puntos por colaborar</label>
          <input type="number" id="points" name="points" min="1" max="1000" value="50" required>
          <div class="points-info" id="pointsText">
            <i class="fas fa-star"></i>
            Colaborar en esta causa otorgará <strong>50 puntos</strong> a cada participante.
          </div>
        </div>
        <!-- Email de contacto -->
        <div class="form-group">
          <label for="contact_email">Email de contacto</label>
          <input type="email" id="contact_email" name="contact_email" placeholder="ejemplo@email.com">
        </div>
        <!-- Teléfono de contacto -->
        <div class="form-group">
          <label for="phone_number">Teléfono de contacto</label>
          <input type="tel" id="phone_number" name="phone_number" placeholder="+34 600 123 456">
        </div>
        <input type="hidden" id="lat" name="lat">
        <input type="hidden" id="lng" name="lng">
        <button type="submit" class="btn btn-primary" style="margin-top:1rem;">
          <i class="fas fa-paper-plane"></i> Crear Causa
        </button>
      </form>
      <div class="after-create" id="afterCreate" style="display:none;">
        <h3>¡Causa creada con éxito!</h3>
        <p>¿Quieres agregar tareas o retos específicos vinculados a esta causa?</p>
        <a href="/tasks/create" class="btn btn-accent">
          <i class="fas fa-tasks"></i> Agregar tareas/retos
        </a>
        <br>
        <a href="/causes" class="btn btn-outline" style="margin-top:1rem;">
          <i class="fas fa-arrow-left"></i> Volver a causas
        </a>
      </div>
    </div>
  </div>

  <!-- Modal de Stripe Setup -->
  <div id="stripeSetupModal" class="stripe-setup-modal" style="display:none;">
    <div class="modal-content">
      <h3><i class="fab fa-stripe"></i> Configuración de Pagos Requerida</h3>
      <p>Para recibir donaciones, necesitas vincular una cuenta de Stripe. Este proceso es seguro y solo toma 2 minutos.</p>
      <div class="benefits-list" style="text-align:left; margin:1.5rem 0;">
        <div style="display:flex; align-items:center; gap:0.7rem; margin-bottom:0.8rem;">
          <i class="fas fa-check-circle" style="color:var(--accent);"></i>
          <span>Recibirás pagos directamente en tu cuenta bancaria</span>
        </div>
        <div style="display:flex; align-items:center; gap:0.7rem; margin-bottom:0.8rem;">
          <i class="fas fa-check-circle" style="color:var(--accent);"></i>
          <span>Solo 2% de comisión por transacción</span>
        </div>
        <div style="display:flex; align-items:center; gap:0.7rem;">
          <i class="fas fa-check-circle" style="color:var(--accent);"></i>
          <span>Proceso seguro y verificado</span>
        </div>
      </div>
      <div class="modal-actions">
        <button id="configureStripeBtn" class="btn btn-primary" style="flex:1;">
          <i class="fab fa-stripe"></i> Configurar ahora
        </button>
        <button id="saveDraftBtn" class="btn btn-outline" style="flex:1;">
          <i class="fas fa-save"></i> Guardar borrador
        </button>
      </div>
      <p style="font-size:0.9rem; color:#6b7280; margin-top:1.5rem;">
        <i class="fas fa-info-circle"></i> Puedes configurar Stripe más tarde desde tu perfil
      </p>
    </div>
  </div>

  <!-- Modal de éxito de Stripe -->
  <div id="stripeSuccessModal" class="stripe-success-modal" style="display:none;">
    <div class="modal-content">
      <div class="icon-success">
        <i class="fas fa-check"></i>
      </div>
      <h2>¡Configuración completada!</h2>
      <p style="color:#4b5563; margin-bottom:2rem; line-height:1.6;">
        Tu cuenta de Stripe está activa y tu causa está lista para recibir donaciones.
      </p>
      <div class="btn-container">
        <a href="/causes" class="btn btn-primary">
          <i class="fas fa-list"></i> Ver todas las causas
        </a>
        <a href="/profile" class="btn btn-accent">
          <i class="fas fa-user"></i> Ver mi perfil
        </a>
      </div>
    </div>
  </div>

  <!-- Modal de Causa (compatible con causes-renderer.js) -->
  <div id="causeModal" class="modal" style="display:none; position:fixed; z-index:9999; left:0; top:0; width:100vw; height:100vh; background:rgba(0,0,0,0.35); align-items:center; justify-content:center;">
    <div class="modal-content" style="background:#fff; border-radius:18px; max-width:900px; width:95vw; padding:0; position:relative; max-height:90vh; overflow-y:auto;">
      <button onclick="window.causesRenderer ? window.causesRenderer.closeModal() : (this.closest('.modal').style.display='none', document.body.style.overflow='')" 
              style="position:absolute; top:1rem; right:1rem; background:none; border:none; font-size:1.5rem; cursor:pointer; z-index:10; color:#666; width:2rem; height:2rem; display:flex; align-items:center; justify-content:center; border-radius:50%; transition:all 0.2s;" 
              onmouseover="this.style.background='#f3f4f6'" 
              onmouseout="this.style.background='none'">&times;</button>
      <div id="modalBody" style="padding:2rem;">
        <!-- El contenido se genera dinámicamente por causes-renderer.js -->
      </div>
    </div>
  </div>

  <!-- Contenido principal de la página de causas -->
  <div class="main-container">
    <div class="causes-intro">
      <div class="causes-intro-content">
        <h2>
          <i class="fas fa-seedling"></i>
          ¡Descubre causas y suma tu impacto!
        </h2>
        <p>
          Explora causas solidarias, conoce sus historias y encuentra cómo puedes ayudar. Cada causa es una oportunidad para transformar vidas y construir un mundo mejor. ¡Tu apoyo marca la diferencia!
        </p>
      </div>
    </div>

    <div class="causes-header">
      <h1>Causas Solidarias</h1>
      <a href="#" id="create-cause-btn" class="btn btn-primary">
        <i class="fas fa-plus"></i> Crear Causa
      </a>
    </div>
    <div class="causes-search">
      <input type="text" id="search-input" placeholder="Buscar por título, país, descripción...">
      <i class="fas fa-search" style="color:#4a6fa5;"></i>
    </div>
    <div class="tabs">
      <button class="tab active" data-filter="all">Todas</button>
      <button class="tab" data-filter="education">Educación</button>
      <button class="tab" data-filter="health">Salud</button>
      <button class="tab" data-filter="environment">Medio Ambiente</button>
      <button class="tab" data-filter="animals">Animales</button>
      <button class="tab" data-filter="community">Comunidad</button>
    </div>
    <div class="causes-grid" id="causesList">
      <!-- Las causas se cargarán dinámicamente desde Supabase -->
    </div>
  </div>
{% endblock %}

{% block scripts %}
{{ super() }}
<script src="/js/compartir.js"></script>
<script src="/js/modules/causes-renderer.js"></script>
<script>
function cleanStripeUrlParams() {
  const url = new URL(window.location.href);
  let changed = false;
  if (url.searchParams.has('stripe')) {
    url.searchParams.delete('stripe');
    changed = true;
  }
  if (url.searchParams.has('stripe_error')) {
    url.searchParams.delete('stripe_error');
    changed = true;
  }
  if (changed) window.history.replaceState({}, '', url.pathname + url.search);
}
document.addEventListener('DOMContentLoaded', cleanStripeUrlParams);

document.addEventListener('DOMContentLoaded', async function() {
  // Cargar causas al inicio
  await loadCausesFromSupabase();
  
  // Event listeners para crear causa
  setupCreateCauseListeners();
  
  // Event listeners para tabs y búsqueda
  setupTabsAndSearch();
  
  // Manejar parámetros de URL para Stripe
  handleStripeUrlParams();
});

// Función para manejar parámetros de URL relacionados con Stripe
function handleStripeUrlParams() {
  const urlParams = new URLSearchParams(window.location.search);
  
  // Mostrar modal de éxito si Stripe se configuró correctamente
  if (urlParams.has('stripe') && urlParams.get('stripe') === 'success') {
    const stripeSuccessModal = document.getElementById('stripeSuccessModal');
    stripeSuccessModal.style.display = 'flex';
    document.body.style.overflow = 'hidden';
    
    // Limpiar parámetros de URL
    const cleanUrl = window.location.pathname;
    window.history.replaceState({}, document.title, cleanUrl);
  }
  
  // Mostrar error si hubo problema con Stripe
  if (urlParams.has('stripe_error')) {
    const error = urlParams.get('stripe_error');
    let errorMessage = 'Ocurrió un error al configurar los pagos';
    
    if (error === 'not_verified') {
      errorMessage = 'No completaste la verificación de Stripe. Inténtalo nuevamente.';
    } else if (error === 'no_draft') {
      errorMessage = 'No encontramos tu borrador de causa. Por favor crea una nueva.';
    }
    
    showNotification(errorMessage, 'error');
    
    // Limpiar parámetros de URL
    const cleanUrl = window.location.pathname;
    window.history.replaceState({}, document.title, cleanUrl);
  }
}

// Función para configurar listeners del formulario de creación
function setupCreateCauseListeners() {
  document.getElementById('create-cause-btn').onclick = async function(e) {
    e.preventDefault();
    const { data: { session } } = await supabase.auth.getSession();
    if (session?.user) {
      document.getElementById('createCauseModal').classList.add('active');
      document.body.style.overflow = 'hidden';
    } else {
      document.getElementById('loginModal').classList.add('active');
    }
  };

  document.getElementById('closeCreateCauseModal').onclick = function() {
    document.getElementById('createCauseModal').classList.remove('active');
    document.body.style.overflow = '';
    document.getElementById('causeForm').reset();
    document.getElementById('previewImg').style.display = 'none';
    document.getElementById('causeForm').style.display = 'block';
    document.getElementById('afterCreate').style.display = 'none';
  };

  document.getElementById('createCauseModal').onclick = function(e) {
    if (e.target === this) {
      this.classList.remove('active');
      document.body.style.overflow = '';
      document.getElementById('causeForm').style.display = 'block';
      document.getElementById('afterCreate').style.display = 'none';
    }
  };

  document.getElementById('cancelModal').onclick = function() {
    document.getElementById('loginModal').classList.remove('active');
  };
  
  document.getElementById('loginModal').onclick = function(e) {
    if (e.target === this) this.classList.remove('active');
  };

  // Vista previa de imagen
  document.getElementById('photo').addEventListener('change', function(e) {
    const file = e.target.files[0];
    const preview = document.getElementById('previewImg');
    if (file) {
      const reader = new FileReader();
      reader.onload = function(evt) {
        preview.src = evt.target.result;
        preview.style.display = 'block';
      };
      reader.readAsDataURL(file);
    } else {
      preview.src = '';
      preview.style.display = 'none';
    }
  });

  // Actualizar texto de puntos
  document.getElementById('points').addEventListener('input', function() {
    const val = this.value || 0;
    document.getElementById('pointsText').innerHTML = `<i class="fas fa-star"></i> Colaborar en esta causa otorgará <strong>${val} puntos</strong> a cada participante.`;
  });

  // Envío del formulario de creación de causa
  document.getElementById('causeForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    // Mostrar loader en el botón
    const submitBtn = this.querySelector('button[type="submit"]');
    const originalBtnText = submitBtn.innerHTML;
    submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Procesando...';
    submitBtn.disabled = true;
    
    try {
      // Recopilar datos del formulario
      const formData = {
        title: document.getElementById('title').value.trim(),
        title: document.getElementById('title').value.trim(),
        short_description: document.getElementById('short_description').value.trim(),
        description: document.getElementById('description').value.trim(),
        goal: parseFloat(document.getElementById('goal').value),
        beneficiaries: parseInt(document.getElementById('beneficiaries').value, 10),
        city: document.getElementById('city').value.trim(),
        country: document.getElementById('country').value.trim(),
        points: parseInt(document.getElementById('points').value, 10) || 50,
        contact_email: document.getElementById('contact_email').value.trim(),
        phone_number: document.getElementById('phone_number').value.trim(),
        photoFile: document.getElementById('photo').files[0]
      };

      // Validar campos requeridos
      if (!formData.title || !formData.short_description || !formData.description ||
          !formData.goal || !formData.beneficiaries || !formData.city || !formData.country) {
        throw new Error('Por favor completa todos los campos requeridos');
      }

      // Obtener sesión de usuario
      const { data: { session } } = await supabase.auth.getSession();
      if (!session?.user) {
        throw new Error('Debes iniciar sesión para crear una causa');
      }
      
      // Verificar estado de Stripe
      const stripeStatus = await checkStripeAccount(session.user.id);
      
      if (!stripeStatus.hasAccount || stripeStatus.status !== 'active') {
        // Guardar borrador temporal
        const saveResponse = await fetch('/save-cause-draft', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            userId: session.user.id,
            draftData: formData
          })
        });
        
        if (!saveResponse.ok) throw new Error('Error guardando borrador');
        
        const { draftId } = await saveResponse.json();
        
        // Mostrar modal de configuración
        showStripeSetupModal(stripeStatus, formData, draftId);
        return;
      }

      // Si ya tiene cuenta, crear causa directamente
      await createFinalCause(formData, session.user.id, true);
      
    } catch (error) {
      console.error('Error creando causa:', error);
      showNotification(error.message, 'error');
    } finally {
      submitBtn.innerHTML = originalBtnText;
      submitBtn.disabled = false;
    }
  });
}

// Función para verificar cuenta Stripe
async function checkStripeAccount(userId) {
  try {
    const response = await fetch(`/stripe-account-status/${userId}`);
    if (!response.ok) {
      throw new Error('Error verificando cuenta Stripe');
    }
    return await response.json();
  } catch (error) {
    console.error('Error checking Stripe account:', error);
    return { hasAccount: false, status: 'unknown' };
  }
}

// Función para mostrar modal de configuración de Stripe
function showStripeSetupModal(stripeStatus, causeData, draftId) {
  const modal = document.getElementById('stripeSetupModal');
  modal.style.display = 'flex';
  document.body.style.overflow = 'hidden';
  
  // Configurar botón de configuración
  document.getElementById('configureStripeBtn').onclick = async function() {
    try {
      const { data: { session } } = await supabase.auth.getSession();
      if (!session?.user) {
        showNotification('Debes iniciar sesión primero', 'error');
        return;
      }
      
      // 1. Crear cuenta Stripe
      const response = await fetch('/create-stripe-account', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          userId: session.user.id,
          email: session.user.email,
          causeData: causeData
        })
      });
      
      if (!response.ok) throw new Error('Error al crear cuenta Stripe');
      
      const { accountId, returnUrl } = await response.json();
      
      // Validar que returnUrl existe antes de redirigir
      if (returnUrl && typeof returnUrl === 'string' && returnUrl !== 'undefined') {
        window.location.href = returnUrl;
      } else {
        showNotification('Error: No se pudo obtener URL de Stripe', 'error');
        console.error('Stripe returnUrl inválido:', returnUrl);
      }
      
    } catch (error) {
      console.error('Error en configuración de Stripe:', error);
      showNotification(`Error: ${error.message}`, 'error');
      modal.style.display = 'none';
      document.body.style.overflow = '';
    }
  };
  
  // Configurar botón de guardar borrador
  document.getElementById('saveDraftBtn').onclick = async function() {
    try {
      const { data: { session } } = await supabase.auth.getSession();
      if (!session?.user) throw new Error('No hay sesión de usuario');
      
      const saveResponse = await fetch('/save-cause-draft', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          userId: session.user.id,
          draftData: causeData,
          stripeEnabled: false
        })
      });
      
      if (!saveResponse.ok) throw new Error('Error guardando borrador');
      
      const { draftId } = await saveResponse.json();
      showNotification('Borrador guardado correctamente', 'success');
      modal.style.display = 'none';
      document.body.style.overflow = '';
      
      // Cerrar también el modal de creación de causa
      document.getElementById('createCauseModal').classList.remove('active');
      
      // Mostrar opción para continuar más tarde
      showDraftSavedNotification(draftId);
      
    } catch (error) {
      console.error('Error guardando borrador:', error);
      showNotification(`Error: ${error.message}`, 'error');
      modal.style.display = 'none';
      document.body.style.overflow = '';
    }
  };
  
  // Cerrar modal al hacer clic fuera
  modal.onclick = function(e) {
    if (e.target === modal) {
      modal.style.display = 'none';
      document.body.style.overflow = '';
    }
  };
}

// Función para mostrar notificación de borrador guardado
function showDraftSavedNotification(draftId) {
  const notification = document.createElement('div');
  notification.className = 'draft-notification';
  notification.style.cssText = `
    position: fixed;
    bottom: 20px;
    right: 20px;
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    box-shadow: 0 4px 20px rgba(0,0,0,0.15);
    z-index: 9999;
    max-width: 350px;
    border-left: 4px solid var(--accent);
    animation: slideInUp 0.3s ease-out;
  `;
  
  notification.innerHTML = `
    <h4 style="margin-top:0; color:var(--primary);">
      <i class="fas fa-save"></i> Borrador guardado
    </h4>
    <p style="margin-bottom:1.5rem;">Tu causa se ha guardado como borrador. ¿Quieres completar la configuración ahora?</p>
    <div style="display:flex; gap:0.8rem;">
      <button id="continueDraftBtn" class="btn btn-primary" style="flex:1;">
        <i class="fas fa-pen"></i> Continuar
      </button>
      <button id="dismissDraftBtn" class="btn btn-outline">
        <i class="fas fa-times"></i> Descartar
      </button>
    </div>
  `;
  
  document.body.appendChild(notification);
  
  notification.querySelector('#continueDraftBtn').onclick = async function() {
    try {
      const { data: { session } } = await supabase.auth.getSession();
      if (!session?.user) throw new Error('No hay sesión de usuario');
      
      // Obtener datos del borrador
      const draftResponse = await fetch(`/get-user-draft/${userId}`);
      if (!draftResponse.ok) throw new Error('Error obteniendo borrador');
      
      const { draft } = await draftResponse.json();
      
      // Verificar estado de Stripe
      const statusResponse = await fetch(`/api/stripe/account-status/${session.user.id}`);
      if (!statusResponse.ok) throw new Error('Error verificando cuenta Stripe');
      
      const stripeStatus = await statusResponse.json();
      
      // Mostrar modal de configuración de Stripe
      showStripeSetupModal(stripeStatus, draft.draft_data);
      notification.remove();
      
    } catch (error) {
      console.error('Error continuando borrador:', error);
      showNotification(`Error: ${error.message}`, 'error');
      notification.remove();
    }
  };
  
  notification.querySelector('#dismissDraftBtn').onclick = function() {
    notification.style.animation = 'slideOutDown 0.3s ease-in';
    setTimeout(() => notification.remove(), 300);
  };
  
  // Animación para cerrar automáticamente después de 10 segundos
  setTimeout(() => {
    if (document.body.contains(notification)) {
      notification.style.animation = 'slideOutDown 0.3s ease-in';
      setTimeout(() => notification.remove(), 300);
    }
  }, 10000);
}

// Función para crear causa final
async function createFinalCause(formData, userId, stripeEnabled) {
  try {
    // Subir imagen si existe
    let photoUrl = null;
    if (formData.photoFile) {
      const fileExt = formData.photoFile.name.split('.').pop();
      const fileName = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}.${fileExt}`;
      const filePath = `causes/${fileName}`;
      
      const { error: uploadError } = await supabase.storage
        .from('public')
        .upload(filePath, formData.photoFile);
      
      if (uploadError) throw uploadError;
      
      const { data: { publicUrl } } = supabase.storage
        .from('public')
        .getPublicUrl(filePath);
      
      photoUrl = data?.publicUrl || '/img/causa-default.jpg';
    }
    
    // Crear causa en Supabase
    const { data: newCause, error: causeError } = await supabase
      .from('causes')
      .insert([{
        ...formData,
        photo_url: photoUrl,
        user_id: userId,
        status: 'active',
        raised: 0,
        donors: 0,
        stripe_enabled: stripeEnabled
      }])
      .select()
      .single();
    
    if (causeError) throw causeError;
    
    // Añadir creador como miembro de la causa
    await supabase
      .from('causes_members')
      .insert([{
        cause_id: newCause.id,
        user_id: userId,
        role: 'founder',
        status: 'active'
      }]);
    
    // Mostrar mensaje de éxito
    document.getElementById('causeForm').style.display = 'none';
    document.getElementById('afterCreate').style.display = 'block';
    showNotification('¡Causa creada con éxito!', 'success');
    
    // Recargar lista de causas
    await loadCausesFromSupabase();
    
    return newCause;
    
  } catch (error) {
    console.error('Error creating final cause:', error);
    throw error;
  }
}

// Función para cargar causas desde Supabase
async function loadCausesFromSupabase(filter = "all", searchTerm = "") {
  try {
    let query = supabase
      .from('causes')
      .select('*')
      .order('created_at', { ascending: false });

    if (filter !== "all") {
      query = query.eq('category', filter);
    }
    if (searchTerm && searchTerm.trim() !== "") {
      query = query.or(`title.ilike.%${searchTerm}%,description.ilike.%${searchTerm}%,city.ilike.%${searchTerm}%,country.ilike.%${searchTerm}%`);
    }

    const { data: causes, error } = await query;
    let donatedIds = [];
    if (session?.user) {
      const { data: memberships } = await supabase
        .from('causes_members')
        .select('cause_id')
        .eq('user_id', session.user.id)
        .eq('role', 'donor');
      donatedIds = memberships ? memberships.map(m => m.cause_id) : [];
    }

    causes.forEach(cause => {
      const progress = cause.goal ? Math.min(Math.round((cause.raised / cause.goal) * 100), 100) : 0;
      const urgentBadge = cause.urgent ? `<div class="cause-badge urgent"><i class="fas fa-exclamation-circle"></i> Urgente</div>` : "";
      const pointsBadge = `<div class="cause-badge points"><i class="fas fa-star"></i> +${cause.points || 0} pts</div>`;
      const location = cause.city && cause.country ? `${cause.city}, ${cause.country}` : "";
      const isDonor = donatedIds.includes(cause.id);
      
      const donateBtn = cause.stripe_enabled 
        ? (isDonor 
          ? `<button class="btn btn-success" disabled style="background:var(--accent);color:#fff;opacity:1;cursor:not-allowed;">
               <i class="fas fa-check"></i> Ya donaste
             </button>`
          : `<button class="btn btn-accent donate-cause-btn" data-cause-id="${cause.id}">
               <i class="fas fa-donate"></i> Donar
             </button>`)
        : `<button class="btn btn-outline" disabled>
             <i class="fas fa-info-circle"></i> Donaciones no disponibles
           </button>`;
      
      const card = document.createElement('div');
      card.className = 'cause-card';
      card.innerHTML = `
        <div class="cause-image">
          <img src="${cause.photo_url || '/img/causa-default.jpg'}" alt="${cause.title}" 
               onerror="if (!this._defaulted) { this._defaulted = true; this.src='/img/causa-default.jpg'; }">
          ${urgentBadge}
          ${pointsBadge}
        </div>
        <div class="cause-content">
          <h3>${cause.title}</h3>
          <p>${cause.short_description || ''}</p>
          <div class="cause-meta">
            <div class="meta-item"><i class="fas fa-map-marker-alt"></i> ${location}</div>
            <div class="meta-item"><i class="fas fa-users"></i> ${cause.donors || 0} donantes</div>
            <div class="beneficiaries-count">
              <i class="fas fa-heart"></i> Beneficia a ${cause.beneficiaries || 0} personas
            </div>
          </div>
          <div class="cause-progress">
            <div class="progress-bar">
              <div class="progress-fill" style="width: ${progress}%"></div>
            </div>
            <div class="progress-info">
              <span>${progress}% completado</span>
              <span>${cause.raised || 0} € de ${cause.goal || 0} €</span>
            </div>
          </div>
          <div class="cause-actions">
            <button class="btn btn-primary view-cause-btn" data-cause-id="${cause.id}">Ver más</button>
            ${donateBtn}
          </div>
        </div>
      `;
      container.appendChild(card);
    });
    
    // Adjuntar event listeners a las tarjetas
    container.querySelectorAll('.view-cause-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        e.preventDefault();
        const causeId = btn.getAttribute('data-cause-id');
        if (window.causesRenderer && window.causesRenderer.showModal) {
          window.causesRenderer.showModal(causeId);
        }
      });
    });
    
    container.querySelectorAll('.donate-cause-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        e.preventDefault();
        const causeId = btn.getAttribute('data-cause-id');
        donateToCause(causeId);
      });
    });
    
    // Guardar causas globalmente para compatibilidad
    window.causes = causes;
    
  } catch (error) {
    console.error('Error loading causes:', error);
    document.getElementById('causesList').innerHTML = '<div style="color:#e53e3e;text-align:center;">Error al cargar las causas.</div>';
  }
}

// Función para donar a una causa
async function donateToCause(causeId) {
  try {
    const { data: { session } } = await supabase.auth.getSession();
    if (!session?.user) {
      showNotification('Debes iniciar sesión para donar', 'warning');
      setTimeout(() => {
        window.location.href = '/login?return=' + encodeURIComponent(window.location.pathname);
      }, 1500);
      return;
    }
    
    // Verificar si la causa acepta donaciones
    const cause = window.causes?.find(c => c.id === causeId);
    if (!cause) {
      showNotification('Causa no encontrada', 'error');
      return;
    }
    
    if (!cause.stripe_enabled) {
      showNotification('Esta causa no acepta donaciones actualmente', 'warning');
      return;
    }
    
    // Verificar si ya es donante
    const { data: existingDonation } = await supabase
      .from('causes_members')
      .select('id, role')
      .eq('cause_id', causeId)
      .eq('user_id', session.user.id)
      .single();
    
    if (existingDonation && existingDonation.role === 'donor') {
      showNotification('Ya has donado a esta causa', 'info');
      return;
    }
    
    // Mostrar modal de donación
    showDonationModal(causeId, cause.user_id, session.user.id);
    
  } catch (error) {
    console.error('Error donating to cause:', error);
    showNotification('Error al procesar la donación', 'error');
  }
}

// Función para mostrar modal de donación
function showDonationModal(causeId, creatorId, donorId) {
  const modal = document.createElement('div');
  modal.className = 'donation-modal';
  modal.style.cssText = `
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 10000;
  `;
  
  modal.innerHTML = `
    <div class="modal-content" style="background:white; border-radius:12px; padding:2rem; max-width:500px; width:90%;">
      <h3 style="margin-top:0; color:var(--primary); display:flex; align-items:center; gap:0.7rem;">
        <i class="fas fa-donate"></i> Apoya esta causa
      </h3>
      <p style="color:#6b7280; margin-bottom:1.5rem;">
        <i class="fas fa-info-circle" style="color:var(--accent);"></i> Montos válidos: 1€ - 10,000€
      </p>
      
      <div class="donation-options" style="display:grid; grid-template-columns:repeat(2, 1fr); gap:0.8rem; margin-bottom:1.5rem;">
        <button class="donation-amount" data-amount="5" style="padding:0.8rem; border-radius:8px; border:1px solid var(--gray); background:#f8fafc; cursor:pointer; transition:all 0.2s;">
          5€
        </button>
        <button class="donation-amount" data-amount="10" style="padding:0.8rem; border-radius:8px; border:1px solid var(--gray); background:#f8fafc; cursor:pointer; transition:all 0.2s;">
          10€
        </button>
        <button class="donation-amount" data-amount="25" style="padding:0.8rem; border-radius:8px; border:1px solid var(--gray); background:#f8fafc; cursor:pointer; transition:all 0.2s;">
          25€
        </button>
        <button class="donation-amount" data-amount="50" style="padding:0.8rem; border-radius:8px; border:1px solid var(--gray); background:#f8fafc; cursor:pointer; transition:all 0.2s;">
          50€
        </button>
        <div class="custom-donation" style="grid-column:1/-1; display:flex; align-items:center; gap:0.5rem;">
          <input type="number" id="custom-amount" min="1" max="10000" placeholder="Otra cantidad" step="0.01" style="flex:1; padding:0.8rem; border-radius:8px; border:1px solid var(--gray);">
          <span style="font-weight:600;">€</span>
        </div>
      </div>
      
      <div class="fee-transparency" style="background:#f8fafc; border-radius:8px; padding:1rem; margin-bottom:1.5rem;">
        <div class="fee-item" style="display:flex; justify-content:space-between; margin-bottom:0.5rem;">
          <span style="color:#6b7280;">Para la causa:</span>
          <span id="cause-amount" style="font-weight:600;">0.00€</span>
        </div>
        <div class="fee-item" style="display:flex; justify-content:space-between; margin-bottom:0.5rem;">
          <span style="color:#6b7280;">Comisión Solidarity (2%):</span>
          <span id="fee-amount" style="font-weight:600;">0.00€</span>
        </div>
        <div class="fee-total" style="display:flex; justify-content:space-between; margin-top:1rem; padding-top:1rem; border-top:1px solid var(--gray);">
          <span style="font-weight:600;">Total:</span>
          <span id="total-amount" style="font-weight:600; color:var(--primary);">0.00€</span>
        </div>
      </div>
      
      <button id="confirm-donation" class="btn btn-primary" style="width:100%;">
        <i class="fas fa-check"></i> Confirmar donación
      </button>
    </div>
  `;
  
  document.body.appendChild(modal);
  document.body.style.overflow = 'hidden';
  
  let selectedAmount = 0;
  
  // Actualizar visualización de comisiones
  function updateFeeDisplay(amount) {
    const fee = (amount * 0.02).toFixed(2);
    const net = (amount - (amount * 0.02)).toFixed(2);
    modal.querySelector('#cause-amount').textContent = `${net}€`;
    modal.querySelector('#fee-amount').textContent = `${fee}€`;
    modal.querySelector('#total-amount').textContent = `${amount.toFixed(2)}€`;
  }
  
  // Seleccionar cantidad predefinida
  modal.querySelectorAll('.donation-amount').forEach(btn => {
    btn.addEventListener('click', () => {
      modal.querySelectorAll('.donation-amount').forEach(b => {
        b.style.borderColor = 'var(--gray)';
        b.style.background = '#f8fafc';
      });
      btn.style.borderColor = 'var(--accent)';
      btn.style.background = 'rgba(79, 195, 161, 0.1)';
      selectedAmount = parseFloat(btn.getAttribute('data-amount'));
      modal.querySelector('#custom-amount').value = '';
      updateFeeDisplay(selectedAmount);
    });
  });
  
  // Cantidad personalizada
  modal.querySelector('#custom-amount').addEventListener('input', (e) => {
    selectedAmount = parseFloat(e.target.value) || 0;
    modal.querySelectorAll('.donation-amount').forEach(b => {
      b.style.borderColor = 'var(--gray)';
      b.style.background = '#f8fafc';
    });
    if (selectedAmount > 0) {
      updateFeeDisplay(selectedAmount);
    }
  });
  
  // Confirmar donación
  modal.querySelector('#confirm-donation').addEventListener('click', async () => {
    const amount = selectedAmount;
    if (!amount || amount < 1 || amount > 10000) {
      showNotification('Monto inválido. Debe ser entre 1€ y 10,000€', 'error');
      return;
    }
    
    try {
      const { data: { session } } = await supabase.auth.getSession();
      if (!session?.user) throw new Error('No hay sesión de usuario');
      
      // Crear sesión de pago en el servidor
      const response = await fetch('/api/stripe/create-checkout-session', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          causeId,
          amount,
          userId: session.user.id,
          creatorId
        })
      });
      
      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || 'Error en la solicitud');
      }
      
      const { sessionId } = await response.json();
      
      // Redirigir a Stripe Checkout
      const stripe = Stripe('pk_test_51RXeFrRo1sZSKMfJxpwjOeU1CCRIcAmQSX4czwwCsGrQC20m96j0RX6Cw6SH7UffIxcYUAVxpEzcJxy39yojmoIA00Vh28iIGr');
      stripe.redirectToCheckout({ sessionId });
      
    } catch (error) {
      console.error('Error processing donation:', error);
      showNotification('Error al procesar la donación: ' + error.message, 'error');
    }
  });
  
  // Cerrar modal al hacer clic fuera
  modal.addEventListener('click', (e) => {
    if (e.target === modal) {
      modal.style.animation = 'fadeOut 0.3s ease-out';
      setTimeout(() => {
        modal.remove();
        document.body.style.overflow = '';
      }, 300);
    }
  });
}

// Función para mostrar notificaciones
function showNotification(message, type = 'info', duration = 5000) {
  const existing = document.querySelector('.global-notification');
  if (existing) existing.remove();
  
  const notification = document.createElement('div');
  notification.className = `global-notification ${type}`;
  notification.innerHTML = `
    <div class="notification-content">
      <i class="fas fa-${type === 'error' ? 'times-circle' : type === 'success' ? 'check-circle' : 'info-circle'}"></i>
      <span>${message}</span>
    </div>
  `;
  
  document.body.appendChild(notification);
  
  setTimeout(() => {
    notification.classList.add('fade-out');
    setTimeout(() => notification.remove(), 300);
  }, duration);
}

// Función para configurar tabs y búsqueda
function setupTabsAndSearch() {
  // Tabs
  document.querySelectorAll('.tab').forEach(tab => {
    tab.addEventListener('click', async () => {
      document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
      tab.classList.add('active');
      const filter = tab.getAttribute('data-filter');
      await loadCausesFromSupabase(filter);
    });
  });
  
  // Búsqueda
  const searchInput = document.getElementById('search-input');
  let searchTimeout;
  
  searchInput.addEventListener('input', () => {
    clearTimeout(searchTimeout);
    searchTimeout = setTimeout(async () => {
      const searchTerm = searchInput.value.trim();
      await loadCausesFromSupabase('all', searchTerm);
    }, 500);
  });
}
</script>
{% endblock %}