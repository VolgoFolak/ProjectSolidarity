{% extends "layout.njk" %}

{% block title %}Retos - Solidarity{% endblock %}

{% block head %}
  {{ super() }}
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
  <style>
    :root {
      --primary: #4a6fa5;
      --primary-dark: #166088;
      --gray: #e2e8f0;
      --white: #fff;
      --accent: #4fc3a1;
      --accent-dark: #3da58a;
      --urgent: #e53e3e;
      --gold: #eab308;
      --bronze: #cd7f32;
    }
    
    /* Estilos base */
    .main-container {
      max-width: 1200px;
      margin: 2rem auto;
      padding: 0 2rem;
    }
    
    .challenges-intro {
      background: linear-gradient(135deg, #f0f9ff 0%, #e6f0fa 100%);
      border-radius: 12px;
      padding: 2rem;
      margin-bottom: 2rem;
      border: 1px solid var(--gray);
    }
    
    .challenges-intro h2 {
      font-size: 1.8rem;
      color: var(--primary-dark);
      margin-bottom: 1rem;
      display: flex;
      align-items: center;
      gap: 0.8rem;
    }
    
    .challenges-intro h2 i {
      color: var(--accent);
    }
    
    .challenges-intro p {
      color: #4a6fa5;
      font-size: 1.1rem;
      line-height: 1.6;
    }
    
    .challenges-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;
    }
    
    .challenges-header h1 {
      font-size: 2rem;
      color: var(--primary);
      font-weight: 700;
    }
    
    .tabs {
      display: flex;
      border-bottom: 1px solid var(--gray);
      margin-bottom: 2rem;
      flex-wrap: wrap;
    }
    
    .tab {
      padding: 0.75rem 1.5rem;
      cursor: pointer;
      position: relative;
      font-weight: 500;
      color: #6b7280;
      background: none;
      border: none;
      outline: none;
      white-space: nowrap;
    }
    
    .tab.active {
      color: var(--primary);
      font-weight: 600;
    }
    
    .tab.active::after {
      content: '';
      position: absolute;
      bottom: -1px;
      left: 0;
      width: 100%;
      height: 3px;
      background: var(--primary);
    }
    
    .challenges-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
      gap: 2rem;
    }
    
    /* Estilos comunes para tarjetas */
    .challenge-card {
      background: white;
      border-radius: 12px;
      overflow: hidden;
      box-shadow: 0 5px 15px rgba(0,0,0,0.05);
      border: 1px solid var(--gray);
      transition: all 0.3s ease;
      display: flex;
      flex-direction: column;
    }
    
    .challenge-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 25px rgba(0,0,0,0.1);
    }
    
    .challenge-image {
      height: 180px;
      overflow: hidden;
      position: relative;
    }
    
    .challenge-image img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: transform 0.3s ease;
    }
    
    .challenge-card:hover .challenge-image img {
      transform: scale(1.05);
    }
    
    .challenge-badge {
      position: absolute;
      top: 1rem;
      right: 1rem;
      background: rgba(255,255,255,0.9);
      padding: 0.3rem 0.8rem;
      border-radius: 50px;
      font-size: 0.8rem;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
      z-index: 2;
    }
    
    .badge-urgent {
      background: var(--urgent);
      color: white;
    }
    
    .badge-points {
      background: var(--primary);
      color: white;
      left: 1rem;
      right: auto;
    }
    
    .badge-community {
      background: var(--accent);
      color: white;
      top: 3.5rem;
    }
    
    .badge-countdown {
      background: var(--gold);
      color: white;
      bottom: 1rem;
      top: auto;
      left: 1rem;
      animation: pulse 2s infinite;
    }
    
    .challenge-content {
      padding: 1.5rem;
      display: flex;
      flex-direction: column;
      flex: 1;
    }
    
    .challenge-content h3 {
      font-size: 1.3rem;
      margin-bottom: 0.8rem;
      color: #2d3748;
    }
    
    .challenge-content p {
      color: #6b7280;
      margin-bottom: 1.5rem;
      font-size: 0.95rem;
      line-height: 1.6;
      flex-grow: 1;
    }
    
    .challenge-meta {
      display: flex;
      gap: 1rem;
      margin-bottom: 1.5rem;
      font-size: 0.85rem;
      flex-wrap: wrap;
    }
    
    .meta-item {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      color: #6b7280;
    }
    
    .meta-item i {
      color: var(--primary);
    }
    
    .linked-cause {
      display: inline-flex;
      align-items: center;
      background: #f0f0ff;
      color: var(--primary);
      padding: 0.3rem 0.8rem;
      border-radius: 50px;
      font-size: 0.85rem;
      font-weight: 600;
      margin-bottom: 1rem;
    }
    
    .challenge-progress {
      margin-bottom: 1.5rem;
    }
    
    .progress-bar {
      height: 8px;
      background: var(--gray);
      border-radius: 4px;
      overflow: hidden;
      margin-bottom: 0.5rem;
    }
    
    .progress-fill {
      height: 100%;
      background: var(--primary);
      border-radius: 4px;
    }
    
    .progress-info {
      display: flex;
      justify-content: space-between;
      font-size: 0.9rem;
      color: #6b7280;
    }
    
    .challenge-actions {
      display: flex;
      gap: 0.8rem;
    }
    
    .challenge-actions .btn {
      flex: 1;
      text-align: center;
      justify-content: center;
    }
    
    /* Estilo para retos 1vs1 */
    .duel-participants {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1.5rem;
      position: relative;
    }
    
    .participant {
      text-align: center;
      flex: 1;
      position: relative;
    }
    
    .participant-you {
      order: 1;
    }
    
    .participant-opponent {
      order: 3;
    }
    
    .participant-avatar {
      width: 60px;
      height: 60px;
      border-radius: 50%;
      object-fit: cover;
      border: 3px solid var(--gray);
      margin-bottom: 0.5rem;
    }
    
    .participant-you .participant-avatar {
      border-color: var(--accent);
    }
    
    .participant-name {
      font-weight: 600;
      margin-bottom: 0.3rem;
    }
    
    .participant-status {
      font-size: 0.8rem;
      color: #718096;
    }
    
    .vs-circle {
      background: var(--primary);
      color: white;
      width: 40px;
      height: 40px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: 800;
      margin: 0 1rem;
      order: 2;
      z-index: 1;
    }
    
    /* Estilo para retos abiertos */
    .participants-count {
      display: inline-flex;
      align-items: center;
      background: #f0f9ff;
      color: var(--primary);
      padding: 0.3rem 0.8rem;
      border-radius: 50px;
      font-size: 0.85rem;
      font-weight: 600;
    }
    
    .participants-count i {
      margin-right: 0.3rem;
    }
    
    /* Estilo para retos de comunidad */
    .community-info {
      display: flex;
      align-items: center;
      gap: 0.8rem;
      margin-bottom: 1rem;
    }
    
    .community-avatar {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      object-fit: cover;
      border: 2px solid var(--gray);
    }
    
    .community-name {
      font-weight: 600;
    }
    
    /* Estilo para retos creativos (sistema 4) */
    .creative-badge {
      position: absolute;
      top: 1rem;
      left: 1rem;
      background: var(--gold);
      color: white;
      padding: 0.3rem 0.8rem;
      border-radius: 50px;
      font-size: 0.8rem;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }
    
    .creative-points {
      background: rgba(79, 195, 161, 0.1);
      border-radius: 8px;
      padding: 1rem;
      margin-bottom: 1rem;
      text-align: center;
    }
    
    .points-value {
      font-size: 1.5rem;
      font-weight: 700;
      color: var(--accent);
    }
    
    /* Modal para crear reto */
    .modal-bg {
      display: none;
      position: fixed;
      top: 0; left: 0; width: 100vw; height: 100vh;
      background: rgba(0,0,0,0.35);
      z-index: 9999;
      align-items: center;
      justify-content: center;
    }
    
    .modal-bg.active { display: flex; }
    
    .modal-content {
      background: #fff;
      border-radius: 18px;
      max-width: 540px;
      width: 95vw;
      padding: 2.5rem 1.5rem 2rem 1.5rem;
      box-shadow: 0 8px 32px rgba(0,0,0,0.13);
      position: relative;
      animation: fadeIn 0.3s;
      max-height: 90vh;
      overflow-y: auto;
    }
    
    .close-modal {
      position: absolute;
      top: 1.1rem; right: 1.3rem;
      background: none;
      border: none;
      font-size: 2rem;
      color: #aaa;
      cursor: pointer;
      transition: color 0.2s;
    }
    
    .close-modal:hover { color: var(--primary); }
    
    .create-challenge-title {
      font-size: 1.5rem;
      font-weight: 800;
      color: var(--primary);
      margin-bottom: 1.2rem;
      text-align: center;
    }
    
    .challenge-form .form-group label { 
      font-weight: 600; 
      color: var(--primary);
      margin-bottom: 0.5rem;
      display: block;
    }
    
    .challenge-form .form-group input,
    .challenge-form .form-group textarea,
    .challenge-form .form-group select {
      width: 100%;
      padding: 0.7rem 1rem;
      border-radius: 8px;
      border: 1px solid #e5e7eb;
      margin-bottom: 0.2rem;
      font-size: 1rem;
      background: #f8fafc;
      transition: border 0.2s;
    }
    
    .challenge-form .form-group input:focus,
    .challenge-form .form-group textarea:focus,
    .challenge-form .form-group select:focus {
      border: 1.5px solid var(--accent);
      outline: none;
      background: #fff;
    }
    
    .challenge-form .form-group textarea {
      min-height: 90px;
      resize: vertical;
    }
    
    .form-inline-group {
      display: flex;
      gap: 1rem;
    }
    
    .form-inline-group .form-group { flex: 1; }
    
    .preview-img {
      width: 100%;
      max-width: 320px;
      height: 180px;
      object-fit: cover;
      border-radius: 10px;
      margin-top: 0.5rem;
      border: 1px solid #e5e7eb;
      display: none;
    }
    
    .points-info {
      background: var(--accent);
      color: #fff;
      border-radius: 8px;
      padding: 0.7rem 1rem;
      margin-top: 0.5rem;
      font-size: 1.05rem;
      display: flex;
      align-items: center;
      gap: 0.7rem;
    }
    
    .after-create {
      margin-top: 2rem;
      background: var(--primary-light);
      color: #444;
      border-radius: 10px;
      padding: 1.5rem 1rem;
      text-align: center;
    }
    
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(-30px);}
      to { opacity: 1; transform: translateY(0);}
    }
    
    @keyframes pulse {
      0% { transform: scale(1); }
      50% { transform: scale(1.05); }
      100% { transform: scale(1); }
    }
    
    /* Botones */
    .btn {
      padding: 0.8rem 1.5rem;
      border-radius: 8px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s;
      border: none;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
    }
    
    .btn-primary {
      background: var(--primary);
      color: white;
    }
    
    .btn-primary:hover {
      background: var(--primary-dark);
      transform: translateY(-2px);
    }
    
    .btn-accent {
      background: var(--accent);
      color: white;
    }
    
    .btn-accent:hover {
      background: var(--accent-dark);
      transform: translateY(-2px);
    }
    
    .btn-outline {
      background: transparent;
      color: var(--primary);
      border: 1px solid var(--primary);
    }
    
    .btn-outline:hover {
      background: rgba(74, 111, 165, 0.1);
      transform: translateY(-2px);
    }
    
    .btn-warning {
      background: var(--urgent);
      color: white;
    }
    
    .btn-warning:hover {
      background: #c53030;
      transform: translateY(-2px);
    }
    
    /* Responsive */
    @media (max-width: 768px) {
      .challenges-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 1rem;
      }
      
      .challenges-grid {
        grid-template-columns: 1fr;
      }
      
      .challenge-actions {
        flex-direction: column;
      }
      
      .duel-participants {
        flex-direction: column;
        gap: 1rem;
      }
      
      .vs-circle {
        margin: 1rem 0;
        order: 0;
      }
      
      .participant-you,
      .participant-opponent {
        order: 0;
      }
    }
  </style>
{% endblock %}

{% block content %}
  <!-- Modal para usuarios no logueados -->
  <div class="modal-bg" id="loginModal">
    <div class="modal-content">
      <h3>Para crear un reto</h3>
      <p>Debes ser un usuario registrado. ¿Deseas iniciar sesión o registrarte ahora?</p>
      <div class="modal-buttons">
        <a href="/login?return=/challenges" class="btn btn-primary">Iniciar Sesión</a>
        <a href="/register?return=/challenges" class="btn btn-outline">Registrarse</a>
        <button id="cancelModal" class="btn">Cancelar</button>
      </div>
    </div>
  </div>

  <!-- Modal emergente para crear reto -->
  <div id="createChallengeModal" class="modal-bg">
    <div class="modal-content">
      <button class="close-modal" id="closeCreateChallengeModal" title="Cerrar">&times;</button>
      <div class="create-challenge-title">
        <i class="fas fa-plus-circle"></i> Crear Nuevo Reto Solidario
      </div>
      <form class="challenge-form" id="challengeForm" autocomplete="off">
        <div class="form-group">
          <label for="title">Título del reto</label>
          <input type="text" id="title" name="title" placeholder="Ej: Corre 5km por la educación" required>
        </div>
        <div class="form-group">
          <label for="photo">Foto principal</label>
          <input type="file" id="photo" name="photo" accept="image/*">
          <img id="previewImg" class="preview-img" alt="Vista previa de la foto" style="display:none;">
        </div>
        <div class="form-group">
          <label for="description">Descripción</label>
          <textarea id="description" name="description" placeholder="Describe el reto, cómo completarlo y qué impacto tendrá..." required></textarea>
        </div>
        <div class="form-inline-group">
          <div class="form-group">
            <label for="challenge_type">Tipo de reto</label>
            <select id="challenge_type" name="challenge_type" required>
              <option value="duel">Duelo 1vs1</option>
              <option value="open">Reto abierto</option>
              <option value="community">Reto de comunidad</option>
              <option value="creative">Reto creativo</option>
            </select>
          </div>
          <div class="form-group">
            <label for="points">Puntos por completar</label>
            <input type="number" id="points" name="points" min="10" max="1000" value="50" required>
          </div>
        </div>
        <div class="form-group" id="targetGroup">
          <label for="target_user">¿A quién quieres retar?</label>
          <input type="text" id="target_user" name="target_user" placeholder="Nombre de usuario o equipo">
        </div>
        <div class="form-group">
          <label for="cause_id">Vinculado a causa (opcional)</label>
          <select id="cause_id" name="cause_id">
            <option value="">Selecciona una causa</option>
            <option value="1">Educación para todos</option>
            <option value="2">Alimentación básica</option>
            <option value="3">Medicinas urgentes</option>
          </select>
        </div>
        <div class="form-inline-group">
          <div class="form-group">
            <label for="deadline">Fecha límite</label>
            <input type="date" id="deadline" name="deadline" required>
          </div>
          <div class="form-group">
            <label for="is_urgent">
              <input type="checkbox" id="is_urgent" name="is_urgent"> Urgente
            </label>
          </div>
        </div>
        <div class="form-inline-group">
          <div class="form-group">
            <label for="city">Ciudad</label>
            <input type="text" id="city" name="city" placeholder="Ej: Madrid" required>
          </div>
          <div class="form-group">
            <label for="country">País</label>
            <input type="text" id="country" name="country" placeholder="Ej: España" required>
          </div>
        </div>
        <input type="hidden" id="lat" name="lat">
        <input type="hidden" id="lng" name="lng">
        <div class="points-info" id="pointsText">
          <i class="fas fa-star"></i>
          Completar este reto otorgará <strong>50 puntos</strong> a cada participante.
        </div>
        <button type="submit" class="btn btn-primary" style="margin-top:1rem;">
          <i class="fas fa-paper-plane"></i> Lanzar Reto
        </button>
      </form>
      <div class="after-create" id="afterCreate" style="display:none;">
        <h3>¡Reto creado con éxito!</h3>
        <p>¿Quieres ver todos los retos o crear otro?</p>
        <a href="/challenges" class="btn btn-accent">
          <i class="fas fa-trophy"></i> Ver retos
        </a>
        <br>
        <a href="#" id="createAnother" class="btn btn-outline" style="margin-top:1rem;">
          <i class="fas fa-plus"></i> Crear otro reto
        </a>
      </div>
    </div>
  </div>

  <!-- Contenido principal -->
  <div class="main-container">
    <div class="challenges-intro">
      <div class="challenges-intro-content">
        <h2><i class="fas fa-bolt"></i> ¡Transforma la solidaridad en una aventura!</h2>
        <p>Lanza retos, compite con amigos, gana puntos de impacto y desbloquea logros. Cada acción cuenta para construir un mundo mejor de la manera más divertida.</p>
      </div>
    </div>
    
    <div class="challenges-header">
      <h1>Retos Solidarios</h1>
      <div class="challenges-actions">
        <a href="#" id="create-challenge-btn" class="btn btn-primary">
          <i class="fas fa-plus"></i> Crear Reto
        </a>
      </div>
    </div>
    
    <!-- Pestañas de navegación -->
    <div class="tabs">
      <button class="tab active" data-tab="all">Todos los retos</button>
      <button class="tab" data-tab="duels">Duelos 1vs1</button>
      <button class="tab" data-tab="open">Retos abiertos</button>
      <button class="tab" data-tab="community">Retos comunitarios</button>
      <button class="tab" data-tab="creative">Retos creativos</button>
    </div>
    
    <!-- Grid de retos -->
    <div class="challenges-grid" id="challengesList">
      <!-- Aquí se cargarán los retos desde Supabase -->
    </div>
  </div>
{% endblock %}

{% block scripts %}
{{ super() }}
<script>
document.addEventListener('DOMContentLoaded', async function() {
  // Abrir modal de crear reto
  document.getElementById('create-challenge-btn').onclick = async function(e) {
    e.preventDefault();
    const { data: { session } } = await supabase.auth.getSession();
    if (session?.user) {
      document.getElementById('createChallengeModal').classList.add('active');
      document.body.style.overflow = 'hidden';
    } else {
      document.getElementById('loginModal').classList.add('active');
    }
  };

  // Cerrar modal de crear reto
  document.getElementById('closeCreateChallengeModal').onclick = function() {
    document.getElementById('createChallengeModal').classList.remove('active');
    document.body.style.overflow = '';
    document.getElementById('challengeForm').reset();
    document.getElementById('previewImg').style.display = 'none';
    document.getElementById('challengeForm').style.display = 'block';
    document.getElementById('afterCreate').style.display = 'none';
  };

  // Cerrar modal al hacer click fuera del contenido
  document.getElementById('createChallengeModal').onclick = function(e) {
    if (e.target === this) {
      this.classList.remove('active');
      document.body.style.overflow = '';
      document.getElementById('challengeForm').style.display = 'block';
      document.getElementById('afterCreate').style.display = 'none';
    }
  };

  // Modal login
  document.getElementById('cancelModal').onclick = function() {
    document.getElementById('loginModal').classList.remove('active');
  };
  document.getElementById('loginModal').onclick = function(e) {
    if (e.target === this) this.classList.remove('active');
  };

  // Vista previa de imagen
  document.getElementById('photo').addEventListener('change', function(e) {
    const file = e.target.files[0];
    const preview = document.getElementById('previewImg');
    if (file) {
      const reader = new FileReader();
      reader.onload = function(evt) {
        preview.src = evt.target.result;
        preview.style.display = 'block';
      };
      reader.readAsDataURL(file);
    } else {
      preview.src = '';
      preview.style.display = 'none';
    }
  });

  // Actualizar texto de puntos
  document.getElementById('points').addEventListener('input', function() {
    const val = this.value || 0;
    document.getElementById('pointsText').innerHTML = `<i class="fas fa-star"></i> Completar este reto otorgará <strong>${val} puntos</strong> a cada participante.`;
  });

  // Control del campo de objetivo según tipo de reto
  const challengeType = document.getElementById('challenge_type');
  const targetGroup = document.getElementById('targetGroup');
  challengeType.addEventListener('change', function() {
    const label = targetGroup.querySelector('label');
    const input = targetGroup.querySelector('input');
    switch(this.value) {
      case 'duel':
        label.textContent = 'Nombre del usuario a retar';
        input.placeholder = 'Nombre de usuario';
        targetGroup.style.display = 'block';
        break;
      case 'community':
        label.textContent = 'Nombre del equipo/comunidad';
        input.placeholder = 'Nombre del equipo';
        targetGroup.style.display = 'block';
        break;
      default:
        targetGroup.style.display = 'none';
    }
  });
  challengeType.dispatchEvent(new Event('change'));

  // Crear otro reto tras éxito
  document.getElementById('createAnother').onclick = function(e) {
    e.preventDefault();
    document.getElementById('challengeForm').reset();
    document.getElementById('previewImg').style.display = 'none';
    document.getElementById('afterCreate').style.display = 'none';
    document.getElementById('challengeForm').style.display = 'block';
  };

  // Envío del formulario
  document.getElementById('challengeForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    // Recoge los datos del formulario
    const title = document.getElementById('title').value.trim();
    const description = document.getElementById('description').value.trim();
    const challenge_type = document.getElementById('challenge_type').value;
    const points = parseInt(document.getElementById('points').value, 10);
    const deadline = document.getElementById('deadline').value;
    const is_urgent = document.getElementById('is_urgent').checked;
    const cause_id = document.getElementById('cause_id').value || null;
    const target_user = document.getElementById('target_user').value.trim() || null;
    const city = document.getElementById('city').value.trim();
    const country = document.getElementById('country').value.trim();
    const photoFile = document.getElementById('photo').files[0];
    let photo_url = null;

    // Sube la foto a Supabase Storage si existe
    if (photoFile) {
      const fileExt = photoFile.name.split('.').pop();
      const fileName = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}.${fileExt}`;
      const filePath = `public/${fileName}`;
      const { error: uploadError } = await supabase.storage
        .from('challenges')
        .upload(filePath, photoFile, { upsert: true });
      if (uploadError) {
        alert('Error subiendo la foto: ' + uploadError.message);
        return;
      }
      const { data } = supabase.storage.from('challenges').getPublicUrl(filePath);
      photo_url = data.publicUrl;
    }

    // Guarda el reto en la tabla
    const { data: { session } } = await supabase.auth.getSession();
    const user = session?.user;
    if (!user) {
      alert('Debes iniciar sesión para crear un reto.');
      return;
    }

    const { error } = await supabase
      .from('challenges')
      .insert([{
        title,
        description,
        challenge_type,
        points,
        deadline,
        is_urgent,
        cause_id,
        target_user,
        photo_url,
        user_id: user.id,
        created_at: new Date().toISOString(),
        city,
        country,
        lat: lat ? parseFloat(lat) : null,
        lng: lng ? parseFloat(lng) : null
        // participants: 1 // Solo si tienes la columna
      }]);

    if (error) {
      alert('Error al crear el reto: ' + error.message);
      return;
    }

    document.getElementById('challengeForm').style.display = 'none';
    document.getElementById('afterCreate').style.display = 'block';
    // Aquí puedes recargar la lista de retos si tienes función para ello
  });

  // Cargar retos al iniciar
  await loadChallengesFromSupabase();

  async function loadChallengesFromSupabase() {
    const { data: challenges, error } = await supabase
      .from('challenges')
      .select('*')
      .order('created_at', { ascending: false });

    const challengesList = document.getElementById('challengesList');
    if (error) {
      challengesList.innerHTML = '<div style="color:#e53e3e;text-align:center;">Error al cargar los retos.</div>';
      return;
    }
    challengesList.innerHTML = '';
    if (!challenges || challenges.length === 0) {
      challengesList.innerHTML = '<div style="color:#6b7280;text-align:center;padding:2rem;grid-column:1/-1;">No hay retos aún.</div>';
      return;
    }
    challenges.forEach(challenge => {
      const card = document.createElement('div');
      card.className = 'challenge-card';
      card.innerHTML = `
        <div class="challenge-image">
          <img src="${challenge.photo_url || '/img/reto-default.jpg'}" alt="${challenge.title}" onerror="this.src='/img/reto-default.jpg'">
          <div class="challenge-badge badge-points">
            <i class="fas fa-star"></i> +${challenge.points || 0} pts
          </div>
          ${challenge.is_urgent ? `<div class="challenge-badge badge-urgent"><i class="fas fa-clock"></i> Urgente</div>` : ""}
        </div>
        <div class="challenge-content">
          <h3>${challenge.title}</h3>
          <p>${challenge.description}</p>
          <div class="challenge-meta">
            <div class="meta-item"><i class="fas fa-map-marker-alt"></i> ${challenge.city || ''}${challenge.city && challenge.country ? ', ' : ''}${challenge.country || ''}</div>
            <div class="meta-item"><i class="fas fa-calendar-alt"></i> ${challenge.deadline ? new Date(challenge.deadline).toLocaleDateString() : ''}</div>
          </div>
          <div class="challenge-actions">
            <a href="/challenges/${challenge.id}" class="btn btn-primary">Ver más</a>
          </div>
        </div>
      `;
      challengesList.appendChild(card);
    });
  }

  // Geocodificación automática al cambiar ciudad o país
  async function geocodeCityCountry() {
    const city = document.getElementById('city').value.trim();
    const country = document.getElementById('country').value.trim();
    if (!city || !country) return;

    const query = encodeURIComponent(`${city}, ${country}`);
    const url = `https://nominatim.openstreetmap.org/search?q=${query}&format=json&limit=1`;

    try {
      const res = await fetch(url, { headers: { 'Accept-Language': 'es' } });
      const data = await res.json();
      if (data && data.length > 0) {
        document.getElementById('lat').value = data[0].lat;
        document.getElementById('lng').value = data[0].lon;
      } else {
        document.getElementById('lat').value = '';
        document.getElementById('lng').value = '';
      }
    } catch (e) {
      document.getElementById('lat').value = '';
      document.getElementById('lng').value = '';
    }
  }

  document.getElementById('city').addEventListener('change', geocodeCityCountry);
  document.getElementById('country').addEventListener('change', geocodeCityCountry);
});
</script>
{% endblock %}