{% extends "layout.njk" %}

{% block title %}Retos - Solidarity{% endblock %}

{% block head %}
  {{ super() }}
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/choices.js/public/assets/styles/choices.min.css">
  <style>
    :root {
      --primary: #4a6fa5;
      --primary-dark: #166088;
      --gray: #e2e8f0;
      --white: #fff;
      --accent: #4fc3a1;
      --accent-dark: #3da58a;
      --urgent: #e53e3e;
      --gold: #eab308;
      --bronze: #cd7f32;
      --radius: 12px;
    }
    .main-container { max-width: 1200px; margin: 2rem auto; padding: 0 2rem; }
    .challenges-intro {
      background: linear-gradient(135deg, #f0f9ff 0%, #e6f0fa 100%);
      border-radius: var(--radius); padding: 2rem; margin-bottom: 2rem; border: 1px solid var(--gray);
    }
    .challenges-intro h2 { font-size: 1.8rem; color: var(--primary-dark); margin-bottom: 1rem; display: flex; align-items: center; gap: 0.8rem; }
    .challenges-intro h2 i { color: var(--accent); }
    .challenges-intro p { color: #4a6fa5; font-size: 1.1rem; line-height: 1.6; }
    .challenges-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 2rem; }
    .challenges-header h1 { font-size: 2rem; color: var(--primary); font-weight: 700; }
    .challenges-actions .btn { border-radius: var(--radius); }
    .challenges-search { margin-bottom: 1.5rem; position: relative; width: 100%; max-width: none; }
    .challenges-search input { width: 100%; padding-right: 2.5rem; border-radius: var(--radius); border: 1.5px solid var(--gray); font-size: 1.1rem; height: 48px; }
    .challenges-search i { position: absolute; right: 1rem; top: 50%; transform: translateY(-50%); pointer-events: none; }
    .tabs { display: flex; border-bottom: 1px solid var(--gray); margin-bottom: 2rem; flex-wrap: wrap; }
    .tab { padding: 0.75rem 1.5rem; cursor: pointer; position: relative; font-weight: 500; color: #6b7280; background: none; border: none; outline: none; white-space: nowrap; border-radius: var(--radius) var(--radius) 0 0; }
    .tab.active { color: var(--primary); font-weight: 600; background: #f0f9ff; }
    .tab.active::after { content: ''; position: absolute; bottom: -1px; left: 0; width: 100%; height: 3px; background: var(--primary); }
    .challenges-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(350px, 1fr)); gap: 2rem; }
    .challenge-card { background: white; border-radius: var(--radius); overflow: hidden; box-shadow: 0 5px 15px rgba(0,0,0,0.05); border: 1px solid var(--gray); transition: all 0.3s ease; display: flex; flex-direction: column; position: relative; }
    .challenge-card:hover { transform: translateY(-5px); box-shadow: 0 10px 25px rgba(0,0,0,0.1); }
    .challenge-image { height: 180px; overflow: hidden; position: relative; }
    .challenge-image img { width: 100%; height: 100%; object-fit: cover; transition: transform 0.3s ease; }
    .challenge-card:hover .challenge-image img { transform: scale(1.05); }
    .challenge-badge { position: absolute; top: 1rem; right: 1rem; background: rgba(255,255,255,0.9); padding: 0.3rem 0.8rem; border-radius: 50px; font-size: 0.8rem; font-weight: 600; display: flex; align-items: center; gap: 0.5rem; box-shadow: 0 2px 5px rgba(0,0,0,0.1); z-index: 2; }
    .badge-urgent { background: var(--urgent); color: white; }
    .badge-points { background: var(--primary); color: white; left: 1rem; right: auto; }
    .badge-type { position: absolute; top: 1rem; left: 1rem; background: var(--accent); color: white; border-radius: 50px; padding: 0.3rem 0.9rem; font-size: 0.85rem; font-weight: 700; z-index: 3; box-shadow: 0 2px 5px rgba(0,0,0,0.08);}
    .challenge-content { padding: 1.5rem; display: flex; flex-direction: column; flex: 1; }
    .challenge-content h3 { font-size: 1.3rem; margin-bottom: 0.8rem; color: #2d3748; }
    .challenge-content p { color: #6b7280; margin-bottom: 1.5rem; font-size: 0.95rem; line-height: 1.6; flex-grow: 1; }
    .challenge-meta { display: flex; gap: 1rem; margin-bottom: 1.5rem; font-size: 0.85rem; flex-wrap: wrap; }
    .meta-item { display: flex; align-items: center; gap: 0.5rem; color: #6b7280; }
    .meta-item i { color: var(--primary); }
    .linked-cause { display: inline-flex; align-items: center; background: #f0f0ff; color: var(--primary); padding: 0.3rem 0.8rem; border-radius: 50px; font-size: 0.85rem; font-weight: 600; margin-bottom: 1rem; }
    .challenge-actions { display: flex; gap: 0.8rem; }
    .challenge-actions .btn { flex: 1; text-align: center; justify-content: center; border-radius: var(--radius); }
    .modal-bg { display: none; position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background: rgba(0,0,0,0.35); z-index: 9999; align-items: center; justify-content: center; }
    .modal-bg.active { display: flex; }
    .modal-content { background: #fff; border-radius: var(--radius); max-width: 540px; width: 95vw; padding: 2.5rem 1.5rem 2rem 1.5rem; box-shadow: 0 8px 32px rgba(0,0,0,0.13); position: relative; animation: fadeIn 0.3s; max-height: 90vh; overflow-y: auto; }
    .close-modal { position: absolute; top: 1.1rem; right: 1.3rem; background: none; border: none; font-size: 2rem; color: #aaa; cursor: pointer; transition: color 0.2s; border-radius: 50%; }
    .close-modal:hover { color: var(--primary); background: #f0f9ff; }
    .create-task-title { font-size: 1.5rem; font-weight: 800; color: var(--primary); margin-bottom: 1.2rem; text-align: center; }
    .task-form .form-group label { font-weight: 600; color: var(--primary); margin-bottom: 0.5rem; display: block; }
    .task-form .form-group input, .task-form .form-group textarea, .task-form .form-group select { width: 100%; padding: 0.7rem 1rem; border-radius: var(--radius); border: 1px solid #e5e7eb; margin-bottom: 0.2rem; font-size: 1rem; background: #f8fafc; transition: border 0.2s; }
    .task-form .form-group input:focus, .task-form .form-group textarea:focus, .task-form .form-group select:focus { border: 1.5px solid var(--accent); outline: none; background: #fff; }
    .task-form .form-group textarea { min-height: 90px; resize: vertical; }
    .form-inline-group { display: flex; gap: 1rem; }
    .form-inline-group .form-group { flex: 1; }
    .preview-img { width: 100%; max-width: 320px; height: 180px; object-fit: cover; border-radius: var(--radius); margin-top: 0.5rem; border: 1px solid #e5e7eb; display: none; }
    .points-info { background: var(--accent); color: #fff; border-radius: var(--radius); padding: 0.7rem 1rem; margin-top: 0.5rem; font-size: 1.05rem; display: flex; align-items: center; gap: 0.7rem; }
    .after-create { margin-top: 2rem; background: var(--primary-light); color: #444; border-radius: var(--radius); padding: 1.5rem 1rem; text-align: center; }
    @keyframes fadeIn { from { opacity: 0; transform: translateY(-30px);} to { opacity: 1; transform: translateY(0);} }
    .btn { padding: 0.8rem 1.5rem; border-radius: var(--radius); font-weight: 600; cursor: pointer; transition: all 0.2s; border: none; display: inline-flex; align-items: center; justify-content: center; gap: 0.5rem; }
    .btn-primary { background: var(--primary); color: white; }
    .btn-primary:hover { background: var(--primary-dark); transform: translateY(-2px); }
    .btn-accent { background: var(--accent); color: white; }
    .btn-accent:hover { background: var(--accent-dark); transform: translateY(-2px); }
    .btn-outline { background: transparent; color: var(--primary); border: 1px solid var(--primary); }
    .btn-outline:hover { background: rgba(74, 111, 165, 0.1); transform: translateY(-2px); }
    .btn-secondary { background: #f0f9ff; color: var(--primary); border: 1px solid var(--primary); }
    .btn-secondary:hover { background: #e6f0fa; }
    /* Forzar el mismo border-radius en todos los botones, aunque tengan estilos inline */
    button,
    .btn,
    .btn-primary,
    .btn-accent,
    .btn-outline,
    .btn-secondary,
    .modal-content button,
    .challenge-actions .btn,
    .task-actions .btn {
      border-radius: 2rem !important; /* Más redondeado que el valor por defecto */
      /* Puedes ajustar el valor a 1.5rem o 999px si quieres aún más pill */
    }
    @media (max-width: 768px) {
      .challenges-header { flex-direction: column; align-items: flex-start; gap: 1rem; }
      .challenges-grid { grid-template-columns: 1fr; }
      .challenge-actions { flex-direction: column; }
      .challenges-search { max-width: 100%; }
    }
    .form-group.urgent-group {
      display: flex;
      align-items: center;
      gap: 0.7rem;
      margin-bottom: 0;
    }
  </style>
{% endblock %}

{% block content %}
  <!-- Modal para usuarios no logueados -->
  <div class="modal-bg" id="loginModal">
    <div class="modal-content">
      <h3>Para crear un reto</h3>
      <p>Debes ser un usuario registrado. ¿Deseas iniciar sesión o registrarte ahora?</p>
      <div class="modal-buttons">
        <a href="/login?return=/challenges" class="btn btn-primary">Iniciar Sesión</a>
        <a href="/register?return=/challenges" class="btn btn-outline">Registrarse</a>
        <button id="cancelModal" class="btn">Cancelar</button>
      </div>
    </div>
  </div>

  <!-- Modal emergente para crear reto -->
  <div id="createChallengeModal" class="modal-bg">
    <div class="modal-content">
      <button class="close-modal" id="closeCreateChallengeModal" title="Cerrar">&times;</button>
      <div class="create-task-title">
        <i class="fas fa-plus-circle"></i> Crear Nuevo Reto Solidario
      </div>
      <form class="task-form" id="challengeForm" autocomplete="off">
        <div class="form-group">
          <label for="title">Título del reto</label>
          <input type="text" id="title" name="title" placeholder="Ej: Corre 5km por la educación" required>
        </div>
        <div class="form-group">
          <label for="photo">Foto principal</label>
          <input type="file" id="photo" name="photo" accept="image/*">
          <img id="previewImg" class="preview-img" alt="Vista previa de la foto" style="display:none;">
        </div>
        <div class="form-group">
          <label for="summary">Resumen breve</label>
          <input type="text" id="summary" name="summary" maxlength="120" placeholder="Un resumen breve del reto (máx 120 caracteres)" required>
        </div>
        <div class="form-group">
          <label for="description">Descripción</label>
          <textarea id="description" name="description" placeholder="Describe el reto, cómo completarlo y qué impacto tendrá..." required></textarea>
        </div>
        <div class="form-group">
          <label for="challenge_type">Tipo de reto</label>
          <select id="challenge_type" name="challenge_type" required>
            <option value="duel" selected>Duelo 1vs1</option>
            <option value="open">Reto abierto</option>
          </select>
        </div>
        <div class="form-group" id="opponentGroup" style="display:block;">
          <label for="opponent-select">¿A quién quieres retar?</label>
          <select id="opponent-select" name="opponent_id">
            <option value="">Selecciona un usuario</option>
          </select>
        </div>
        <div class="form-group">
          <label for="cause_id">Vinculado a causa (opcional)</label>
          <select id="cause-select" name="cause_id">
            <option value="">Selecciona una causa</option>
          </select>
        </div>
        <div class="form-inline-group">
          <div class="form-group">
            <label for="city">Ciudad</label>
            <input type="text" id="city" name="city" placeholder="Ej: Madrid" required>
          </div>
          <div class="form-group">
            <label for="country">País</label>
            <input type="text" id="country" name="country" placeholder="Ej: España" required>
          </div>
        </div>
        <div class="form-group">
          <label for="points">Puntos por completar</label>
          <input type="number" id="points" name="points" min="10" max="1000" value="50" required>
          <div class="points-info" id="pointsText">
            <i class="fas fa-star"></i>
            Completar este reto otorgará <strong>50 puntos</strong> al ganador.
          </div>
        </div>
        <div class="form-group">
          <label for="deadline">Fecha límite</label>
          <input type="date" id="deadline" name="deadline" required>
        </div>
        <div class="form-group" style="display:flex; align-items:center; gap:0.7rem; margin-bottom:0;">
          <input type="checkbox" id="is_urgent" name="is_urgent" style="width:18px; height:18px; accent-color:var(--urgent); margin:0;">
          <label for="is_urgent" style="margin:0; font-weight:500; color:#e53e3e; cursor:pointer;">
            Marcar como urgente
          </label>
        </div>
        <input type="hidden" id="lat" name="lat">
        <input type="hidden" id="lng" name="lng">
        <button type="submit" class="btn btn-primary" style="margin-top:1rem;">
          <i class="fas fa-paper-plane"></i> Crear Reto
        </button>
      </form>
      <div class="after-create" id="afterCreate" style="display:none;">
        <h3>¡Reto creado con éxito!</h3>
        <p>¿Quieres ver todos los retos o crear otro?</p>
        <a href="/challenges" class="btn btn-accent">
          <i class="fas fa-trophy"></i> Ver retos
        </a>
        <br>
        <a href="#" id="createAnother" class="btn btn-outline" style="margin-top:1rem;">
          <i class="fas fa-plus"></i> Crear otro reto
        </a>
      </div>
    </div>
  </div>

  <!-- Modal de Reto (detalle, igual que tasks, mismo estilo y botones) -->
  <div id="challengeModal" class="modal" style="display:none; position:fixed; z-index:9999; left:0; top:0; width:100vw; height:100vh; background:rgba(0,0,0,0.35); align-items:center; justify-content:center;">
    <div class="modal-content" style="background:#fff; border-radius:18px; max-width:800px; width:95vw; padding:2rem; box-shadow:0 8px 32px rgba(74,111,165,0.13); position:relative; max-height:90vh; overflow-y:auto;">
      <button id="closeChallengeModal" class="close-modal" style="position:absolute; top:1.5rem; right:1.5rem;">&times;</button>
      <div id="challengeModalBody" style="padding:0.5rem;">
        <!-- Contenido dinámico -->
      </div>
    </div>
  </div>

  <!-- Contenido principal -->
  <div class="main-container">
    <div class="challenges-intro">
      <div class="challenges-intro-content">
        <h2><i class="fas fa-bolt"></i> ¡Transforma la solidaridad en una aventura!</h2>
        <p>Lanza retos, compite con amigos, gana puntos de impacto y desbloquea logros. Cada acción cuenta para construir un mundo mejor de la manera más divertida.</p>
      </div>
    </div>
    <div class="challenges-header">
      <h1>Retos Solidarios</h1>
      <div class="challenges-actions">
        <a href="#" id="create-challenge-btn" class="btn btn-primary">
          <i class="fas fa-plus"></i> Crear Reto
        </a>
      </div>
    </div>
    <div class="challenges-search">
      <input type="text" id="search-input" placeholder="Buscar por título, país, descripción...">
      <i class="fas fa-search" style="color:#4a6fa5;"></i>
    </div>
    <!-- Tabs -->
    <div class="tabs">
      <button class="tab active" data-filter="all">Todos los retos</button>
      <button class="tab" data-filter="duel">Duelos 1vs1</button>
      <button class="tab" data-filter="open">Retos abiertos</button>
    </div>
    <div class="challenges-grid" id="challengesList">
      <!-- Aquí se cargarán los retos desde Supabase -->
    </div>
  </div>
{% endblock %}

{% block scripts %}
{{ super() }}
<script src="https://cdn.jsdelivr.net/npm/choices.js/public/assets/scripts/choices.min.js"></script>
<script>
let currentFilter = "all";
let causeChoices = null;
let opponentChoices = null;
let causesMap = {};
let currentUserId = null;

document.addEventListener('DOMContentLoaded', async function() {
  // Obtener usuario actual para lógica de botones
  const { data: { session } } = await supabase.auth.getSession();
  currentUserId = session?.user?.id || null;

  // 1. Obtener los retos en los que el usuario ya participa
  let joinedChallengeIds = [];
  if (currentUserId) {
    const { data: memberships } = await supabase
      .from('challenges_members')
      .select('challenge_id')
      .eq('user_id', currentUserId)
      .eq('status', 'active');
    joinedChallengeIds = memberships ? memberships.map(m => m.challenge_id) : [];
  }

  // Abrir modal de crear reto
  document.getElementById('create-challenge-btn').onclick = async function(e) {
    e.preventDefault();
    const { data: { session } } = await supabase.auth.getSession();
    if (session?.user) {
      await loadCausesForSelect();
      await loadUsersForSelect();
      document.getElementById('createChallengeModal').classList.add('active');
      document.body.style.overflow = 'hidden';
    } else {
      document.getElementById('loginModal').classList.add('active');
    }
  };

  // Cerrar modal de crear reto
  document.getElementById('closeCreateChallengeModal').onclick = function() {
    document.getElementById('createChallengeModal').classList.remove('active');
    document.body.style.overflow = '';
    document.getElementById('challengeForm').reset();
    document.getElementById('previewImg').style.display = 'none';
    document.getElementById('challengeForm').style.display = 'block';
    document.getElementById('afterCreate').style.display = 'none';
    document.getElementById('opponentGroup').style.display = 'none';
  };
  document.getElementById('createChallengeModal').onclick = function(e) {
    if (e.target === this) {
      this.classList.remove('active');
      document.body.style.overflow = '';
      document.getElementById('challengeForm').style.display = 'block';
      document.getElementById('afterCreate').style.display = 'none';
    }
  };

  // Modal login
  document.getElementById('cancelModal').onclick = function() {
    document.getElementById('loginModal').classList.remove('active');
  };
  document.getElementById('loginModal').onclick = function(e) {
    if (e.target === this) this.classList.remove('active');
  };

  // Mostrar/ocultar campo de oponente según tipo de reto
  document.getElementById('challenge_type').addEventListener('change', function() {
    const opponentGroup = document.getElementById('opponentGroup');
    opponentGroup.style.display = this.value === 'duel' ? 'block' : 'none';
  });

  // Al cargar el modal, mostrar el campo de oponente si el valor inicial es 'duel'
  document.addEventListener('DOMContentLoaded', function() {
    const challengeType = document.getElementById('challenge_type');
    const opponentGroup = document.getElementById('opponentGroup');
    opponentGroup.style.display = challengeType.value === 'duel' ? 'block' : 'none';
  });

  // Vista previa de imagen
  document.getElementById('photo').addEventListener('change', function(e) {
    const file = e.target.files[0];
    const preview = document.getElementById('previewImg');
    if (file) {
      const reader = new FileReader();
      reader.onload = function(evt) {
        preview.src = evt.target.result;
        preview.style.display = 'block';
      };
      reader.readAsDataURL(file);
    } else {
      preview.src = '';
      preview.style.display = 'none';
    }
  });

  // Actualizar texto de puntos
  document.getElementById('points').addEventListener('input', function() {
    const val = this.value || 0;
    document.getElementById('pointsText').innerHTML = `<i class="fas fa-star"></i> Completar este reto otorgará <strong>${val} puntos</strong> al ganador.`;
  });

  // Crear otro reto tras éxito
  document.getElementById('createAnother').onclick = function(e) {
    e.preventDefault();
    document.getElementById('challengeForm').reset();
    document.getElementById('previewImg').style.display = 'none';
    document.getElementById('challengeForm').style.display = 'block';
    document.getElementById('afterCreate').style.display = 'none';
    document.getElementById('opponentGroup').style.display = 'none';
  };

  // Envío del formulario
  document.getElementById('challengeForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    const title = document.getElementById('title').value.trim();
    const summary = document.getElementById('summary').value.trim();
    const description = document.getElementById('description').value.trim();
    const challenge_type = document.getElementById('challenge_type').value;
    const opponent_id = document.getElementById('opponent-select').value || null;
    const cause_id = document.getElementById('cause-select').value || null;
    const city = document.getElementById('city').value.trim();
    const country = document.getElementById('country').value.trim();
    const points = parseInt(document.getElementById('points').value, 10);
    const deadline = document.getElementById('deadline').value;
    const is_urgent = document.getElementById('is_urgent').checked;
    const photoFile = document.getElementById('photo').files[0];
    let photo_url = null;

    if (challenge_type === 'duel' && !opponent_id) {
      alert('Debes seleccionar un oponente para un reto 1 VS 1 o cambiar a reto abierto');
      return;
    }

    if (photoFile) {
      const fileExt = photoFile.name.split('.').pop();
      const fileName = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}.${fileExt}`;
      const filePath = `public/${fileName}`;
      const { error: uploadError } = await supabase.storage
        .from('challenges')
        .upload(filePath, photoFile, { upsert: true });
      if (uploadError) {
        alert('Error subiendo la foto: ' + uploadError.message);
        return;
      }
      const { data } = supabase.storage.from('challenges').getPublicUrl(filePath);
      photo_url = data.publicUrl;
    }

    const { data: { session } } = await supabase.auth.getSession();
    const user = session?.user;
    if (!user) {
      alert('Debes iniciar sesión para crear un reto.');
      return;
    }

    const lat = document.getElementById('lat').value;
    const lng = document.getElementById('lng').value;

    const { data: newChallenge, error: challengeError } = await supabase
      .from('challenges')
      .insert([{ title, summary, description, challenge_type, creator_id: user.id, opponent_id, cause_id, city, country, points, deadline, is_urgent, photo_url, status: opponent_id ? 'pending' : 'active', lat: lat ? parseFloat(lat) : null, lng: lng ? parseFloat(lng) : null }])
      .select()
      .single();

    if (!challengeError && newChallenge) {
      await supabase
        .from('challenges_members')
        .insert([{ challenge_id: newChallenge.id, user_id: user.id, role: 'founder', status: 'active' }]);
    }

    document.getElementById('challengeForm').style.display = 'none';
    document.getElementById('afterCreate').style.display = 'block';
    loadChallengesFromSupabase();
  });

  // Tabs
  document.querySelectorAll('.tab').forEach(tab => {
    tab.addEventListener('click', function() {
      document.querySelector('.tab.active').classList.remove('active');
      this.classList.add('active');
      loadChallengesFromSupabase(this.getAttribute('data-filter'));
    });
  });

  // Búsqueda
  document.getElementById('search-input').addEventListener('input', function() {
    loadChallengesFromSupabase(currentFilter, this.value);
  });

  // Cerrar modal de reto
  document.getElementById('closeChallengeModal').addEventListener('click', function() {
    document.getElementById('challengeModal').style.display = 'none';
    document.body.style.overflow = '';
  });
  document.getElementById('challengeModal').addEventListener('click', function(e) {
    if (e.target === this) {
      this.style.display = 'none';
      document.body.style.overflow = '';
    }
  });

  // Geocodificación automática al cambiar ciudad o país
  document.getElementById('city').addEventListener('change', geocodeCityCountry);
  document.getElementById('country').addEventListener('change', geocodeCityCountry);

  // Cargar causas en el mapa
  await loadCausesMap();
  loadChallengesFromSupabase();

}); // <-- Solo este cierre para el bloque DOMContentLoaded

// Cargar causas en el select al abrir el modal de crear reto
async function loadCausesForSelect() {
  const select = document.getElementById('cause-select');
  if (causeChoices) {
    causeChoices.destroy();
    causeChoices = null;
  }
  select.innerHTML = '<option value="">Selecciona una causa</option>';
  const { data: causes, error } = await supabase.from('causes').select('id, title');
  if (error) {
    alert('Error cargando causas: ' + error.message);
    return;
  }
  if (causes && causes.length > 0) {
    causes.forEach(cause => {
      const option = document.createElement('option');
      option.value = cause.id;
      option.textContent = cause.title;
      select.appendChild(option);
    });
  }
  causeChoices = new Choices(select, {
    searchEnabled: true,
    itemSelectText: '',
    shouldSort: false,
    placeholder: true,
    placeholderValue: 'Selecciona una causa',
    removeItemButton: true,
    noResultsText: 'No se encontraron causas',
  });
}
async function loadUsersForSelect() {
  const select = document.getElementById('opponent-select');
  if (opponentChoices) {
    opponentChoices.destroy();
    opponentChoices = null;
  }
  select.innerHTML = '<option value="">Selecciona un usuario</option>';
  const { data: users, error } = await supabase
    .from('profiles')
    .select('id, first_name, last_name, username, photo_url');
  if (error) {
    alert('Error cargando usuarios: ' + error.message);
    return;
  }
  if (users && users.length > 0) {
    users.forEach(user => {
      const option = document.createElement('option');
      option.value = user.id;
      option.textContent = (user.first_name && user.last_name)
        ? `${user.first_name} ${user.last_name}`
        : (user.username || 'Usuario');
      select.appendChild(option);
    });
  }
  opponentChoices = new Choices(select, {
    searchEnabled: true,
    itemSelectText: '',
    shouldSort: false,
    placeholder: true,
    placeholderValue: 'Selecciona un usuario',
    removeItemButton: true,
    noResultsText: 'No se encontraron usuarios',
  });
}

// Geocodificación automática al cambiar ciudad o país
async function geocodeCityCountry() {
  const city = document.getElementById('city').value.trim();
  const country = document.getElementById('country').value.trim();
  if (!city || !country) return;

  const query = encodeURIComponent(`${city}, ${country}`);
  const url = `https://nominatim.openstreetmap.org/search?q=${query}&format=json&limit=1`;

  try {
    const res = await fetch(url, { headers: { 'Accept-Language': 'es' } });
    const data = await res.json();
    if (data && data.length > 0) {
      document.getElementById('lat').value = data[0].lat;
      document.getElementById('lng').value = data[0].lon;
    } else {
      document.getElementById('lat').value = '';
      document.getElementById('lng').value = '';
    }
  } catch (e) {
    document.getElementById('lat').value = '';
    document.getElementById('lng').value = '';
  }
}

// Cargar causas en el mapa
async function loadCausesMap() {
  const { data: causes } = await supabase.from('causes').select('id, title, photo_url');
  if (causes) {
    causesMap = {}; // Reinicia el mapa para evitar residuos
    causes.forEach(c => {
      causesMap[c.id] = {
        title: c.title,
        photo_url: c.photo_url
      };
    });
  }
}

// Cargar retos desde Supabase
async function loadChallengesFromSupabase(filter = "all", searchTerm = "") {
  currentFilter = filter;
  let query = supabase
    .from('challenges')
    .select('*')
    .order('created_at', { ascending: false });

  if (filter !== "all") {
    query = query.eq('challenge_type', filter);
  }
  if (searchTerm && searchTerm.trim() !== "") {
    query = query.or(`title.ilike.%${searchTerm}%,description.ilike.%${searchTerm}%,city.ilike.%${searchTerm}%,country.ilike.%${searchTerm}%`);
  }

  // --- AÑADE ESTA LÓGICA AQUÍ ---
  let joinedChallengeIds = [];
  let currentUserId = null;
  const { data: { session } } = await supabase.auth.getSession();
  if (session?.user) {
    currentUserId = session.user.id;
    const { data: memberships } = await supabase
      .from('challenges_members')
      .select('challenge_id')
      .eq('user_id', currentUserId)
      .eq('status', 'active');
    joinedChallengeIds = memberships ? memberships.map(m => m.challenge_id) : [];
  }
  // --- FIN DE LA LÓGICA ---

  const { data: challenges, error } = await query;
  const challengesList = document.getElementById('challengesList');
  if (error) {
    challengesList.innerHTML = '<div style="color:#e53e3e;text-align:center;">Error al cargar los retos.</div>';
    return;
  }
  challengesList.innerHTML = '';
  if (!challenges || challenges.length === 0) {
    challengesList.innerHTML = '<div style="color:#6b7280;text-align:center;padding:2rem;grid-column:1/-1;">No se encontraron retos.</div>';
    return;
  }

  window.challenges = challenges;

  challenges.forEach(challenge => {
    const isParticipating = joinedChallengeIds.includes(challenge.id);
    const urgentBadge = challenge.is_urgent ? `<div class="challenge-badge badge-urgent"><i class="fas fa-exclamation-circle"></i> Urgente</div>` : "";
    const pointsBadge = `<div class="challenge-badge badge-points"><i class="fas fa-star"></i> +${challenge.points || 0} pts</div>`;
    const typeBadge = challenge.challenge_type === 'duel'
      ? `<div class="badge-type"><i class="fas fa-user-friends"></i> 1vs1</div>`
      : `<div class="badge-type"><i class="fas fa-users"></i> Reto abierto</div>`;
    const location = challenge.city && challenge.country ? `${challenge.city}, ${challenge.country}` : "";
    const deadline = challenge.deadline ? new Date(challenge.deadline).toLocaleDateString('es-ES', { day: 'numeric', month: 'short' }) : "";
    let causeHtml = '';
    if (challenge.cause_id && causesMap[challenge.cause_id]) {
      const cause = causesMap[challenge.cause_id];
      causeHtml = `
        <div class="linked-cause" style="display:inline-flex;align-items:center;gap:0.4rem;margin-bottom:0.7rem;">
          <i class="fas fa-link" style="color:var(--primary);font-size:0.92rem;"></i>
          <img src="${cause.photo_url || '/img/causa-default.jpg'}"
               alt="Causa vinculada"
               style="width:20px;height:20px;object-fit:cover;border-radius:50%;border:1px solid var(--primary);background:#fff;">
          <span style="color:var(--primary);font-weight:600;font-size:0.92rem;display:inline-block;vertical-align:middle;line-height:1.2;">
            ${cause.title}
          </span>
        </div>
      `;
    }

    // Botones: Ver más y Aceptar reto
    const actionsHtml = `
      <button class="btn btn-primary btn-vermas" data-challenge-id="${challenge.id}">
        <i class="fas fa-eye"></i> Ver más
      </button>
      <button class="btn btn-accent btn-aceptar" data-challenge-id="${challenge.id}"
        ${isParticipating ? 'disabled style="opacity:0.7;cursor:not-allowed;"' : ''}>
        <i class="fas fa-hand-holding-heart"></i> ${isParticipating ? 'Participando' : 'Aceptar reto'}
      </button>
    `;

    const card = document.createElement('div');
    card.className = 'challenge-card';
    card.innerHTML = `
      <div class="challenge-image">
        ${typeBadge}
        <img src="${challenge.photo_url || '/img/challenge-default.jpg'}" alt="${challenge.title}" onerror="this.src='/img/challenge-default.jpg'">
        ${urgentBadge}
      </div>
      <div class="challenge-content">
        <h3>${challenge.title}</h3>
        <p style="color:#6b7280; margin-bottom:1.5rem; font-size:0.95rem; line-height:1.6;">
          ${challenge.summary || ''}
        </p>
        ${causeHtml}
        <div class="challenge-meta">
          <div class="meta-item"><i class="fas fa-map-marker-alt"></i> ${location}</div>
          <div class="meta-item"><i class="fas fa-calendar-alt"></i> ${deadline}</div>
        </div>
        <div class="challenge-actions">
          ${actionsHtml}
        </div>
      </div>
    `;

    // Listener para "Ver más"
    card.querySelector('.btn-vermas').addEventListener('click', function(e) {
      e.preventDefault();
      showChallengeModal(challenge.id);
    });

    // Listener para "Aceptar reto"
    card.querySelector('.btn-aceptar').addEventListener('click', function(e) {
      e.preventDefault();
      participateInChallenge(challenge.id, this);
    });

    challengesList.appendChild(card);
  });
}

// Modal de detalle de reto (idéntico a tasks, con resumen y compartir)
async function showChallengeModal(challengeId) {
  const { data: challenge, error } = await supabase
    .from('challenges')
    .select('*')
    .eq('id', challengeId)
    .single();

  if (error) {
    alert('Error al cargar el reto: ' + error.message);
    return;
  }

  // Causa vinculada
  let causeInfo = '';
  if (challenge.cause_id) {
    const { data: cause } = await supabase
      .from('causes')
      .select('title, photo_url')
      .eq('id', challenge.cause_id)
      .single();
    if (cause) {
      causeInfo = `
    <div class="linked-cause-section" style="margin-bottom:1.5rem;">
      <h3 class="content-title" style="font-size:1.2rem; font-weight:600; color:var(--primary); margin-bottom:0.9rem; display:flex; align-items:center; gap:0.7rem;">
        <i class="fas fa-link"></i> Vinculado a la causa
      </h3>
      <div style="display:flex; align-items:center; gap:1.2rem; background:#f8fafc; padding:1rem; border-radius:8px; border:1px solid #e5e7eb;">
        <img src="${cause.photo_url || '/img/causa-default.jpg'}"
             alt="Imagen de la causa vinculada"
             style="width:80px; height:80px; object-fit:cover; border-radius:6px;"
             onerror="this.src='/img/causa-default.jpg'">
        <div style="flex:1; min-width:0;">
          <div style="font-weight:700; color:var(--primary); font-size:1.05rem; margin-bottom:0.2rem; white-space:nowrap; overflow:hidden; text-overflow:ellipsis;">
            ${cause.title}
          </div>
          <div style="color:#6b7280; font-size:0.97rem; white-space:nowrap; overflow:hidden; text-overflow:ellipsis; max-width:260px;">
            ${cause.short_description || 'Sin resumen disponible'}
          </div>
        </div>
        <a href="/causes/${challenge.cause_id}" 
           class="btn btn-primary" 
           style="margin-left:1.2rem; white-space:nowrap; font-size:0.97rem; padding:0.5rem 1.1rem; display:flex; align-items:center; gap:0.5rem;"
           onclick="showCauseModal('${challenge.cause_id}'); return false;">
          <i class="fas fa-arrow-right"></i> Ver causa
        </a>
      </div>
    </div>
  `;
    }
  }

  const createdDate = new Date(challenge.created_at).toLocaleDateString('es-ES', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
  const deadline = challenge.deadline ? new Date(challenge.deadline).toLocaleDateString('es-ES', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  }) : 'Sin fecha límite';

  // Badge tipo
  let tipo = 'Reto general';
  let tipoIcon = 'fa-bolt';
  if (challenge.challenge_type === 'duel') {
    tipo = 'Duelo 1vs1';
    tipoIcon = 'fa-user-friends';
  } else if (challenge.challenge_type === 'open') {
    tipo = 'Reto abierto';
    tipoIcon = 'fa-users';
  } else if (challenge.challenge_type === 'community') {
    tipo = 'Comunitario';
    tipoIcon = 'fa-people-group';
  } else if (challenge.challenge_type === 'creative') {
    tipo = 'Creativo';
    tipoIcon = 'fa-lightbulb';
  }

  document.getElementById('challengeModalBody').innerHTML = `
  <div class="modal-task-container">
    <h1 class="modal-task-title" style="font-size:2rem; font-weight:800; color:var(--primary); margin-bottom:2.7rem; text-align:center; width:100%;">${challenge.title}</h1>
    <div class="modal-task-header" style="display:flex; gap:2.5rem; margin-bottom:2.7rem;">
      <div class="modal-task-image-wrapper" style="flex:1; min-width:320px; height:300px; border-radius:12px; overflow:hidden; position:relative; box-shadow:0 4px 12px rgba(0,0,0,0.08);">
        <div class="modal-cause-badge" style="top:1.2rem; left:1.2rem; right:auto; background:var(--accent); color:white; position:absolute; border-radius:50px; padding:0.5rem 1rem; font-size:0.9rem; font-weight:600; display:flex; align-items:center; gap:0.6rem; box-shadow:0 2px 8px rgba(0,0,0,0.1); z-index:2;">
          <i class="fas ${tipoIcon}"></i> ${tipo}
        </div>
        <img class="modal-task-image" src="${challenge.photo_url || '/img/challenge-default.jpg'}"
             alt="Imagen del reto ${challenge.title}"
             style="width:100%;height:100%;object-fit:cover;"
             onerror="this.src='/img/challenge-default.jpg'">
        ${challenge.is_urgent ? `
        <div class="modal-cause-badge urgent" style="right:1.2rem; left:auto; top:1.2rem; background:var(--urgent); color:white; border-radius:50px; padding:0.5rem 1rem; font-size:0.9rem; font-weight:600; display:flex; align-items:center; gap:0.6rem; box-shadow:0 2px 8px rgba(0,0,0,0.1); z-index:2;">
          <i class="fas fa-exclamation-circle"></i> Urgente
        </div>` : ''}
      </div>
      <div class="modal-task-info" style="flex:1.5; display:flex; flex-direction:column; justify-content:flex-start;">
        <div class="modal-task-meta-grid" style="display:grid; grid-template-columns:1fr 1fr; gap:0.7rem 1.2rem; margin-bottom:1.2rem;">
          <div class="meta-item">
            <span class="meta-icon"><i class="fas fa-map-marker-alt"></i></span>
            <span>${challenge.city || 'Sin ubicación'}${challenge.country ? ', ' + challenge.country : ''}</span>
          </div>
          <div class="meta-item">
            <span class="meta-icon"><i class="fas fa-star"></i></span>
            <span>${challenge.points || 0} puntos</span>
          </div>
          <div class="meta-item">
            <span class="meta-icon"><i class="fas fa-calendar-alt"></i></span>
            <span>${deadline}</span>
          </div>
          <div class="meta-item">
            <span class="meta-icon"><i class="fas fa-bolt"></i></span>
            <span>${tipo}</span>
          </div>
        </div>
        <div class="points-notice" style="background:#f0f9ff; border-left:4px solid var(--accent); padding:0.8rem; border-radius:0 8px 8px 0; font-size:0.97rem; display:flex; align-items:center; gap:0.7rem;">
          <i class="fas fa-star" style="color: var(--accent);"></i>
          Completar este reto otorga <strong>${challenge.points || 0} puntos</strong>
        </div>
      </div>
    </div>
    ${causeInfo}
    <!-- SECCIÓN DE RESUMEN -->
    <div class="content-section" style="margin-bottom:2.2rem;">
      <h3 class="content-title" style="font-size:1.2rem; font-weight:600; color:var(--primary); margin-bottom:0.9rem; display:flex; align-items:center; gap:0.7rem;">
        <i class="fas fa-align-left"></i> Resumen
      </h3>
      <p class="content-text" style="line-height:1.7; color:#4b5563; font-size:1.05rem; margin-left:0; margin-right:0; text-align:justify;">
        ${challenge.summary || 'No hay resumen disponible para este reto.'}
      </p>
    </div>
    <div class="modal-task-content" style="margin-top:0;">
      <div class="content-section" style="margin-bottom:2.2rem;">
        <h3 class="content-title" style="font-size:1.2rem; font-weight:600; color:var(--primary); margin-bottom:0.9rem; display:flex; align-items:center; gap:0.7rem;">
          <i class="fas fa-align-left"></i> Descripción
        </h3>
        <p class="content-text" style="line-height:1.7; color:#4b5563; font-size:1.05rem; margin-left:0; margin-right:0; text-align:justify;">${challenge.description || 'No hay descripción disponible para este reto.'}</p>
      </div>
      <div class="content-section" style="margin-bottom:2.2rem;">
        <h3 class="content-title" style="font-size:1.2rem; font-weight:600; color:var(--primary); margin-bottom:0.9rem; display:flex; align-items:center; gap:0.7rem;">
          <i class="fas fa-info-circle"></i> Detalles adicionales
        </h3>
        <div style="display:grid; grid-template-columns:1fr 1fr; gap:1rem;">
          <div>
            <p style="font-weight:600; color:#4b5563; margin-bottom:0.3rem;">Fecha de creación</p>
            <p style="color:#6b7280;">${createdDate}</p>
          </div>
          <div>
            <p style="font-weight:600; color:#4b5563; margin-bottom:0.3rem;">Estado</p>
            <p style="color:#6b7280;">${challenge.status === 'completed' ? 'Completado' : 'En progreso'}</p>
          </div>
          <div>
            <p style="font-weight:600; color:#4b5563; margin-bottom:0.3rem;">Prioridad</p>
            <p style="color:#6b7280;">${challenge.is_urgent ? 'Alta prioridad' : 'Prioridad normal'}</p>
          </div>
          <div>
            <p style="font-weight:600; color:#4b5563; margin-bottom:0.3rem;">Tipo</p>
            <p style="color:#6b7280;">${tipo}</p>
          </div>
        </div>
      </div>
    </div>
    <div class="task-actions" style="display:flex; gap:0.8rem; margin-top:2.2rem;">
      <button class="btn btn-primary btn-aceptar" data-challenge-id="${challenge.id}" style="flex:1;">
        <i class="fas fa-hand-holding-heart"></i> Aceptar reto
      </button>
      <button class="btn btn-accent" style="flex:1;" onclick="showShareOptionsChallenge('${challenge.id}')">
        <i class="fas fa-share-alt"></i> Compartir
      </button>
    </div>
    <div class="share-section" id="shareSectionChallenge"></div>
  </div>
`;

  document.getElementById('challengeModal').style.display = 'flex';
  document.body.style.overflow = 'hidden';

  // Consulta si el usuario ya participa en este reto
  let isParticipating = false;
  if (currentUserId) {
    const { data: membership } = await supabase
      .from('challenges_members')
      .select('id')
      .eq('challenge_id', challenge.id)
      .eq('user_id', currentUserId)
      .eq('status', 'active')
      .single();
    isParticipating = !!membership;
  }

  const modalBtn = document.querySelector('#challengeModal .btn-aceptar');
  if (modalBtn) {
    if (isParticipating) {
      modalBtn.textContent = "Participando";
      modalBtn.disabled = true;
      modalBtn.style.opacity = "0.7";
      modalBtn.style.cursor = "not-allowed";
    } else {
      modalBtn.addEventListener('click', function(e) {
        e.preventDefault();
        participateInChallenge(challenge.id, this);
      });
    }
  }
}

// Compartir reto: igual que tareas
function showShareOptionsChallenge(challengeId) {
  // Busca el reto en la lista global si la tienes, si no, recarga el reto
  let challenge = window.challenges?.find(c => c.id == challengeId);
  if (!challenge) return;
  const shareSection = document.getElementById('shareSectionChallenge');
  shareSection.innerHTML = `
    <h3 class="share-title">
      <i class="fas fa-share-alt"></i> Ayuda a difundir este reto
    </h3>
    <div class="share-content">
      <p class="share-text">
        <span class="share-highlight">"${challenge.description ? challenge.description.substring(0, 120) + '...' : 'Únete a este reto solidario'}"</span><br><br>
        ¡Cada participante suma impacto!
      </p>
      <div class="share-buttons">
        <a href="#" class="share-btn share-btn-facebook" onclick="shareOnSocialChallenge('facebook', '${challenge.id}')">
          <i class="fab fa-facebook-f"></i> Facebook
        </a>
        <a href="#" class="share-btn share-btn-twitter" onclick="shareOnSocialChallenge('twitter', '${challenge.id}')">
          <i class="fab fa-twitter"></i> Twitter
        </a>
        <a href="#" class="share-btn share-btn-whatsapp" onclick="shareOnSocialChallenge('whatsapp', '${challenge.id}')">
          <i class="fab fa-whatsapp"></i> WhatsApp
        </a>
        <a href="#" class="share-btn share-btn-link" onclick="copyChallengeLink('${challenge.id}')">
          <i class="fas fa-link"></i> Copiar enlace
        </a>
      </div>
    </div>
  `;
  shareSection.scrollIntoView({ behavior: 'smooth' });
}

function shareOnSocialChallenge(platform, challengeId) {
  let challenge = window.challenges?.find(c => c.id == challengeId);
  const url = `${window.location.origin}/challenges/${challenge.id}`;
  const text = `¡Participa en el reto: "${challenge.title}"! ${challenge.description ? challenge.description.substring(0, 100) + '...' : ''} ${url}`;
  let shareUrl;
  switch(platform) {
    case 'facebook':
      shareUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}&quote=${encodeURIComponent(text)}`;
      break;
    case 'twitter':
      shareUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}`;
      break;
    case 'whatsapp':
      shareUrl = `https://wa.me/?text=${encodeURIComponent(text)}`;
      break;
    default:
      return;
  }
  window.open(shareUrl, '_blank', 'width=600,height=400');
}

function copyChallengeLink(challengeId) {
  const url = `${window.location.origin}/challenges/${challengeId}`;
  navigator.clipboard.writeText(url).then(() => {
    // Puedes usar tu propio sistema de notificaciones
    alert('¡Enlace copiado!');
  }).catch(() => {
    prompt('Por favor, copia este enlace:', url);
  });
}

// Cerrar modal y restaurar scroll
document.getElementById('closeChallengeModal').addEventListener('click', function() {
  document.getElementById('challengeModal').style.display = 'none';
  document.body.style.overflow = '';
});
document.getElementById('challengeModal').addEventListener('click', function(e) {
  if (e.target === this) {
    this.style.display = 'none';
    document.body.style.overflow = '';
  }
});

// Participar en reto (puedes personalizar la lógica)
async function participateInChallenge(challengeId, btn = null) {
  const { data: { session } } = await supabase.auth.getSession();
  if (!session?.user) {
    document.getElementById('loginModal').classList.add('active');
    return;
  }
  const userId = session.user.id;

  // Intenta insertar como miembro (único por usuario y reto)
  const { error } = await supabase
    .from('challenges_members')
    .insert([{ challenge_id: challengeId, user_id: userId, role: 'member', status: 'active' }]);

  if (error) {
    if (error.code === '23505' || error.status === 409) {
      alert('Ya estás participando en este reto.');
    } else {
      alert('Error al participar: ' + error.message);
    }
    return;
  }

  // Actualiza el botón inmediatamente
  if (btn) {
    btn.textContent = "Participando";
    btn.disabled = true;
    btn.style.opacity = "0.7";
    btn.style.cursor = "not-allowed";
  } else {
    // Si se llama desde el modal, también puedes actualizar el botón del modal
    const modalBtn = document.querySelector('#challengeModal .btn-aceptar');
    if (modalBtn) {
      modalBtn.addEventListener('click', function(e) {
        e.preventDefault();
        participateInChallenge(challenge.id, this);
      });
    }
  }
}

async function joinChallenge(challengeId) {
  const { data: { session } } = await supabase.auth.getSession();
  if (!session?.user) {
    alert('Debes iniciar sesión para aceptar el reto.');
    return;
  }
  const userId = session.user.id;
  await supabase
    .from('challenges_members')
    .insert([{ challenge_id: challengeId, user_id: userId, role: 'member', status: 'active' }]);
  alert('¡Has aceptado el reto!');
}
</script>
{% endblock %}