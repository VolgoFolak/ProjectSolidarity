{% extends "layout.njk" %}

{% block title %}Retos - Solidarity{% endblock %}

{% block head %}
  {{ super() }}
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/choices.js/public/assets/styles/choices.min.css">
  <style>
    :root {
      --primary: #4a6fa5;
      --primary-dark: #166088;
      --gray: #e2e8f0;
      --white: #fff;
      --accent: #4fc3a1;
      --accent-dark: #3da58a;
      --urgent: #e53e3e;
      --gold: #eab308;
      --bronze: #cd7f32;
      --radius: 12px;
    }
    html, body {
      max-width: 100vw;
      overflow-x: hidden;
      box-sizing: border-box;
    }
    body {
      background: #f8fafc;
      font-family: 'Inter', Arial, sans-serif;
      color: #2d3748;
      font-size: 1rem;
      margin: 0;
      padding: 0;
    }
    .main-container { max-width: 1200px; margin: 2rem auto; padding: 0 2rem; }
    .challenges-intro {
      background: linear-gradient(135deg, #f0f9ff 0%, #e6f0fa 100%);
      border-radius: var(--radius); padding: 2rem; margin-bottom: 2rem; border: 1px solid var(--gray);
    }
    .challenges-intro h2 { font-size: 1.8rem; color: var(--primary-dark); margin-bottom: 1rem; display: flex; align-items: center; gap: 0.8rem; }
    .challenges-intro h2 i { color: var(--accent); }
    .challenges-intro p { color: #4a6fa5; font-size: 1.1rem; line-height: 1.6; }
    .challenges-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 2rem; }
    .challenges-header h1 { font-size: 2rem; color: var(--primary); font-weight: 700; }
    .challenges-actions .btn { border-radius: var(--radius); }
    .challenges-search { margin-bottom: 1.5rem; position: relative; width: 100%; max-width: none; }
    .challenges-search input { width: 100%; padding-right: 2.5rem; border-radius: var(--radius); border: 1.5px solid var(--gray); font-size: 1.1rem; height: 48px; }
    .challenges-search i { position: absolute; right: 1rem; top: 50%; transform: translateY(-50%); pointer-events: none; }
    .tabs { display: flex; border-bottom: 1px solid var(--gray); margin-bottom: 2rem; flex-wrap: wrap; }
    .tab { padding: 0.75rem 1.5rem; cursor: pointer; position: relative; font-weight: 500; color: #6b7280; background: none; border: none; outline: none; white-space: nowrap; border-radius: var(--radius) var(--radius) 0 0; }
    .tab.active { color: var(--primary); font-weight: 600; background: #f0f9ff; }
    .tab.active::after { content: ''; position: absolute; bottom: -1px; left: 0; width: 100%; height: 3px; background: var(--primary); }
    .challenges-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(350px, 1fr)); gap: 2rem; }
    .challenge-card { background: white; border-radius: var(--radius); overflow: hidden; box-shadow: 0 5px 15px rgba(0,0,0,0.05); border: 1px solid var(--gray); transition: all 0.3s ease; display: flex; flex-direction: column; position: relative; }
    .challenge-card:hover { transform: translateY(-5px); box-shadow: 0 10px 25px rgba(0,0,0,0.1); }
    .challenge-image { height: 180px; overflow: hidden; position: relative; }
    .challenge-image img { width: 100%; height: 100%; object-fit: cover; transition: transform 0.3s ease; }
    .challenge-card:hover .challenge-image img { transform: scale(1.05); }
    .challenge-badge { position: absolute; top: 1rem; right: 1rem; background: rgba(255,255,255,0.9); padding: 0.3rem 0.8rem; border-radius: 50px; font-size: 0.8rem; font-weight: 600; display: flex; align-items: center; gap: 0.5rem; box-shadow: 0 2px 5px rgba(0,0,0,0.1); z-index: 2; }
    .badge-urgent { background: var(--urgent); color: white; }
    .badge-points { background: var(--primary); color: white; left: 1rem; right: auto; }
    .badge-type { position: absolute; top: 1rem; left: 1rem; background: var(--accent); color: white; border-radius: 50px; padding: 0.3rem 0.9rem; font-size: 0.85rem; font-weight: 700; z-index: 3; box-shadow: 0 2px 5px rgba(0,0,0,0.08);}
    .challenge-content { padding: 1.5rem; display: flex; flex-direction: column; flex: 1; }
    .challenge-content h3 { font-size: 1.3rem; margin-bottom: 0.8rem; color: #2d3748; }
    .challenge-content p { color: #6b7280; margin-bottom: 1.5rem; font-size: 0.95rem; line-height: 1.6; flex-grow: 1; }
    .challenge-meta { display: flex; gap: 1rem; margin-bottom: 1.5rem; font-size: 0.85rem; flex-wrap: wrap; }
    .meta-item { display: flex; align-items: center; gap: 0.5rem; color: #6b7280; }
    .meta-item i { color: var(--primary); }
    .linked-cause { display: inline-flex; align-items: center; background: #f0f0ff; color: var(--primary); padding: 0.3rem 0.8rem; border-radius: 50px; font-size: 0.85rem; font-weight: 600; margin-bottom: 1rem; }
    .challenge-actions { display: flex; gap: 0.8rem; }
    .challenge-actions .btn { flex: 1; text-align: center; justify-content: center; border-radius: var(--radius); }
    .modal-bg { display: none; position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background: rgba(0,0,0,0.35); z-index: 9999; align-items: center; justify-content: center; }
    .modal-bg.active { display: flex; }
    .modal-content { background: #fff; border-radius: var(--radius); max-width: 540px; width: 95vw; padding: 2.5rem 1.5rem 2rem 1.5rem; box-shadow: 0 8px 32px rgba(0,0,0,0.13); position: relative; animation: fadeIn 0.3s; max-height: 90vh; overflow-y: auto; }
    .close-modal { position: absolute; top: 1.1rem; right: 1.3rem; background: none; border: none; font-size: 2rem; color: #aaa; cursor: pointer; transition: color 0.2s; border-radius: 50%; }
    .close-modal:hover { color: var(--primary); background: #f0f9ff; }
    .create-task-title { font-size: 1.5rem; font-weight: 800; color: var(--primary); margin-bottom: 1.2rem; text-align: center; }
    .task-form .form-group label { font-weight: 600; color: var(--primary); margin-bottom: 0.5rem; display: block; }
    .task-form .form-group input, .task-form .form-group textarea, .task-form .form-group select { width: 100%; padding: 0.7rem 1rem; border-radius: var(--radius); border: 1px solid #e5e7eb; margin-bottom: 0.2rem; font-size: 1rem; background: #f8fafc; transition: border 0.2s; }
    .task-form .form-group input:focus, .task-form .form-group textarea:focus, .task-form .form-group select:focus { border: 1.5px solid var(--accent); outline: none; background: #fff; }
    .task-form .form-group textarea { min-height: 90px; resize: vertical; }
    .form-inline-group { display: flex; gap: 1rem; }
    .form-inline-group .form-group { flex: 1; }
    .preview-img { width: 100%; max-width: 320px; height: 180px; object-fit: cover; border-radius: var(--radius); margin-top: 0.5rem; border: 1px solid #e5e7eb; display: none; }
    .points-info { background: var(--accent); color: #fff; border-radius: var(--radius); padding: 0.7rem 1rem; margin-top: 0.5rem; font-size: 1.05rem; display: flex; align-items: center; gap: 0.7rem; }
    .after-create { margin-top: 2rem; background: var(--primary-light); color: #444; border-radius: var(--radius); padding: 1.5rem 1rem; text-align: center; }
    @keyframes fadeIn { from { opacity: 0; transform: translateY(-30px);} to { opacity: 1; transform: translateY(0);} }
    .btn { padding: 0.8rem 1.5rem; border-radius: var(--radius); font-weight: 600; cursor: pointer; transition: all 0.2s; border: none; display: inline-flex; align-items: center; justify-content: center; gap: 0.5rem; }
    .btn-primary { background: var(--primary); color: white; }
    .btn-primary:hover { background: var(--primary-dark); transform: translateY(-2px); }
    .btn-accent { background: var(--accent); color: white; }
    .btn-accent:hover { background: var(--accent-dark); transform: translateY(-2px); }
    .btn-outline { background: transparent; color: var(--primary); border: 1px solid var(--primary); }
    .btn-outline:hover { background: rgba(74, 111, 165, 0.1); transform: translateY(-2px); }
    .btn-secondary { background: #f0f9ff; color: var(--primary); border: 1px solid var(--primary); }
    .btn-secondary:hover { background: #e6f0fa; }
    button,
    .btn,
    .btn-primary,
    .btn-accent,
    .btn-outline,
    .btn-secondary,
    .modal-content button,
    .challenge-actions .btn,
    .task-actions .btn {
      border-radius: 2rem !important;
    }
    @media (max-width: 768px) {
      .challenges-header { flex-direction: column; align-items: flex-start; gap: 1rem; }
      .challenges-grid { grid-template-columns: 1fr; }
      .challenge-actions { flex-direction: column; }
      .challenges-search { max-width: 100%; }
    }
    /* --- MOBILE ONLY: Ajustes para máxima usabilidad y sin scroll lateral --- */
    @media (max-width: 600px) {
      html, body {
        max-width: 100vw;
        overflow-x: hidden !important;
      }
      .main-container {
        padding: 0 0.3rem !important;
        max-width: 100vw !important;
        box-sizing: border-box;
      }
      .challenges-header {
        flex-direction: column !important;
        align-items: center !important;
        gap: 0.7rem !important;
        margin-bottom: 1.2rem !important;
      }
      .challenges-header h1 {
        font-size: 1.45rem !important; /* Más grande que tasks, igual que volunteering */
        text-align: center !important;
        width: 100%;
        margin: 0 auto 0.5rem auto !important;
        font-weight: 800 !important;
        letter-spacing: -0.5px;
      }
      .challenges-actions {
        width: 100%;
        display: flex;
        justify-content: center !important;
      }
      .challenges-actions .btn {
        font-size: 1.07rem !important;
        padding: 0.7rem 0 !important;
        margin: 0 auto !important;
        display: block !important;
        width: 90vw !important;
        max-width: 350px !important;
        min-width: 180px !important;
        border-radius: 9px !important;
        text-align: center !important;
      }
      .challenges-intro {
        padding: 1rem !important;
        margin-bottom: 1.5rem !important;
        border-radius: 10px !important;
      }
      .challenges-intro-content {
        margin-top: 1.2rem !important;
      }
      .challenges-intro h2 {
        font-size: 1.2rem !important;
        gap: 0.5rem !important;
        font-weight: 700 !important;
        margin-bottom: 0.7rem !important;
        text-align: center !important;
        line-height: 1.25 !important;
        letter-spacing: -0.5px;
      }
      .challenges-intro h2 i {
        font-size: 1.1em !important;
      }
      .challenges-intro p {
        font-size: 0.97rem !important;
        text-align: center !important;
      }
      .challenges-search {
        margin-bottom: 1.2rem !important;
        width: 100% !important;
        max-width: 100vw !important;
        flex-direction: column !important;
        gap: 0.5rem !important;
      }
      .challenges-search input {
        font-size: 0.97rem !important;
        padding: 0.5rem 0.7rem !important;
        height: 40px !important;
        width: 100% !important;
      }
      .tabs {
        display: none !important;
      }
      .challenges-grid {
        grid-template-columns: 1fr !important;
        gap: 1.2rem !important;
      }
      .challenge-card {
        border-radius: 9px !important;
        min-width: 0 !important;
      }
      .challenge-image {
        height: 120px !important;
      }
      .challenge-content {
        padding: 0.7rem !important;
      }
      .challenge-content h3 {
        font-size: 1.05rem !important;
      }
      .challenge-content p {
        font-size: 0.93rem !important;
      }
      .challenge-meta {
        gap: 0.5rem !important;
        font-size: 0.82rem !important;
      }
      .beneficiaries-count {
        font-size: 0.82rem !important;
      }
      .challenge-actions {
        flex-direction: column !important;
        gap: 0.5rem !important;
      }
      .btn, .btn-accent, .btn-primary, .btn-outline {
        font-size: 0.97rem !important;
        padding: 0.6rem 0.7rem !important;
      }
      .modal-content {
        max-width: 99vw !important;
        width: 99vw !important;
        min-width: 0 !important;
        padding: 1rem 0.3rem !important;
        border-radius: 10px !important;
        left: 0 !important;
        right: 0 !important;
        margin: 0 auto !important;
      }
      .close-modal {
        top: 0.7rem !important;
        right: 0.9rem !important;
        font-size: 1.7rem !important;
      }
      .create-task-title { font-size: 1.1rem !important; }
      .form-inline-group { flex-direction: column !important; gap: 0.5rem !important; }
      .preview-img { max-width: 100% !important; height: auto !important; }
      .points-info { font-size: 0.93rem !important; padding: 0.7rem !important; }
      .after-create { padding: 1rem 0.5rem !important; }
      .content-title { font-size: 1.05rem !important; }
      .content-text { font-size: 0.97rem !important; }
      .modal-cause-actions { flex-direction: column !important; gap: 0.7rem !important; }
      .action-btn { min-width: 0 !important; font-size: 0.97rem !important; padding: 0.7rem !important; }
      .share-section { padding-top: 1rem !important; margin-top: 1rem !important; }
      .share-title { font-size: 1.05rem !important; }
      .share-content { padding: 1rem !important; }
      .share-btn { font-size: 0.97rem !important; padding: 0.7rem 1rem !important; }
      .draft-recovery-notification { padding: 1rem !important; max-width: 98vw !important; right: 0.5rem !important; }
      .navbar .hamburger {
        display: none !important;
      }
      .bottom-nav, .mobile-bottom-nav {
        position: fixed !important;
        left: 0 !important;
        right: 0 !important;
        bottom: 0 !important;
        width: 100vw !important;
        max-width: 100vw !important;
        min-width: 0 !important;
        border-radius: 0 !important;
        box-sizing: border-box !important;
        z-index: 9999;
      }
      .bottom-nav .nav-link, .mobile-bottom-nav .nav-link {
        flex: 1 1 0;
        min-width: 0;
        text-align: center;
        padding: 0.7rem 0.2rem;
        font-size: 1.1rem;
        white-space: nowrap;
      }
      /* Evita scroll lateral por cualquier elemento */
      * {
        box-sizing: border-box !important;
        max-width: 100vw;
        word-break: break-word;
      }
      #createChallengeModal .modal-content,
  #challengeModal .modal-content,
  .modal-content {
    margin-top: 100px !important;
    margin-bottom: 90px !important;
    margin-left: 2vw !important;
    margin-right: 2vw !important;
    width: 96vw !important;
    max-width: 96vw !important;
    min-width: 0 !important;
    border-radius: 14px !important;
    box-sizing: border-box !important;
    left: 0 !important;
    right: 0 !important;
    max-height: calc(100vh - 190px) !important;
    overflow-y: auto !important;
    padding-left: 5vw !important;
    padding-right: 5vw !important;
  }
  .btn, .btn-accent, .btn-primary, .btn-outline,
  .challenge-actions .btn, .modal-cause-actions .action-btn, .modal-cause-actions .btn,
  .after-create .btn, .modal-buttons .btn {
    border-radius: 999px !important;
    font-weight: 600 !important;
    font-size: 1rem !important;
    padding: 0.7rem 1.2rem !important;
    width: 100% !important;
    min-width: 0 !important;
    max-width: 100vw !important;
    display: flex !important;
    justify-content: center !important;
    align-items: center !important;
    margin: 0.3rem 0 !important;
    box-sizing: border-box !important;
    gap: 0.7rem !important;
  }
  .challenge-actions .btn i,
  .modal-cause-actions .action-btn i,
  .modal-cause-actions .btn i,
  .after-create .btn i,
  .modal-buttons .btn i,
  .btn i,
  .btn-primary i,
  .btn-accent i,
  .btn-outline i {
    display: inline-block !important;
  }
  #challengeModal .modal-header,
  #challengeModal .modal-title {
    text-align: center !important;
    font-size: 1.1rem !important;
    font-weight: 700 !important;
    margin-bottom: 0.7rem !important;
    word-break: break-word !important;
  }
  #challengeModal .modal-body {
    padding: 0.7rem 0.2rem !important;
    font-size: 0.97rem !important;
  }
  #challengeModal .modal-close,
  #createChallengeModal .close-modal {
    top: 0.7rem !important;
    right: 0.9rem !important;
    font-size: 1.7rem !important;
  }
  /* MODAL VER MÁS: imagen arriba, info debajo */
  #challengeModal .challenge-modal-main {
    flex-direction: column !important;
    display: flex !important;
    gap: 1.2rem !important;
    align-items: stretch !important;
    width: 100% !important;
    margin-bottom: 1.2rem !important;
  }
  #challengeModal .challenge-modal-main > div {
    width: 100% !important;
    min-width: 0 !important;
    max-width: 100% !important;
  }
  #challengeModal .challenge-modal-main img {
    width: 100% !important;
    max-width: 100vw !important;
    height: auto !important;
    display: block !important;
    object-fit: cover !important;
    margin: 0 auto !important;
  }

  /* Solo desktop: Modales más estrechos */
  @media (min-width: 601px) {
    #challengeModal .modal-content,
    #createChallengeModal .modal-content,
    .modal-content {
      max-width: 60vw !important;
      width: 60vw !important;
      min-width: 320px !important;
      margin-left: auto !important;
      margin-right: auto !important;
      border-radius: 14px !important;
      box-sizing: border-box !important;
      padding-left: 2rem !important;
      padding-right: 2rem !important;
    }
  }
}
html, body, {
  overflow-x: hidden !important;
  max-width: 100vw !important;
}
    /* --- FIN MOBILE ONLY --- */
  </style>
{% endblock %}

{% block content %}
  <!-- Modal para usuarios no logueados -->
  <div class="modal-bg" id="loginModal">
    <div class="modal-content">
      <h3>Para crear un reto</h3>
      <p>Debes ser un usuario registrado. ¿Deseas iniciar sesión o registrarte ahora?</p>
      <div class="modal-buttons">
        <a href="/login?return=/challenges" class="btn btn-primary">Iniciar Sesión</a>
        <a href="/register?return=/challenges" class="btn btn-outline">Registrarse</a>
        <button id="cancelModal" class="btn">Cancelar</button>
      </div>
    </div>
  </div>

  <!-- Modal emergente para crear reto -->
  <div id="createChallengeModal" class="modal-bg">
    <div class="modal-content">
      <button class="close-modal" id="closeCreateChallengeModal" title="Cerrar">&times;</button>
      <div class="create-task-title">
        <i class="fas fa-plus-circle"></i> Crear Nuevo Reto Solidario
      </div>
      <form class="task-form" id="challengeForm" autocomplete="off">
        <div class="form-group">
          <label for="title">Título del reto</label>
          <input type="text" id="title" name="title" placeholder="Ej: Corre 5km por la educación" required>
        </div>
        <div class="form-group">
          <label for="photo">Foto principal</label>
          <input type="file" id="photo" name="photo" accept="image/*">
          <img id="previewImg" class="preview-img" alt="Vista previa de la foto" style="display:none;">
        </div>
        <div class="form-group">
          <label for="summary">Resumen breve</label>
          <input type="text" id="summary" name="summary" maxlength="120" placeholder="Un resumen breve del reto (máx 120 caracteres)" required>
        </div>
        <div class="form-group">
          <label for="description">Descripción</label>
          <textarea id="description" name="description" placeholder="Describe el reto, cómo completarlo y qué impacto tendrá..." required></textarea>
        </div>
        <div class="form-group">
          <label for="challenge_type">Tipo de reto</label>
          <select id="challenge_type" name="challenge_type" required>
            <option value="duel" selected>Duelo 1vs1</option>
            <option value="open">Reto abierto</option>
          </select>
        </div>
        <div class="form-group" id="opponentGroup" style="display:block;">
          <label for="opponent-select">¿A quién quieres retar?</label>
          <select id="opponent-select" name="opponent_id">
            <option value="">Selecciona un usuario</option>
          </select>
        </div>
        <div class="form-group">
          <label for="cause_id">Vinculado a causa (opcional)</label>
          <select id="cause-select" name="cause_id">
            <option value="">Selecciona una causa</option>
          </select>
        </div>
        <div class="form-inline-group">
          <div class="form-group">
            <label for="city">Ciudad</label>
            <input type="text" id="city" name="city" placeholder="Ej: Madrid" required>
          </div>
          <div class="form-group">
            <label for="country">País</label>
            <input type="text" id="country" name="country" placeholder="Ej: España" required>
          </div>
        </div>
        <div class="form-group">
          <label for="points">Puntos por completar</label>
          <input type="number" id="points" name="points" min="10" max="1000" value="50" required>
          <div class="points-info" id="pointsText">
            <i class="fas fa-star"></i>
            Completar este reto otorgará <strong>50 puntos</strong> al ganador.
          </div>
        </div>
        <div class="form-group">
          <label for="deadline">Fecha límite</label>
          <input type="date" id="deadline" name="deadline" required>
        </div>
        <div class="form-group" style="display:flex; align-items:center; gap:0.7rem; margin-bottom:0;">
          <input type="checkbox" id="is_urgent" name="is_urgent" style="width:18px; height:18px; accent-color:var(--urgent); margin:0;">
          <label for="is_urgent" style="margin:0; font-weight:500; color:#e53e3e; cursor:pointer;">
            Marcar como urgente
          </label>
        </div>
        <input type="hidden" id="lat" name="lat">
        <input type="hidden" id="lng" name="lng">
        <button type="submit" class="btn btn-primary" style="margin-top:1rem;">
          <i class="fas fa-paper-plane"></i> Crear Reto
        </button>
      </form>
      <div class="after-create" id="afterCreate" style="display:none;">
        <h3>¡Reto creado con éxito!</h3>
        <p>¿Quieres ver todos los retos o crear otro?</p>
        <a href="/challenges" class="btn btn-accent">
          <i class="fas fa-trophy"></i> Ver retos
        </a>
        <br>
        <a href="#" id="createAnother" class="btn btn-outline" style="margin-top:1rem;">
          <i class="fas fa-plus"></i> Crear otro reto
        </a>
      </div>
    </div>
  </div>

  <!-- Contenido principal -->
  <div class="main-container">
    <div class="challenges-intro">
      <div class="challenges-intro-content">
        <h2><i class="fas fa-bolt"></i> ¡Transforma la solidaridad en una aventura!</h2>
        <p>Lanza retos, compite con amigos, gana puntos de impacto y desbloquea logros. Cada acción cuenta para construir un mundo mejor de la manera más divertida.</p>
      </div>
    </div>
    <div class="challenges-header">
      <h1>Retos Solidarios</h1>
      <div class="challenges-actions">
        <a href="#" id="create-challenge-btn" class="btn btn-primary">
          <i class="fas fa-plus"></i> Crear Reto
        </a>
      </div>
    </div>
    <div class="challenges-search">
      <input type="text" id="search-input" placeholder="Buscar por título, país, descripción...">
      <i class="fas fa-search" style="color:#4a6fa5;"></i>
    </div>
    <!-- Tabs -->
    <div class="tabs">
      <button class="tab active" data-filter="all">Todos los retos</button>
      <button class="tab" data-filter="duel">Duelos 1vs1</button>
      <button class="tab" data-filter="open">Retos abiertos</button>
    </div>
    <div class="challenges-grid" id="challengesList">
      <!-- Aquí se cargarán los retos usando el renderer -->
    </div>
  </div>
{% endblock %}

{% block scripts %}
{{ super() }}
<script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
<script src="/js/modules/supabase-config.js"></script>
<script src="/js/modules/share-system.js"></script>
<script src="/js/modules/challenges-renderer.js"></script>
<script src="https://cdn.jsdelivr.net/npm/choices.js/public/assets/scripts/choices.min.js"></script>
<script>
let currentFilter = "all";
let causeChoices = null;
let opponentChoices = null;
let causesMap = {};
let currentUserId = null;

document.addEventListener('DOMContentLoaded', async function() {
  // ✅ DETECTAR URL y abrir modal automáticamente
  setTimeout(() => {
    const urlPath = window.location.pathname;
    const challengeIdMatch = urlPath.match(/\/(challenges|reto)\/([^\/]+)$/);
    if (challengeIdMatch) {
      const challengeId = challengeIdMatch[2];
      console.log('🎯 URL detectada para reto específico:', challengeId);
      
      // Esperar a que se carguen los retos
      const waitForChallenges = () => {
        if (window.challenges && window.challenges.length > 0) {
          const challenge = window.challenges.find(c => c.id === challengeId);
          if (challenge) {
            console.log('✅ Reto encontrado, abriendo modal...');
            // Usar el método del renderer
            if (window.challengesRenderer) {
              window.challengesRenderer.showChallengeModal(challengeId);
            }
          } else {
            console.error('❌ Reto no encontrado, redirigiendo...');
            window.location.href = '/challenges';
          }
        } else {
          setTimeout(waitForChallenges, 1000);
        }
      };
      
      setTimeout(waitForChallenges, 2000);
    }
  }, 1000);

  // Obtener usuario actual para lógica de botones
  const { data: { session } } = await supabase.auth.getSession();
  currentUserId = session?.user?.id || null;

  // Abrir modal de crear reto
  document.getElementById('create-challenge-btn').onclick = async function(e) {
    e.preventDefault();
    const { data: { session } } = await supabase.auth.getSession();
    if (session?.user) {
      await loadCausesForSelect();
      await loadUsersForSelect();
      document.getElementById('createChallengeModal').classList.add('active');
      document.body.style.overflow = 'hidden';
    } else {
      document.getElementById('loginModal').classList.add('active');
    }
  };

  // Cerrar modal de crear reto
  document.getElementById('closeCreateChallengeModal').onclick = function() {
    document.getElementById('createChallengeModal').classList.remove('active');
    document.body.style.overflow = '';
    document.getElementById('challengeForm').reset();
    document.getElementById('previewImg').style.display = 'none';
    document.getElementById('challengeForm').style.display = 'block';
    document.getElementById('afterCreate').style.display = 'none';
    document.getElementById('opponentGroup').style.display = 'none';
  };
  document.getElementById('createChallengeModal').onclick = function(e) {
    if (e.target === this) {
      this.classList.remove('active');
      document.body.style.overflow = '';
      document.getElementById('challengeForm').style.display = 'block';
      document.getElementById('afterCreate').style.display = 'none';
    }
  };

  // Modal login
  document.getElementById('cancelModal').onclick = function() {
    document.getElementById('loginModal').classList.remove('active');
  };
  document.getElementById('loginModal').onclick = function(e) {
    if (e.target === this) this.classList.remove('active');
  };

  // Mostrar/ocultar campo de oponente según tipo de reto
  document.getElementById('challenge_type').addEventListener('change', function() {
    const opponentGroup = document.getElementById('opponentGroup');
    opponentGroup.style.display = this.value === 'duel' ? 'block' : 'none';
  });

  // Vista previa de imagen
  document.getElementById('photo').addEventListener('change', function(e) {
    const file = e.target.files[0];
    const preview = document.getElementById('previewImg');
    if (file) {
      const reader = new FileReader();
      reader.onload = function(evt) {
        preview.src = evt.target.result;
        preview.style.display = 'block';
      };
      reader.readAsDataURL(file);
    } else {
      preview.src = '';
      preview.style.display = 'none';
    }
  });

  // Actualizar texto de puntos
  document.getElementById('points').addEventListener('input', function() {
    const val = this.value || 0;
    document.getElementById('pointsText').innerHTML = `<i class="fas fa-star"></i> Completar este reto otorgará <strong>${val} puntos</strong> al ganador.`;
  });

  // Crear otro reto tras éxito
  document.getElementById('createAnother').onclick = function(e) {
    e.preventDefault();
    document.getElementById('challengeForm').reset();
    document.getElementById('previewImg').style.display = 'none';
    document.getElementById('challengeForm').style.display = 'block';
    document.getElementById('afterCreate').style.display = 'none';
    document.getElementById('opponentGroup').style.display = 'none';
  };

  // Envío del formulario
  document.getElementById('challengeForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    const title = document.getElementById('title').value.trim();
    const summary = document.getElementById('summary').value.trim();
    const description = document.getElementById('description').value.trim();
    const challenge_type = document.getElementById('challenge_type').value;
    const opponent_id = document.getElementById('opponent-select').value || null;
    const cause_id = document.getElementById('cause-select').value || null;
    const city = document.getElementById('city').value.trim();
    const country = document.getElementById('country').value.trim();
    const points = parseInt(document.getElementById('points').value, 10);
    const deadline = document.getElementById('deadline').value;
    const is_urgent = document.getElementById('is_urgent').checked;
    const photoFile = document.getElementById('photo').files[0];
    let photo_url = null;

    if (challenge_type === 'duel' && !opponent_id) {
      alert('Debes seleccionar un oponente para un reto 1 VS 1 o cambiar a reto abierto');
      return;
    }

    if (photoFile) {
      const fileExt = photoFile.name.split('.').pop();
      const fileName = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}.${fileExt}`;
      const filePath = `public/${fileName}`;
      const { error: uploadError } = await supabase.storage
        .from('challenges')
        .upload(filePath, photoFile, { upsert: true });
      if (uploadError) {
        alert('Error subiendo la foto: ' + uploadError.message);
        return;
      }
      const { data } = supabase.storage.from('challenges').getPublicUrl(filePath);
      photo_url = data.publicUrl;
    }

    const { data: { session } } = await supabase.auth.getSession();
    const user = session?.user;
    if (!user) {
      alert('Debes iniciar sesión para crear un reto.');
      return;
    }

    const lat = document.getElementById('lat').value;
    const lng = document.getElementById('lng').value;

    const { data: newChallenge, error: challengeError } = await supabase
      .from('challenges')
      .insert([{ title, summary, description, challenge_type, creator_id: user.id, opponent_id, cause_id, city, country, points, deadline, is_urgent, photo_url, status: opponent_id ? 'pending' : 'active', lat: lat ? parseFloat(lat) : null, lng: lng ? parseFloat(lng) : null }])
      .select()
      .single();

    if (!challengeError && newChallenge) {
      await supabase
        .from('challenge_members')
        .insert([{ challenge_id: newChallenge.id, user_id: user.id, role: 'founder', status: 'active' }]);
    }

    document.getElementById('challengeForm').style.display = 'none';
    document.getElementById('afterCreate').style.display = 'block';
    loadChallengesFromSupabase();
  });

  // Tabs
  document.querySelectorAll('.tab').forEach(tab => {
    tab.addEventListener('click', function() {
      document.querySelector('.tab.active').classList.remove('active');
      this.classList.add('active');
      loadChallengesFromSupabase(this.getAttribute('data-filter'));
    });
  });

  // Búsqueda
  document.getElementById('search-input').addEventListener('input', function() {
    loadChallengesFromSupabase(currentFilter, this.value);
  });

  // Geocodificación automática al cambiar ciudad o país
  document.getElementById('city').addEventListener('change', geocodeCityCountry);
  document.getElementById('country').addEventListener('change', geocodeCityCountry);

  // Cargar causas en el mapa
  await loadCausesMap();
  loadChallengesFromSupabase();
}); 

// Cargar causas en el select al abrir el modal de crear reto
async function loadCausesForSelect() {
  const select = document.getElementById('cause-select');
  if (causeChoices) {
    causeChoices.destroy();
    causeChoices = null;
  }
  select.innerHTML = '<option value="">Selecciona una causa</option>';
  const { data: causes, error } = await supabase.from('causes').select('id, title');
  if (error) {
    alert('Error cargando causas: ' + error.message);
    return;
  }
  if (causes && causes.length > 0) {
    causes.forEach(cause => {
      const option = document.createElement('option');
      option.value = cause.id;
      option.textContent = cause.title;
      select.appendChild(option);
    });
  }
  causeChoices = new Choices(select, {
    searchEnabled: true,
    itemSelectText: '',
    shouldSort: false,
    placeholder: true,
    placeholderValue: 'Selecciona una causa',
    removeItemButton: true,
    noResultsText: 'No se encontraron causas',
  });
}

async function loadUsersForSelect() {
  const select = document.getElementById('opponent-select');
  if (opponentChoices) {
    opponentChoices.destroy();
    opponentChoices = null;
  }
  select.innerHTML = '<option value="">Selecciona un usuario</option>';
  const { data: users, error } = await supabase
    .from('profiles')
    .select('id, first_name, last_name, username, photo_url');
  if (error) {
    alert('Error cargando usuarios: ' + error.message);
    return;
  }
  if (users && users.length > 0) {
    users.forEach(user => {
      const option = document.createElement('option');
      option.value = user.id;
      option.textContent = (user.first_name && user.last_name)
        ? `${user.first_name} ${user.last_name}`
        : (user.username || 'Usuario');
      select.appendChild(option);
    });
  }
  opponentChoices = new Choices(select, {
    searchEnabled: true,
    itemSelectText: '',
    shouldSort: false,
    placeholder: true,
    placeholderValue: 'Selecciona un usuario',
    removeItemButton: true,
    noResultsText: 'No se encontraron usuarios',
  });
}

// Geocodificación automática al cambiar ciudad o país
async function geocodeCityCountry() {
  const city = document.getElementById('city').value.trim();
  const country = document.getElementById('country').value.trim();
  if (!city || !country) return;

  const query = encodeURIComponent(`${city}, ${country}`);
  const url = `https://nominatim.openstreetmap.org/search?q=${query}&format=json&limit=1`;

  try {
    const res = await fetch(url, { headers: { 'Accept-Language': 'es' } });
    const data = await res.json();
    if (data && data.length > 0) {
      document.getElementById('lat').value = data[0].lat;
      document.getElementById('lng').value = data[0].lon;
    } else {
      document.getElementById('lat').value = '';
      document.getElementById('lng').value = '';
    }
  } catch (e) {
    document.getElementById('lat').value = '';
    document.getElementById('lng').value = '';
  }
}

// Cargar causas en el mapa
async function loadCausesMap() {
  const { data: causes } = await supabase.from('causes').select('id, title, photo_url');
  if (causes) {
    causesMap = {}; // Reinicia el mapa para evitar residuos
    causes.forEach(c => {
      causesMap[c.id] = {
        title: c.title,
        photo_url: c.photo_url
      };
    });
  }
}

// ✅ CARGAR RETOS USANDO EL RENDERER (optimizado)
async function loadChallengesFromSupabase(filter = "all", searchTerm = "") {
  // 1. Cargar retos desde Supabase
  let query = supabase
    .from('challenges')
    .select('*, participants') // <-- asegúrate de traerlo
    .order('created_at', { ascending: false });

  // 2. Filtros (si tienes)
  if (filter !== "all") {
    query = query.eq('category', filter);
  }
  if (searchTerm && searchTerm.trim() !== "") {
    query = query.or(`title.ilike.%${searchTerm}%,description.ilike.%${searchTerm}%,city.ilike.%${searchTerm}%,country.ilike.%${searchTerm}%`);
  }

  const { data: challenges, error } = await query;
  const challengesList = document.getElementById('challengesList');

  if (error) {
    challengesList.innerHTML = '<div style="color:#e53e3e;text-align:center;">Error al cargar los desafíos.</div>';
    return;
  }

  // 3. Obtener usuario actual
  const { data: { session } } = await supabase.auth.getSession();
  const userId = session?.user?.id;

  // 4. Obtener participaciones del usuario
  let userChallengeIds = [];
  if (userId) {
    const { data: memberships } = await supabase
      .from('challenges_members') // <-- NOMBRE CORRECTO DE LA TABLA
      .select('challenge_id')
      .eq('user_id', userId);
    userChallengeIds = memberships ? memberships.map(m => m.challenge_id) : [];
  }

  // 5. Añadir isParticipating a cada challenge
  const challengesWithInfo = challenges ? challenges.map(challenge => ({
    ...challenge,
    isParticipating: userChallengeIds.includes(challenge.id)
  })) : [];

  // 6. Renderizar usando el renderer
  if (window.challengesRenderer) {
    window.challengesRenderer.renderGrid(challengesWithInfo, challengesList);
  } else {
    challengesList.innerHTML = '<div style="color:#e53e3e;text-align:center;">Error: Renderer no disponible.</div>';
  }
}
</script>
{% endblock %}