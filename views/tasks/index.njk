{% extends "layout.njk" %}

{% block title %}Tareas - Solidarity{% endblock %}

{% block head %}
  {{ super() }}
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/choices.js/public/assets/styles/choices.min.css" />
  <style>
    :root {
      --primary: #4a6fa5;
      --primary-dark: #166088;
      --gray: #e2e8f0;
      --white: #fff;
      --accent: #4fc3a1;
      --accent-dark: #3da58a;
      --urgent: #e53e3e;
    }
    body {
      background: #f8fafc;
      font-family: 'Inter', Arial, sans-serif;
      color: #2d3748;
      font-size: 1rem;
    }
    .modal-bg {
      display: none;
      position: fixed;
      top: 0; left: 0; width: 100vw; height: 100vh;
      background: rgba(0,0,0,0.35);
      z-index: 9999;
      align-items: center;
      justify-content: center;
    }
    .modal-bg.active { display: flex; }
    .modal-content {
      background: #fff;
      border-radius: 18px;
      max-width: 540px;
      width: 95vw;
      padding: 2.5rem 1.5rem 2rem 1.5rem;
      box-shadow: 0 8px 32px rgba(0,0,0,0.13);
      position: relative;
      animation: fadeIn 0.3s;
      max-height: 90vh;
      overflow-y: auto;
    }
    .close-modal {
      position: absolute;
      top: 1.1rem; right: 1.3rem;
      background: none;
      border: none;
      font-size: 2rem;
      color: #aaa;
      cursor: pointer;
      transition: color 0.2s;
    }
    .close-modal:hover { color: var(--primary, #4a6fa5); }
    .create-task-title {
      font-size: 1.5rem;
      font-weight: 800;
      color: var(--primary, #4a6fa5);
      margin-bottom: 1.2rem;
      text-align: center;
    }
    .task-form .form-group label { font-weight: 600; color: var(--primary, #4a6fa5); }
    .task-form .form-group input,
    .task-form .form-group textarea {
      width: 100%;
      padding: 0.7rem 1rem;
      border-radius: 8px;
      border: 1px solid #e5e7eb;
      margin-bottom: 0.2rem;
      font-size: 1rem;
      background: #f8fafc;
      transition: border 0.2s;
    }
    .task-form .form-group input:focus,
    .task-form .form-group textarea:focus {
      border: 1.5px solid var(--accent, #4fc3a1);
      outline: none;
      background: #fff;
    }
    .task-form .form-group textarea {
      min-height: 90px;
      resize: vertical;
    }
    .form-inline-group {
      display: flex;
      gap: 1rem;
    }
    .form-inline-group .form-group { flex: 1; }
    .preview-img {
      width: 100%;
      max-width: 320px;
      height: 180px;
      object-fit: cover;
      border-radius: 10px;
      margin-top: 0.5rem;
      border: 1px solid #e5e7eb;
      display: none;
    }
    .points-info {
      background: var(--accent, #4fc3a1);
      color: #fff;
      border-radius: 8px;
      padding: 0.7rem 1rem;
      margin-top: 0.5rem;
      font-size: 1.05rem;
      display: flex;
      align-items: center;
      gap: 0.7rem;
    }
    .after-create {
      margin-top: 2rem;
      background: var(--primary-light, #e6f0fa);
      color: #444;
      border-radius: 10px;
      padding: 1.5rem 1rem;
      text-align: center;
    }
    @media (max-width: 600px) {
      .modal-content { padding: 1.2rem 0.5rem 1.2rem 0.5rem; }
      .create-task-title { font-size: 1.1rem; }
      .form-inline-group { flex-direction: column; }
    }
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(-30px);}
      to { opacity: 1; transform: translateY(0);}
    }
    /* SOLO estilos de la página de tareas */
    .main-container {
        max-width: 1200px;
        margin: 2rem auto;
        padding: 0 2rem;
    }
    .tasks-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
    }
    .tasks-header h1 {
        font-size: 2rem;
        color: var(--primary);
        font-weight: 700;
    }
    .tasks-search {
        margin-bottom: 2rem;
        display: flex;
        align-items: center;
        gap: 0.7rem;
    }
    .tasks-search input {
        flex: 1;
        padding: 0.6rem 1.2rem;
        border-radius: 7px;
        border: 1.5px solid var(--gray);
        font-size: 1.05rem;
        outline: none;
        transition: border 0.2s;
        background: #fff;
    }
    .tasks-search input:focus {
        border-color: var(--primary);
    }
    .tabs {
        display: flex;
        border-bottom: 1px solid var(--gray);
        margin-bottom: 2rem;
    }
    .tab {
        padding: 0.75rem 1.5rem;
        cursor: pointer;
        position: relative;
        font-weight: 500;
        color: #6b7280;
        background: none;
        border: none;
        outline: none;
    }
    .tab.active {
        color: var(--primary);
        font-weight: 600;
    }
    .tab.active::after {
        content: '';
        position: absolute;
        bottom: -1px;
        left: 0;
        width: 100%;
        height: 3px;
        background: var(--primary);
    }
    .tasks-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 2rem;
    }
    .task-card {
        background: white;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
        transition: all 0.3s ease;
        border: 1px solid var(--gray);
        display: flex;
        flex-direction: column;
    }
    .task-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    }
    .task-image {
        height: 180px;
        overflow: hidden;
        position: relative;
    }
    .task-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
    }
    .task-card:hover .task-image img {
        transform: scale(1.05);
    }
    .task-badge {
        position: absolute;
        top: 1rem;
        right: 1rem;
        background: rgba(255, 255, 255, 0.9);
        padding: 0.3rem 0.8rem;
        border-radius: 50px;
        font-size: 0.8rem;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }
    .task-badge.urgent {
        background: var(--urgent);
        color: white;
    }
    .task-badge.points {
        background: var(--primary);
        color: white;
        left: 1rem;
        right: auto;
    }
    .task-content {
        padding: 1.5rem;
        display: flex;
        flex-direction: column;
        flex: 1;
    }
    .task-content h3 {
        font-size: 1.3rem;
        margin-bottom: 0.8rem;
        color: #2d3748;
    }
    .task-content p {
        color: #6b7280;
        margin-bottom: 1.5rem;
        font-size: 0.95rem;
        line-height: 1.6;
        flex-grow: 1;
    }
    .task-meta {
        display: flex;
        gap: 1rem;
        margin-bottom: 1.5rem;
        font-size: 0.85rem;
        flex-wrap: wrap;
    }
    .meta-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: #6b7280;
    }
    .meta-item i {
        color: var(--primary);
    }
    .beneficiaries-count {
        display: inline-flex;
        align-items: center;
        background: #f0f9ff;
        color: var(--primary);
        padding: 0.3rem 0.8rem;
        border-radius: 50px;
        font-size: 0.85rem;
        font-weight: 600;
    }
    .beneficiaries-count i {
        margin-right: 0.3rem;
    }
    .linked-cause {
        display: inline-flex;
        align-items: center;
        background: #f0f0ff;
        color: var(--primary);
        padding: 0.3rem 0.8rem;
        border-radius: 50px;
        font-size: 0.85rem;
        font-weight: 600;
        margin-bottom: 1rem;
    }
    .linked-cause img {
      width: 22px;
      height: 22px;
      object-fit: cover;
      border-radius: 50%;
      border: 1px solid #e5e7eb;
      margin-right: 0.4em;
    }
    .task-progress {
        margin-bottom: 1.5rem;
    }
    .progress-bar {
        height: 8px;
        background: var(--gray);
        border-radius: 4px;
        overflow: hidden;
        margin-bottom: 0.5rem;
    }
    .progress-fill {
        height: 100%;
        background: var(--primary);
        border-radius: 4px;
    }
    .progress-info {
        display: flex;
        justify-content: space-between;
        font-size: 0.9rem;
        color: #6b7280;
    }
    .task-actions {
        display: flex;
        gap: 0.8rem;
    }
    .task-actions .btn {
        flex: 1;
        text-align: center;
        justify-content: center;
    }
    .btn-accent {
        background: var(--accent);
        color: white;
    }
    .btn-accent:hover {
        background: var(--accent-dark);
        transform: translateY(-2px);
    }
    @media (max-width: 900px) {
        .main-container {
            padding: 1.2rem 0.5rem;
        }
    }
    @media (max-width: 768px) {
        .tasks-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 1rem;
        }
        .tasks-grid {
            grid-template-columns: 1fr;
        }
        .task-actions {
            flex-direction: column;
        }
    }
    /* NUEVOS ESTILOS PARA LA SECCIÓN DE INTRODUCCIÓN A LAS TAREAS */
    .tasks-intro {
      background: linear-gradient(135deg, #f0f9ff 0%, #e6f0fa 100%);
      border-radius: 12px;
      padding: 2rem;
      margin-bottom: 2rem;
      border: 1px solid #e2e8f0;
    }
    .tasks-intro h2 {
      font-size: 1.8rem;
      color: #166088;
      margin-bottom: 1rem;
      display: flex;
      align-items: center;
      gap: 0.8rem;
    }
    .tasks-intro h2 i {
      color: #4fc3a1;
    }
    .tasks-intro p {
      color: #4a6fa5;
      font-size: 1.1rem;
      line-height: 1.6;
    }
  </style>
{% endblock %}

{% block content %}
  <!-- Modal para usuarios no logueados -->
  <div class="modal-bg" id="loginModal">
    <div class="modal-content">
      <h3>Para crear una tarea</h3>
      <p>Debes ser un usuario registrado. ¿Deseas iniciar sesión o registrarte ahora?</p>
      <div class="modal-buttons">
        <a href="/login?return=/tasks" class="btn btn-primary">Iniciar Sesión</a>
        <a href="/register?return=/tasks" class="btn btn-outline">Registrarse</a>
        <button id="cancelModal" class="btn">Cancelar</button>
      </div>
    </div>
  </div>

  <!-- Modal emergente para crear tarea -->
  <div id="createTaskModal" class="modal-bg">
    <div class="modal-content">
      <button class="close-modal" id="closeCreateTaskModal" title="Cerrar">&times;</button>
      <div class="create-task-title">
        <i class="fas fa-plus-circle"></i> Crear Nueva Tarea Solidaria
      </div>
      <form class="task-form" id="taskForm" autocomplete="off">
        <div class="form-group">
          <label for="title">Título de la tarea</label>
          <input type="text" id="title" name="title" placeholder="Ej: Limpieza de playa" required>
        </div>
        <div class="form-group">
          <label for="photo">Foto principal</label>
          <input type="file" id="photo" name="photo" accept="image/*">
          <img id="previewImg" class="preview-img" alt="Vista previa de la foto" style="display:none;">
        </div>
        <div class="form-group">
          <label for="description">Descripción</label>
          <textarea id="description" name="description" placeholder="Describe la tarea, qué se necesita y cómo pueden ayudar los voluntarios..." required></textarea>
        </div>
        <div class="form-group">
          <label for="cause_id">Vinculado a causa (opcional)</label>
          <select id="cause-select" name="cause_id">
            <option value="">Selecciona una causa</option>
            <!-- Las opciones se cargan dinámicamente -->
          </select>
        </div>
        <div class="form-inline-group">
          <div class="form-group">
            <label for="city">Ciudad</label>
            <input type="text" id="city" name="city" placeholder="Ej: Madrid" required>
          </div>
          <div class="form-group">
            <label for="country">País</label>
            <input type="text" id="country" name="country" placeholder="Ej: España" required>
          </div>
        </div>
        <div class="form-group">
          <label for="points">Puntos por participar</label>
          <input type="number" id="points" name="points" min="1" max="1000" value="50" required>
          <div class="points-info" id="pointsText">
            <i class="fas fa-star"></i>
            Participar en esta tarea otorgará <strong>50 puntos</strong> a cada voluntario.
          </div>
        </div>
        <div class="form-group">
          <label for="beneficiaries">Nº de beneficiarios</label>
          <input type="number" id="beneficiaries" name="beneficiaries" min="1" placeholder="Ej: 100" required>
        </div>
        <div class="form-group">
          <label for="is_urgent">
            <input type="checkbox" id="is_urgent" name="is_urgent"> Marcar como urgente
          </label>
        </div>
        <div class="form-group">
          <label for="end_date">Fecha de finalización (opcional)</label>
          <input type="date" id="end_date" name="end_date">
        </div>
        <input type="hidden" id="lat" name="lat">
        <input type="hidden" id="lng" name="lng">
        <button type="submit" class="btn btn-primary" style="margin-top:1rem;">
          <i class="fas fa-paper-plane"></i> Crear Tarea
        </button>
      </form>
      <div class="after-create" id="afterCreate" style="display:none;">
        <h3>¡Tarea creada con éxito!</h3>
        <p>¿Quieres ver todas las tareas disponibles o crear otra?</p>
        <a href="/tasks" class="btn btn-accent">
          <i class="fas fa-tasks"></i> Ver todas las tareas
        </a>
        <br>
        <a href="#" id="createAnother" class="btn btn-outline" style="margin-top:1rem;">
          <i class="fas fa-plus"></i> Crear otra tarea
        </a>
      </div>
    </div>
  </div>

  <!-- Modal de Tarea -->
  <div id="taskModal" class="modal" style="display:none; position:fixed; z-index:9999; left:0; top:0; width:100vw; height:100vh; background:rgba(0,0,0,0.35); align-items:center; justify-content:center;">
    <div class="modal-content" style="background:#fff; border-radius:18px; max-width:800px; width:95vw; padding:2rem; box-shadow:0 8px 32px rgba(74,111,165,0.13); position:relative; max-height:90vh; overflow-y:auto;">
      <button id="closeTaskModal" style="position:absolute; top:1.5rem; right:1.5rem; background:none; border:none; font-size:1.8rem; color:#6b7280; cursor:pointer; transition:color 0.2s;" onmouseover="this.style.color='#4a6fa5'" onmouseout="this.style.color='#6b7280'">&times;</button>
      <div id="taskModalBody" style="padding:0.5rem;">
        <!-- Contenido dinámico -->
      </div>
    </div>
  </div>

  <!-- Modal de Causa (reutilizable) -->
  <div id="causeModal" class="modal-bg">
    <div class="modal-content" id="causeModalContent" style="max-width:500px;">
      <button class="close-modal" id="closeCauseModal" title="Cerrar">&times;</button>
      <div id="causeModalBody"></div>
    </div>
  </div>

  <!-- Sección de introducción a las tareas solidarias (espaciado igual que retos y volunteering) -->
  <div class="main-container">
    <div class="tasks-intro">
      <div class="tasks-intro-content">
        <h2>
          <i class="fas fa-list-check"></i>
          ¡Haz tareas solidarias y suma impacto real!
        </h2>
        <p>
          Participa en tareas, ayuda a organizaciones y personas, gana puntos de impacto y desbloquea logros. Cada tarea completada es un paso más hacia un mundo mejor. ¡Tu acción cuenta!
        </p>
      </div>
    </div>
  </div>

  <!-- Contenido principal de la página de tareas -->
  <div class="main-container">
    <div class="tasks-header">
      <h1>Tareas Solidarias</h1>
      <a href="#" id="create-task-btn" class="btn btn-primary">
        <i class="fas fa-plus"></i> Crear Tarea
      </a>
    </div>
    <div class="tasks-search">
      <input type="text" id="search-input" placeholder="Buscar por título, país, descripción...">
      <i class="fas fa-search" style="color:#4a6fa5;"></i>
    </div>
    <div class="tabs">
      <button class="tab active" data-filter="all">Todas</button>
      <button class="tab" data-filter="education">Educación</button>
      <button class="tab" data-filter="health">Salud</button>
      <button class="tab" data-filter="environment">Medio Ambiente</button>
      <button class="tab" data-filter="animals">Animales</button>
      <button class="tab" data-filter="community">Comunidad</button>
    </div>
    <div class="tasks-grid" id="tasksList">
      <!-- Las tareas se cargarán dinámicamente desde Supabase -->
    </div>
  </div>
{% endblock %}

{% block scripts %}
{{ super() }}
<script src="https://cdn.jsdelivr.net/npm/choices.js/public/assets/scripts/choices.min.js"></script>
<script>
let currentFilter = "all";
let causeChoices = null;

document.addEventListener('DOMContentLoaded', async function() {
  // Abrir modal de crear tarea
  document.getElementById('create-task-btn').onclick = async function(e) {
    e.preventDefault();
    const { data: { session } } = await supabase.auth.getSession();
    if (session?.user) {
      await loadCausesForSelect();
      document.getElementById('createTaskModal').classList.add('active');
      document.body.style.overflow = 'hidden';
    } else {
      document.getElementById('loginModal').classList.add('active');
    }
  };

  // Cerrar modal de crear tarea
  document.getElementById('closeCreateTaskModal').onclick = function() {
    document.getElementById('createTaskModal').classList.remove('active');
    document.body.style.overflow = '';
    document.getElementById('taskForm').reset();
    document.getElementById('previewImg').style.display = 'none';
    document.getElementById('taskForm').style.display = 'block';
    document.getElementById('afterCreate').style.display = 'none';
  };

  // Cerrar modal al hacer click fuera del contenido
  document.getElementById('createTaskModal').onclick = function(e) {
    if (e.target === this) {
      this.classList.remove('active');
      document.body.style.overflow = '';
      document.getElementById('taskForm').style.display = 'block';
      document.getElementById('afterCreate').style.display = 'none';
    }
  };

  // Modal login
  document.getElementById('cancelModal').onclick = function() {
    document.getElementById('loginModal').classList.remove('active');
  };
  document.getElementById('loginModal').onclick = function(e) {
    if (e.target === this) this.classList.remove('active');
  };

  // Tabs
  document.querySelectorAll('.tab').forEach(tab => {
    tab.addEventListener('click', function() {
      document.querySelector('.tab.active').classList.remove('active');
      this.classList.add('active');
      loadTasksFromSupabase(this.getAttribute('data-filter'));
    });
  });

  // Búsqueda
  document.getElementById('search-input').addEventListener('input', function() {
    loadTasksFromSupabase(currentFilter, this.value);
  });

  // Vista previa de imagen
  document.getElementById('photo').addEventListener('change', function(e) {
    const file = e.target.files[0];
    const preview = document.getElementById('previewImg');
    if (file) {
      const reader = new FileReader();
      reader.onload = function(evt) {
        preview.src = evt.target.result;
        preview.style.display = 'block';
      };
      reader.readAsDataURL(file);
    } else {
      preview.src = '';
      preview.style.display = 'none';
    }
  });

  // Actualizar texto de puntos
  document.getElementById('points').addEventListener('input', function() {
    const val = this.value || 0;
    document.getElementById('pointsText').innerHTML = `<i class="fas fa-star"></i> Participar en esta tarea otorgará <strong>${val} puntos</strong> a cada voluntario.`;
  });

  // Crear otra tarea tras éxito
  document.getElementById('createAnother').onclick = function(e) {
    e.preventDefault();
    document.getElementById('taskForm').reset();
    document.getElementById('previewImg').style.display = 'none';
    document.getElementById('taskForm').style.display = 'block';
    document.getElementById('afterCreate').style.display = 'none';
  };

  // Envío del formulario
  document.getElementById('taskForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    // Recoge los datos del formulario
    const title = document.getElementById('title').value.trim();
    const description = document.getElementById('description').value.trim();
    const city = document.getElementById('city').value.trim();
    const country = document.getElementById('country').value.trim();
    const points = parseInt(document.getElementById('points').value, 10);
    const beneficiaries = parseInt(document.getElementById('beneficiaries').value, 10);
    const is_urgent = document.getElementById('is_urgent').checked;
    const cause_id = document.getElementById('cause-select').value || null;
    const photoFile = document.getElementById('photo').files[0];
    let photo_url = null;
    const end_date_input = document.getElementById('end_date').value;
    // Si el usuario no pone fecha, envía null
    const end_date = end_date_input ? end_date_input : null;

    // Sube la foto a Supabase Storage si existe
    if (photoFile) {
      const fileExt = photoFile.name.split('.').pop();
      const fileName = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}.${fileExt}`;
      const filePath = `public/${fileName}`;
      const { error: uploadError } = await supabase.storage
        .from('tasks')
        .upload(filePath, photoFile, { upsert: true });
      if (uploadError) {
        alert('Error subiendo la foto: ' + uploadError.message);
        return;
      }
      const { data } = supabase.storage.from('tasks').getPublicUrl(filePath);
      photo_url = data.publicUrl;
    }

    // Guarda la tarea en la tabla
    const { data: { session } } = await supabase.auth.getSession();
    const user = session?.user;
    if (!user) {
      alert('Debes iniciar sesión para crear una tarea.');
      return;
    }

    const lat = document.getElementById('lat').value;
    const lng = document.getElementById('lng').value;

    const datosTarea = {
      title,
      description,
      city,
      country,
      points,
      beneficiaries,
      is_urgent,
      photo_url,
      participants: 0,
      cause_id,
      type: 'tarea',
      lat: lat ? parseFloat(lat) : null,
      lng: lng ? parseFloat(lng) : null,
      end_date
    };

    const { data: newTask, error: taskError } = await supabase
      .from('tasks')
      .insert([{ ...datosTarea, user_id: user.id }])
      .select()
      .single();

    if (!taskError && newTask) {
      await supabase
        .from('task_members')
        .insert([{ task_id: newTask.id, user_id: user.id, role: 'founder', status: 'active' }]);
    }

    document.getElementById('taskForm').style.display = 'none';
    document.getElementById('afterCreate').style.display = 'block';
    loadTasksFromSupabase();
  });

  // Cargar tareas al iniciar
  await loadTasksFromSupabase();
});

async function loadTasksFromSupabase(filter = "all", searchTerm = "") {
  currentFilter = filter;
  let query = supabase
    .from('tasks')
    .select('*')
    .order('created_at', { ascending: false });

  if (filter !== "all") {
    query = query.eq('category', filter);
  }
  if (searchTerm && searchTerm.trim() !== "") {
    query = query.or(`title.ilike.%${searchTerm}%,description.ilike.%${searchTerm}%,city.ilike.%${searchTerm}%,country.ilike.%${searchTerm}%`);
  }
  const { data: tasks, error } = await query;
  const tasksList = document.getElementById('tasksList');
  if (error) {
    tasksList.innerHTML = '<div style="color:#e53e3e;text-align:center;">Error al cargar las tareas.</div>';
    return;
  }
  tasksList.innerHTML = '';
  if (!tasks || tasks.length === 0) {
    tasksList.innerHTML = '<div style="color:#6b7280;text-align:center;padding:2rem;grid-column:1/-1;">No se encontraron tareas.</div>';
    return;
  }
  
  // 1. Carga todas las causas una sola vez antes de renderizar las tareas
  const { data: causes } = await supabase.from('causes').select('id, title, photo_url');
  const causesMap = {};
  if (causes) {
    causes.forEach(c => causesMap[c.id] = c);
  }

  // 1. Obtén el usuario actual UNA SOLA VEZ
  const { data: { session } } = await supabase.auth.getSession();
  const userId = session?.user?.id;

  // 2. Obtén los task_ids donde el usuario ya participa UNA SOLA VEZ
  let userTaskIds = [];
  if (userId) {
    const { data: memberships } = await supabase
      .from('task_members')
      .select('task_id')
      .eq('user_id', userId);
    userTaskIds = memberships ? memberships.map(m => m.task_id) : [];
  }

  // Guardar las tareas en una variable global para acceder desde el modal
  window.tasks = tasks;
  
  for (const task of tasks) {
    const urgentBadge = task.is_urgent ? `<div class="task-badge urgent"><i class="fas fa-exclamation-circle"></i> Urgente</div>` : "";
    const pointsBadge = `<div class="task-badge points"><i class="fas fa-star"></i> +${task.points || 0} pts</div>`;
    const location = task.city && task.country ? `${task.city}, ${task.country}` : "";
    let causeHtml = '';
    if (task.cause_id && causesMap[task.cause_id]) {
      const cause = causesMap[task.cause_id];
      causeHtml = `
        <div class="linked-cause" style="display:flex;align-items:center;gap:0.5rem;">
          <i class="fas fa-link" style="color:var(--primary);"></i>
          <img src="${cause.photo_url || '/img/causa-default.jpg'}" alt="${cause.title}" style="width:22px;height:22px;object-fit:cover;border-radius:50%;border:1px solid #e5e7eb;">
          <span style="color:var(--primary);font-weight:600;">${cause.title}</span>
        </div>
      `;
    }
    // ¿El usuario ya participa?
    const isParticipating = userTaskIds.includes(task.id);

    // Renderiza el botón según corresponda
    const participateBtn = isParticipating
      ? `<button class="btn btn-accent participate-btn" data-task-id="${task.id}" disabled style="opacity:0.7;cursor:not-allowed;">Participando</button>`
      : `<button class="btn btn-accent participate-btn" data-task-id="${task.id}">Participar</button>`;

    const card = document.createElement('div');
    card.className = 'task-card';
    card.innerHTML = `
      <div class="task-image">
        <img src="${task.photo_url || '/img/task-default.jpg'}" alt="${task.title}" onerror="this.src='/img/task-default.jpg'">
        ${urgentBadge}
        ${pointsBadge}
      </div>
      <div class="task-content">
        <h3>${task.title}</h3>
        <p>${task.description.substring(0, 100)}${task.description.length > 100 ? '...' : ''}</p>
        ${causeHtml}
        <div class="task-meta">
          <div class="meta-item"><i class="fas fa-map-marker-alt"></i> ${location}</div>
          <div class="meta-item"><i class="fas fa-users"></i> ${task.participants || 0} participantes</div>
          <div class="beneficiaries-count">
            <i class="fas fa-heart"></i> Beneficia a ${task.beneficiaries || 0} personas
          </div>
        </div>
        <div class="task-progress">
          <div class="progress-bar">
            <div class="progress-fill" style="width: ${Math.min(Math.round((task.participants / task.beneficiaries) * 100), 100)}%"></div>
          </div>
          <div class="progress-info">
            <span>${task.participants || 0} participantes</span>
            <span>Meta: ${task.beneficiaries || 0}</span>
          </div>
        </div>
        <div class="task-actions">
          <button class="btn btn-primary view-task-btn" data-task-id="${task.id}">Ver más</button>
          ${participateBtn}
        </div>
      </div>
    `;
    tasksList.appendChild(card);
  }
  
  // Agregar event listeners para los botones de ver más
  document.querySelectorAll('.view-task-btn').forEach(btn => {
    btn.addEventListener('click', function(e) {
      e.preventDefault();
      const taskId = this.getAttribute('data-task-id');
      showTaskModal(taskId);
    });
  });
  
  // Agregar event listeners para los botones de participar
  document.querySelectorAll('.participate-btn').forEach(btn => {
    btn.addEventListener('click', function(e) {
      e.preventDefault();
      const taskId = this.getAttribute('data-task-id');
      participateInTask(taskId);
    });
  });
}

// Función para mostrar el modal con los detalles de la tarea
async function showTaskModal(taskId) {
  const { data: task, error } = await supabase
    .from('tasks')
    .select('*')
    .eq('id', taskId)
    .single();

  if (error) {
    alert('Error al cargar la tarea: ' + error.message);
    return;
  }

  // Si tu tarea tiene un campo "goal" y "raised" como en causas, usa esos para la barra de progreso
  // Si no, puedes dejarlo en 0/goal o adaptar según tu modelo
  const progress = task.goal
    ? Math.min(Math.round((task.raised / task.goal) * 100), 100)
    : 0;

  const createdDate = new Date(task.created_at).toLocaleDateString('es-ES', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });

  const endDate = task.end_date ? new Date(task.end_date).toLocaleDateString('es-ES', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  }) : 'Sin fecha límite';

  // Obtener información de la causa vinculada si existe
  let causeInfo = '';
  if (task.cause_id) {
    const { data: cause } = await supabase
      .from('causes')
      .select('title, photo_url')
      .eq('id', task.cause_id)
      .single();
    
    if (cause) {
      causeInfo = `
        <div class="linked-cause-section" style="margin-bottom:1.5rem;">
          <h3 class="content-title" style="font-size:1.2rem; font-weight:600; color:var(--primary); margin-bottom:0.9rem; display:flex; align-items:center; gap:0.7rem;">
            <i class="fas fa-link"></i> Vinculado a la causa
          </h3>
          <div style="display:flex; align-items:center; gap:1rem; background:#f8fafc; padding:1rem; border-radius:8px; border:1px solid #e5e7eb;">
            <img src="${cause.photo_url || '/img/causa-default.jpg'}" 
                 alt="Imagen de la causa vinculada"
                 style="width:80px; height:80px; object-fit:cover; border-radius:6px;"
                 onerror="this.src='/img/causa-default.jpg'">
            <div>
              <strong style="color:var(--primary);">${cause.title}</strong>
              <p style="margin-top:0.3rem; font-size:0.9rem; color:#6b7280;">Causa #${task.cause_id}</p>
              <a href="/causes/${task.cause_id}" class="btn btn-sm" style="margin-top:0.5rem; padding:0.3rem 0.8rem; font-size:0.85rem;"
                 onclick="showCauseModal('${task.cause_id}'); return false;">
                <i class="fas fa-external-link-alt"></i> Ver causa
              </a>
            </div>
          </div>
        </div>
      `;
    }
  }

  // Obtener participantes (user_id, username, photo_url)
  const { data: members, error: membersError } = await supabase
    .from('task_members')
    .select('user_id, profiles(username, photo_url)')
    .eq('task_id', taskId);

  let participantsHtml = '';
  if (members && members.length > 0) {
    participantsHtml = `
      <div class="content-section" style="margin-bottom:2.2rem;">
        <h3 class="content-title" style="font-size:1.2rem; font-weight:600; color:var(--primary); margin-bottom:0.9rem; display:flex; align-items:center; gap:0.7rem;">
          <i class="fas fa-users"></i> Participantes
        </h3>
        <div style="display:flex; flex-wrap:wrap; gap:1rem;">
          ${members.map(m => `
            <div style="display:flex; align-items:center; gap:0.6rem; background:#f8fafc; border-radius:8px; padding:0.5rem 1rem; border:1px solid #e5e7eb;">
              <img src="${m.profiles?.photo_url || '/img/avatar-default.png'}" alt="${m.profiles?.username || 'Usuario'}" style="width:36px; height:36px; border-radius:50%; object-fit:cover; border:1px solid #e5e7eb;">
              <span style="font-weight:600; color:var(--primary);">${m.profiles?.username || 'Usuario'}</span>
            </div>
          `).join('')}
        </div>
      </div>
    `;
  } else {
    participantsHtml = `
      <div class="content-section" style="margin-bottom:2.2rem;">
        <h3 class="content-title" style="font-size:1.2rem; font-weight:600; color:var(--primary); margin-bottom:0.9rem; display:flex; align-items:center; gap:0.7rem;">
          <i class="fas fa-users"></i> Participantes
        </h3>
        <div style="color:#6b7280;">Aún no hay participantes en esta tarea.</div>
      </div>
    `;
  }

  document.getElementById('taskModalBody').innerHTML = `
    <div class="modal-task-container">
      <!-- Título principal centrado, más espacio abajo -->
      <h1 class="modal-task-title" style="font-size:2rem; font-weight:800; color:var(--primary); margin-bottom:2.7rem; text-align:center; width:100%;">${task.title}</h1>
      <div class="modal-task-header" style="display:flex; gap:2.5rem; margin-bottom:2.7rem;">
        <div class="modal-task-image-wrapper" style="flex:1; min-width:320px; height:300px; border-radius:12px; overflow:hidden; position:relative; box-shadow:0 4px 12px rgba(0,0,0,0.08);">
          <!-- Badge arriba a la izquierda, verde y redondeado igual que causas -->
          <div class="modal-cause-badge" style="top:1.2rem; left:1.2rem; right:auto; background:var(--accent); color:white; position:absolute; border-radius:50px; padding:0.5rem 1rem; font-size:0.9rem; font-weight:600; display:flex; align-items:center; gap:0.6rem; box-shadow:0 2px 8px rgba(0,0,0,0.1); z-index:2;">
            <i class="fas fa-tasks"></i> Tarea Solidaria
          </div>
          <img class="modal-task-image" src="${task.photo_url || '/img/task-default.jpg'}" 
               alt="Imagen de la tarea ${task.title}"
               style="width:100%;height:100%;object-fit:cover;"
               onerror="this.src='/img/task-default.jpg'">
          ${task.is_urgent ? `
          <div class="modal-cause-badge urgent" style="right:1.2rem; left:auto; top:1.2rem; background:var(--urgent); color:white; border-radius:50px; padding:0.5rem 1rem; font-size:0.9rem; font-weight:600; display:flex; align-items:center; gap:0.6rem; box-shadow:0 2px 8px rgba(0,0,0,0.1); z-index:2;">
            <i class="fas fa-exclamation-circle"></i> Urgente
          </div>` : ''}
        </div>
        <!-- Info a la derecha de la foto -->
        <div class="modal-task-info" style="flex:1.5; display:flex; flex-direction:column; justify-content:flex-start;">
          <!-- Barra de progreso igual que causas -->
          <div class="modal-cause-progress-container" style="background:#f8fafc; padding:1.5rem; border-radius:12px; margin-bottom:1.5rem; border:1px solid #e5e7eb;">
            <div class="progress-bar">
              <div class="progress-fill" style="width: ${progress}%"></div>
            </div>
            <div class="progress-info">
              <span>${progress}% completado</span>
              <span>${task.raised || 0} € de ${task.goal || 0} €</span>
            </div>
          </div>
          <!-- Meta compacta en dos columnas -->
          <div class="modal-task-meta-grid" style="display:grid; grid-template-columns:1fr 1fr; gap:0.7rem 1.2rem; margin-bottom:1.2rem;">
            <div class="meta-item">
              <span class="meta-icon"><i class="fas fa-map-marker-alt"></i></span>
              <span>${task.city || 'Sin ubicación'}${task.country ? ', ' + task.country : ''}</span>
            </div>
            <div class="meta-item">
              <span class="meta-icon"><i class="fas fa-users"></i></span>
              <span>${task.participants || 0} participantes</span>
            </div>
            <div class="meta-item">
              <span class="meta-icon"><i class="fas fa-heart"></i></span>
              <span>${task.beneficiaries || 0} beneficiarios</span>
            </div>
            <div class="meta-item">
              <span class="meta-icon"><i class="fas fa-calendar-alt"></i></span>
              <span>${task.end_date ? new Date(task.end_date).toLocaleDateString('es-ES', { year: 'numeric', month: 'long', day: 'numeric' }) : 'Sin fecha límite'}</span>
            </div>
          </div>
          <div class="points-notice" style="background:#f0f9ff; border-left:4px solid var(--accent); padding:0.8rem; border-radius:0 8px 8px 0; font-size:0.97rem; display:flex; align-items:center; gap:0.7rem;">
            <i class="fas fa-star" style="color: var(--accent);"></i>
            Participar en esta tarea otorgará <strong>${task.points || 20} puntos</strong> de impacto
          </div>
        </div>
      </div>
      ${causeInfo}
      <!-- Resumen y descripción debajo, con más espacio entre bloques -->
      <div class="modal-task-content" style="margin-top:0;">
        <div class="content-section" style="margin-bottom:2.2rem;">
          <h3 class="content-title" style="font-size:1.2rem; font-weight:600; color:var(--primary); margin-bottom:0.9rem; display:flex; align-items:center; gap:0.7rem;">
            <i class="fas fa-align-left"></i> Descripción
          </h3>
          <p class="content-text" style="line-height:1.7; color:#4b5563; font-size:1.05rem; margin-left:0; margin-right:0; text-align:justify;">${task.description || 'No hay descripción disponible para esta tarea.'}</p>
        </div>
        ${participantsHtml}
        <div class="content-section" style="margin-bottom:2.2rem;">
          <h3 class="content-title" style="font-size:1.2rem; font-weight:600; color:var(--primary); margin-bottom:0.9rem; display:flex; align-items:center; gap:0.7rem;">
            <i class="fas fa-info-circle"></i> Detalles adicionales
          </h3>
          <div style="display:grid; grid-template-columns:1fr 1fr; gap:1rem;">
            <div>
              <p style="font-weight:600; color:#4b5563; margin-bottom:0.3rem;">Fecha de creación</p>
              <p style="color:#6b7280;">${createdDate}</p>
            </div>
            <div>
              <p style="font-weight:600; color:#4b5563; margin-bottom:0.3rem;">Estado</p>
              <p style="color:#6b7280;">${task.is_completed ? 'Completada' : 'En progreso'}</p>
            </div>
            <div>
              <p style="font-weight:600; color:#4b5563; margin-bottom:0.3rem;">Prioridad</p>
              <p style="color:#6b7280;">${task.is_urgent ? 'Alta prioridad' : 'Prioridad normal'}</p>
            </div>
            <div>
              <p style="font-weight:600; color:#4b5563; margin-bottom:0.3rem;">Tipo</p>
              <p style="color:#6b7280;">${task.type || 'Tarea general'}</p>
            </div>
          </div>
        </div>
      </div>
      <!-- Botones abajo, con más espacio arriba -->
      <div class="task-actions" style="display:flex; gap:0.8rem; margin-top:2.2rem;">
        <button class="btn btn-primary" style="flex:1;" onclick="participateInTask('${task.id}')">
          <i class="fas fa-hand-holding-heart"></i> Participar
        </button>
        <button class="btn btn-accent" style="flex:1;" onclick="showShareOptionsTask('${task.id}')">
          <i class="fas fa-share-alt"></i> Compartir
        </button>
      </div>
      <div class="share-section" id="shareSectionTask"></div>
    </div>
  `;

  document.getElementById('taskModal').style.display = 'flex';
  document.body.style.overflow = 'hidden';
}

// Función para mostrar opciones de compartir para tareas (idéntico a causas)
function showShareOptionsTask(taskId) {
  const task = window.tasks.find(t => t.id == taskId);
  const shareSection = document.getElementById('shareSectionTask');
  shareSection.innerHTML = `
    <h3 class="share-title">
      <i class="fas fa-share-alt"></i> Ayuda a difundir esta tarea
    </h3>
    <div class="share-content">
      <p class="share-text">
        <span class="share-highlight">"${task.description ? task.description.substring(0, 120) + '...' : 'Únete a esta importante tarea solidaria'}"</span><br><br>
        Cada participante nos acerca más a la meta de ayudar a <strong>${task.beneficiaries || 0} personas</strong>.
      </p>
      <div class="share-buttons">
        <a href="#" class="share-btn share-btn-facebook" onclick="shareOnSocialTask('facebook', '${task.id}')">
          <i class="fab fa-facebook-f"></i> Facebook
        </a>
        <a href="#" class="share-btn share-btn-twitter" onclick="shareOnSocialTask('twitter', '${task.id}')">
          <i class="fab fa-twitter"></i> Twitter
        </a>
        <a href="#" class="share-btn share-btn-whatsapp" onclick="shareOnSocialTask('whatsapp', '${task.id}')">
          <i class="fab fa-whatsapp"></i> WhatsApp
        </a>
        <a href="#" class="share-btn share-btn-link" onclick="copyTaskLink('${task.id}')">
          <i class="fas fa-link"></i> Copiar enlace
        </a>
      </div>
    </div>
  `;
  shareSection.scrollIntoView({ behavior: 'smooth' });
}

// Función para compartir tareas en redes sociales
function shareOnSocialTask(platform, taskId) {
  const task = window.tasks.find(t => t.id == taskId);
  const url = `${window.location.origin}/tasks/${task.id}`;
  const text = `Únete a esta tarea: "${task.title}" - ${task.description ? task.description.substring(0, 100) + '...' : 'Ayuda a hacer la diferencia!'} ${url}`;
  let shareUrl;
  switch(platform) {
    case 'facebook':
      shareUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}&quote=${encodeURIComponent(text)}`;
      break;
    case 'twitter':
      shareUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}`;
      break;
    case 'whatsapp':
      shareUrl = `https://wa.me/?text=${encodeURIComponent(text)}`;
      break;
    default:
      return;
  }
  window.open(shareUrl, '_blank', 'width=600,height=400');
}

// Función para copiar enlace de la tarea
function copyTaskLink(taskId) {
  const url = `${window.location.origin}/tasks/${taskId}`;
  navigator.clipboard.writeText(url).then(() => {
    showNotification('¡Enlace copiado!', 'success');
  }).catch(() => {
    prompt('Por favor, copia este enlace:', url);
  });
}

// Cerrar modal y restaurar scroll
document.getElementById('closeTaskModal').addEventListener('click', function() {
  document.getElementById('taskModal').style.display = 'none';
  document.body.style.overflow = '';
});
document.getElementById('taskModal').addEventListener('click', function(e) {
  if (e.target === this) {
    this.style.display = 'none';
    document.body.style.overflow = '';
  }
});

// Ejemplo de función para participar en tarea
async function participateInTask(taskId) {
  const { data: { session } } = await supabase.auth.getSession();
  if (!session?.user) {
    document.getElementById('loginModal').classList.add('active');
    return;
  }
  const userId = session.user.id;

  // Intenta insertar como miembro (único por usuario y tarea)
  const { error } = await supabase
    .from('task_members')
    .insert([{ task_id: taskId, user_id: userId, role: 'member', status: 'active' }]);

  if (error) {
    if (error.code === '23505' || error.status === 409) {
      alert('Ya estás participando en esta tarea.');
    } else {
      alert('Error al participar: ' + error.message);
    }
    return;
  }

  // Actualiza el botón inmediatamente
  const btn = document.querySelector(`.participate-btn[data-task-id="${taskId}"]`);
  if (btn) {
    btn.textContent = "Participando";
    btn.disabled = true;
    btn.style.opacity = "0.7";
    btn.style.cursor = "not-allowed";
  }

  // Actualiza el número de participantes en la tarjeta
  setTimeout(async () => {
    const { data: task, error: fetchError } = await supabase
      .from('tasks')
      .select('participants')
      .eq('id', taskId)
      .single();

    if (!fetchError && task) {
      const card = btn ? btn.closest('.task-card') : null;
      if (card) {
        const meta = card.querySelector('.meta-item i.fa-users').parentElement;
        meta.innerHTML = `<i class="fas fa-users"></i> ${task.participants} participantes`;
        const progressInfo = card.querySelector('.progress-info span');
        progressInfo.textContent = `${task.participants} participantes`;
        const beneficiaries = parseInt(card.querySelector('.beneficiaries-count').textContent.match(/\d+/)[0]);
        const progressFill = card.querySelector('.progress-fill');
        const percent = beneficiaries ? Math.min(Math.round((task.participants / beneficiaries) * 100), 100) : 0;
        progressFill.style.width = percent + '%';
      }
    }
  }, 400);
}

// NUEVA FUNCIÓN PARA UNIRSE A UNA TAREA (SIN RELOAD)
async function joinTask(taskId) {
  const { data: { session } } = await supabase.auth.getSession();
  if (!session?.user) {
    alert('Debes iniciar sesión para participar.');
    return;
  }
  const userId = session.user.id;
  await supabase
    .from('task_members')
    .insert([{ task_id: taskId, user_id: userId, role: 'member', status: 'active' }]);
  alert('¡Ahora participas en esta tarea!');
}

// Cargar causas para el select en el modal de crear tarea
async function loadCausesForSelect() {
  const select = document.getElementById('cause-select');
  if (!select) return;
  // Limpia las opciones actuales
  select.innerHTML = '<option value="">Selecciona una causa</option>';
  // Carga causas desde Supabase
  const { data: causes, error } = await supabase
    .from('causes')
    .select('id, title')
    .order('title', { ascending: true });
  if (error) return;
  causes.forEach(cause => {
    const option = document.createElement('option');
    option.value = cause.id;
    option.textContent = cause.title;
    select.appendChild(option);
  });
}
</script>
{% endblock %}