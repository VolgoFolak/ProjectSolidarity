{% extends "layout.njk" %}

{% block title %}Solidarity - Mis Actividades{% endblock %}

{% block head %}
  {{ super() }}
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
  <style>
    :root {
      --primary: #4a6fa5;
      --primary-dark: #166088;
      --gray: #e2e8f0;
      --white: #fff;
      --accent: #4fc3a1;
      --accent-dark: #3da58a;
      --urgent: #e53e3e;
      --challenge: #ffe066;
      --challenge-dark: #a67c00;
      --volunteering: #00bcd4;
      --volunteering-dark: #0097a7;
    }

    .main-container {
      max-width: 1200px;
      margin: 2rem auto;
      padding: 0 2rem;
    }

    .section-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;
    }

    .section-header h1 {
      font-size: 2rem;
      color: var(--primary);
      font-weight: 700;
    }

    .search-container {
      margin-bottom: 2rem;
      display: flex;
      align-items: center;
      gap: 0.7rem;
    }

    .search-container input {
      flex: 1;
      padding: 0.6rem 1.2rem;
      border-radius: 7px;
      border: 1.5px solid var(--gray);
      font-size: 1.05rem;
      outline: none;
      transition: border 0.2s;
      background: #fff;
    }

    .search-container input:focus {
      border-color: var(--primary);
    }

    .tabs {
      display: flex;
      border-bottom: 1px solid var(--gray);
      margin-bottom: 2rem;
      flex-wrap: wrap;
    }

    .tab {
      padding: 0.75rem 1.5rem;
      cursor: pointer;
      position: relative;
      font-weight: 500;
      color: #6b7280;
      background: none;
      border: none;
      outline: none;
    }

    .tab.active {
      color: var(--primary);
      font-weight: 600;
    }

    .tab.active::after {
      content: '';
      position: absolute;
      bottom: -1px;
      left: 0;
      width: 100%;
      height: 3px;
      background: var(--primary);
    }

    /* Intro y destacados */
    .activities-intro {
      background: linear-gradient(135deg, #f0f7ff 0%, #e6f0fa 100%);
      border-radius: 16px;
      padding: 2.5rem;
      margin-bottom: 3rem;
      display: flex;
      align-items: center;
      gap: 2rem;
      border: 1px solid var(--gray);
    }

    .activities-intro-icon {
      font-size: 3.5rem;
      color: var(--accent);
    }

    .activities-intro-content h2 {
      font-size: 1.8rem;
      color: var(--primary);
      margin-bottom: 0.5rem;
    }

    .activities-intro-content p {
      color: #4a5568;
      line-height: 1.6;
    }

    .activities-highlights {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
      gap: 1.5rem;
      margin-bottom: 3rem;
    }

    .highlight-card {
      background: white;
      border-radius: 10px;
      padding: 1.5rem;
      box-shadow: 0 5px 15px rgba(0,0,0,0.05);
      border: 1px solid var(--gray);
      transition: all 0.3s ease;
    }

    .highlight-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 25px rgba(0,0,0,0.1);
      border-color: var(--accent);
    }

    .highlight-icon {
      font-size: 1.8rem;
      margin-bottom: 1rem;
    }

    .highlight-icon.causes {
      color: var(--primary);
    }

    .highlight-icon.tasks {
      color: var(--accent);
    }

    .highlight-icon.challenges {
      color: var(--challenge-dark);
    }

    .highlight-icon.volunteering {
      color: var(--volunteering);
    }

    .highlight-title {
      font-size: 1.1rem;
      font-weight: 600;
      color: var(--primary);
      margin-bottom: 0.5rem;
    }

    .highlight-desc {
      color: #6b7280;
      font-size: 0.95rem;
      line-height: 1.5;
    }

    /* Grid de actividades */
    .activities-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
      gap: 2rem;
    }

    .activity-card {
      background: white;
      border-radius: 12px;
      overflow: hidden;
      box-shadow: 0 5px 15px rgba(0,0,0,0.05);
      transition: all 0.3s ease;
      border: 1px solid var(--gray);
      position: relative;
    }

    .activity-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 25px rgba(0,0,0,0.1);
    }

    .activity-card.cause {
      border-top: 4px solid var(--primary);
    }

    .activity-card.task {
      border-top: 4px solid var(--accent);
    }

    .activity-card.challenge {
      border-top: 4px solid var(--challenge);
    }

    .activity-card.volunteering {
      border-top: 4px solid var(--volunteering);
    }

    .activity-image {
      height: 180px;
      overflow: hidden;
      position: relative;
    }

    .activity-image img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: transform 0.3s ease;
    }

    .activity-card:hover .activity-image img {
      transform: scale(1.05);
    }

    .activity-badge {
      position: absolute;
      top: 1rem;
      right: 1rem;
      background: rgba(255, 255, 255, 0.9);
      padding: 0.3rem 0.8rem;
      border-radius: 50px;
      font-size: 0.8rem;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
      z-index: 2;
    }

    .activity-badge.points {
      background: var(--primary);
      color: white;
      left: 1rem;
      right: auto;
    }

    .activity-badge.urgent {
      background: var(--urgent);
      color: white;
    }

    .badge-type {
      position: absolute;
      top: 1rem;
      left: 1rem;
      color: white;
      border-radius: 50px;
      padding: 0.3rem 0.9rem;
      font-size: 0.85rem;
      font-weight: 700;
      z-index: 3;
      box-shadow: 0 2px 5px rgba(0,0,0,0.08);
    }

    .badge-type.cause {
      background: var(--primary);
    }

    .badge-type.task {
      background: var(--accent);
    }

    .badge-type.challenge {
      background: var(--challenge);
      color: var(--challenge-dark);
    }

    .badge-type.volunteering {
      background: var(--volunteering);
    }

    .activity-content {
      padding: 1.5rem;
    }

    .activity-content h3 {
      font-size: 1.3rem;
      margin-bottom: 0.8rem;
      color: #2d3748;
    }

    .activity-content p {
      color: #6b7280;
      margin-bottom: 1.5rem;
      font-size: 0.95rem;
      line-height: 1.6;
      flex-grow: 1;
    }

    .activity-meta {
      display: flex;
      gap: 1rem;
      margin-bottom: 1.5rem;
      font-size: 0.85rem;
      flex-wrap: wrap;
    }

    .meta-item {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      color: #6b7280;
    }

    .meta-item i {
      color: var(--primary);
    }

    .activity-status {
      display: inline-flex;
      align-items: center;
      background: #f0f9ff;
      color: var(--primary);
      padding: 0.3rem 0.8rem;
      border-radius: 50px;
      font-size: 0.85rem;
      font-weight: 600;
      margin-bottom: 1rem;
    }
    
    .activity-status.completed {
      background: #e6ffe6;
      color: #2c7a2c;
    }

    .activity-status.inprogress {
      background: #fff4e5;
      color: #b86e00;
    }

    .activity-status i {
      margin-right: 0.3rem;
    }

    .activity-progress {
      margin-bottom: 1.5rem;
    }

    .activity-actions {
      display: flex;
      gap: 0.8rem;
    }

    /* Barra de progreso */
    .progress-bar {
      width: 100%;
      background: var(--gray);
      border-radius: 4px;
      height: 8px;
      position: relative;
      overflow: hidden;
      margin-bottom: 0.5rem;
      box-shadow: none;
    }

    .progress-fill {
      height: 100%;
      background: var(--primary);
      border-radius: 4px;
      transition: width 0.4s cubic-bezier(.4,1,.7,1);
      color: #fff;
      font-size: 0.95em;
      font-weight: 700;
      display: flex;
      align-items: center;
      justify-content: flex-end;
      padding-right: 8px;
      box-shadow: none;
    }

    .progress-fill.cause {
      background: var(--primary);
    }

    .progress-fill.task {
      background: var(--accent);
    }

    .progress-fill.challenge {
      background: var(--challenge);
    }

    .progress-fill.volunteering {
      background: var(--volunteering);
    }

    .progress-info {
      display: flex;
      justify-content: space-between;
      font-size: 0.9rem;
      color: #6b7280;
    }

    /* Tags */
    .activity-tags {
      display: flex;
      flex-wrap: wrap;
      gap: 0.3em;
      margin-bottom: 0.7em;
    }

    .activity-tag {
      background: #e6f0fa;
      color: var(--primary);
      border-radius: 50px;
      padding: 0.22em 0.95em;
      font-size: 0.92em;
      font-weight: 600;
      margin-bottom: 0.2em;
      margin-right: 0.3em;
      transition: background 0.2s, color 0.2s;
      border: 1px solid #dbeafe;
      letter-spacing: 0.01em;
      white-space: nowrap;
    }

    /* Status badges */
    .status-badge {
      padding: 0.3rem 0.8rem;
      border-radius: 50px;
      font-size: 0.85rem;
      font-weight: 600;
      display: inline-flex;
      align-items: center;
      gap: 0.3rem;
    }

    .status-badge.completed {
      background: #e6ffe6;
      color: #2c7a2c;
    }

    .status-badge.inprogress {
      background: #fff4e5;
      color: #b86e00;
    }

    .status-badge.pending {
      background: var(--gray);
      color: #4a5568;
    }

    /* Paginaci√≥n */
    .pagination {
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 1.2rem;
      margin: 3rem 0 1.5rem 0;
    }

    .pagination .btn {
      min-width: 40px;
      height: 40px;
      border-radius: 50%;
      padding: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.15rem;
    }

    #pageInfo {
      font-weight: 600;
      color: var(--primary);
      font-size: 1.1rem;
      min-width: 38px;
      text-align: center;
      letter-spacing: 0.03em;
    }

    /* Modal de detalle de actividad */
    .activity-modal {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.5);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1000;
      opacity: 0;
      visibility: hidden;
      transition: all 0.3s;
    }

    .activity-modal.active {
      opacity: 1;
      visibility: visible;
    }

    .activity-modal-content {
      background: white;
      border-radius: 12px;
      width: 90%;
      max-width: 800px;
      max-height: 90vh;
      overflow-y: auto;
      padding: 2rem;
      box-shadow: 0 5px 20px rgba(0,0,0,0.2);
      position: relative;
    }

    .close-activity-modal {
      position: absolute;
      top: 1rem;
      right: 1rem;
      background: none;
      border: none;
      font-size: 1.5rem;
      cursor: pointer;
      color: #6b7280;
    }

    /* Botones y acciones */
    .btn {
      padding: 0.8rem 1.5rem;
      border-radius: 12px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s;
      border: none;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
    }

    .btn-primary {
      background: var(--primary);
      color: white;
    }

    .btn-primary:hover {
      background: var(--primary-dark);
      transform: translateY(-2px);
    }

    .btn-accent {
      background: var(--accent);
      color: white;
    }

    .btn-accent:hover {
      background: var(--accent-dark);
      transform: translateY(-2px);
    }

    .btn-outline {
      background: transparent;
      color: var(--primary);
      border: 1px solid var(--primary);
    }

    .btn-outline:hover {
      background: rgba(74, 111, 165, 0.1);
      transform: translateY(-2px);
    }

    .btn-warning {
      background: var(--challenge);
      color: var(--challenge-dark);
    }

    .btn-warning:hover {
      background: #ffda44;
      transform: translateY(-2px);
    }

    .btn-info {
      background: var(--volunteering);
      color: white;
    }

    .btn-info:hover {
      background: var(--volunteering-dark);
      transform: translateY(-2px);
    }

    /* Responsive */
    @media (max-width: 768px) {
      .activities-intro {
        flex-direction: column;
        text-align: center;
        padding: 1.5rem;
      }

      .activities-highlights {
        grid-template-columns: 1fr;
      }

      .activity-card {
        margin-bottom: 1.5rem;
      }

      .activities-grid {
        grid-template-columns: 1fr;
      }

      .activity-actions {
        flex-direction: column;
      }
    }
  </style>
{% endblock %}

{% block content %}
  <!-- Modal de detalle de actividad -->
  <div class="activity-modal" id="activityModal">
    <div class="activity-modal-content">
      <button class="close-activity-modal" id="closeActivityModal">&times;</button>
      <div id="activityModalBody">
        <!-- Contenido din√°mico -->
      </div>
    </div>
  </div>

  <!-- Contenido principal -->
  <div class="main-container">
    <!-- Secci√≥n introductoria -->
    <div class="activities-intro">
      <div class="activities-intro-icon">
        <i class="fas fa-hand-holding-heart"></i>
      </div>
      <div class="activities-intro-content">
        <h2>Mis Actividades</h2>
        <p>Aqu√≠ puedes ver y gestionar todas tus actividades solidarias: causas que apoyas, tareas en las que participas, retos que has lanzado o aceptado, y voluntariados donde colaboras.</p>
      </div>
    </div>
    
    <!-- Destacados / Estad√≠sticas -->
    <div class="activities-highlights">
      <div class="highlight-card">
        <div class="highlight-icon causes"><i class="fas fa-heart"></i></div>
        <div class="highlight-title">Mis Causas</div>
        <div class="highlight-desc">Causas solidarias que has creado o a las que te has unido para generar un impacto positivo.</div>
      </div>
      <div class="highlight-card">
        <div class="highlight-icon tasks"><i class="fas fa-tasks"></i></div>
        <div class="highlight-title">Mis Tareas</div>
        <div class="highlight-desc">Tareas espec√≠ficas que has creado o aceptado para ayudar de manera concreta a una causa.</div>
      </div>
      <div class="highlight-card">
        <div class="highlight-icon challenges"><i class="fas fa-trophy"></i></div>
        <div class="highlight-title">Mis Retos</div>
        <div class="highlight-desc">Desaf√≠os personales o grupales que has lanzado o aceptado para recaudar fondos o concienciar.</div>
      </div>
      <div class="highlight-card">
        <div class="highlight-icon volunteering"><i class="fas fa-hands-helping"></i></div>
        <div class="highlight-title">Mis Voluntariados</div>
        <div class="highlight-desc">Acciones de voluntariado en las que participas donando tu tiempo y habilidades.</div>
      </div>
    </div>
    
    <!-- Cabecera con b√∫squeda -->
    <div class="section-header">
      <h1>Tus Actividades Solidarias</h1>
    </div>
    
    <div class="search-container">
      <input type="text" id="search-input" placeholder="Buscar entre tus actividades...">
      <i class="fas fa-search" style="color:#4a6fa5;"></i>
    </div>
    
    <!-- Tabs para filtrar -->
    <div class="tabs">
      <button class="tab active" data-filter="all">Todas</button>
      <button class="tab" data-filter="cause">Causas</button>
      <button class="tab" data-filter="task">Tareas</button>
      <button class="tab" data-filter="challenge">Retos</button>
      <button class="tab" data-filter="volunteering">Voluntariados</button>
      <button class="tab" data-filter="created">Creadas por m√≠</button>
      <button class="tab" data-filter="completed">Completadas</button>
    </div>
    
    <!-- Grid de actividades -->
    <div class="activities-grid" id="activitiesGrid">
      <!-- Las actividades se cargar√°n aqu√≠ din√°micamente -->
    </div>
    
    <!-- Paginaci√≥n -->
    <div class="pagination" id="pagination">
      <button id="prevPage" class="btn btn-outline" disabled>
        <i class="fas fa-chevron-left"></i>
      </button>
      <span id="pageInfo">1</span>
      <button id="nextPage" class="btn btn-outline" disabled>
        <i class="fas fa-chevron-right"></i>
      </button>
    </div>
  </div>
{% endblock %}

{% block scripts %}
  {{ super() }}
  <script>
    document.addEventListener('DOMContentLoaded', async function() {
      let currentPage = 1;
      const itemsPerPage = 9;
      let allActivities = [];
      let filteredActivities = [];
      let currentActivity = null;

      // 1. Obtener usuario actual
      const { data: { session } } = await supabase.auth.getSession();
      if (!session?.user) {
        window.location.href = '/login?return=/profile/myactivities';
        return;
      }
      const userId = session.user.id;

      // 2. Cargar actividades del usuario
      await loadUserActivities();

      // 3. Eventos UI
      document.querySelectorAll('.tab').forEach(tab => {
        tab.addEventListener('click', function() {
          document.querySelector('.tab.active').classList.remove('active');
          this.classList.add('active');
          currentPage = 1;
          filterAndRenderActivities();
        });
      });
      
      document.getElementById('search-input').addEventListener('input', function() {
        currentPage = 1;
        filterAndRenderActivities();
      });
      
      document.getElementById('prevPage').addEventListener('click', function() {
        if (currentPage > 1) { currentPage--; renderActivities(); }
      });
      
      document.getElementById('nextPage').addEventListener('click', function() {
        const totalPages = Math.ceil(filteredActivities.length / itemsPerPage);
        if (currentPage < totalPages) { currentPage++; renderActivities(); }
      });
      
      document.getElementById('closeActivityModal').addEventListener('click', function() {
        document.getElementById('activityModal').classList.remove('active');
        document.body.style.overflow = '';
      });

      // --- FUNCIONES PRINCIPALES ---

      async function loadUserActivities() {
        try {
          // 1. Consultar causas creadas y participadas
          const { data: createdCauses, error: createdCausesError } = await supabase
            .from('causes')
            .select('*')
            .eq('user_id', userId); // <--- Cambiado aqu√≠
          if (createdCausesError) throw createdCausesError;

          const { data: joinedCauses, error: joinedCausesError } = await supabase
            .from('causes_members') // <-- nombre correcto
            .select('cause_id, role, status')
            .eq('user_id', userId);
          if (joinedCausesError) throw joinedCausesError;

          let joinedCausesDetails = [];
          if (joinedCauses.length > 0) {
            const causeIds = joinedCauses.map(j => j.cause_id);
            const { data: causesDetails, error } = await supabase
              .from('causes')
              .select('*')
              .in('id', causeIds);
            if (error) throw error;
            joinedCausesDetails = causesDetails.map(cause => {
              const part = joinedCauses.find(j => j.cause_id === cause.id);
              return { ...cause, role: part.role, status: part.status };
            });
          }

          // 2. Consultar tareas
          const { data: createdTasks, error: createdTasksError } = await supabase
            .from('tasks')
            .select('*')
            .eq('user_id', userId); // Cambiado aqu√≠
          if (createdTasksError) throw createdTasksError;

          const { data: joinedTasks, error: joinedTasksError } = await supabase
            .from('task_members')
            .select('task_id, role, status')
            .eq('user_id', userId);
          if (joinedTasksError) throw joinedTasksError;

          let joinedTasksDetails = [];
          if (joinedTasks.length > 0) {
            const taskIds = joinedTasks.map(j => j.task_id);
            const { data: tasksDetails, error } = await supabase
              .from('tasks')
              .select('*')
              .in('id', taskIds);
            if (error) throw error;
            joinedTasksDetails = tasksDetails.map(task => {
              const part = joinedTasks.find(j => j.task_id === task.id);
              return { ...task, role: part.role, status: part.status };
            });
          }

          // 3. Consultar retos
          const { data: createdChallenges, error: createdChallengesError } = await supabase
            .from('challenges')
            .select('*')
            .eq('creator_id', userId); // Aqu√≠ s√≠ es creator_id
          if (createdChallengesError) throw createdChallengesError;

          const { data: joinedChallenges, error: joinedChallengesError } = await supabase
            .from('challenges_members') // <-- nombre correcto
            .select('challenge_id, role, status')
            .eq('user_id', userId);
          if (joinedChallengesError) throw joinedChallengesError;

          let joinedChallengesDetails = [];
          if (joinedChallenges.length > 0) {
            const challengeIds = joinedChallenges.map(j => j.challenge_id);
            const { data: challengesDetails, error } = await supabase
              .from('challenges')
              .select('*')
              .in('id', challengeIds);
            if (error) throw error;
            joinedChallengesDetails = challengesDetails.map(challenge => {
              const part = joinedChallenges.find(j => j.challenge_id === challenge.id);
              return { ...challenge, role: part.role, status: part.status };
            });
          }

          // 4. Consultar voluntariados
          const { data: createdVolunteering, error: createdVolunteeringError } = await supabase
            .from('volunteering')
            .select('*')
            .eq('user_id', userId); // Cambiado aqu√≠
          if (createdVolunteeringError) throw createdVolunteeringError;

          const { data: joinedVolunteering, error: joinedVolunteeringError } = await supabase
            .from('volunteering_members')
            .select('volunteering_id, role, status')
            .eq('user_id', userId);
          if (joinedVolunteeringError) throw joinedVolunteeringError;

          let joinedVolunteeringDetails = [];
          if (joinedVolunteering.length > 0) {
            const volunteeringIds = joinedVolunteering.map(j => j.volunteering_id);
            const { data: volunteeringDetails, error } = await supabase
              .from('volunteering')
              .select('*')
              .in('id', volunteeringIds);
            if (error) throw error;
            joinedVolunteeringDetails = volunteeringDetails.map(vol => {
              const part = joinedVolunteering.find(j => j.volunteering_id === vol.id);
              return { ...vol, role: part.role, status: part.status };
            });
          }

          // 5. Unificar y normalizar todas las actividades
          const normalize = (arr, type, isCreator = false) =>
            arr.map(item => ({
              ...item,
              type,
              isCreator,
              status: item.status || 'in_progress'
            }));

          allActivities = [
            ...normalize(createdCauses, 'cause', true),
            ...normalize(joinedCausesDetails, 'cause', false),
            ...normalize(createdTasks, 'task', true),
            ...normalize(joinedTasksDetails, 'task', false),
            ...normalize(createdChallenges, 'challenge', true),
            ...normalize(joinedChallengesDetails, 'challenge', false),
            ...normalize(createdVolunteering, 'volunteering', true),
            ...normalize(joinedVolunteeringDetails, 'volunteering', false)
          ];

          // Eliminar duplicados (por si el usuario es creador y participante)
          const activityMap = new Map();
          allActivities.forEach(act => {
            activityMap.set(`${act.type}-${act.id}`, act);
          });
          allActivities = Array.from(activityMap.values());

          // Ordenar por fecha
          allActivities.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));

          filteredActivities = [...allActivities];
          currentPage = 1;
          renderActivities();
        } catch (error) {
          console.error('Error loading user activities:', error);
          showEmptyState();
        }
      }

      function showEmptyState() {
        const container = document.getElementById('activitiesGrid');
        container.innerHTML = `
          <div class="empty-state" style="grid-column: 1 / -1; text-align: center; padding: 3rem;">
            <i class="fas fa-clipboard-list" style="font-size: 3rem; color: #a0aec0; margin-bottom: 1rem;"></i>
            <h3 style="color: #4a5568; margin-bottom: 0.5rem;">No tienes actividades solidarias a√∫n</h3>
            <p style="color: #718096; margin-bottom: 1.5rem;">Empieza creando una nueva actividad o √∫nete a alguna existente.</p>
            <a href="/causes" class="btn btn-primary" style="margin-right: 1rem;">
              <i class="fas fa-heart"></i> Explorar causas
            </a>
            <a href="/tasks" class="btn btn-accent" style="margin-right: 1rem;">
              <i class="fas fa-tasks"></i> Ver tareas
            </a>
            <a href="/challenges" class="btn btn-warning">
              <i class="fas fa-trophy"></i> Descubrir retos
            </a>
          </div>
        `;
        document.getElementById('pagination').style.display = 'none';
      }

      function filterAndRenderActivities() {
        const activeFilter = document.querySelector('.tab.active').getAttribute('data-filter');
        const searchTerm = document.getElementById('search-input').value.toLowerCase();
        
        filteredActivities = allActivities.filter(activity => {
          // Filtrar por tipo
          if (activeFilter !== 'all') {
            if (activeFilter === 'created' && !activity.isCreator) return false;
            if (activeFilter === 'completed' && activity.status !== 'completed') return false;
            if (['cause', 'task', 'challenge', 'volunteering'].includes(activeFilter) && 
                activity.type !== activeFilter) return false;
          }
          
          // Filtrar por b√∫squeda
          if (searchTerm) {
            const matchesTitle = activity.title && activity.title.toLowerCase().includes(searchTerm);
            const matchesDesc = activity.description && activity.description.toLowerCase().includes(searchTerm);
            const matchesLocation = activity.location && activity.location.toLowerCase().includes(searchTerm);
            return matchesTitle || matchesDesc || matchesLocation;
          }
          
          return true;
        });
        
        renderActivities();
      }

      function renderActivities() {
        const startIdx = (currentPage - 1) * itemsPerPage;
        const endIdx = startIdx + itemsPerPage;
        const paginatedActivities = filteredActivities.slice(startIdx, endIdx);
        const container = document.getElementById('activitiesGrid');
        
        container.innerHTML = '';
        
        if (paginatedActivities.length === 0) {
          container.innerHTML = `
            <div class="empty-state" style="grid-column: 1 / -1; text-align: center; padding: 3rem;">
              <i class="fas fa-search" style="font-size: 3rem; color: #a0aec0; margin-bottom: 1rem;"></i>
              <h3 style="color: #4a5568; margin-bottom: 0.5rem;">No se encontraron actividades</h3>
              <p style="color: #718096;">No hay actividades que coincidan con tu b√∫squeda.</p>
            </div>
          `;
          document.getElementById('pagination').style.display = 'none';
          return;
        }
        
        document.getElementById('pagination').style.display = 'flex';

        paginatedActivities.forEach(activity => {
          // Determinar clase y etiqueta seg√∫n el tipo
          const typeClass = activity.type || 'cause';
          const typeLabels = {
            'cause': 'Causa',
            'task': 'Tarea',
            'challenge': 'Reto',
            'volunteering': 'Voluntariado'
          };
          const typeIcons = {
            'cause': 'fas fa-heart',
            'task': 'fas fa-tasks',
            'challenge': 'fas fa-trophy',
            'volunteering': 'fas fa-hands-helping'
          };
          
          // Obtener estado formateado
          const statusClass = {
            'completed': 'completed',
            'in_progress': 'inprogress',
            'pending': 'pending'
          }[activity.status || 'in_progress'];
          
          const statusLabel = {
            'completed': 'Completada',
            'in_progress': 'En progreso',
            'pending': 'Pendiente'
          }[activity.status || 'in_progress'];
          
          const statusIcon = {
            'completed': 'fas fa-check-circle',
            'in_progress': 'fas fa-clock',
            'pending': 'fas fa-hourglass'
          }[activity.status || 'in_progress'];
          
          // Progreso (podr√≠a ser real si tienes datos, por ahora un valor aleatorio para demo)
          const progress = activity.status === 'completed' ? 100 : Math.floor(Math.random() * 70) + 10;
          
          // Urgencia
          const urgentBadge = activity.is_urgent 
            ? `<div class="activity-badge urgent"><i class="fas fa-exclamation-circle"></i> Urgente</div>` 
            : '';
          
          // Puntos
          const pointsBadge = `
            <div class="activity-badge points">
              <i class="fas fa-star"></i> ${activity.points || 10} pts
            </div>
          `;
          
          // Crear la tarjeta
          const card = document.createElement('div');
          card.className = `activity-card ${typeClass}`;
          card.innerHTML = `
            <div class="activity-image">
              <div class="badge-type ${typeClass}">
                <i class="${typeIcons[typeClass]}"></i> ${typeLabels[typeClass]}
              </div>
              <img src="${activity.photo_url || getDefaultImageByType(typeClass)}" alt="${activity.title}" 
                   onerror="this.src='${getDefaultImageByType(typeClass)}'">
              ${urgentBadge}
              ${pointsBadge}
            </div>
            <div class="activity-content">
              <h3>${activity.title || 'Sin t√≠tulo'}</h3>
              <div class="activity-status ${statusClass}">
                <i class="${statusIcon}"></i> ${statusLabel}
              </div>
              <p>${activity.description ? activity.description.substring(0, 120) + (activity.description.length > 120 ? '...' : '') : 'Sin descripci√≥n'}</p>
              
              <div class="activity-meta">
                <div class="meta-item">
                  <i class="fas fa-calendar-alt"></i> 
                  ${formatDate(activity.created_at || new Date())}
                </div>
                <div class="meta-item">
                  <i class="fas fa-map-marker-alt"></i> 
                  ${activity.location || 'Online'}
                </div>
                ${activity.team_id ? `
                <div class="meta-item">
                  <i class="fas fa-users"></i> 
                  Comunidad
                </div>
                ` : ''}
              </div>
              
              <div class="activity-progress">
                <div class="progress-bar">
                  <div class="progress-fill ${typeClass}" style="width:${progress}%;">
                    ${progress > 15 ? progress + '%' : ''}
                  </div>
                </div>
                <div class="progress-info">
                  <span>${progress}% completado</span>
                  <span>${activity.isCreator ? 'Creado por ti' : 'Participante'}</span>
                </div>
              </div>
              
              <div class="activity-actions">
                <button class="btn btn-primary btn-details" data-id="${activity.id}">
                  <i class="fas fa-eye"></i> Ver detalles
                </button>
                ${activity.isCreator ? `
                <button class="btn btn-accent btn-edit" data-id="${activity.id}">
                  <i class="fas fa-edit"></i> Editar
                </button>
                ` : `
                <button class="btn btn-outline btn-leave" data-id="${activity.id}">
                  <i class="fas fa-sign-out-alt"></i> Abandonar
                </button>
                `}
              </div>
            </div>
          `;
          
          // A√±adir event listeners
          card.querySelector('.btn-details').addEventListener('click', () => {
            openActivityDetails(activity.id);
          });
          
          if (activity.isCreator) {
            card.querySelector('.btn-edit').addEventListener('click', () => {
              editActivity(activity.id);
            });
          } else {
            card.querySelector('.btn-leave').addEventListener('click', () => {
              leaveActivity(activity.id);
            });
          }
          
          container.appendChild(card);
        });
        
        updatePagination();
      }

      function updatePagination() {
        const totalPages = Math.max(1, Math.ceil(filteredActivities.length / itemsPerPage));
        document.getElementById('pageInfo').textContent = `${currentPage} / ${totalPages}`;
        document.getElementById('prevPage').disabled = currentPage <= 1;
        document.getElementById('nextPage').disabled = currentPage >= totalPages;
      }
      
      // --- FUNCIONES DE UTILIDAD ---
      
      function formatDate(dateString) {
        const date = new Date(dateString);
        return date.toLocaleDateString('es-ES', {
          day: 'numeric',
          month: 'short',
          year: 'numeric'
        });
      }
      
      function getDefaultImageByType(type) {
        const images = {
          'cause': '/img/default-cause.jpg',
          'task': '/img/default-task.jpg',
          'challenge': '/img/default-challenge.jpg',
          'volunteering': '/img/default-volunteering.jpg'
        };
        return images[type] || '/img/default-activity.jpg';
      }

      // --- FUNCIONES DE INTERACCI√ìN ---
      
      async function openActivityDetails(activityId) {
        try {
          // Obtener datos de la actividad
          const { data: activity, error } = await supabase
            .from('activities')
            .select('*')
            .eq('id', activityId)
            .single();
          
          if (error) throw error;
          
          // Determinar etiquetas y colores seg√∫n el tipo
          const typeLabels = {
            'cause': 'Causa Solidaria',
            'task': 'Tarea',
            'challenge': 'Reto',
            'volunteering': 'Voluntariado'
          };
          
          const typeColors = {
            'cause': 'var(--primary)',
            'task': 'var(--accent)',
            'challenge': 'var(--challenge)',
            'volunteering': 'var(--volunteering)'
          };
          
          // Obtener datos de la comunidad si existe
          let teamName = 'Actividad independiente';
          if (activity.team_id) {
            const { data: team } = await supabase
              .from('teams')
              .select('name')
              .eq('id', activity.team_id)
              .single();
            
            if (team) {
              teamName = team.name;
            }
          }
          
          // Obtener datos del creador
          let creatorName = 'Usuario';
          const { data: creator } = await supabase
            .from('profiles')
            .select('first_name, last_name, username')
            .eq('id', activity.creator_id)
            .single();
          
          if (creator) {
            creatorName = creator.first_name && creator.last_name 
              ? `${creator.first_name} ${creator.last_name}`
              : creator.username || 'Usuario';
          }
          
          // Construir HTML del modal
          const modalBody = document.getElementById('activityModalBody');
          modalBody.innerHTML = `
            <div style="position:relative;">
              <h2 style="font-size:2rem; color:${typeColors[activity.type] || 'var(--primary)'}; margin-bottom:1.5rem; text-align:center;">
                ${activity.title}
              </h2>
              
              <div style="display:flex; flex-wrap:wrap; gap:1.5rem; margin-bottom:2rem;">
                <div style="flex:1; min-width:300px;">
                  <div style="position:relative; border-radius:12px; overflow:hidden; height:250px;">
                    <img src="${activity.photo_url || getDefaultImageByType(activity.type)}" 
                         alt="${activity.title}"
                         style="width:100%; height:100%; object-fit:cover;"
                         onerror="this.src='${getDefaultImageByType(activity.type)}'">
                    <div style="position:absolute; top:1rem; left:1rem; background:${typeColors[activity.type] || 'var(--primary)'}; color:white; border-radius:50px; padding:0.5rem 1rem; font-size:0.9rem; font-weight:600;">
                      <i class="${activity.type === 'cause' ? 'fas fa-heart' : 
                                 activity.type === 'task' ? 'fas fa-tasks' : 
                                 activity.type === 'challenge' ? 'fas fa-trophy' : 'fas fa-hands-helping'}"></i>
                      ${typeLabels[activity.type] || 'Actividad'}
                    </div>
                    ${activity.is_urgent ? `
                    <div style="position:absolute; top:1rem; right:1rem; background:var(--urgent); color:white; border-radius:50px; padding:0.5rem 1rem; font-size:0.9rem; font-weight:600;">
                      <i class="fas fa-exclamation-circle"></i> Urgente
                    </div>
                    ` : ''}
                  </div>
                </div>
                
                <div style="flex:1; min-width:300px;">
                  <h3 style="font-size:1.3rem; color:${typeColors[activity.type] || 'var(--primary)'}; margin-bottom:1rem;">
                    Detalles
                  </h3>
                  
                  <div style="display:grid; grid-template-columns:repeat(auto-fill, minmax(150px, 1fr)); gap:1rem; margin-bottom:1.5rem;">
                    <div style="background:#f8fafc; padding:1rem; border-radius:8px; text-align:center;">
                      <div style="font-size:0.9rem; color:#6b7280; margin-bottom:0.3rem;">Estado</div>
                      <div style="font-weight:600; color:#2d3748; display:flex; align-items:center; justify-content:center; gap:0.5rem;">
                        <span class="status-badge ${activity.status === 'completed' ? 'completed' : activity.status === 'pending' ? 'pending' : 'inprogress'}">
                          <i class="fas ${activity.status === 'completed' ? 'fa-check-circle' : activity.status === 'pending' ? 'fa-hourglass' : 'fa-clock'}"></i>
                          ${activity.status === 'completed' ? 'Completada' : activity.status === 'pending' ? 'Pendiente' : 'En progreso'}
                        </span>
                      </div>
                    </div>
                    
                    <div style="background:#f8fafc; padding:1rem; border-radius:8px; text-align:center;">
                      <div style="font-size:0.9rem; color:#6b7280; margin-bottom:0.3rem;">Puntos</div>
                      <div style="font-weight:600; color:#2d3748; display:flex; align-items:center; justify-content:center; gap:0.5rem;">
                        <i class="fas fa-star" style="color:${typeColors[activity.type] || 'var(--primary)'}"></i>
                        ${activity.points || 10} puntos
                      </div>
                    </div>
                    
                    <div style="background:#f8fafc; padding:1rem; border-radius:8px; text-align:center;">
                      <div style="font-size:0.9rem; color:#6b7280; margin-bottom:0.3rem;">Creada por</div>
                      <div style="font-weight:600; color:#2d3748; display:flex; align-items:center; justify-content:center; gap:0.5rem;">
                        <i class="fas fa-user" style="color:${typeColors[activity.type] || 'var(--primary)'}"></i>
                        ${creatorName}
                      </div>
                    </div>
                    
                    <div style="background:#f8fafc; padding:1rem; border-radius:8px; text-align:center;">
                      <div style="font-size:0.9rem; color:#6b7280; margin-bottom:0.3rem;">Comunidad</div>
                      <div style="font-weight:600; color:#2d3748; display:flex; align-items:center; justify-content:center; gap:0.5rem;">
                        <i class="fas fa-users" style="color:${typeColors[activity.type] || 'var(--primary)'}"></i>
                        ${teamName}
                      </div>
                    </div>
                  </div>
                  
                  <div style="margin-bottom:1.5rem;">
                    <div style="font-size:0.9rem; color:#6b7280; margin-bottom:0.3rem;">Progreso</div>
                    <div class="progress-bar">
                      <div class="progress-fill ${activity.type}" style="width:${activity.status === 'completed' ? 100 : Math.floor(Math.random() * 70) + 10}%;">
                      </div>
                    </div>
                  </div>
                  
                  <div style="display:flex; gap:1rem; flex-wrap:wrap;">
                    <div style="flex:1;">
                      <div style="font-size:0.9rem; color:#6b7280; margin-bottom:0.3rem;">Fecha de inicio</div>
                      <div style="font-weight:600; color:#2d3748;">${formatDate(activity.created_at || new Date())}</div>
                    </div>
                    <div style="flex:1;">
                      <div style="font-size:0.9rem; color:#6b7280; margin-bottom:0.3rem;">Fecha l√≠mite</div>
                      <div style="font-weight:600; color:#2d3748;">${activity.deadline ? formatDate(activity.deadline) : 'Sin l√≠mite'}</div>
                    </div>
                  </div>
                </div>
              </div>
              
              <h3 style="font-size:1.3rem; color:${typeColors[activity.type] || 'var(--primary)'}; margin-bottom:1rem;">
                Descripci√≥n
              </h3>
              <div style="line-height:1.6; color:#4b5563; margin-bottom:2rem;">
                ${activity.description || 'No hay descripci√≥n disponible para esta actividad.'}
              </div>
              
              <div style="display:flex; gap:1rem; flex-wrap:wrap;">
                ${activity.creator_id === userId ? `
                <button class="btn btn-accent edit-activity-btn" data-id="${activity.id}" style="flex:1;">
                  <i class="fas fa-edit"></i> Editar actividad
                </button>
                ` : `
                <button class="btn btn-primary participate-btn" data-id="${activity.id}" style="flex:1;">
                  <i class="fas fa-handshake"></i> ${activity.status === 'completed' ? 'Ver detalles' : 'Participar'}
                </button>
                `}
                <button class="btn btn-outline share-btn" data-id="${activity.id}" style="flex:1;">
                  <i class="fas fa-share-alt"></i> Compartir
                </button>
              </div>
            </div>
          `;
          
          // A√±adir event listeners
          if (activity.creator_id === userId) {
            modalBody.querySelector('.edit-activity-btn').addEventListener('click', () => {
              editActivity(activity.id);
            });
          } else {
            modalBody.querySelector('.participate-btn').addEventListener('click', () => {
              participateInActivity(activity.id);
            });
          }
          
          modalBody.querySelector('.share-btn').addEventListener('click', () => {
            shareActivity(activity.id, activity.title);
          });
          
          // Mostrar modal
          document.getElementById('activityModal').classList.add('active');
          document.body.style.overflow = 'hidden';
          
        } catch (error) {
          console.error('Error loading activity details:', error);
          alert('Error al cargar los detalles de la actividad');
        }
      }
      
      async function editActivity(activityId) {
        // Aqu√≠ ir√≠a la l√≥gica para editar una actividad
        // Podr√≠a redirigir a una p√°gina de edici√≥n seg√∫n el tipo
        const activity = allActivities.find(a => a.id === activityId);
        if (!activity) return;
        
        const editUrls = {
          'cause': `/causes/edit/${activityId}`,
          'task': `/tasks/edit/${activityId}`,
          'challenge': `/challenges/edit/${activityId}`,
          'volunteering': `/volunteering/edit/${activityId}`
        };
        
        window.location.href = editUrls[activity.type] || `/activities/edit/${activityId}`;
      }
      
      async function leaveActivity(activityId) {
        if (confirm('¬øEst√°s seguro de que quieres abandonar esta actividad?')) {
          try {
            const { error } = await supabase
              .from('activity_participants')
              .delete()
              .eq('user_id', userId)
              .eq('activity_id', activityId);
            
            if (error) throw error;
            
            // Recargar para reflejar el cambio
            await loadUserActivities();
            alert('Has abandonado la actividad con √©xito.');
          } catch (error) {
            console.error('Error leaving activity:', error);
            alert('Error al abandonar la actividad: ' + error.message);
          }
        }
      }
      
      function participateInActivity(activityId) {
        // Redirigir a la p√°gina de detalles de la actividad seg√∫n su tipo
        const activity = allActivities.find(a => a.id === activityId);
        if (!activity) return;
        
        const detailUrls = {
          'cause': `/causes/${activityId}`,
          'task': `/tasks/${activityId}`,
          'challenge': `/challenges/${activityId}`,
          'volunteering': `/volunteering/${activityId}`
        };
        
        window.location.href = detailUrls[activity.type] || `/activities/${activityId}`;
      }
      
      function shareActivity(activityId, title) {
        // L√≥gica para compartir
        const shareUrl = `${window.location.origin}/activities/${activityId}`;
        const shareText = `Mira esta actividad en Solidarity: ${title}`;
        
        // Opciones de compartir
        const shareOptions = `
          <div style="margin-top:2rem; text-align:center;">
            <h3 style="margin-bottom:1rem; color:#4a6fa5;">Compartir esta actividad</h3>
            <div style="display:flex; gap:1rem; justify-content:center; margin-bottom:1rem;">
              <a href="https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(shareUrl)}" target="_blank" rel="noopener noreferrer" style="background:#3b5998; color:white; padding:0.5rem 1rem; border-radius:8px; text-decoration:none; display:flex; align-items:center; gap:0.5rem;">
                <i class="fab fa-facebook-f"></i> Facebook
              </a>
              <a href="https://twitter.com/intent/tweet?text=${encodeURIComponent(shareText)}&url=${encodeURIComponent(shareUrl)}" target="_blank" rel="noopener noreferrer" style="background:#1da1f2; color:white; padding:0.5rem 1rem; border-radius:8px; text-decoration:none; display:flex; align-items:center; gap:0.5rem;">
                <i class="fab fa-twitter"></i> Twitter
              </a>
              <a href="https://wa.me/?text=${encodeURIComponent(shareText + ' ' + shareUrl)}" target="_blank" rel="noopener noreferrer" style="background:#25d366; color:white; padding:0.5rem 1rem; border-radius:8px; text-decoration:none; display:flex; align-items:center; gap:0.5rem;">
                <i class="fab fa-whatsapp"></i> WhatsApp
              </a>
            </div>
            <div style="display:flex; gap:0.5rem; align-items:center; justify-content:center; margin-top:1rem;">
              <input type="text" value="${shareUrl}" readonly style="padding:0.5rem; border-radius:8px; border:1px solid #e2e8f0; flex:1; max-width:350px;">
              <button id="copyLinkBtn" class="btn btn-outline" style="padding:0.5rem 1rem;" onclick="navigator.clipboard.writeText('${shareUrl}').then(() => alert('¬°Enlace copiado!'))">
                <i class="fas fa-copy"></i> Copiar
              </button>
            </div>
          </div>
        `;
        
        // A√±adir opciones al modal
        document.getElementById('activityModalBody').insertAdjacentHTML('beforeend', shareOptions);
      }
    });
  </script>
{% endblock %}