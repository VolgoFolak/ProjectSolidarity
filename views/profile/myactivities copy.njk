{% extends "layout.njk" %}

{% block title %}Solidarity - Mis Actividades{% endblock %}

{% block head %}
  {{ super() }}
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
  <style>
    :root {
      --primary: #4a6fa5;
      --primary-dark: #166088;
      --gray: #e2e8f0;
      --white: #fff;
      --accent: #4fc3a1;
      --accent-dark: #3da58a;
      --urgent: #e53e3e;
      --challenge: #ffe066;
      --challenge-dark: #a67c00;
      --volunteering: #00bcd4;
      --volunteering-dark: #0097a7;
    }

    .main-container {
      max-width: 1200px;
      margin: 2rem auto;
      padding: 0 2rem;
    }

    .section-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;
    }

    .section-header h1 {
      font-size: 2rem;
      color: var(--primary);
      font-weight: 700;
    }

    .search-container {
      margin-bottom: 2rem;
      display: flex;
      align-items: center;
      gap: 0.7rem;
    }

    .search-container input {
      flex: 1;
      padding: 0.6rem 1.2rem;
      border-radius: 7px;
      border: 1.5px solid var(--gray);
      font-size: 1.05rem;
      outline: none;
      transition: border 0.2s;
      background: #fff;
    }

    .search-container input:focus {
      border-color: var(--primary);
    }

    /* --- CSS COMPLETO DE TAREAS (copiado de index.njk) --- */
    .tasks-grid, .activities-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
      gap: 2rem;
    }
    .task-card {
      background: white;
      border-radius: 12px;
      overflow: hidden;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
      transition: all 0.3s ease;
      border: 1px solid var(--gray);
      display: flex;
      flex-direction: column;
    }
    .task-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    }
    .task-image {
      height: 180px;
      overflow: hidden;
      position: relative;
    }
    .task-image img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: transform 0.3s ease;
    }
    .task-card:hover .task-image img {
      transform: scale(1.05);
    }
    .task-badge {
      position: absolute;
      top: 1rem;
      right: 1rem;
      background: rgba(255, 255, 255, 0.9);
      padding: 0.3rem 0.8rem;
      border-radius: 50px;
      font-size: 0.8rem;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }
    .task-badge.urgent {
      background: var(--urgent);
      color: white;
    }
    .task-badge.points {
      background: var(--primary);
      color: white;
      left: 1rem;
      right: auto;
    }
    .task-content {
      padding: 1.5rem;
      display: flex;
      flex-direction: column;
      flex: 1;
    }
    .task-content h3 {
      font-size: 1.3rem;
      margin-bottom: 0.8rem;
      color: #2d3748;
    }
    .task-content p {
      color: #6b7280;
      margin-bottom: 1.5rem;
      font-size: 0.95rem;
      line-height: 1.6;
      flex-grow: 1;
    }
    .task-meta {
      display: flex;
      gap: 1rem;
      margin-bottom: 1.5rem;
      font-size: 0.85rem;
      flex-wrap: wrap;
    }
    .meta-item {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      color: #6b7280;
    }
    .meta-item i {
      color: var(--primary);
    }
    .beneficiaries-count {
      display: inline-flex;
      align-items: center;
      background: #f0f9ff;
      color: var(--primary);
      padding: 0.3rem 0.8rem;
      border-radius: 50px;
      font-size: 0.85rem;
      font-weight: 600;
    }
    .beneficiaries-count i {
      margin-right: 0.3rem;
    }
    .linked-cause {
      display: inline-flex;
      align-items: center;
      background: #f0f0ff;
      color: var(--primary);
      padding: 0.3rem 0.8rem;
      border-radius: 50px;
      font-size: 0.85rem;
      font-weight: 600;
      margin-bottom: 1rem;
    }
    .linked-cause img {
      width: 22px;
      height: 22px;
      object-fit: cover;
      border-radius: 50%;
      border: 1px solid #e5e7eb;
      margin-right: 0.4em;
    }
    .task-progress {
      margin-bottom: 1.5rem;
    }
    .progress-bar {
      height: 8px;
      background: var(--gray);
      border-radius: 4px;
      overflow: hidden;
      margin-bottom: 0.5rem;
    }
    .progress-fill {
      height: 100%;
      background: var(--primary);
      border-radius: 4px;
    }
    .progress-info {
      display: flex;
      justify-content: space-between;
      font-size: 0.9rem;
      color: #6b7280;
    }
    .task-actions {
      display: flex;
      gap: 0.8rem;
    }
    .task-actions .btn {
      flex: 1;
      text-align: center;
      justify-content: center;
    }
    .btn-accent {
      background: var(--accent);
      color: white;
    }
    .btn-accent:hover {
      background: var(--accent-dark);
      transform: translateY(-2px);
    }

    /* Añade esto dentro del bloque <style> */
    .cause-actions, .task-actions, .challenge-actions, .volunteering-actions {
      display: flex;
      gap: 0.8rem;
      margin-top: auto;
    }

    .cause-actions .btn, 
    .task-actions .btn, 
    .challenge-actions .btn, 
    .volunteering-actions .btn {
      flex: 1;
      text-align: center;
      justify-content: center;
      padding: 0.8rem 1.2rem;      /* Igual que causas */
      border-radius: 50px;
      font-weight: 600;
      font-size: 1rem;             /* Igual que causas */
      display: flex;
      align-items: center;
      gap: 0.5rem;                 /* Un poco más de espacio entre icono y texto */
      transition: all 0.3s ease;
      border: none;
      cursor: pointer;
      box-shadow: 0 2px 5px rgba(0,0,0,0.08);
    }

    .cause-actions .btn:hover, 
    .task-actions .btn:hover, 
    .challenge-actions .btn:hover, 
    .volunteering-actions .btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0,0,0,0.12);
    }

    .btn-primary {
      background: var(--primary);
      color: white;
    }
    .btn-primary:hover {
      background: var(--primary-dark);
    }

    .btn-accent {
      background: var(--accent);
      color: white;
    }
    .btn-accent:hover {
      background: var(--accent-dark);
    }

    .btn-warning {
      background: var(--challenge);
      color: #333;
    }
    .btn-warning:hover {
      background: var(--challenge-dark);
      color: white;
    }

    .btn-secondary {
      background: var(--volunteering);
      color: white;
    }
    .btn-secondary:hover {
      background: var(--volunteering-dark);
    }
    /* Responsive */
    @media (max-width: 768px) {
      .activities-grid, .tasks-grid {
        grid-template-columns: 1fr;
      }
      .task-actions {
        flex-direction: column;
      }
    }

    .force-left {
      text-align: left !important;
      justify-content: flex-start !important;
      align-items: flex-start !important;
    }

    /* --- ESTILOS DEL MODAL DE ADMINISTRACIÓN --- */
    .admin-modal {
      display: none;
      position: fixed;
      z-index: 99999;
      left: 0;
      top: 0;
      width: 100vw;
      height: 100vh;
      background: rgba(0, 0, 0, 0.35);
      align-items: center;
      justify-content: center;
    }

    .admin-modal-content {
      background: white;
      border-radius: 12px;
      max-width: 700px;
      margin: auto;
      padding: 2rem;
      position: relative;
      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2);
    }

    .close-admin-modal {
      position: absolute;
      top: 1rem;
      right: 1rem;
      font-size: 1.5rem;
      background: none;
      border: none;
      color: #6b7280;
      cursor: pointer;
    }

    .admin-tabs {
      display: flex;
      gap: 1rem;
      margin-bottom: 2rem;
    }

    .admin-tab {
      flex: 1;
      padding: 0.8rem;
      border-radius: 50px;
      font-weight: 600;
      font-size: 1rem;
      text-align: center;
      cursor: pointer;
      transition: background 0.3s;
      border: 1px solid transparent;
    }

    .admin-tab:hover {
      background: #f0f9ff;
    }

    .admin-tab.active {
      background: var(--primary);
      color: white;
      border-color: var(--primary);
    }

    .admin-tab-content {
      display: none;
    }

    .admin-tab-content.active {
      display: block;
    }

    .stats-grid {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 1.5rem;
      margin-bottom: 2rem;
    }

    .stat-card {
      background: #f9f9f9;
      border-radius: 8px;
      padding: 1.5rem;
      text-align: center;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .stat-value {
      font-size: 1.8rem;
      font-weight: 700;
      color: var(--primary);
      margin-bottom: 0.5rem;
    }

    .stat-label {
      color: #6b7280;
      font-size: 0.9rem;
    }

    .progress-bar {
      height: 8px;
      background: var(--gray);
      border-radius: 4px;
      overflow: hidden;
      margin-bottom: 1rem;
    }

    .progress-fill {
      height: 100%;
      background: var(--primary);
      border-radius: 4px;
    }

    .progress-info {
      display: flex;
      justify-content: space-between;
      font-size: 0.9rem;
      color: #6b7280;
      margin-bottom: 1.5rem;
    }

    .form-section-title {
      font-size: 1.2rem;
      font-weight: 600;
      color: var(--primary);
      margin-bottom: 1.5rem;
    }

    .form-grid {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 1.5rem;
    }

    .form-actions {
      margin-top: 1.5rem;
      text-align: right;
    }

    /* Estilos específicos para el modal de administración */
    #adminModal {
      display: none;
      position: fixed;
      z-index: 9999;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.7);
      justify-content: center;
      align-items: center;
    }

    #adminModal .admin-modal-content {
      background: #fff;
      border-radius: 12px;
      padding: 2rem;
      max-width: 800px;
      width: 90%;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
      position: relative;
    }

    #adminModal .close-admin-modal {
      position: absolute;
      top: 1rem;
      right: 1rem;
      font-size: 1.5rem;
      color: #6b7280;
      cursor: pointer;
    }

    #adminModal h2 {
      font-size: 1.8rem;
      font-weight: 700;
      color: var(--primary);
      margin-bottom: 1.5rem;
      text-align: center;
    }

    #adminModal .admin-tabs {
      display: flex;
      justify-content: space-between;
      margin-bottom: 1.5rem;
    }

    #adminModal .admin-tab {
      flex: 1;
      padding: 0.8rem;
      border-radius: 50px;
      font-weight: 600;
      font-size: 1rem;
      text-align: center;
      cursor: pointer;
      transition: background 0.3s;
      border: 1px solid transparent;
    }

    #adminModal .admin-tab:hover {
      background: #f0f9ff;
    }

    #adminModal .admin-tab.active {
      background: var(--primary);
      color: white;
      border-color: var(--primary);
    }

    #adminModal .admin-tab-content {
      display: none;
    }

    #adminModal .admin-tab-content.active {
      display: block;
    }

    #adminModal .stats-grid {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 1.5rem;
      margin-bottom: 2rem;
    }

    #adminModal .stat-card {
      background: #f9f9f9;
      border-radius: 8px;
      padding: 1.5rem;
      text-align: center;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    #adminModal .stat-value {
      font-size: 1.8rem;
      font-weight: 700;
      color: var(--primary);
      margin-bottom: 0.5rem;
    }

    #adminModal .stat-label {
      color: #6b7280;
      font-size: 0.9rem;
    }

    #adminModal .progress-bar {
      height: 8px;
      background: var(--gray);
      border-radius: 4px;
      overflow: hidden;
      margin-bottom: 1rem;
    }

    #adminModal .progress-fill {
      height: 100%;
      background: var(--primary);
      border-radius: 4px;
    }

    #adminModal .progress-info {
      display: flex;
      justify-content: space-between;
      font-size: 0.9rem;
      color: #6b7280;
      margin-bottom: 1.5rem;
    }

    #adminModal .form-section-title {
      font-size: 1.2rem;
      font-weight: 600;
      color: var(--primary);
      margin-bottom: 1.5rem;
    }

    #adminModal .form-grid {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 1.5rem;
    }

    #adminModal .form-actions {
      margin-top: 1.5rem;
      text-align: right;
    }

    /* Estilos para el contenido del modal de administración */
    #adminModal #adminModalBody {
      max-height: 60vh;
      overflow-y: auto;
      padding-right: 1rem;
      padding-left: 1rem;
    }

    #adminModal .btn-primary {
      background: var(--primary);
      color: white;
      padding: 0.7rem 1.2rem;
      border-radius: 50px;
      font-weight: 600;
      font-size: 1rem;
      border: none;
      cursor: pointer;
      transition: background 0.3s;
    }

    #adminModal .btn-primary:hover {
      background: var(--primary-dark);
    }

    #adminModal .btn-accent {
      background: var(--accent);
      color: white;
      padding: 0.7rem 1.2rem;
      border-radius: 50px;
      font-weight: 600;
      font-size: 1rem;
      border: none;
      cursor: pointer;
      transition: background 0.3s;
    }

    #adminModal .btn-accent:hover {
      background: var(--accent-dark);
    }

    #adminModal .btn-warning {
      background: var(--challenge);
      color: #333;
      padding: 0.7rem 1.2rem;
      border-radius: 50px;
      font-weight: 600;
      font-size: 1rem;
      border: none;
      cursor: pointer;
      transition: background 0.3s;
    }

    #adminModal .btn-warning:hover {
      background: var(--challenge-dark);
      color: white;
    }

    #adminModal .btn-secondary {
      background: var(--volunteering);
      color: white;
      padding: 0.7rem 1.2rem;
      border-radius: 50px;
      font-weight: 600;
      font-size: 1rem;
      border: none;
      cursor: pointer;
      transition: background 0.3s;
    }

    #adminModal .btn-secondary:hover {
      background: var(--volunteering-dark);
    }
  </style>
{% endblock %}

{% block content %}
  <div class="main-container">
    <div class="section-header">
      <h1>Tus Actividades Solidarias</h1>
    </div>
    <div class="search-container">
      <input type="text" id="search-input" placeholder="Buscar entre tus actividades...">
      <i class="fas fa-search" style="color:#4a6fa5;"></i>
    </div>

    <!-- Estado vacío general (aparece antes de las secciones) -->
    <div id="generalEmptyState" class="empty-state" style="text-align: center; padding: 3rem; margin-bottom: 2rem; background: linear-gradient(135deg, #f0f9ff 0%, #e6f0fa 100%); border-radius: 12px; border: 1px solid var(--gray);">
      <i class="fas fa-clipboard-list" style="font-size: 3rem; color: #a0aec0; margin-bottom: 1rem;"></i>
      <h3 style="color: #4a5568; margin-bottom: 0.5rem;">No tienes actividades solidarias aún</h3>
      <p style="color: #718096; margin-bottom: 1.5rem;">Empieza creando una nueva actividad o únete a alguna existente.</p>
      <div style="display: flex; gap: 1rem; justify-content: center; flex-wrap: wrap;">
        <a href="/causes" class="btn btn-primary" style="display: inline-flex; align-items: center; gap: 0.5rem; padding: 0.8rem 1.5rem; border-radius: 8px; font-weight: 600; text-decoration: none; background: var(--primary); color: white;">
          <i class="fas fa-heart"></i> Explorar causas
        </a>
        <a href="/tasks" class="btn btn-accent" style="display: inline-flex; align-items: center; gap: 0.5rem; padding: 0.8rem 1.5rem; border-radius: 8px; font-weight: 600; text-decoration: none; background: var(--accent); color: white;">
          <i class="fas fa-tasks"></i> Ver tareas
        </a>
        <a href="/challenges" class="btn btn-warning" style="display: inline-flex; align-items: center; gap: 0.5rem; padding: 0.8rem 1.5rem; border-radius: 8px; font-weight: 600; text-decoration: none; background: var(--challenge); color: #333;">
          <i class="fas fa-trophy"></i> Descubrir retos
        </a>
        <a href="/volunteering" class="btn btn-secondary" style="display: inline-flex; align-items: center; gap: 0.5rem; padding: 0.8rem 1.5rem; border-radius: 8px; font-weight: 600; text-decoration: none; background: var(--volunteering); color: white;">
          <i class="fas fa-hands-helping"></i> Ver voluntariados
        </a>
      </div>
    </div>

    <!-- Sección de Causas -->
    <section class="activity-section causes-section" style="margin-bottom: 3.5rem;">
      <div class="activity-section-header"
           style="display:flex;align-items:center;gap:1.1rem;margin-bottom:2.2rem;
                  background:linear-gradient(90deg,#e6f4ea 0%,#fff 100%);
                  border-radius:14px;padding:1.2rem 1.7rem;box-shadow:0 2px 12px #e3eefd55;">
        <div style="background:var(--accent);color:#fff;border-radius:50%;width:48px;height:48px;display:flex;align-items:center;justify-content:center;font-size:2rem;box-shadow:0 2px 8px #4fc3a133;">
          <i class="fas fa-heart"></i>
        </div>
        <div>
          <h2 style="color:var(--accent);font-weight:900;font-size:1.45rem;margin:0;letter-spacing:-1px;">Tus causas</h2>
          <div style="color:#3da58a;font-size:1rem;font-weight:500;">Todas tus causas solidarias activas</div>
        </div>
      </div>
      <div class="activities-grid" id="causesGrid"></div>
    </section>

    <!-- Sección de Tareas -->
    <section class="activity-section tasks-section" style="margin-bottom: 3.5rem;">
      <div class="activity-section-header"
           style="display:flex;align-items:center;gap:1.1rem;margin-bottom:2.2rem;
                  background:linear-gradient(90deg,#e3eefd 0%,#fff 100%);
                  border-radius:14px;padding:1.2rem 1.7rem;box-shadow:0 2px 12px #e3eefd55;">
        <div style="background:var(--primary);color:#fff;border-radius:50%;width:48px;height:48px;display:flex;align-items:center;justify-content:center;font-size:2rem;box-shadow:0 2px 8px #4a6fa533;">
          <i class="fas fa-tasks"></i>
        </div>
        <div>
          <h2 style="color:var(--primary);font-weight:900;font-size:1.45rem;margin:0;letter-spacing:-1px;">Tus tareas</h2>
          <div style="color:#166088;font-size:1rem;font-weight:500;">Tus tareas pendientes y completadas</div>
        </div>
      </div>
      <div class="activities-grid tasks-grid" id="tasksGrid"></div>
    </section>

    <!-- Sección de Retos -->
    <section class="activity-section challenges-section" style="margin-bottom: 3.5rem;">
      <div class="activity-section-header"
           style="display:flex;align-items:center;gap:1.1rem;margin-bottom:2.2rem;
                  background:linear-gradient(90deg,#fffbe6 0%,#fff 100%);
                  border-radius:14px;padding:1.2rem 1.7rem;box-shadow:0 2px 12px #ffe06655;">
        <div style="background:var(--challenge-dark);color:#fff;border-radius:50%;width:48px;height:48px;display:flex;align-items:center;justify-content:center;font-size:2rem;box-shadow:0 2px 8px #ffe06633;">
          <i class="fas fa-trophy"></i>
        </div>
        <div>
          <h2 style="color:var(--challenge-dark);font-weight:900;font-size:1.45rem;margin:0;letter-spacing:-1px;">Tus retos</h2>
          <div style="color:#a67c00;font-size:1rem;font-weight:500;">Tus retos y desafíos solidarios</div>
        </div>
      </div>
      <div class="activities-grid" id="challengesGrid"></div>
    </section>

    <!-- Sección de Voluntariado -->
    <section class="activity-section volunteering-section" style="margin-bottom: 3.5rem;">
      <div class="activity-section-header"
           style="display:flex;align-items:center;gap:1.1rem;margin-bottom:2.2rem;
                  background:linear-gradient(90deg,#e6faff 0%,#fff 100%);
                  border-radius:14px;padding:1.2rem 1.7rem;box-shadow:0 2px 12px #00bcd433;">
        <div style="background:var(--volunteering-dark);color:#fff;border-radius:50%;width:48px;height:48px;display:flex;align-items:center;justify-content:center;font-size:2rem;box-shadow:0 2px 8px #00bcd433;">
          <i class="fas fa-hands-helping"></i>
        </div>
        <div>
          <h2 style="color:var(--volunteering-dark);font-weight:900;font-size:1.45rem;margin:0;letter-spacing:-1px;">Tus voluntariados</h2>
          <div style="color:#0097a7;font-size:1rem;font-weight:500;">Tus acciones de voluntariado</div>
        </div>
      </div>
      <div class="activities-grid" id="volunteeringGrid"></div>
    </section>
  </div>

  <!-- Modal de administración de actividad COMPLETO -->
  <div class="admin-modal" id="adminModal">
    <div class="admin-modal-content">
      <button class="close-admin-modal" id="closeAdminModal">&times;</button>
      <h2 id="adminModalTitle">Administrar Actividad</h2>
      <div class="admin-tabs">
        <button class="admin-tab active" data-tab="overview">Resumen</button>
        <button class="admin-tab" data-tab="members">Miembros</button>
        <button class="admin-tab" data-tab="settings">Configuración</button>
        <button class="admin-tab" data-tab="content">Contenido</button>
      </div>
      <div class="admin-tab-content active" id="overviewTab">
        <div class="stats-grid">
          <div class="stat-card">
            <div class="stat-value" id="participantsCount">0</div>
            <div class="stat-label">Participantes</div>
          </div>
          <div class="stat-card">
            <div class="stat-value" id="impactPoints">0</div>
            <div class="stat-label">Puntos de Impacto</div>
          </div>
          <div class="stat-card">
            <div class="stat-value" id="beneficiariesCount">0</div>
            <div class="stat-label">Beneficiarios</div>
          </div>
        </div>
        <h3>Progreso de la actividad</h3>
        <div class="progress-bar">
          <div class="progress-fill" id="activityProgress" style="width: 0%"></div>
        </div>
        <div class="progress-info">
          <span id="progressPercent">0% completado</span>
          <span id="progressAmount">0 € de 0 €</span>
        </div>
        <div style="margin-top:1.5rem;">
          <strong>Resumen:</strong> <span id="activitySummary"></span><br>
          <strong>Descripción:</strong> <span id="activityDescription"></span>
        </div>
      </div>
      <div class="admin-tab-content" id="membersTab">
        <h3>Miembros actuales</h3>
        <div class="members-list" id="membersList"></div>
      </div>
      <div class="admin-tab-content" id="settingsTab">
        <form id="activitySettingsForm" class="solidarity-form">
          <h3 class="form-section-title"><i class="fas fa-cog"></i> Configuración de la actividad</h3>
          <div class="form-grid"></div>
          <div class="form-actions">
            <button type="submit" class="btn btn-primary">
              <i class="fas fa-save"></i> Guardar Cambios
            </button>
          </div>
        </form>
      </div>
      <div class="admin-tab-content" id="contentTab">
        <h3>Mensaje para los participantes</h3>
        <textarea id="activityMessage" rows="5" style="width: 100%; margin-bottom: 1rem;"></textarea>
        <button class="btn btn-primary" id="saveMessageBtn">
          <i class="fas fa-bullhorn"></i> Publicar Mensaje
        </button>
      </div>
    </div>
  </div>
{% endblock %}

{% block scripts %}
  {{ super() }}
  <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
  <script src="/js/modules/causes-renderer.js"></script>
  <script src="/js/modules/tasks-renderer.js"></script>
  <script src="/js/modules/challenges-renderer.js"></script>
  <script src="/js/modules/volunteering-renderer.js"></script>
  <script src="/js/modules/share-system.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', async function() {
      // --- Funciones auxiliares básicas ---
      function showToast(message, type = 'success') {
        const toast = document.createElement('div');
        toast.textContent = message;
        toast.style.position = 'fixed';
        toast.style.bottom = '30px';
        toast.style.left = '50%';
        toast.style.transform = 'translateX(-50%)';
        toast.style.padding = '14px 28px';
        toast.style.borderRadius = '8px';
        toast.style.backgroundColor = type === 'success' ? '#4fc3a1' : type === 'info' ? '#4a6fa5' : '#e53e3e';
        toast.style.color = '#fff';
        toast.style.fontWeight = '600';
        toast.style.fontSize = '1.05rem';
        toast.style.boxShadow = '0 4px 16px rgba(0,0,0,0.13)';
        toast.style.zIndex = '99999';
        toast.style.opacity = '0';
        toast.style.transition = 'opacity 0.3s';
        document.body.appendChild(toast);
        setTimeout(() => { toast.style.opacity = '1'; }, 10);
        setTimeout(() => {
          toast.style.opacity = '0';
          setTimeout(() => toast.remove(), 350);
        }, 2200);
      }

      // --- Variables globales ---
      let userId = null;
      let userActivities = {
        causes: [],
        tasks: [],
        challenges: [],
        volunteering: []
      };

      // --- Obtener usuario actual ---
      const { data: { session } } = await supabase.auth.getSession();
      if (!session?.user) {
        window.location.href = '/login?return=/profile/myactivities';
        return;
      }
      userId = session.user.id;

      // --- Cargar causas map para challenges ---
      async function loadCausesMap() {
        const { data: causes } = await supabase.from('causes').select('id, title, photo_url, short_description');
        if (causes) {
          window.causesMap = {};
          causes.forEach(c => {
            window.causesMap[c.id] = {
              title: c.title,
              photo_url: c.photo_url,
              short_description: c.short_description
            };
          });
        }
      }

      // --- Función para obtener o crear el modal de challenge ---
      function getOrCreateChallengeModal() {
        let modal = document.getElementById('challengeModal');
        if (!modal) {
          modal = document.createElement('div');
          modal.id = 'challengeModal';
          modal.style.cssText = 'display:none; position:fixed; z-index:9999; left:0; top:0; width:100vw; height:100vh; background:rgba(0,0,0,0.35); align-items:center; justify-content:center;';
          
          modal.innerHTML = `
            <div class="modal-content" style="background:#fff; border-radius:18px; max-width:800px; width:95vw; padding:2rem; box-shadow:0 8px 32px rgba(74,111,165,0.13); position:relative; max-height:90vh; overflow-y:auto; text-align:left;">
              <button id="closeChallengeModal" style="position:absolute; top:1.5rem; right:1.5rem; background:none; border:none; font-size:1.8rem; color:#6b7280; cursor:pointer; transition:color 0.2s;" onmouseover="this.style.color='#4a6fa5'" onmouseout="this.style.color='#6b7280'">&times;</button>
              <div id="challengeModalBody" style="text-align:left;">
                <!-- Contenido dinámico -->
              </div>
            </div>
          `;
          document.body.appendChild(modal);
          
          // Agregar evento para cerrar
          document.getElementById('closeChallengeModal').onclick = function() {
            modal.style.display = 'none';
            document.body.style.overflow = '';
          };
          
          // Cerrar al hacer clic fuera
          modal.onclick = function(e) {
            if (e.target === modal) {
              modal.style.display = 'none';
              document.body.style.overflow = '';
            }
          };
        }
        return modal;
      }

      // --- Función para obtener o crear el modal de volunteering ---
      function getOrCreateVolunteeringModal() {
        let modal = document.getElementById('volunteeringModal');
        if (!modal) {
          modal = document.createElement('div');
          modal.id = 'volunteeringModal';
          modal.style.cssText = 'display:none; position:fixed; z-index:9999; left:0; top:0; width:100vw; height:100vh; background:rgba(0,0,0,0.35); align-items:center; justify-content:center;';
          
          modal.innerHTML = `
            <div class="modal-content" style="background:#fff; border-radius:18px; max-width:800px; width:95vw; padding:2rem; box-shadow:0 8px 32px rgba(74,111,165,0.13); position:relative; max-height:90vh; overflow-y:auto; text-align:left;">
              <button id="closeVolunteeringModal" style="position:absolute; top:1.5rem; right:1.5rem; background:none; border:none; font-size:1.8rem; color:#6b7280; cursor:pointer; transition:color 0.2s;" onmouseover="this.style.color='#4a6fa5'" onmouseout="this.style.color='#6b7280'">&times;</button>
              <div id="volunteeringModalBody" style="text-align:left;">
                <!-- Contenido dinámico -->
              </div>
            </div>
          `;
          document.body.appendChild(modal);
          
          // Agregar evento para cerrar
          document.getElementById('closeVolunteeringModal').onclick = function() {
            modal.style.display = 'none';
            document.body.style.overflow = '';
          };
          
          // Cerrar al hacer clic fuera
          modal.onclick = function(e) {
            if (e.target === modal) {
              modal.style.display = 'none';
              document.body.style.overflow = '';
            }
          };
        }
        return modal;
      }

      // --- Función para obtener o crear el modal de task ---
      function getOrCreateTaskModal() {
        let modal = document.getElementById('taskModal');
        if (!modal) {
          modal = document.createElement('div');
          modal.id = 'taskModal';
          modal.style.cssText = 'display:none; position:fixed; z-index:9999; left:0; top:0; width:100vw; height:100vh; background:rgba(0,0,0,0.35); align-items:center; justify-content:center;';
          
          modal.innerHTML = `
            <div class="modal-content" style="background:#fff; border-radius:18px; max-width:800px; width:95vw; padding:2rem; box-shadow:0 8px 32px rgba(74,111,165,0.13); position:relative; max-height:90vh; overflow-y:auto; text-align:left;">
              <button id="closeTaskModal" style="position:absolute; top:1.5rem; right:1.5rem; background:none; border:none; font-size:1.8rem; color:#6b7280; cursor:pointer; transition:color 0.2s;" onmouseover="this.style.color='#4a6fa5'" onmouseout="this.style.color='#6b7280'">&times;</button>
              <div id="taskModalBody" style="text-align:left;">
                <!-- Contenido dinámico -->
              </div>
            </div>
          `;
          document.body.appendChild(modal);
          
          // Agregar evento para cerrar
          document.getElementById('closeTaskModal').onclick = function() {
            modal.style.display = 'none';
            document.body.style.overflow = '';
          };
          
          // Cerrar al hacer clic fuera
          modal.onclick = function(e) {
            if (e.target === modal) {
              modal.style.display = 'none';
              document.body.style.overflow = '';
            }
          };
        }
        return modal;
      }

      // --- Función para cargar causas del usuario ---
      async function loadUserCauses() {
        try {
          // 1. Obtener causas creadas por el usuario (fundador)
          const { data: createdCauses, error: createdError } = await supabase
            .from('causes')
            .select('*')
            .eq('user_id', userId);

          if (createdError) {
            console.error('Error cargando causas creadas:', createdError);
          }

          // 2. Obtener causas donde el usuario es miembro
          const { data: memberships, error: membershipsError } = await supabase
            .from('causes_members')
            .select('cause_id, role, status')
            .eq('user_id', userId)
            .eq('status', 'active');

          if (membershipsError) {
            console.error('Error cargando membresías:', membershipsError);
          }

          // 3. Si hay membresías, obtener los detalles de esas causas
          let joinedCauses = [];
          if (memberships && memberships.length > 0) {
            const causeIds = memberships.map(m => m.cause_id);
            const { data: causesDetails, error: detailsError } = await supabase
              .from('causes')
              .select('*')
              .in('id', causeIds);

            if (detailsError) {
              console.error('Error cargando detalles de causas:', detailsError);
            } else if (causesDetails) {
              // Agregar información de rol a cada causa
              joinedCauses = causesDetails.map(cause => {
                const membership = memberships.find(m => m.cause_id === cause.id);
                return {
                  ...cause,
                  userRole: membership ? membership.role : 'member',
                  isCreator: false
                };
              });
            }
          }

          // 4. Combinar causas creadas y causas donde es miembro
          const allUserCauses = [
            ...(createdCauses || []).map(cause => ({ ...cause, userRole: 'founder', isCreator: true })),
            ...joinedCauses
          ];

          // 5. Eliminar duplicados (en caso de que sea fundador Y miembro)
          const uniqueCauses = allUserCauses.reduce((acc, current) => {
            const existing = acc.find(cause => cause.id === current.id);
            if (!existing) {
              acc.push(current);
            } else if (current.userRole === 'founder') {
              // Si ya existe pero este es fundador, reemplazar
              const index = acc.findIndex(cause => cause.id === current.id);
              acc[index] = current;
            }
            return acc;
          }, []);

          // 6. Actualizar array de actividades
          userActivities.causes = uniqueCauses;

          console.log('Causas del usuario cargadas:', uniqueCauses);

        } catch (error) {
          console.error('Error en loadUserCauses:', error);
          userActivities.causes = [];
        }
      }

      // --- Función para cargar tareas del usuario ---
      async function loadUserTasks() {
        try {
          // 1. Obtener tareas creadas por el usuario (fundador)
          const { data: createdTasks, error: createdError } = await supabase
            .from('tasks')
            .select(`
              *,
              linkedCause:causes!tasks_cause_id_fkey(id, title, photo_url)
            `)
            .eq('user_id', userId);

          if (createdError) {
            console.error('Error cargando tareas creadas:', createdError);
          }

          // 2. Obtener tareas donde el usuario es miembro (cualquier rol, cualquier status)
          const { data: memberships, error: membershipsError } = await supabase
            .from('task_members')  // ✅ CORREGIDO: era 'tasks_members'
            .select('task_id, role, status')
            .eq('user_id', userId)
            .eq('status', 'active');  // Añadir filtro de status como en retos

          if (membershipsError) {
            console.error('Error cargando membresías de tareas:', membershipsError);
          }

          // 3. Si hay membresías, obtener los detalles de esas tareas
          let joinedTasks = [];
          if (memberships && memberships.length > 0) {
            const taskIds = memberships.map(m => m.task_id);
            const { data: tasksDetails, error: detailsError } = await supabase
              .from('tasks')
              .select(`
                *,
                linkedCause:causes!tasks_cause_id_fkey(id, title, photo_url)
              `)
              .in('id', taskIds);

            if (detailsError) {
              console.error('Error cargando detalles de tareas:', detailsError);
            } else if (tasksDetails) {
              // Agregar información de rol a cada tarea
              joinedTasks = tasksDetails.map(task => {
                const membership = memberships.find(m => m.task_id === task.id);
                return {
                  ...task,
                  userRole: membership ? membership.role : 'member',
                  isCreator: false
                };
              });
            }
          }

          // 4. Combinar tareas creadas y tareas donde es miembro
          const allUserTasks = [
            ...(createdTasks || []).map(task => ({ ...task, userRole: 'founder', isCreator: true })),
            ...joinedTasks
          ];

          // 5. Eliminar duplicados (en caso de que sea fundador Y miembro)
          const uniqueTasks = allUserTasks.reduce((acc, current) => {
            const existing = acc.find(task => task.id === current.id);
            if (!existing) {
              acc.push(current);
            } else if (current.userRole === 'founder') {
              // Si ya existe pero este es fundador, reemplazar
              const index = acc.findIndex(task => task.id === current.id);
              acc[index] = current;
            }
            return acc;
          }, []);

          // 6. Procesar datos para compatibilidad con el renderer
          uniqueTasks.forEach(task => {
            // Mapear linkedCause para compatibilidad con el renderer
            if (task.linkedCause && Array.isArray(task.linkedCause)) {
              task.linkedCause = task.linkedCause[0] || null;
            }
            
            // Asegurar que tenga una imagen por defecto si no tiene
            if (!task.photo_url) {
              task.photo_url = '/images/default-task.jpg';
            }

            // Marcar que ya está participando (para el renderer)
            task.isParticipating = true;
          });

          // 7. Actualizar array de actividades
          userActivities.tasks = uniqueTasks;

          console.log('Tareas del usuario cargadas:', uniqueTasks);

        } catch (error) {
          console.error('Error en loadUserTasks:', error);
          userActivities.tasks = [];
        }
      }

      // --- Función para cargar retos del usuario ---
      async function loadUserChallenges() {
        try {
          // 1. Obtener retos creados por el usuario (fundador)
          const { data: createdChallenges, error: createdError } = await supabase
            .from('challenges')
            .select('*')
            .eq('creator_id', userId);

          if (createdError) {
            console.error('Error cargando retos creados:', createdError);
          }

          // 2. Obtener retos donde el usuario es miembro
          const { data: memberships, error: membershipsError } = await supabase
            .from('challenges_members')
            .select('challenge_id, role, status')
            .eq('user_id', userId)
            .eq('status', 'active');

          if (membershipsError) {
            console.error('Error cargando membresías de retos:', membershipsError);
          }

          // 3. Si hay membresías, obtener los detalles de esos retos
          let joinedChallenges = [];
          if (memberships && memberships.length > 0) {
            const challengeIds = memberships.map(m => m.challenge_id);
            const { data: challengesDetails, error: detailsError } = await supabase
              .from('challenges')
              .select('*')
              .in('id', challengeIds);

            if (detailsError) {
              console.error('Error cargando detalles de retos:', detailsError);
            } else if (challengesDetails) {
              // Agregar información de rol a cada reto
              joinedChallenges = challengesDetails.map(challenge => {
                const membership = memberships.find(m => m.challenge_id === challenge.id);
                return {
                  ...challenge,
                  userRole: membership ? membership.role : 'member',
                  isCreator: false
                };
              });
            }
          }

          // 4. Combinar retos creados y retos donde es miembro
          const allUserChallenges = [
            ...(createdChallenges || []).map(challenge => ({ ...challenge, userRole: 'founder', isCreator: true })),
            ...joinedChallenges
          ];

          // 5. Eliminar duplicados (en caso de que sea fundador Y miembro)
          const uniqueChallenges = allUserChallenges.reduce((acc, current) => {
            const existing = acc.find(challenge => challenge.id === current.id);
            if (!existing) {
              acc.push(current);
            } else if (current.userRole === 'founder') {
              // Si ya existe pero este es fundador, reemplazar
              const index = acc.findIndex(challenge => challenge.id === current.id);
              acc[index] = current;
            }
            return acc;
          }, []);

          // 6. Enriquecer con información de causa vinculada
          for (let challenge of uniqueChallenges) {
            if (challenge.cause_id && window.causesMap && window.causesMap[challenge.cause_id]) {
              challenge.linkedCause = window.causesMap[challenge.cause_id];
            }
          }

          // 7. Actualizar array de actividades
          userActivities.challenges = uniqueChallenges;

          console.log('Retos del usuario cargados:', uniqueChallenges);

        } catch (error) {
          console.error('Error en loadUserChallenges:', error);
          userActivities.challenges = [];
        }
      }

      // --- Función para cargar voluntariados del usuario ---
      async function loadUserVolunteering() {
        try {
          // 1. Obtener voluntariados creados por el usuario (fundador)
          const { data: createdVolunteering, error: createdError } = await supabase
            .from('volunteering')
            .select(`
              *,
              linkedCause:causes!volunteering_cause_id_fkey(id, title, photo_url)
            `)
            .eq('user_id', userId);

          if (createdError) {
            console.error('Error cargando voluntariados creados:', createdError);
          }

          // 2. Obtener voluntariados donde el usuario es miembro
          const { data: memberships, error: membershipsError } = await supabase
            .from('volunteering_members')
            .select('volunteering_id, role, status')
            .eq('user_id', userId)
            .eq('status', 'active');

          if (membershipsError) {
            console.error('Error cargando membresías de voluntariados:', membershipsError);
          }

          // 3. Si hay membresías, obtener los detalles de esos voluntariados
          let joinedVolunteering = [];
          if (memberships && memberships.length > 0) {
            const volunteeringIds = memberships.map(m => m.volunteering_id);
            const { data: volunteeringDetails, error: detailsError } = await supabase
              .from('volunteering')
              .select(`
                *,
                linkedCause:causes!volunteering_cause_id_fkey(id, title, photo_url)
              `)
              .in('id', volunteeringIds);

            if (detailsError) {
              console.error('Error cargando detalles de voluntariados:', detailsError);
            } else if (volunteeringDetails) {
              // Agregar información de rol a cada voluntariado
              joinedVolunteering = volunteeringDetails.map(volunteering => {
                const membership = memberships.find(m => m.volunteering_id === volunteering.id);
                return {
                  ...volunteering,
                  userRole: membership ? membership.role : 'member',
                  isCreator: false
                };
              });
            }
          }

          // 4. Combinar voluntariados creados y voluntariados donde es miembro
          const allUserVolunteering = [
            ...(createdVolunteering || []).map(volunteering => ({ ...volunteering, userRole: 'founder', isCreator: true })),
            ...joinedVolunteering
          ];

          // 5. Eliminar duplicados (en caso de que sea fundador Y miembro)
          const uniqueVolunteering = allUserVolunteering.reduce((acc, current) => {
            const existing = acc.find(volunteering => volunteering.id === current.id);
            if (!existing) {
              acc.push(current);
            } else if (current.userRole === 'founder') {
              // Si ya existe pero este es fundador, reemplazar
              const index = acc.findIndex(volunteering => volunteering.id === current.id);
              acc[index] = current;
            }
            return acc;
          }, []);

          // 6. Procesar datos para compatibilidad con el renderer (como en index.njk)
          uniqueVolunteering.forEach(volunteering => {
            // Mapear linkedCause para compatibilidad con el renderer
            if (volunteering.linkedCause && Array.isArray(volunteering.linkedCause)) {
              volunteering.linkedCause = volunteering.linkedCause[0] || null;
            }
            
            // Asegurar que tenga una imagen por defecto si no tiene
            if (!volunteering.photo_url) {
              volunteering.photo_url = '/images/default-volunteering.jpg';
            }

            // Marcar que ya está participando (para el renderer)
            volunteering.isParticipating = true;
          }); // <-- CIERRA AQUÍ EL forEach

          // El resto del código de renderizado/modal va fuera del forEach
          // 7. Actualizar array de actividades
          userActivities.volunteering = uniqueVolunteering;

          console.log('Voluntariados del usuario cargados:', uniqueVolunteering);

        } catch (error) {
          console.error('Error en loadUserVolunteering:', error);
          userActivities.volunteering = [];
        }
      }

      // --- Función para obtener el estado de una actividad (tarea, reto o voluntariado) ---
      async function getActivityStatus(activityId, type) {
        try {
          let { data, error } = null;
          if (type === 'task') {
            ({ data } = await supabase
              .from('task_members')
              .select('status')
              .eq('user_id', userId)
              .eq('task_id', activityId)
              .single());
          } else if (type === 'challenge') {
            ({ data } = await supabase
              .from('challenges_members')
              .select('status')
              .eq('user_id', userId)
              .eq('challenge_id', activityId)
              .single());
          } else if (type === 'volunteering') {
            ({ data } = await supabase
              .from('volunteering_members')
              .select('status')
              .eq('user_id', userId)
              .eq('volunteering_id', activityId)
              .single());
          }

          if (error) throw error;
          return data?.status || 'inactive';
        } catch (error) {
          console.error('Error obteniendo estado de actividad:', error);
          return 'inactive';
        }
      }

      // --- Función para cargar actividades del usuario ---
      async function loadUserActivities() {
        // 1. Cargar causas
        await loadUserCauses();
        // 2. Cargar tareas
        await loadUserTasks();
        // 3. Cargar retos
        await loadUserChallenges();
        // 4. Cargar voluntariados
        await loadUserVolunteering();

        // 5. Renderizar secciones
        renderSection('causesGrid', userActivities.causes, 'causes');
        renderSection('tasksGrid', userActivities.tasks, 'tasks');
        renderSection('challengesGrid', userActivities.challenges, 'challenges');
        renderSection('volunteeringGrid', userActivities.volunteering, 'volunteering');

        // 6. Agregar botones de administración a las tarjetas
        addAdminButtonsAndModal(document.getElementById('causesGrid'), userActivities.causes, 'causes');
        addAdminButtonsAndModal(document.getElementById('tasksGrid'), userActivities.tasks, 'tasks');
        addAdminButtonsAndModal(document.getElementById('challengesGrid'), userActivities.challenges, 'challenges');
        addAdminButtonsAndModal(document.getElementById('volunteeringGrid'), userActivities.volunteering, 'volunteering');
      }

      // --- Función para renderizar una sección de actividades ---
      function renderSection(gridId, activities, type) {
        const grid = document.getElementById(gridId);
        if (!grid) return;

        // Limpiar grid
        grid.innerHTML = '';

        // Si no hay actividades, mostrar estado vacío
        if (!activities || activities.length === 0) {
          grid.innerHTML = `
            <div class="empty-state" style="text-align: center; padding: 3rem; background: #f9f9f9; border-radius: 12px; border: 1px solid var(--gray);">
              <i class="fas fa-clipboard-list" style="font-size: 3rem; color: #a0aec0; margin-bottom: 1rem;"></i>
              <h3 style="color: #4a5568; margin-bottom: 0.5rem;">No tienes ${type === 'causes' ? 'causas' : type === 'tasks' ? 'tareas' : type === 'challenges' ? 'retos' : 'voluntariados'} aún</h3>
              <p style="color: #718096; margin-bottom: 1.5rem;">Empieza creando una nueva ${type === 'causes' ? 'causa' : type === 'tasks' ? 'tarea' : type === 'challenges' ? 'reto' : 'actividad de voluntariado'} o únete a alguna existente.</p>
              <a href="/${type === 'causes' ? 'causes' : type === 'tasks' ? 'tasks' : type === 'challenges' ? 'challenges' : 'volunteering'}" class="btn btn-primary" style="padding: 0.8rem 1.5rem; border-radius: 8px; font-weight: 600; text-decoration: none; background: var(--primary); color: white;">
                <i class="fas fa-plus"></i> Crear nueva ${type === 'causes' ? 'causa' : type === 'tasks' ? 'tarea' : type === 'challenges' ? 'reto' : 'actividad de voluntariado'}
              </a>
            </div>
          `;
          return;
        }

        // Renderizar actividades
        activities.forEach(activity => {
          const card = document.createElement('div');
          card.className = (
            type === 'causes' ? 'cause-card' :
            type === 'tasks' ? 'task-card' :
            type === 'challenges' ? 'challenge-card' :
            type === 'volunteering' ? 'volunteering-card' : ''
          );
          card.innerHTML = `
            <div class="task-image">
              <img src="${activity.photo_url || '/images/default-${type}.jpg'}" alt="${type === 'causes' ? 'Causa' : type === 'tasks' ? 'Tarea' : type === 'challenges' ? 'Reto' : 'Voluntariado'} ${activity.title}" onerror="this.src='/images/default-${type}.jpg'">
            </div>
            <div class="task-content">
              <h3>${activity.title}</h3>
              <p>${activity.short_description || 'Sin descripción'}</p>
              <div class="task-meta">
                <div class="meta-item">
                  <i class="fas fa-map-marker-alt"></i> ${activity.city || 'Sin ubicación'}
                </div>
                <div class="meta-item">
                  <i class="fas fa-calendar-alt"></i> ${new Date(activity.start_date).toLocaleDateString('es-ES')}
                </div>
                <div class="meta-item">
                  <i class="fas fa-clock"></i> ${activity.hours_required || 0} horas
                </div>
              </div>
              <div class="task-actions" style="display:flex; gap:0.8rem;">
                <a href="/${type === 'causes' ? 'causes' : type === 'tasks' ? 'tasks' : type === 'challenges' ? 'challenges' : 'volunteering'}/${activity.id}" class="btn btn-primary" style="flex:1;">
                  <i class="fas fa-eye"></i> Ver más
                </a>
                <button class="btn btn-accent btn-admin-activity" data-type="${type}" data-id="${activity.id}" style="flex:1;">
                  <i class="fas fa-cog"></i> Administrar
                </button>
              </div>
            </div>
          `;
          grid.appendChild(card);
        });
      }

      // --- Función para agregar botones de administración a las tarjetas ---
      function addAdminButtonsAndModal(grid, activities, type) {
        setTimeout(() => {
          // Selecciona todas las tarjetas de la sección
          const cards = grid.querySelectorAll(
            type === 'causes' ? '.cause-card' :
            type === 'tasks' ? '.task-card' :
            type === 'challenges' ? '.challenge-card' :
            type === 'volunteering' ? '.volunteering-card' : ''
          );
          activities.forEach((activity, idx) => {
            const card = cards[idx];
            if (!card) return;
            // Determina si el usuario puede administrar
            if (['founder', 'admin', 'coordinator'].includes(activity.userRole)) {
              // Busca el contenedor de acciones
              let actions = card.querySelector('.cause-actions, .task-actions, .challenge-actions, .volunteering-actions');
              if (!actions) {
                // Si no existe, créalo al final del contenido
                actions = document.createElement('div');
                actions.className = (
                  type === 'causes' ? 'cause-actions' :
                  type === 'tasks' ? 'task-actions' :
                  type === 'challenges' ? 'challenge-actions' :
                  type === 'volunteering' ? 'volunteering-actions' : ''
                );
                const content = card.querySelector(
                  type === 'causes' ? '.cause-content' :
                  type === 'tasks' ? '.task-content' :
                  type === 'challenges' ? '.challenge-content' :
                  type === 'volunteering' ? '.volunteering-content' : ''
                );
                if (content) content.appendChild(actions);
              }
              // --- ELIMINAR TODOS LOS BOTONES EXCEPTO "VER MÁS" ---
              Array.from(actions.querySelectorAll('button, a')).forEach(btn => {
                if (!btn.classList.contains('view-task-btn') && !btn.classList.contains('view-challenge-btn') && !btn.classList.contains('view-volunteering-btn') && !btn.classList.contains('view-cause-btn')) {
                  btn.remove();
                }
              });
              // Evita duplicados
              if (!actions.querySelector('.btn-admin-activity')) {
                const adminBtn = document.createElement('button');
                adminBtn.className = 'btn btn-accent btn-admin-activity';
                adminBtn.style.flex = '1';
                adminBtn.innerHTML = '<i class="fas fa-cog"></i> Administrar';
                adminBtn.setAttribute('data-type', type);
                adminBtn.setAttribute('data-id', activity.id);
                actions.appendChild(adminBtn);
              }
            } else {
              // Si NO puede administrar, deja solo el botón "Ver más"
              let actions = card.querySelector('.cause-actions, .task-actions, .challenge-actions, .volunteering-actions');
              if (actions) {
                Array.from(actions.querySelectorAll('button, a')).forEach(btn => {
                  if (!btn.classList.contains('view-task-btn') && !btn.classList.contains('view-challenge-btn') && !btn.classList.contains('view-volunteering-btn') && !btn.classList.contains('view-cause-btn')) {
                    btn.remove();
                  }
                });
              }
            }
          });
        }, 300);
      }

      // --- Llama a esta función al final de renderSection, después de renderizar las tarjetas ---
      /*
        Ejemplo:
        renderSection('causesGrid', userActivities.causes, 'causes');
        addAdminButtonsAndModal(document.getElementById('causesGrid'), userActivities.causes, 'causes');
        // ...igual para tasks, challenges, volunteering
      */

      // --- Modal de administración (solo una vez) ---
      if (!document.getElementById('adminActivityModal')) {
        const adminModal = document.createElement('div');
        adminModal.id = 'adminActivityModal';
        adminModal.style.cssText = 'display:none; position:fixed; z-index:99999; left:0; top:0; width:100vw; height:100vh; background:rgba(0,0,0,0.35); align-items:center; justify-content:center;';
        adminModal.innerHTML = `
          <div class="admin-modal-content" style="background:white; border-radius:12px; max-width:700px; margin:auto; padding:2rem; position:relative;">
            <button class="close-admin-modal" id="closeAdminActivityModal" style="position:absolute; top:1rem; right:1rem; font-size:1.5rem; background:none; border:none; color:#6b7280; cursor:pointer;">&times;</button>
            <h2 id="adminActivityModalTitle" style="font-size:1.5rem; font-weight:800; color:#4a6fa5; margin-bottom:2rem; text-align:center;"></h2>
            <div id="adminActivityModalBody"></div>
          </div>
        `;
        document.body.appendChild(adminModal);
      }

      // --- Delegación de eventos para abrir/cerrar el modal de administración ---
      document.body.addEventListener('click', function(e) {
        const btn = e.target.closest('.btn-admin-activity');
        if (btn) {
          const type = btn.getAttribute('data-type');
          const id = btn.getAttribute('data-id');
          let activity = null;
          if (type === 'causes') activity = userActivities.causes.find(a => a.id == id);
          if (type === 'tasks') activity = userActivities.tasks.find(a => a.id == id);
          if (type === 'challenges') activity = userActivities.challenges.find(a => a.id == id);
          if (type === 'volunteering') activity = userActivities.volunteering.find(a => a.id == id);
          if (!activity) return;

          document.getElementById('adminActivityModalTitle').textContent = `Administrar ${activity.title}`;
          document.getElementById('adminActivityModalBody').innerHTML = `
            <div style="margin-bottom:1.5rem;">
              <strong>Tipo:</strong> ${type.charAt(0).toUpperCase() + type.slice(1)}<br>
              <strong>Título:</strong> ${activity.title}<br>
              <strong>Descripción:</strong> ${activity.description || 'Sin descripción'}
            </div>
            <div>
              <button class="btn btn-primary" onclick="alert('Funcionalidad de edición próximamente')">
                <i class="fas fa-edit"></i> Editar actividad
              </button>
            </div>
          `;
          document.getElementById('adminActivityModal').style.display = 'flex';
          document.body.style.overflow = 'hidden';
        }
        // Cerrar modal
        if (e.target.closest('#closeAdminActivityModal')) {
          document.getElementById('adminActivityModal').style.display = 'none';
          document.body.style.overflow = '';
        }
        // Cerrar al hacer clic fuera del contenido
        if (e.target.id === 'adminActivityModal') {
          document.getElementById('adminActivityModal').style.display = 'none';
          document.body.style.overflow = '';
        }
      });


      // --- Funciones de limpieza y cierre ---
      // --- Función para limpiar completamente los modales ---
      function cleanUpModals() {
        // Limpiar contenido de los modales
        const taskModalBody = document.getElementById('taskModalBody');
        const challengeModalBody = document.getElementById('challengeModalBody');
        const volunteeringModalBody = document.getElementById('volunteeringModalBody');
        
        if (taskModalBody) taskModalBody.innerHTML = '';
        if (challengeModalBody) challengeModalBody.innerHTML = '';
        if (volunteeringModalBody) volunteeringModalBody.innerHTML = '';
        
        // Eliminar cualquier sección de compartir residual
        const oldShareSections = document.querySelectorAll('.share-section');
        oldShareSections.forEach(section => section.remove());
        
        // Limpiar cualquier evento de compartir anterior
        const oldShareButtons = document.querySelectorAll('.share-btn');
        oldShareButtons.forEach(btn => {
          btn.replaceWith(btn.cloneNode(true)); // Clonar para eliminar event listeners
        });
        
        console.log('✅ Modales y secciones de compartir limpiados');
      }

      // --- Cargar actividades al inicializar ---
      await loadUserActivities();

      // --- Búsqueda (placeholder) ---
      document.getElementById('search-input')?.addEventListener('input', function(e) {
        const query = e.target.value.toLowerCase();
        if (query) {
          showToast('Funcionalidad de búsqueda en desarrollo', 'info');
        }
      });

      // --- Event listeners para cerrar modales y limpiar ---
      document.addEventListener('click', function(e) {
        // Cerrar modales al hacer clic en el botón de cerrar o fuera
        if (
          e.target.closest('#closeTaskModal') ||
          (e.target.id === 'taskModal' && e.target !== document.getElementById('taskModalBody'))
        ) {
          cleanUpModals();
          const modal = document.getElementById('taskModal');
          if (modal) modal.style.display = 'none';
          document.body.style.overflow = '';
        }

        if (
          e.target.closest('#closeChallengeModal') ||
          (e.target.id === 'challengeModal' && e.target !== document.getElementById('challengeModalBody'))
        ) {
          cleanUpModals();
          const modal = document.getElementById('challengeModal');
          if (modal) modal.style.display = 'none';
          document.body.style.overflow = '';
        }

        if (
          e.target.closest('#closeVolunteeringModal') ||
          (e.target.id === 'volunteeringModal' && e.target !== document.getElementById('volunteeringModalBody'))
        ) {
          cleanUpModals();
          const modal = document.getElementById('volunteeringModal');
          if (modal) modal.style.display = 'none';
          document.body.style.overflow = '';
        }
      });

      // Limpiar al cambiar de ruta (SPA)
      window.addEventListener('beforeunload', cleanUpModals);
    });
  </script>
{% endblock %}