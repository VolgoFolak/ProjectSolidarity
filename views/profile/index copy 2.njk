{% extends "layout.njk" %}

{% block title %}Mi perfil Solidarity{% endblock %}

{% block head %}
  {{ super() }}
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
  <style>
    /* --- ESTILOS DE PERFIL Y ESTADÍSTICAS --- */
    .profile-main-container {
      max-width: 1100px;
      margin: 2rem auto;
      background: #fff;
      border-radius: 18px;
      box-shadow: 0 5px 24px rgba(76,163,161,0.08);
      padding: 2.5rem 2rem;
    }
    .profile-header {
      display: flex;
      gap: 2.5rem;
      align-items: center;
      margin-bottom: 2.2rem;
      flex-wrap: wrap;
    }
    .profile-photo-wrapper { flex-shrink: 0; position: relative; }
    .profile-photo {
      width: 120px;
      height: 120px;
      border-radius: 50%;
      object-fit: cover;
      border: 4px solid #4fc3a1;
      box-shadow: 0 2px 8px rgba(0,0,0,0.07);
    }
    .profile-info h2 {
      font-size: 2rem;
      margin-bottom: 0.5rem;
      color: #4a6fa5;
      font-weight: 800;
    }
    .profile-location {
      color: #6b7280;
      margin-bottom: 0.7rem;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      font-size: 1.05rem;
    }
    .profile-bio { color: #444; margin-bottom: 1.2rem; font-size: 1.07rem; }
    .social-links a {
      color: #4fc3a1;
      margin-right: 0.7em;
      font-size: 1.2em;
      transition: color 0.18s;
    }
    .social-links a:hover { color: #166088; }
    .stats-section {
      display: flex;
      gap: 2.5rem;
      margin-bottom: 2.2rem;
      flex-wrap: wrap;
      justify-content: flex-start;
    }
    .stats-card {
      background: #f8fafc;
      border-radius: 14px;
      box-shadow: 0 2px 10px rgba(76,163,161,0.07);
      padding: 1.2rem 2.2rem;
      display: flex;
      align-items: center;
      gap: 1.1rem;
      min-width: 180px;
      flex: 1 1 180px;
      border: 1.5px solid #e2e8f0;
      transition: box-shadow 0.18s, border 0.18s;
    }
    .stats-card.highlight {
      background: #e6f0fa;
      border-color: #4a6fa5;
    }
    .stats-icon {
      font-size: 2.1rem;
      color: #4a6fa5;
      background: #e6f0fa;
      border-radius: 50%;
      width: 48px;
      height: 48px;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .stats-content .number {
      font-size: 1.7rem;
      font-weight: 700;
      color: #4a6fa5;
    }
    .stats-content .label {
      color: #6b7280;
      font-size: 1.01rem;
      margin-top: 0.2rem;
    }
    .impact-score-section {
      margin: 2rem 0 2.5rem 0;
      background: #e6f0fa;
      border-radius: 14px;
      padding: 1.7rem 1.2rem;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 1.2rem;
      box-shadow: 0 2px 10px rgba(76,163,161,0.07);
    }
    .impact-score-main {
      display: flex;
      align-items: center;
      gap: 1.2rem;
    }
    .score {
      font-size: 2.5rem;
      font-weight: 700;
      color: #4a6fa5;
    }
    .score-label {
      font-size: 1.1rem;
      color: #4fc3a1;
      font-weight: 600;
    }
    .impact-badge {
      display: inline-block;
      background: #4a6fa5;
      color: #fff;
      font-size: 0.95rem;
      font-weight: 700;
      padding: 0.18em 0.9em;
      border-radius: 999px;
      box-shadow: 0 2px 8px rgba(76,163,161,0.09);
      margin-left: 0.7em;
      letter-spacing: 0.02em;
      min-width: 70px;
      text-align: center;
    }
    .impact-score-bar-bg {
      width: 220px;
      height: 12px;
      background: #f0f0f0;
      border-radius: 8px;
      margin: 0.5rem 0;
      overflow: hidden;
      position: relative;
    }
    .impact-score-bar {
      height: 100%;
      background: linear-gradient(90deg, #4a6fa5, #4fc3a1);
      border-radius: 8px;
      transition: width 0.5s;
      position: absolute;
      top: 0;
      left: 0;
    }
    .impact-level-info {
      color: #6b7280;
      font-size: 1.01rem;
      margin-top: 0.2rem;
      display: flex;
      gap: 1rem;
      flex-wrap: wrap;
      justify-content: center;
    }
    .section-header h3 {
      color: #4a6fa5 !important;
      font-size: 2rem !important;
      font-weight: 800;
      margin-bottom: 0;
    }
    .section-header {
      margin-bottom: 1.2rem;
    }
    #profile-map {
      width: 100%;
      height: 400px;
      border-radius: 12px;
      margin-bottom: 1.5rem;
      box-shadow: 0 2px 10px rgba(0,0,0,0.08);
      background: #f8fafc;
      border: 1px solid #e2e8f0;
    }
    /* --- ESTILOS PARA ÍCONOS DEL MAPA --- */
    .custom-div-icon {
      background: #4a6fa5;
      color: white;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      border: 2px solid white;
      box-shadow: 0 2px 6px rgba(0,0,0,0.3);
      font-size: 10px;
    }

    .custom-div-icon.task-icon {
      background: #4fc3a1;
    }

    .custom-div-icon.challenge-icon {
      background: #ffe066;
      color: #333;
    }

    .custom-div-icon.volunteering-icon {
      background: #e74c3c;
    }

    .custom-div-icon.community-icon {
      background: #4fc3a1;
    }

    /* Popup del mapa */
    .leaflet-popup-content {
      margin: 8px 12px;
      line-height: 1.4;
    }

    .map-popup {
      min-width: 200px;
      max-width: 250px;
    }

    /* Actualizar leyenda del mapa */
    .map-legend {
      display: flex;
      gap: 1rem;
      margin-top: 1rem;
      font-size: 0.9rem;
      flex-wrap: wrap;
      justify-content: center;
    }

    .legend-item {
      display: flex;
      align-items: center;
      gap: 0.4rem;
    }

    .legend-color {
      display: inline-block;
      width: 16px;
      height: 16px;
      border-radius: 50%;
      margin-right: 0.3em;
    }

    .legend-color.cause { background: #4a6fa5; }
    .legend-color.task { background: #4fc3a1; }
    .legend-color.challenge { background: #ffe066; }
    .legend-color.volunteering { background: #e74c3a1; }
    .legend-color.community { background: #4fc3a1; }

    /* --- ESTILOS PARA CAUSAS --- */
    .causes-grid {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 2rem;
      margin-bottom: 3rem;
    }
    .cause-card {
      background: white;
      border-radius: 12px;
      overflow: hidden;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
      transition: all 0.3s ease;
      border: 1px solid #e2e8f0;
      display: flex;
      flex-direction: column;
    }
    .cause-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    }
    .cause-image {
      height: 180px;
      overflow: hidden;
      position: relative;
    }
    .cause-image img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: transform 0.3s ease;
    }
    .cause-card:hover .cause-image img {
      transform: scale(1.05);
    }
    .cause-badge {
      position: absolute;
      top: 1rem;
      right: 1rem;
      background: rgba(255, 255, 255, 0.9);
      padding: 0.3rem 0.8rem;
      border-radius: 50px;
      font-size: 0.8rem;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }
    .cause-badge.urgent {
      background: #e53e3e;
      color: white;
    }
    .cause-badge.points {
      background: #4a6fa5;
      color: white;
      left: 1rem;
      right: auto;
    }
    .cause-content {
      padding: 1.5rem;
      display: flex;
      flex-direction: column;
      flex: 1;
    }
    .cause-content h3 {
      font-size: 1.3rem;
      margin-bottom: 0.8rem;
      color: #2d3748;
    }
    .cause-content p {
      color: #6b7280;
      margin-bottom: 1.5rem;
      font-size: 0.95rem;
      line-height: 1.6;
      flex-grow: 1;
    }
    .cause-meta {
      display: flex;
      gap: 1rem;
      margin-bottom: 1.5rem;
      font-size: 0.85rem;
      flex-wrap: wrap;
    }
    .meta-item {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      color: #6b7280;
    }
    .meta-item i {
      color: #4a6fa5;
    }
    .beneficiaries-count {
      display: inline-flex;
      align-items: center;
      background: #f0f9ff;
      color: #4a6fa5;
      padding: 0.3rem 0.8rem;
      border-radius: 50px;
      font-size: 0.85rem;
      font-weight: 600;
    }
    .beneficiaries-count i {
      margin-right: 0.3rem;
    }
    .cause-progress {
      margin-bottom: 1.5rem;
    }
    .progress-bar {
      height: 8px;
      background: #e2e8f0;
      border-radius: 4px;
      overflow: hidden;
      margin-bottom: 0.5rem;
    }
    .progress-fill {
      height: 100%;
      background: #4a6fa5;
      border-radius: 4px;
    }
    .progress-info {
      display: flex;
      justify-content: space-between;
      font-size: 0.9rem;
      color: #6b7280;
    }
    .cause-actions {
      display: flex;
      gap: 0.8rem;
    }
    .cause-actions .btn {
      flex: 1;
      text-align: center;
      justify-content: center;
    }

    /* --- ESTILOS PARA TAREAS --- */
    .tasks-grid {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 2rem;
      margin-bottom: 3rem;
    }
    .task-card {
      background: white;
      border-radius: 12px;
      overflow: hidden;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
      transition: all 0.3s ease;
      border: 1px solid #e2e8f0;
      display: flex;
      flex-direction: column;
    }
    .task-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    }
    .task-image {
      height: 180px;
      overflow: hidden;
      position: relative;
    }
    .task-image img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: transform 0.3s ease;
    }
    .task-card:hover .task-image img {
      transform: scale(1.05);
    }
    .task-badge {
      position: absolute;
      padding: 0.3rem 0.8rem;
      border-radius: 50px;
      font-size: 0.8rem;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }
    .task-badge.urgent {
      top: 1rem;
      right: 1rem;
      background: #e53e3e;
      color: white;
    }
    .task-badge.points {
      top: 1rem;
      left: 1rem;
      background: #4a6fa5;
      color: white;
    }
    .task-content {
      padding: 1.5rem;
      display: flex;
      flex-direction: column;
      flex: 1;
    }
    .task-content h3 {
      font-size: 1.3rem;
      margin-bottom: 0.8rem;
      color: #2d3748;
      font-weight: 700;
    }
    .task-content p {
      color: #6b7280;
      margin-bottom: 1.5rem;
      font-size: 0.95rem;
      line-height: 1.6;
      flex-grow: 1;
    }
    .linked-cause {
      display: flex;
      align-items: center;
      gap: 0.8rem;
      background: #f8fafc;
      padding: 0.8rem;
      border-radius: 8px;
      margin-bottom: 1.5rem;
      border: 1px solid #e2e8f0;
    }
    .linked-cause img {
      width: 40px;
      height: 40px;
      border-radius: 6px;
      object-fit: cover;
    }
    .linked-cause span {
      font-weight: 600;
      color: #4a6fa5;
      font-size: 0.9rem;
    }
    .task-meta {
      display: flex;
      gap: 1rem;
      margin-bottom: 1.5rem;
      font-size: 0.85rem;
      flex-wrap: wrap;
    }
    .meta-item {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      color: #6b7280;
    }
    .meta-item i {
      color: #4a6fa5;
    }
    .beneficiaries-count {
      display: inline-flex;
      align-items: center;
      background: #f0f9ff;
      color: #4a6fa5;
      padding: 0.3rem 0.8rem;
      border-radius: 50px;
      font-size: 0.85rem;
      font-weight: 600;
      grid-column: 1 / -1;
    }
    .beneficiaries-count i {
      margin-right: 0.3rem;
    }
    .task-progress {
      margin-bottom: 1.5rem;
    }
    .progress-bar {
      height: 8px;
      background: #e2e8f0;
      border-radius: 4px;
      overflow: hidden;
      margin-bottom: 0.5rem;
    }
    .progress-fill {
      height: 100%;
      background: #4a6fa5;
      border-radius: 4px;
      transition: width 0.3s ease;
    }
    .progress-info {
      display: flex;
      justify-content: space-between;
      font-size: 0.9rem;
      color: #6b7280;
    }
    .task-actions {
      display: flex;
      gap: 0.8rem;
      margin-top: auto;
    }
    .task-actions .btn {
      flex: 1;
      text-align: center;
      justify-content: center;
    }

    /* Botones específicos para tareas */
    .view-task-btn {
      background: #4a6fa5;
      color: white;
    }
    .view-task-btn:hover {
      background: #166088;
      transform: translateY(-2px);
    }
    .participate-btn {
      background: #4fc3a1;
      color: white;
    }
    .participate-btn:hover:not(:disabled) {
      background: #3da58a;
      transform: translateY(-2px);
    }
    .participate-btn:disabled {
      opacity: 0.7;
      cursor: not-allowed;
      transform: none;
    }
    .admin-activity-btn {
      background: #ff6b6b;
      color: white;
    }
    .admin-activity-btn:hover {
      background: #ff5252;
      transform: translateY(-2px);
    }

    /* --- ESTILOS PARA ESTADOS VACÍOS --- */
    .no-activities, .no-tasks, .error-message {
      grid-column: 1 / -1;
      text-align: center;
      padding: 2.5em 1em;
    }
    .no-activities i, .no-tasks i {
      font-size: 2.5em;
      color: #4fc3a1;
      margin-bottom: 0.5em;
    }
    .no-activities h4, .no-tasks h4 {
      color: #4a6fa5;
      font-size: 1.3em;
      margin-bottom: 0.3em;
    }
    .no-activities p, .no-tasks p {
      color: #6b7280;
      font-size: 1em;
    }

    /* --- ESTILOS PARA COMUNIDADES --- */
    .community-row {
      display: flex;
      align-items: center;
      gap: 1.5rem;
      padding: 1rem;
      background: #f8fafc;
      border-radius: 12px;
      margin-bottom: 1rem;
      border: 1px solid #e2e8f0;
    }
    .community-row img {
      width: 60px;
      height: 60px;
      border-radius: 50%;
      object-fit: cover;
    }
    .community-row-content {
      flex: 1;
    }
    .community-row-title {
      font-weight: 600;
      color: #4a6fa5;
      margin-bottom: 0.3rem;
    }
    .community-row-summary {
      color: #6b7280;
      font-size: 0.9rem;
    }
    .community-row-actions {
      flex-shrink: 0;
    }

    /* --- ESTILOS PARA RETOS/CHALLENGES (idénticos a challenges/index.njk) --- */
    .challenges-grid {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 2rem;
      margin-bottom: 3rem;
    }

    .challenge-card {
      background: white;
      border-radius: 12px;
      overflow: hidden;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
      transition: all 0.3s ease;
      border: 1px solid #e2e8f0;
      display: flex;
      flex-direction: column;
    }
    .challenge-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    }
    .challenge-image {
      height: 180px;
      overflow: hidden;
      position: relative;
    }
    .challenge-image img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: transform 0.3s ease;
    }
    .challenge-card:hover .challenge-image img {
      transform: scale(1.05);
    }
    .challenge-badge {
      position: absolute;
      padding: 0.3rem 0.8rem;
      border-radius: 50px;
      font-size: 0.8rem;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }
    .challenge-badge.urgent {
      top: 1rem;
      right: 1rem;
      background: #e53e3e;
      color: white;
    }
    .challenge-badge.points {
      top: 1rem;
      left: 1rem;
      background: #a67c00;
      color: white;
    }
    .challenge-content {
      padding: 1.5rem;
      display: flex;
      flex-direction: column;
      flex: 1;
    }
    .challenge-content h3 {
      font-size: 1.3rem;
      margin-bottom: 0.8rem;
      color: #2d3748;
      font-weight: 700;
    }
    .challenge-content p {
      color: #6b7280;
      margin-bottom: 1.5rem;
      font-size: 0.95rem;
      line-height: 1.6;
      flex-grow: 1;
    }
    .challenge-meta {
      display: flex;
      gap: 1rem;
      margin-bottom: 1.5rem;
      font-size: 0.85rem;
      flex-wrap: wrap;
    }
    .challenge-progress {
      margin-bottom: 1.5rem;
    }
    .challenge-actions {
      display: flex;
      gap: 0.8rem;
      margin-top: auto;
    }
    .challenge-actions .btn {
      flex: 1;
      text-align: center;
      justify-content: center;
    }

    /* Botones específicos para challenges */
    .btn-warning {
      background: #ffe066;
      color: #333;
    }
    .btn-warning:hover {
      background: #a67c00;
      color: white;
      transform: translateY(-2px);
    }

    /* Estado vacío para retos */
    .no-challenges {
      grid-column: 1 / -1;
      text-align: center;
      padding: 2.5em 1em;
      color: #6b7280;
    }

    .no-challenges i {
      font-size: 2.5em;
      color: #ffe066;
      margin-bottom: 0.5em;
    }

    .no-challenges h4 {
      color: #4a6fa5;
      font-size: 1.3em;
      margin-bottom: 0.3em;
    }

    .no-challenges p {
      color: #6b7280;
      font-size: 1em;
      margin-bottom: 1em;
    }

    /* --- ESTILOS PARA VOLUNTARIADOS (idénticos a volunteering/index.njk) --- */
    .volunteering-grid {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 2rem;
      margin-bottom: 3rem;
    }

    .volunteering-card {
      background: white;
      border-radius: 12px;
      overflow: hidden;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
      transition: all 0.3s ease;
      border: 1px solid #e2e8f0;
      display: flex;
      flex-direction: column;
    }

    .volunteering-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    }

    .volunteering-image {
      height: 180px;
      overflow: hidden;
      position: relative;
    }

    .volunteering-image img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: transform 0.3s ease;
    }

    .volunteering-card:hover .volunteering-image img {
      transform: scale(1.05);
    }

    .volunteering-badge {
      position: absolute;
      padding: 0.3rem 0.8rem;
      border-radius: 50px;
      font-size: 0.8rem;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .volunteering-badge.urgent {
      top: 1rem;
      right: 1rem;
      background: #e53e3e;
      color: white;
    }

    .volunteering-badge.points {
      top: 1rem;
      left: 1rem;
      background: #4fc3a1;
      color: white;
    }

    .volunteering-content {
      padding: 1.5rem;
      display: flex;
      flex-direction: column;
      flex: 1;
    }

    .volunteering-content h3 {
      font-size: 1.3rem;
      margin-bottom: 0.8rem;
      color: #2d3748;
      font-weight: 700;
    }

    .volunteering-content p {
      color: #6b7280;
      margin-bottom: 1.5rem;
      font-size: 0.95rem;
      line-height: 1.6;
      flex-grow: 1;
    }

    .volunteering-meta {
      display: flex;
      gap: 1rem;
      margin-bottom: 1.5rem;
      font-size: 0.85rem;
      flex-wrap: wrap;
    }

    .volunteering-progress {
      margin-bottom: 1.5rem;
    }

    .volunteering-actions {
      display: flex;
      gap: 0.8rem;
      margin-top: auto;
    }

    .volunteering-actions .btn {
      flex: 1;
      text-align: center;
      justify-content: center;
    }

    /* Estado vacío para voluntariados */
    .no-volunteering {
      grid-column: 1 / -1;
      text-align: center;
      padding: 2.5em 1em;
      color: #6b7280;
    }

    .no-volunteering i {
      font-size: 2.5em;
      color: #4fc3a1;
      margin-bottom: 0.5em;
    }

    .no-volunteering h4 {
      color: #4a6fa5;
      font-size: 1.3em;
      margin-bottom: 0.3em;
    }

    .no-volunteering p {
      color: #6b7280;
      font-size: 1em;
      margin-bottom: 1em;
    }

    /* --- ESTILOS PARA COMUNIDADES --- */
    .communities-grid {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 2rem;
      margin-bottom: 3rem;
    }
    .community-card {
      background: #fff;
      border-radius: 12px;
      overflow: hidden;
      box-shadow: 0 5px 15px rgba(0,0,0,0.05);
      border: 1px solid #e2e8f0;
      display: flex;
      flex-direction: column;
      transition: box-shadow 0.2s, transform 0.2s;
    }
    .community-card:hover {
      box-shadow: 0 10px 25px rgba(0,0,0,0.10);
      transform: translateY(-5px);
    }
    .community-image {
      height: 180px;
      overflow: hidden;
      position: relative;
    }
    .community-image img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: transform 0.3s;
    }
    .community-card:hover .community-image img {
      transform: scale(1.05);
    }
    .community-content {
      padding: 1.5rem;
      display: flex;
      flex-direction: column;
      flex: 1;
    }
    .community-content h3 {
      font-size: 1.3rem;
      margin-bottom: 0.8rem;
      color: #2d3748;
      font-weight: 700;
    }
    .community-content p {
      color: #6b7280;
      margin-bottom: 1.5rem;
      font-size: 0.95rem;
      line-height: 1.6;
      flex-grow: 1;
    }
    .community-actions {
      display: flex;
      gap: 0.8rem;
      margin-top: auto;
    }

    /* Responsive: 2 columnas en tablet, 1 columna en móvil */
    @media (max-width: 1024px) {
      .communities-grid {
        grid-template-columns: repeat(2, 1fr);
      }
    }
    @media (max-width: 600px) {
      .communities-grid {
        grid-template-columns: 1fr;
      }
    }

    /* --- ESTILOS PARA EQUIPOS (NUEVO) --- */
    .teams-grid-classic {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 2rem;
      margin-bottom: 3rem;
    }
    @media (max-width: 1024px) {
      .teams-grid-classic {
        grid-template-columns: repeat(2, 1fr);
      }
    }
    @media (max-width: 600px) {
      .teams-grid-classic {
        grid-template-columns: 1fr;
      }
    }

    /* --- ESTILOS PARA TABS --- */
    .tabs-container {
      background: white;
      border-radius: 12px;
      padding: 1rem;
      box-shadow: 0 2px 10px rgba(0,0,0,0.05);
      border: 1px solid #e2e8f0;
    }

    .tabs {
      display: flex;
      gap: 0.5rem;
      flex-wrap: wrap;
    }

    .tab {
      background: #f8fafc;
      border: 1px solid #e2e8f0;
      border-radius: 8px;
      padding: 0.7rem 1.2rem;
      font-size: 0.9rem;
      font-weight: 500;
      color: #6b7280;
      cursor: pointer;
      transition: all 0.2s ease;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      min-width: 100px;
      justify-content: center;
    }

    .tab:hover {
      background: #e2e8f0;
      border-color: #cbd5e1;
      color: #4a6fa5;
    }

    .tab.active {
      background: #4a6fa5;
      border-color: #4a6fa5;
      color: white;
      box-shadow: 0 2px 8px rgba(74, 111, 165, 0.2);
    }

    .tab.active:hover {
      background: #3d5a87;
      border-color: #3d5a87;
    }

    /* --- ESTILOS PARA BÚSQUEDA --- */
    .search-container {
      background: white;
      border-radius: 12px;
      padding: 1rem;
      box-shadow: 0 2px 10px rgba(0,0,0,0.05);
      border: 1px solid #e2e8f0;
    }

    .search-input-wrapper {
      position: relative;
      display: flex;
      align-items: center;
    }

    .search-icon {
      position: absolute;
      left: 1rem;
      color: #9ca3af;
      font-size: 1rem;
      z-index: 2;
    }

    .search-input {
      width: 100%;
      padding: 0.8rem 1rem 0.8rem 2.8rem;
      border: 1px solid #d1d5db;
      border-radius: 8px;
      font-size: 1rem;
      background: #f9fafb;
      transition: all 0.2s ease;
    }

    .search-input:focus {
      outline: none;
      border-color: #4a6fa5;
      background: white;
      box-shadow: 0 0 0 3px rgba(74, 111, 165, 0.1);
    }

    .clear-search {
      position: absolute;
      right: 0.8rem;
      background: none;
      border: none;
      color: #9ca3af;
      font-size: 1rem;
      cursor: pointer;
      padding: 0.2rem;
      border-radius: 4px;
      transition: color 0.2s ease;
    }

    .clear-search:hover {
      color: #6b7280;
      background: #f3f4f6;
    }

    /* --- ESTILOS PARA PAGINACIÓN --- */
    .pagination-container {
      background: white;
      border-radius: 12px;
      padding: 1rem;
      box-shadow: 0 2px 10px rgba(0,0,0,0.05);
      border: 1px solid #e2e8f0;
    }

    .pagination-container .btn {
      min-width: 100px;
    }

    .pagination-container .btn:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }

    #pageInfo {
      font-size: 1rem;
      color: #4a6fa5;
      font-weight: 600;
      min-width: 60px;
      text-align: center;
    }

    /* --- RESPONSIVE PARA TABS --- */
    @media (max-width: 768px) {
      .tabs {
        justify-content: center;
      }
      
      .tab {
        min-width: 80px;
        font-size: 0.8rem;
        padding: 0.6rem 0.8rem;
      }
      
      .search-input {
        font-size: 0.9rem;
      }
      
      .pagination-container {
        flex-direction: column;
        gap: 0.8rem;
      }
      
      .pagination-container .btn {
        min-width: 80px;
      }
    }

    /* --- ESTILOS ADICIONALES PARA TEAMS RENDERER --- */
    .team-card-classic {
      background: white;
      border-radius: 12px;
      overflow: hidden;
      box-shadow: 0 5px 15px rgba(0,0,0,0.05);
      transition: all 0.3s ease;
      border: 1px solid #e2e8f0;
      display: flex;
      flex-direction: column;
    }
    .team-card-classic:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 25px rgba(0,0,0,0.1);
    }
    .team-image-classic {
      height: 180px;
      overflow: hidden;
      position: relative;
    }
    .team-image-classic img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: transform 0.3s ease;
    }
    .team-card-classic:hover .team-image-classic img {
      transform: scale(1.05);
    }
    .team-badge-classic {
      position: absolute;
      padding: 0.3rem 0.8rem;
      border-radius: 50px;
      font-size: 0.8rem;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
      z-index: 2;
    }
    .team-badge-classic.points {
      background: var(--primary, #4a6fa5);
      color: white;
      top: 1rem;
      left: 1rem;
    }
    .team-content-classic {
      padding: 1.5rem;
      display: flex;
      flex-direction: column;
      flex: 1;
    }
    .team-content-classic h3 {
      font-size: 1.3rem;
      margin-bottom: 0.8rem;
      color: #2d3748;
      font-weight: 700;
    }
    .team-content-classic p {
      color: #6b7280;
      margin-bottom: 1.5rem;
      font-size: 0.95rem;
      line-height: 1.6;
      flex-grow: 1;
    }
    .team-meta-classic {
      display: flex;
      gap: 1rem;
      margin-bottom: 1.5rem;
      font-size: 0.85rem;
      flex-wrap: wrap;
    }
    .meta-item-classic {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      color: #6b7280;
    }
    .meta-item-classic i {
      color: #4a6fa5;
    }
    .team-tags-classic {
      display: flex;
      flex-wrap: wrap;
      gap: 0.3rem;
      margin-bottom: 1rem;
    }
    .team-tag-classic {
      background: #e6f0fa;
      color: #4a6fa5;
      border-radius: 50px;
      padding: 0.2rem 0.8rem;
      font-size: 0.8rem;
      font-weight: 600;
      border: 1px solid #dbeafe;
    }
    .team-tag-classic.tag-more {
      background: #ffe600;
      color: #a67c00;
      border: 1px solid #ffe600;
    }
    .team-progress-classic {
      margin-bottom: 1.5rem;
    }
    .team-actions-classic {
      display: flex;
      gap: 0.8rem;
      margin-top: auto;
    }
    .team-actions-classic .btn {
      flex: 1;
      text-align: center;
      justify-content: center;
    }
    .btn-vermas-team {
      background: #4a6fa5;
      color: white;
      border: none;
      padding: 0.6rem 1.2rem;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
    }
    .btn-vermas-team:hover {
      background: #166088;
      transform: translateY(-2px);
    }
    .join-team-btn {
      background: #4fc3a1;
      color: white;
      border: none;
      padding: 0.6rem 1.2rem;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
    }
    .join-team-btn:hover:not(:disabled) {
      background: #3da58a;
      transform: translateY(-2px);
    }
    .join-team-btn:disabled {
      opacity: 0.7;
      cursor: not-allowed;
      transform: none;
    }

    /* Estado vacío para comunidades */
    .empty-state {
      grid-column: 1 / -1;
      text-align: center;
      padding: 3rem 1rem;
      color: #6b7280;
    }

    .empty-state i {
      font-size: 3rem;
      color: #4a6fa5;
      margin-bottom: 1rem;
    }

    .empty-state h3 {
      color: #4a6fa5;
      font-size: 1.4rem;
      margin-bottom: 0.5rem;
    }

    .empty-state p {
      margin-bottom: 1.5rem;
      font-size: 1.1rem;
    }

    /* Variables CSS que usa el renderer */
    :root {
      --primary: #4a6fa5;
      --primary-dark: #166088;
      --accent: #4fc3a1;
      --gray: #e2e8f0;
    }

    /* --- ESTILOS PARA TABS DE ACTIVIDADES --- */
    .activities-tabs-container {
      background: white;
      border-radius: 12px;
      padding: 1rem;
      box-shadow: 0 2px 10px rgba(0,0,0,0.05);
      border: 1px solid #e2e8f0;
      margin-bottom: 2rem;
    }

    .activities-tabs {
      display: flex;
      gap: 0.5rem;
      flex-wrap: wrap;
      justify-content: center;
    }

    .activity-tab {
      background: #f8fafc;
      border: 1px solid #e2e8f0;
      border-radius: 8px;
      padding: 0.7rem 1.2rem;
      font-size: 0.9rem;
      font-weight: 500;
      color: #6b7280;
      cursor: pointer;
      transition: all 0.2s ease;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      min-width: 120px;
      justify-content: center;
    }

    .activity-tab:hover {
      background: #e2e8f0;
      border-color: #cbd5e1;
      color: #4a6fa5;
    }

    .activity-tab.active {
      background: #4a6fa5;
      border-color: #4a6fa5;
      color: white;
      box-shadow: 0 2px 8px rgba(74, 111, 165, 0.2);
    }

    .activity-tab.active:hover {
      background: #3d5a87;
      border-color: #3d5a87;
    }

    /* Grid de actividades en 3 columnas */
    .activities-grid {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 2rem;
      margin-bottom: 3rem;
    }

    /* Responsive para activities grid */
    @media (max-width: 1024px) {
      .activities-grid {
        grid-template-columns: repeat(2, 1fr);
      }
      
      .activities-tabs {
        justify-content: center;
      }
      
      .activity-tab {
        min-width: 100px;
        font-size: 0.8rem;
        padding: 0.6rem 0.8rem;
      }
    }

    @media (max-width: 600px) {
      .activities-grid {
        grid-template-columns: 1fr;
      }
    }
  </style>
{% endblock %}

{% block content %}
<div class="profile-main-container">
  <!-- Header con foto y datos básicos -->
  <div class="profile-header">
    <div class="profile-photo-wrapper">
      <img class="profile-photo" src="/img/avatar-default.jpg" alt="Foto de perfil">
    </div>
    <div class="profile-info">
      <h2 id="profile-name">Nombre Apellido</h2>
      <div class="profile-location" id="profile-location"></div>
      <div class="profile-bio" id="profile-bio"></div>
      <div class="social-links">
        <a href="#"><i class="fab fa-linkedin"></i></a>
        <a href="#"><i class="fab fa-twitter"></i></a>
        <a href="#"><i class="fab fa-instagram"></i></a>
      </div>
    </div>
  </div>

  <!-- Sección de estadísticas principales -->
  <div class="stats-section">
    <div class="stats-card">
      <div class="stats-icon"><i class="fas fa-project-diagram"></i></div>
      <div class="stats-content">
        <div class="number" id="projects-counter">0</div>
        <div class="label">Proyectos</div>
      </div>
    </div>
    <div class="stats-card highlight">
      <div class="stats-icon"><i class="fas fa-users"></i></div>
      <div class="stats-content">
        <div class="number" id="impacted-counter">0</div>
        <div class="label">Personas impactadas</div>
      </div>
    </div>
    <div class="stats-card">
      <div class="stats-icon"><i class="fas fa-hand-holding-heart"></i></div>
      <div class="stats-content">
        <div class="number" id="donated-counter">0</div>
        <div class="label">Donado</div>
      </div>
    </div>
    <div class="stats-card">
      <div class="stats-icon"><i class="fas fa-users"></i></div>
      <div class="stats-content">
        <div class="number" id="communities-counter">0</div>
        <div class="label">Comunidades</div>
      </div>
    </div>
  </div>

  <!-- Barra de progreso de impacto -->
  <div class="impact-score-section">
    <div class="section-header">
      <h3>Tu impacto social</h3>
      <div class="impact-score-main">
        <span class="score" id="impact-score">0</span>
        <span class="score-label">Puntos</span>
        <span class="impact-badge" id="impact-level-badge">
          <i class="fas fa-tree" style="margin-right:0.4em;color:#fff;"></i>
          Forest
        </span>
      </div>
    </div>
    <div class="impact-score-bar-bg">
      <div class="impact-score-bar" id="impact-score-bar" style="width:0%"></div>
    </div>
    <div class="impact-level-info">
      <span id="impact-level">Nivel 1 - Seed</span>
      <span id="impact-score-details-text">0/500 puntos para el siguiente nivel</span>
    </div>
  </div>

  <!-- Tus actividades -->
  <div class="activities-section">
    <div class="section-header">
      <h3>Tus actividades</h3>
    </div>
    
    <!-- TABS PARA FILTRAR ACTIVIDADES -->
    <div class="activities-tabs-container">
      <div class="activities-tabs">
        <button class="activity-tab active" data-activity-filter="all">
          <i class="fas fa-th-large"></i> Todas
        </button>
        <button class="activity-tab" data-activity-filter="causes">
          <i class="fas fa-hands-helping"></i> Causas
        </button>
        <button class="activity-tab" data-activity-filter="tasks">
          <i class="fas fa-tasks"></i> Tareas
        </button>
        <button class="activity-tab" data-activity-filter="challenges">
          <i class="fas fa-bolt"></i> Retos
        </button>
        <button class="activity-tab" data-activity-filter="volunteering">
          <i class="fas fa-heart"></i> Voluntariados
        </button>
      </div>
    </div>
    
    <!-- Grid unificado para todas las actividades -->
    <div class="activities-grid" id="activities-grid"></div>
  </div>

  <!-- Comunidades -->
  <div class="communities-section">
    <div class="section-header" style="margin-top:2.5em;">
      <h3>Tus comunidades</h3>
    </div>

    <!-- CONTROLES DE COMUNIDADES -->
    <div class="teams-controls" style="margin-bottom: 2rem;">
      <!-- Tabs de filtros -->
      <div class="tabs-container" style="margin-bottom: 1.5rem;">
        <div class="tabs">
          <button class="tab active" data-filter="all">
            <i class="fas fa-th-large"></i> Todas
          </button>
          <button class="tab" data-filter="medio_ambiente">
            <i class="fas fa-leaf"></i> Medio Ambiente
          </button>
          <button class="tab" data-filter="educacion">
            <i class="fas fa-graduation-cap"></i> Educación
          </button>
          <button class="tab" data-filter="salud">
            <i class="fas fa-heartbeat"></i> Salud
          </button>
          <button class="tab" data-filter="animales">
            <i class="fas fa-paw"></i> Animales
          </button>
          <button class="tab" data-filter="comunidad">
            <i class="fas fa-users"></i> Comunidad
          </button>
          <button class="tab" data-filter="otros">
            <i class="fas fa-plus-circle"></i> Otros
          </button>
        </div>
      </div>

      <!-- Barra de búsqueda -->
      <div class="search-container" style="margin-bottom: 1.5rem;">
        <div class="search-input-wrapper">
          <i class="fas fa-search search-icon"></i>
          <input type="text" id="search-input" class="search-input" placeholder="Buscar en tus comunidades...">
          <button id="clear-search" class="clear-search" style="display: none;">
            <i class="fas fa-times"></i>
          </button>
        </div>
      </div>
    </div>

    <!-- Grid de comunidades -->
    <div class="teams-grid-classic" id="communities-list"></div>

    <!-- Paginación -->
    <div class="pagination-container" id="pagination" style="display: flex; justify-content: center; align-items: center; gap: 1rem; margin-top: 2rem;">
      <button id="prevPage" class="btn btn-outline" disabled>
        <i class="fas fa-chevron-left"></i> Anterior
      </button>
      <span id="pageInfo" style="color: #6b7280; font-weight: 600;">1 / 1</span>
      <button id="nextPage" class="btn btn-outline" disabled>
        Siguiente <i class="fas fa-chevron-right"></i>
      </button>
    </div>
  </div>

  <!-- Mapa de impacto -->
  <div class="map-section">
    <div class="section-header">
      <h3>Tu mapa de impacto</h3>
    </div>
    <div id="profile-map"></div>
    <div class="map-legend">
      <div class="legend-item"><span class="legend-color cause"></span> Causas</div>
      <div class="legend-item"><span class="legend-color task"></span> Tareas</div>
      <div class="legend-item"><span class="legend-color challenge"></span> Retos</div>
      <div class="legend-item"><span class="legend-color volunteering"></span> Voluntariados</div>
      <div class="legend-item"><span class="legend-color community"></span> Comunidades</div>
    </div>
  </div>
</div>
{% endblock %}

{% block scripts %}
  {{ super() }}
  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
  <script src="/js/modules/causes-renderer.js"></script>
  <script src="/js/modules/tasks-renderer.js"></script>
  <script src="/js/modules/challenges-renderer.js"></script>
  <script src="/js/modules/volunteering-renderer.js"></script>
  <script src="/js/modules/teams-renderer.js"></script>
  <script>
    function waitForSupabase(callback) {
      if (window.supabase) {
        callback(window.supabase);
      } else {
        setTimeout(() => waitForSupabase(callback), 30);
      }
    }

    // Animación de contadores
    function animateCounter(id, target, prefix = '', suffix = '', duration = 1200) {
      const el = document.getElementById(id);
      if (!el) return;
      let count = 0;
      const steps = 50;
      const step = Math.max(1, Math.ceil(target / steps));
      const intervalTime = Math.max(10, Math.floor(duration / (target / step)));
      const interval = setInterval(() => {
        count += step;
        if (count >= target) {
          el.textContent = prefix + target + suffix;
          clearInterval(interval);
        } else {
          el.textContent = prefix + count + suffix;
        }
      }, intervalTime);
    }

    // Impacto social
    const levels = [
      { name: "Seed", min: 0, max: 499, color: "#4CAF50", icon: "fa-seedling" },
      { name: "Sprout", min: 500, max: 999, color: "#8BC34A", icon: "fa-leaf" },
      { name: "Tree", min: 1000, max: 1999, color: "#FFC107", icon: "fa-tree" },
      { name: "Forest", min: 2000, max: 4999, color: "#FF9800", icon: "fa-forest" },
      { name: "Legend", min: 5000, max: 99999, color: "#F44336", icon: "fa-trophy" }
    ];

    function getLevel(score) {
      for (let i = levels.length - 1; i >= 0; i--) {
        if (score >= levels[i].min) {
          return { ...levels[i], idx: i };
        }
      }
      return { ...levels[0], idx: 0 };
    }

    function updateImpactScore(score) {
      const scoreElement = document.getElementById('impact-score');
      const levelElement = document.getElementById('impact-level');
      const badgeElement = document.getElementById('impact-level-badge');
      const barElement = document.getElementById('impact-score-bar');
      const detailsElement = document.getElementById('impact-score-details-text');
      
      if (!scoreElement || !levelElement || !barElement || !detailsElement) return;
      
      scoreElement.textContent = score;
      const level = getLevel(score);
      levelElement.innerHTML = `<i class="fas ${level.icon}"></i> Nivel ${level.idx + 1} - ${level.name}`;
      
      if (badgeElement) {
        badgeElement.textContent = level.name;
        badgeElement.style.background = level.name === "Forest"
          ? "linear-gradient(90deg,#FF9800,#4fc3a1)"
          : level.color;
        badgeElement.innerHTML = level.name === "Forest"
          ? '<i class="fas fa-tree" style="margin-right:0.4em;color:#fff;"></i>Forest'
          : level.name;
      }
      
      let percent = 100;
      if (level.max) {
        percent = Math.round(((score - level.min) / (level.max - level.min)) * 100);
        percent = Math.max(0, Math.min(percent, 100));
      }
      
      barElement.style.width = percent + '%';
      barElement.style.backgroundColor = level.color;
      detailsElement.textContent = percent >= 100
        ? `¡Has alcanzado el máximo de este nivel!`
        : `Te faltan ${level.max - score} puntos para el siguiente nivel.`;
    }

    // FUNCIÓN PARA INICIALIZAR EL MAPA DEL PERFIL
    function initProfileMap(activities, communities) {
      const mapContainer = document.getElementById('profile-map');
      if (!mapContainer) return;

      // Crear el mapa centrado en España por defecto
      const map = L.map('profile-map').setView([40.4168, -3.7038], 6);

      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '© OpenStreetMap contributors'
      }).addTo(map);

      // Íconos personalizados para cada tipo
      const icons = {
        cause: L.divIcon({
          html: '<i class="fas fa-hands-helping"></i>',
          iconSize: [20, 20],
          className: 'custom-div-icon',
          iconAnchor: [10, 10],
          popupAnchor: [0, -10]
        }),
        task: L.divIcon({
          html: '<i class="fas fa-tasks"></i>',
          iconSize: [20, 20], 
          className: 'custom-div-icon task-icon',
          iconAnchor: [10, 10],
          popupAnchor: [0, -10]
        }),
        challenge: L.divIcon({
          html: '<i class="fas fa-bolt"></i>',
          iconSize: [20, 20],
          className: 'custom-div-icon challenge-icon',
          iconAnchor: [10, 10],
          popupAnchor: [0, -10]
        }),
        volunteering: L.divIcon({
          html: '<i class="fas fa-heart"></i>',
          iconSize: [20, 20],
          className: 'custom-div-icon volunteering-icon',
          iconAnchor: [10, 10],
          popupAnchor: [0, -10]
        }),
        community: L.divIcon({
          html: '<i class="fas fa-users"></i>',
          iconSize: [20, 20],
          className: 'custom-div-icon community-icon',
          iconAnchor: [10, 10],
          popupAnchor: [0, -10]
        })
      };

      // Agregar pins de actividades
      activities.forEach(activity => {
        if (activity.latitude && activity.longitude) {
          const marker = L.marker([activity.latitude, activity.longitude], {
            icon: icons[activity.type]
          }).addTo(map);

          // Popup con información
          marker.bindPopup(`
            <div class="map-popup">
              <img src="${activity.photo_url || `/img/${activity.type}-default.jpg`}" 
                   alt="${activity.title || activity.name}" 
                   style="width: 100%; height: 80px; object-fit: cover; border-radius: 4px; margin-bottom: 8px;">
              <h4 style="margin: 0 0 4px 0; font-size: 14px; color: #4a6fa5;">
                <i class="fas ${activity.icon}" style="color: ${activity.color}; margin-right: 6px;"></i>
                ${activity.title || activity.name}
              </h4>
              <p style="margin: 0 0 8px 0; font-size: 12px; color: #6b7280;">
                ${activity.typeName} • ${getLocation(activity)}
              </p>
              <p style="margin: 0 0 8px 0; font-size: 11px; color: #374151;">
                ${getDescription(activity)}
              </p>
              <div style="display: flex; gap: 4px; margin-bottom: 8px;">
                <span style="background: ${activity.color}; color: white; padding: 2px 6px; border-radius: 4px; font-size: 10px;">
                  +${activity.points || 10} pts
                </span>
                <span style="background: #e5e7eb; color: #374151; padding: 2px 6px; border-radius: 4px; font-size: 10px;">
                  ${getParticipants(activity)} participantes
                </span>
              </div>
              <button onclick="window.location.href='/${activity.type}s/${activity.id}'" 
                      style="background: ${activity.color}; color: white; border: none; padding: 4px 8px; border-radius: 4px; font-size: 11px; cursor: pointer; width: 100%;">
                Ver detalles
              </button>
            </div>
          `);
        }
      });

      // Agregar pins de comunidades
      communities.forEach(community => {
        if (community.latitude && community.longitude) {
          const marker = L.marker([community.latitude, community.longitude], {
            icon: icons.community
          }).addTo(map);

          marker.bindPopup(`
            <div class="map-popup">
              <img src="${community.photo_url || '/img/community-default.jpg'}" 
                   alt="${community.name}" 
                   style="width: 100%; height: 80px; object-fit: cover; border-radius: 4px; margin-bottom: 8px;">
              <h4 style="margin: 0 0 4px 0; font-size: 14px; color: #4a6fa5;">
                <i class="fas fa-users" style="color: #4fc3a1; margin-right: 6px;"></i>
                ${community.name}
              </h4>
              <p style="margin: 0 0 8px 0; font-size: 12px; color: #6b7280;">
                Comunidad • ${community.city || 'Sin ubicación'}
              </p>
              <p style="margin: 0 0 8px 0; font-size: 11px; color: #374151;">
                ${community.summary || community.description?.substring(0, 80) + '...' || 'Sin descripción'}
              </p>
              <div style="display: flex; gap: 4px; margin-bottom: 8px;">
                <span style="background: #4fc3a1; color: white; padding: 2px 6px; border-radius: 4px; font-size: 10px;">
                  +${community.impact || 0} pts
                </span>
                <span style="background: #e5e7eb; color: #374151; padding: 2px 6px; border-radius: 4px; font-size: 10px;">
                  ${community.members_count || 0} miembros
                </span>
              </div>
              <button onclick="window.location.href='/teams/${community.id}'" 
                      style="background: #4fc3a1; color: white; border: none; padding: 4px 8px; border-radius: 4px; font-size: 11px; cursor: pointer; width: 100%;">
                Ver comunidad
              </button>
            </div>
          `);
        }
      });

      // Ajustar vista del mapa si hay marcadores
      const allMarkers = [...activities, ...communities].filter(item => item.latitude && item.longitude);
      if (allMarkers.length > 0) {
        const group = new L.featureGroup(map._layers);
        if (Object.keys(group._layers).length > 0) {
          map.fitBounds(group.getBounds().pad(0.1));
        }
      }
    }

    // Fallback para renderizar comunidades
    function renderCommunitiesFallback(teams, container) {
      if (!teams || teams.length === 0) {
        container.innerHTML = `
          <div class="empty-state">
            <i class="fas fa-users"></i>
            <h3>Aún no formas parte de ninguna comunidad</h3>
            <p>Únete a una comunidad para empezar a colaborar y generar impacto.</p>
            <a href="/teams" class="btn btn-primary">
              <i class="fas fa-users"></i> Explorar comunidades
            </a>
          </div>
        `;
        return;
      }

      container.innerHTML = '';
      teams.forEach(team => {
        const card = document.createElement('div');
        card.className = 'community-card';
        card.innerHTML = `
          <div class="community-image">
            <img src="${team.photo_url || '/img/comunidad-default.jpg'}" alt="${team.name}">
          </div>
          <div class="community-content">
            <h3>${team.name}</h3>
            <p>${team.description?.substring(0, 100) + '...' || 'Sin descripción'}</p>
            <div class="community-actions">
              <button class="btn btn-primary">Ver comunidad</button>
            </div>
          </div>
        `;
        container.appendChild(card);
      });
    }

    // Solo UN waitForSupabase
    waitForSupabase(async function(supabase) {
      try {
        // 1. Obtener usuario logueado
        const { data: { user }, error: authError } = await supabase.auth.getUser();
        if (authError || !user) {
          window.location.href = '/login?return=/profile';
          return;
        }

        console.log('✅ Usuario cargado:', user.id);

        // 2. Cargar perfil
        const { data: profile, error: profileError } = await supabase
          .from('profiles')
          .select('*')
          .eq('id', user.id)
          .single();

        if (!profileError && profile) {
          document.querySelector('.profile-photo').src = profile.photo_url || '/img/avatar-default.jpg';
          document.getElementById('profile-name').textContent = `${profile.first_name || ''} ${profile.last_name || ''}`.trim() || 'Usuario';
          if (profile.country) {
            document.getElementById('profile-location').innerHTML = `
              <i class="fas fa-map-marker-alt"></i> 
              ${[profile.city, profile.country].filter(Boolean).join(', ')}
            `;
          }
          document.getElementById('profile-bio').textContent = profile.bio || '';
        }

        // 3. CAUSAS
        const { data: causeMembers } = await supabase
          .from('causes_members')
          .select('cause_id')
          .eq('user_id', user.id);

        const causeIds = (causeMembers || []).map(m => m.cause_id).filter(Boolean);
        let causes = [];
        if (causeIds.length > 0) {
          const { data: causesData } = await supabase
            .from('causes')
            .select('*')
            .in('id', causeIds);
          causes = causesData || [];
        }

        console.log('✅ Causas cargadas:', causes.length);

        // 4. TAREAS
        const { data: taskMemberships } = await supabase
          .from('task_members')
          .select('task_id, role, status')
          .eq('user_id', user.id);

        const taskIds = (taskMemberships || []).map(m => m.task_id).filter(Boolean);
        let tasks = [];
        if (taskIds.length > 0) {
          const { data: tasksData } = await supabase
            .from('tasks')
            .select('*')
            .in('id', taskIds);
          
          tasks = (tasksData || []).map(task => {
            const membership = taskMemberships.find(m => m.task_id === task.id);
            return {
              ...task,
              userRole: membership?.role || 'member',
              userStatus: membership?.status || 'active',
              isParticipating: true
            };
          });
        }

        console.log('✅ Tareas cargadas:', tasks.length);

        // 5. RETOS
        const { data: challengeMemberships } = await supabase
          .from('challenges_members')
          .select('challenge_id, role, status')
          .eq('user_id', user.id);

        const challengeIds = (challengeMemberships || []).map(m => m.challenge_id).filter(Boolean);
        let challenges = [];
        if (challengeIds.length > 0) {
          const { data: challengesData } = await supabase
            .from('challenges')
            .select('*')
            .in('id', challengeIds);
          
          challenges = (challengesData || []).map(challenge => {
            const membership = challengeMemberships.find(m => m.challenge_id === challenge.id);
            return {
              ...challenge,
              userRole: membership?.role || 'member',
              userStatus: membership?.status || 'active',
              isParticipating: true
            };
          });
        }

        console.log('✅ Retos cargados:', challenges.length);

        // 6. VOLUNTARIADOS
        const { data: volunteeringMemberships } = await supabase
          .from('volunteering_members')
          .select('volunteering_id, role, status')
          .eq('user_id', user.id);

        const volunteeringIds = (volunteeringMemberships || []).map(m => m.volunteering_id).filter(Boolean);
        let volunteerings = [];
        if (volunteeringIds.length > 0) {
          const { data: volunteeringData } = await supabase
            .from('volunteering')
            .select('*')
            .in('id', volunteeringIds);

          volunteerings = (volunteeringData || []).map(vol => {
            const membership = volunteeringMemberships.find(m => m.volunteering_id === vol.id);
            return {
              ...vol,
              userRole: membership?.role || 'member',
              userStatus: membership?.status || 'active',
              isParticipating: true
            };
          });
        }

        console.log('✅ Voluntariados cargados:', volunteerings.length);

        // 7. COMUNIDADES
        const { data: memberTeams } = await supabase
          .from('team_members')
          .select('team_id')
          .eq('user_id', user.id);

        const teamIds = (memberTeams || []).map(m => m.team_id).filter(Boolean);
        let allCommunities = [];
        if (teamIds.length > 0) {
          const { data: teamsData } = await supabase
            .from('teams')
            .select('*')
            .in('id', teamIds);
          allCommunities = teamsData || [];
        }

        console.log('✅ Comunidades cargadas:', allCommunities.length);

        // 8. COMBINAR ACTIVIDADES
        let allActivities = [
          ...causes.map(item => ({ ...item, type: 'cause', typeName: 'Causa', icon: 'fa-hands-helping', color: '#4a6fa5' })),
          ...tasks.map(item => ({ ...item, type: 'task', typeName: 'Tarea', icon: 'fa-tasks', color: '#4fc3a1' })),
          ...challenges.map(item => ({ ...item, type: 'challenge', typeName: 'Reto', icon: 'fa-bolt', color: '#ffe066' })),
          ...volunteerings.map(item => ({ ...item, type: 'volunteering', typeName: 'Voluntariado', icon: 'fa-heart', color: '#e74c3a1' }))
        ];
        
        let filteredActivities = [...allActivities];

        // 9. FUNCIONES AUXILIARES
        function getLocation(activity) {
          return activity.city && activity.country ? `${activity.city}, ${activity.country}` : 
                 activity.city || activity.country || 'Sin ubicación';
        }

        function getDescription(activity) {
          const desc = activity.summary || activity.description || 'Sin descripción';
          return desc.length > 100 ? desc.substring(0, 100) + '...' : desc;
        }

        function getParticipants(activity) {
          return activity.participants || activity.volunteers || activity.members_count || 0;
        }

        function calculateProgress(activity) {
          const participants = getParticipants(activity);
          const target = activity.beneficiaries || 1;
          return Math.min(Math.round((participants / target) * 100), 100);
        }

        function createCauseLink(activity) {
          if (activity.cause_id && activity.linkedCause) {
            return `
              <div class="linked-cause">
                <img src="${activity.linkedCause.photo_url || '/img/causa-default.jpg'}" alt="${activity.linkedCause.title}">
                <span>${activity.linkedCause.title}</span>
              </div>
                       `;
          }
          return '';
        }

        function createActionButtons(activity, isAdmin, isParticipating) {
          const viewBtn = `<button class="btn view-${activity.type}-btn" data-${activity.type}-id="${activity.id}">Ver más</button>`;
          
          if (isAdmin) {
            return `
              ${viewBtn}
              <button class="btn admin-activity-btn" data-activity-type="${activity.type}" data-activity-id="${activity.id}">
                <i class="fas fa-cog"></i> Administrar
              </button>
            `;
          }
          
          if (isParticipating) {
            return `
              ${viewBtn}
              <button class="btn btn-outline" disabled style="opacity:0.7;cursor:not-allowed;">
                <i class="fas fa-check"></i> Participando
              </button>
            `;
          }
          
          const participateBtn = `<button class="btn participate-btn" data-${activity.type}-id="${activity.id}" style="background: ${activity.color};">Participar</button>`;
          return `${viewBtn}${participateBtn}`;
        }

        function createActivityCard(activity) {
          const isUrgent = activity.is_urgent;
          const points = activity.points || (activity.type === 'cause' ? 10 : 20);
          const progress = calculateProgress(activity);
          const location = getLocation(activity);
          const isParticipating = activity.isParticipating;
          const isAdmin = ['owner', 'admin', 'coordinator', 'founder', 'creator'].includes(activity.userRole);

          const card = document.createElement('div');
          card.className = `${activity.type}-card`;
          card.innerHTML = `
            <div class="${activity.type}-image">
              <img src="${activity.photo_url || `/img/${activity.type}-default.jpg`}" 
                   alt="${activity.title || activity.name}" 
                   onerror="this.src='/img/default-activity.jpg'">
              ${isUrgent ? `<div class="${activity.type}-badge urgent"><i class="fas fa-exclamation-circle"></i> Urgente</div>` : ''}
              <div class="${activity.type}-badge points" style="background: ${activity.color};">
                <i class="fas fa-star"></i> +${points} pts
              </div>
              <div class="activity-type-badge" style="top: 3.5rem; left: 1rem; background: ${activity.color}; color: white; position: absolute; padding: 0.3rem 0.8rem; border-radius: 50px; font-size: 0.8rem; font-weight: 600; display: flex; align-items: center; gap: 0.5rem;">
                <i class="fas ${activity.icon}"></i> ${activity.typeName}
              </div>
            </div>
            <div class="${activity.type}-content">
              <h3>${activity.title || activity.name}</h3>
              <p>${getDescription(activity)}</p>
              ${createCauseLink(activity)}
              <div class="${activity.type}-meta">
                <div class="meta-item"><i class="fas fa-map-marker-alt"></i> ${location}</div>
                <div class="meta-item"><i class="fas fa-users"></i> ${getParticipants(activity)} participantes</div>
                <div class="beneficiaries-count">
                  <i class="fas fa-heart"></i> Beneficia a ${activity.beneficiaries || 0} personas
                </div>
              </div>
              <div class="${activity.type}-progress">
                <div class="progress-bar">
                  <div class="progress-fill" style="width: ${progress}%; background: ${activity.color};"></div>
                </div>
                <div class="progress-info">
                  <span>${getParticipants(activity)} participantes</span>
                  <span>Meta: ${activity.beneficiaries || 0}</span>
                </div>
              </div>
              <div class="${activity.type}-actions">
                ${createActionButtons(activity, isAdmin, isParticipating)}
              </div>
            </div>
          `;
          
          return card;
        }

        // 10. FUNCIÓN PARA FILTRAR ACTIVIDADES
        function filterActivities(type = 'all') {
          if (type === 'all') {
            filteredActivities = [...allActivities];
          } else {
            filteredActivities = allActivities.filter(activity => activity.type === type);
          }
          renderActivities();
        }

        // 11. FUNCIÓN PARA RENDERIZAR ACTIVIDADES
        function renderActivities() {
          const container = document.getElementById('activities-grid');
          if (!container) return;

          if (filteredActivities.length === 0) {
            const activeTab = document.querySelector('.activity-tab.active');
            const tabType = activeTab ? activeTab.dataset.activityFilter : 'all';
            const emptyMessages = {
              all: { icon: 'fa-th-large', title: 'No tienes actividades', desc: 'Únete a causas, tareas, retos o voluntariados', link: '/causes' },
              causes: { icon: 'fa-hands-helping', title: 'No participas en causas', desc: 'Únete a una causa para ayudar', link: '/causes' },
              tasks: { icon: 'fa-tasks', title: 'No tienes tareas asignadas', desc: 'Participa en una causa para recibir tareas', link: '/tasks' },
              challenges: { icon: 'fa-bolt', title: 'No participas en retos', desc: 'Acepta un reto para generar impacto', link: '/challenges' },
              volunteering: { icon: 'fa-heart', title: 'No participas en voluntariados', desc: 'Únete a un voluntariado para ayudar', link: '/volunteering' }
            };
            
            const msg = emptyMessages[tabType] || emptyMessages.all;
            container.innerHTML = `
              <div style="grid-column: 1 / -1; text-align: center; padding: 3rem 1rem; color: #6b7280;">
                <i class="fas ${msg.icon}" style="font-size: 3rem; color: #4a6fa5; margin-bottom: 1rem;"></i>
                <h4 style="color: #4a6fa5; font-size: 1.4rem; margin-bottom: 0.5rem;">${msg.title}</h4>
                <p style="margin-bottom: 1.5rem; font-size: 1.1rem;">${msg.desc}</p>
                <a href="${msg.link}" class="btn btn-primary">
                  <i class="fas ${msg.icon}"></i> Explorar
                </a>
              </div>
            `;
            return;
          }

          container.innerHTML = '';
          filteredActivities.forEach(activity => {
            const card = createActivityCard(activity);
            container.appendChild(card);
          });
        }

        // 12. EVENT LISTENERS PARA TABS
        document.querySelectorAll('.activity-tab').forEach(tab => {
          tab.addEventListener('click', function() {
            document.querySelectorAll('.activity-tab').forEach(t => t.classList.remove('active'));
            this.classList.add('active');
            filterActivities(this.dataset.activityFilter);
          });
        });

        // 13. RENDERIZAR ACTIVIDADES
        renderActivities();

        // 14. RENDERIZAR COMUNIDADES
        const container = document.getElementById('communities-list');
        if (container) {
          renderCommunitiesFallback(allCommunities, container);
        }

        // 15. ACTUALIZAR ESTADÍSTICAS
        animateCounter('projects-counter', causes.length);
        animateCounter('communities-counter', allCommunities.length);
        animateCounter('impacted-counter', causes.reduce((sum, c) => sum + (c.beneficiaries || 0), 0));
        animateCounter('donated-counter', causes.reduce((sum, c) => sum + (c.raised || 0), 0), '', ' €');

        // 16. ACTUALIZAR IMPACTO
        const impactScore = allActivities.reduce((sum, a) => sum + (a.points || 20), 0);
        updateImpactScore(impactScore);

        // 17. INICIALIZAR MAPA
        console.log('🗺️ Inicializando mapa con:', allActivities.length, 'actividades y', allCommunities.length, 'comunidades');
        initProfileMap(allActivities, allCommunities);

      } catch (error) {
        console.error('Error cargando perfil:', error);
      }
    });
  </script>
{% endblock %}