{% extends "layout.njk" %}

{% block title %}Solidarity - Mis Actividades{% endblock %}

{% block head %}
  {{ super() }}
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
  <style>
    :root {
      --primary: #4a6fa5;
      --primary-dark: #166088;
      --gray: #e2e8f0;
      --white: #fff;
      --accent: #4fc3a1;
      --accent-dark: #3da58a;
      --urgent: #e53e3e;
      --challenge: #ffe066;
      --challenge-dark: #a67c00;
      --volunteering: #00bcd4;
      --volunteering-dark: #0097a7;
    }

    .main-container {
      max-width: 1200px;
      margin: 2rem auto;
      padding: 0 2rem;
    }

    .section-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;
    }

    .section-header h1 {
      font-size: 2rem;
      color: var(--primary);
      font-weight: 700;
    }

    .search-container {
      margin-bottom: 2rem;
      display: flex;
      align-items: center;
      gap: 0.7rem;
    }

    .search-container input {
      flex: 1;
      padding: 0.6rem 1.2rem;
      border-radius: 7px;
      border: 1.5px solid var(--gray);
      font-size: 1.05rem;
      outline: none;
      transition: border 0.2s;
      background: #fff;
    }

    .search-container input:focus {
      border-color: var(--primary);
    }

    .tabs {
      display: flex;
      border-bottom: 1px solid var(--gray);
      margin-bottom: 2rem;
      flex-wrap: wrap;
    }

    .tab {
      padding: 0.75rem 1.5rem;
      cursor: pointer;
      position: relative;
      font-weight: 500;
      color: #6b7280;
      background: none;
      border: none;
      outline: none;
    }

    .tab.active {
      color: var(--primary);
      font-weight: 600;
    }

    .tab.active::after {
      content: '';
      position: absolute;
      bottom: -1px;
      left: 0;
      width: 100%;
      height: 3px;
      background: var(--primary);
    }

    /* Grid de actividades */
    .activities-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
      gap: 2rem;
    }

    /* Tarjetas de causas */
    .cause-card {
      background: #fff;
      border-radius: 12px;
      overflow: hidden;
      box-shadow: 0 5px 15px rgba(0,0,0,0.05);
      border: 1px solid var(--gray);
      display: flex;
      flex-direction: column;
      transition: all 0.3s;
      position: relative;
    }
    .cause-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 25px rgba(0,0,0,0.1);
      border-color: var(--primary);
    }
    .cause-image img {
      width: 100%;
      height: 180px;
      object-fit: cover;
      border-top-left-radius: 12px;
      border-top-right-radius: 12px;
    }
    .cause-content {
      padding: 1.2rem 1.5rem 1.5rem 1.5rem;
      flex: 1;
      display: flex;
      flex-direction: column;
    }
    .cause-content h3 {
      font-size: 1.2rem;
      color: var(--primary);
      margin-bottom: 0.5rem;
      font-weight: 700;
    }
    .cause-content p {
      color: #4a5568;
      font-size: 0.97rem;
      margin-bottom: 1rem;
      flex: 1;
    }
    .progress-container {
      margin-bottom: 1rem;
    }
    .progress-bar {
      width: 100%;
      background: var(--gray);
      border-radius: 4px;
      height: 8px;
      position: relative;
      overflow: hidden;
      margin-bottom: 0.5rem;
    }
    .progress {
      height: 100%;
      background: var(--primary);
      border-radius: 4px;
      transition: width 0.4s cubic-bezier(.4,1,.7,1);
    }
    .progress-info {
      display: flex;
      justify-content: space-between;
      font-size: 0.9rem;
      color: #6b7280;
    }
    .meta {
      display: flex;
      gap: 1.2rem;
      font-size: 0.9rem;
      margin-bottom: 1rem;
      color: #6b7280;
    }
    .actions {
      display: flex;
      gap: 0.7rem;
      margin-top: 1rem;
    }

    /* Tarjetas de tareas */
    .task-card {
      background: #fff;
      border-radius: 12px;
      overflow: hidden;
      box-shadow: 0 5px 15px rgba(0,0,0,0.05);
      border: 1px solid var(--gray);
      display: flex;
      flex-direction: column;
      transition: all 0.3s;
      position: relative;
    }
    .task-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 25px rgba(0,0,0,0.1);
      border-color: var(--accent);
    }
    .task-image img {
      width: 100%;
      height: 180px;
      object-fit: cover;
      border-top-left-radius: 12px;
      border-top-right-radius: 12px;
    }
    .task-content {
      padding: 1.2rem 1.5rem 1.5rem 1.5rem;
      flex: 1;
      display: flex;
      flex-direction: column;
    }
    .task-content h3 {
      font-size: 1.2rem;
      color: var(--accent);
      margin-bottom: 0.5rem;
      font-weight: 700;
    }
    .task-content p {
      color: #4a5568;
      font-size: 0.97rem;
      margin-bottom: 1rem;
      flex: 1;
    }
    .task-meta {
      display: flex;
      gap: 1.2rem;
      font-size: 0.9rem;
      margin-bottom: 1rem;
      color: #6b7280;
    }
    .task-actions {
      display: flex;
      gap: 0.7rem;
      margin-top: 1rem;
    }

    /* Tarjetas de retos */
    .challenge-card {
      background: #fffbe6;
      border-radius: 12px;
      overflow: hidden;
      box-shadow: 0 5px 15px rgba(0,0,0,0.05);
      border: 1px solid #ffe066;
      display: flex;
      flex-direction: column;
      transition: all 0.3s;
      position: relative;
    }
    .challenge-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 25px #ffe06655;
      border-color: #ffd600;
    }
    .challenge-image img {
      width: 100%;
      height: 180px;
      object-fit: cover;
      border-top-left-radius: 12px;
      border-top-right-radius: 12px;
    }
    .challenge-content {
      padding: 1.2rem 1.5rem 1.5rem 1.5rem;
      flex: 1;
      display: flex;
      flex-direction: column;
    }
    .challenge-content h3 {
      font-size: 1.2rem;
      color: var(--challenge-dark);
      margin-bottom: 0.5rem;
      font-weight: 700;
    }
    .challenge-content p {
      color: #4a5568;
      font-size: 0.97rem;
      margin-bottom: 1rem;
      flex: 1;
    }
    .challenge-meta {
      display: flex;
      gap: 1.2rem;
      font-size: 0.9rem;
      margin-bottom: 1rem;
      color: #6b7280;
    }
    .challenge-actions {
      display: flex;
      gap: 0.7rem;
      margin-top: 1rem;
    }

    /* Tarjetas de voluntariado */
    .volunteering-card {
      background: #e6faff;
      border-radius: 12px;
      overflow: hidden;
      box-shadow: 0 5px 15px rgba(0,0,0,0.05);
      border: 1px solid #00bcd4;
      display: flex;
      flex-direction: column;
      transition: all 0.3s;
      position: relative;
    }
    .volunteering-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 25px #00bcd422;
      border-color: #0097a7;
    }
    .volunteering-image img {
      width: 100%;
      height: 180px;
      object-fit: cover;
      border-top-left-radius: 12px;
      border-top-right-radius: 12px;
    }
    .volunteering-content {
      padding: 1.2rem 1.5rem 1.5rem 1.5rem;
      flex: 1;
      display: flex;
      flex-direction: column;
    }
    .volunteering-content h3 {
      font-size: 1.2rem;
      color: var(--volunteering-dark);
      margin-bottom: 0.5rem;
      font-weight: 700;
    }
    .volunteering-content p {
      color: #4a5568;
      font-size: 0.97rem;
      margin-bottom: 1rem;
      flex: 1;
    }
    .volunteering-meta {
      display: flex;
      gap: 1.2rem;
      font-size: 0.9rem;
      margin-bottom: 1rem;
      color: #6b7280;
    }
    .volunteering-actions {
      display: flex;
      gap: 0.7rem;
      margin-top: 1rem;
    }

    /* Modal administraci√≥n */
    .admin-modal {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.5);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1000;
      opacity: 0;
      visibility: hidden;
      transition: all 0.3s;
    }
    .admin-modal.active {
      opacity: 1;
      visibility: visible;
    }
    .admin-modal-content {
      background: white;
      border-radius: 12px;
      width: 90%;
      max-width: 800px;
      max-height: 90vh;
      overflow-y: auto;
      padding: 2rem;
      box-shadow: 0 5px 20px rgba(0,0,0,0.2);
      position: relative;
    }
    .close-admin-modal {
      position: absolute;
      top: 1rem;
      right: 1rem;
      background: none;
      border: none;
      font-size: 1.5rem;
      cursor: pointer;
      color: #6b7280;
    }
    .admin-tabs {
      display: flex;
      border-bottom: 1px solid #e2e8f0;
      margin-bottom: 1.5rem;
    }
    .admin-tab {
      padding: 0.75rem 1.5rem;
      cursor: pointer;
      position: relative;
      font-weight: 500;
      color: #6b7280;
      background: none;
      border: none;
      outline: none;
    }
    .admin-tab.active {
      color: var(--primary);
      font-weight: 600;
    }
    .admin-tab.active::after {
      content: '';
      position: absolute;
      bottom: -1px;
      left: 0;
      width: 100%;
      height: 3px;
      background: var(--primary);
    }
    .admin-tab-content {
      display: none;
    }
    .admin-tab-content.active {
      display: block;
    }
    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 1rem;
      margin-bottom: 1.5rem;
    }
    .stat-card {
      background: #f8fafc;
      border-radius: 8px;
      padding: 1.5rem;
      text-align: center;
    }
    .stat-value {
      font-size: 2rem;
      font-weight: 700;
      color: var(--primary);
      margin-bottom: 0.5rem;
    }
    .stat-label {
      color: #6b7280;
      font-size: 0.9rem;
    }
    .progress-bar {
      width: 100%;
      background: var(--gray);
      border-radius: 4px;
      height: 8px;
      position: relative;
      overflow: hidden;
      margin-bottom: 0.5rem;
      box-shadow: none;
    }
    .progress-fill {
      height: 100%;
      background: var(--primary);
      border-radius: 4px;
      transition: width 0.4s cubic-bezier(.4,1,.7,1);
      color: #fff;
      font-size: 0.95em;
      font-weight: 700;
      display: flex;
      align-items: center;
      justify-content: flex-end;
      padding-right: 8px;
      box-shadow: none;
    }
    .progress-info {
      display: flex;
      justify-content: space-between;
      font-size: 0.9rem;
      color: #6b7280;
    }
    .members-list {
      margin-top: 1rem;
    }
    .member-item {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 1rem;
      border-bottom: 1px solid #e2e8f0;
    }
    .member-info {
      display: flex;
      align-items: center;
      gap: 1rem;
    }
    .member-avatar {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      object-fit: cover;
    }
    .member-name {
      font-weight: 600;
    }
    .member-actions {
      display: flex;
      gap: 0.5rem;
    }
    .form-section-title {
      color: var(--primary);
      font-size: 1.25rem;
      font-weight: 700;
      margin-bottom: 1.2rem;
      display: flex;
      align-items: center;
      gap: 0.7rem;
    }
    .form-grid {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 1.2rem 2.2rem;
    }
    .form-group {
      display: flex;
      flex-direction: column;
      gap: 0.4rem;
    }
    .form-group-full {
      grid-column: 1 / -1;
    }
    .form-group label {
      color: var(--primary);
      font-weight: 600;
      font-size: 1rem;
      margin-bottom: 0.2rem;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }
    .form-group input[type="text"],
    .form-group input[type="number"],
    .form-group select,
    .form-group textarea {
      padding: 0.7rem 1rem;
      border-radius: 8px;
      border: 1.5px solid var(--gray);
      font-size: 1rem;
      background: #f8fafc;
      color: #2d3748;
      transition: border 0.2s;
    }
    .form-group input[type="text"]:focus,
    .form-group input[type="number"]:focus,
    .form-group select:focus,
    .form-group textarea:focus {
      border: 1.5px solid var(--primary);
      outline: none;
    }
    .form-actions {
      display: flex;
      flex-wrap: wrap;
      gap: 1rem;
      margin-top: 2rem;
      justify-content: flex-end;
    }
    @media (max-width: 700px) {
      .form-grid {
        grid-template-columns: 1fr;
      }
      .form-actions {
        flex-direction: column;
        align-items: stretch;
      }
      .admin-modal-content {
        width: 95%;
        padding: 1rem;
      }
      .member-item {
        flex-direction: column;
        align-items: flex-start;
        gap: 1rem;
      }
      .member-actions {
        width: 100%;
        justify-content: flex-end;
      }
    }

    /* Responsive */
    @media (max-width: 768px) {
      .activities-grid {
        grid-template-columns: 1fr;
      }
      .cause-card, .task-card, .challenge-card, .volunteering-card {
        margin-bottom: 1.5rem;
      }
      .actions, .task-actions, .challenge-actions, .volunteering-actions {
        flex-direction: column;
      }
    }

    /* Estilo para la info del modal, similar al modal "ver m√°s" */
    .modal-info-title {
      font-size: 1.18rem;
      font-weight: 700;
      color: var(--primary-dark);
      margin-bottom: 0.3rem;
    }
    .modal-info-meta {
      display: flex;
      flex-wrap: wrap;
      gap: 1.1rem;
      font-size: 0.97rem;
      color: #6b7280;
      margin-bottom: 0.7rem;
      align-items: center;
    }
    .modal-info-summary {
      font-size: 1.01rem;
      color: #4a5568;
      margin-bottom: 0.6rem;
      font-style: italic;
    }
    .modal-info-desc {
      font-size: 1.05rem;
      color: #374151;
      margin-bottom: 0.5rem;
      white-space: pre-line;
    }
    .modal-info-progress {
      margin-bottom: 0.7rem;
    }
    .modal-info-progress-bar {
      width: 100%;
      background: var(--gray);
      border-radius: 4px;
      height: 8px;
      position: relative;
      overflow: hidden;
      margin-bottom: 0.3rem;
    }
    .modal-info-progress-inner {
      height: 100%;
      background: var(--primary);
      border-radius: 4px;
      transition: width 0.4s cubic-bezier(.4,1,.7,1);
    }
    .modal-info-progress-labels {
      display: flex;
      justify-content: space-between;
      font-size: 0.93rem;
      color: #6b7280;
    }

    /* Solo a√±ade o modifica este bloque para los t√≠tulos y subt√≠tulos del modal admin */
    .admin-modal-content h2#adminModalTitle {
      font-size: 1.6rem;
      font-weight: 800;
      color: var(--primary);
      margin-bottom: 2rem;
      text-align: center;
      letter-spacing: -1px;
      display: flex;
      align-items: center;
      gap: 0.7rem;
      justify-content: center;
    }
    .admin-modal-content h3,
    .admin-modal-content .form-section-title {
      color: var(--primary);
      font-size: 1.18rem;
      font-weight: 700;
      margin-bottom: 1.2rem;
      margin-top: 0.5rem;
      letter-spacing: -0.5px;
      display: flex;
      align-items: center;
      gap: 0.7rem;
    }
    .admin-modal-content label {
      color: var(--primary);
      font-weight: 600;
      font-size: 1rem;
      margin-bottom: 0.2rem;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }
    .admin-modal-content .stat-value {
      color: var(--primary);
      font-size: 1.5rem;
      font-weight: 700;
    }
    .admin-modal-content .stat-label {
      color: #6b7280;
      font-size: 0.97rem;
      font-weight: 500;
    }
    .admin-modal-content .progress-info {
      color: #4a6fa5;
      font-size: 0.97rem;
      font-weight: 500;
    }
    .admin-modal-content .role-badge {
      display: inline-flex;
      align-items: center;
      gap: 0.4em;
      padding: 0.25em 0.7em;
      border-radius: 999px;
      font-size: 0.93em;
      font-weight: 600;
      background: #e3eefd;
      color: var(--primary-dark);
    }
    .admin-modal-content .role-badge.admin {
      background: #4a6fa5;
      color: #fff;
    }
    .admin-modal-content .role-badge.member {
      background: #e3eefd;
      color: var(--primary-dark);
      border-radius: 999px;
      font-size: 0.93em;
      font-weight: 600;
      padding: 0.25em 0.7em;
      display: inline-flex;
      align-items: center;
      gap: 0.4em;
      border: none;
      box-shadow: none;
      cursor: default;
      pointer-events: none;
      user-select: none;
      transition: background 0.2s, color 0.2s;
    }
    .admin-modal-content .role-badge.member i {
      color: var(--primary-dark);
      font-size: 1em;
    }
   
    /* Fin de bloque de homogeneidad visual para t√≠tulos y badges del modal admin */
    /* Badge "Miembro" bonito y homog√©neo en TODAS las tarjetas, no solo en el modal */
.role-badge.member {
  background: #e3eefd;
  color: var(--primary-dark);
  border-radius: 999px;
  font-size: 0.93em;
  font-weight: 600;
  padding: 0.25em 0.7em;
  display: inline-flex;
  align-items: center;
  gap: 0.4em;
  border: none;
  box-shadow: none;
  cursor: default;
  pointer-events: none;
  user-select: none;
  transition: background 0.2s, color 0.2s;
}
.role-badge.member i {
  color: var(--primary-dark);
  font-size: 1em;
}
  </style>
{% endblock %}

{% block content %}
  <div class="main-container">
    <div class="section-header">
      <h1>Tus Actividades Solidarias</h1>
    </div>
    <div class="search-container">
      <input type="text" id="search-input" placeholder="Buscar entre tus actividades...">
      <i class="fas fa-search" style="color:#4a6fa5;"></i>
    </div>

    <!-- Secci√≥n de Causas -->
    <section class="activity-section causes-section" style="margin-bottom: 3.5rem;">
      <div class="activity-section-header"
           style="display:flex;align-items:center;gap:1.1rem;margin-bottom:2.2rem;
                  background:linear-gradient(90deg,#e6f4ea 0%,#fff 100%);
                  border-radius:14px;padding:1.2rem 1.7rem;box-shadow:0 2px 12px #e3eefd55;">
        <div style="background:var(--accent);color:#fff;border-radius:50%;width:48px;height:48px;display:flex;align-items:center;justify-content:center;font-size:2rem;box-shadow:0 2px 8px #4fc3a133;">
          <i class="fas fa-heart"></i>
        </div>
        <div>
          <h2 style="color:var(--accent);font-weight:900;font-size:1.45rem;margin:0;letter-spacing:-1px;">Tus causas</h2>
          <div style="color:#3da58a;font-size:1rem;font-weight:500;">Todas tus causas solidarias activas</div>
        </div>
      </div>
      <div class="activities-grid" id="causesGrid"></div>
    </section>

    <!-- Secci√≥n de Tareas -->
    <section class="activity-section tasks-section" style="margin-bottom: 3.5rem;">
      <div class="activity-section-header"
           style="display:flex;align-items:center;gap:1.1rem;margin-bottom:2.2rem;
                  background:linear-gradient(90deg,#e3eefd 0%,#fff 100%);
                  border-radius:14px;padding:1.2rem 1.7rem;box-shadow:0 2px 12px #e3eefd55;">
        <div style="background:var(--primary);color:#fff;border-radius:50%;width:48px;height:48px;display:flex;align-items:center;justify-content:center;font-size:2rem;box-shadow:0 2px 8px #4a6fa533;">
          <i class="fas fa-tasks"></i>
        </div>
        <div>
          <h2 style="color:var(--primary);font-weight:900;font-size:1.45rem;margin:0;letter-spacing:-1px;">Tus tareas</h2>
          <div style="color:#166088;font-size:1rem;font-weight:500;">Tus tareas pendientes y completadas</div>
        </div>
      </div>
      <div class="activities-grid" id="tasksGrid"></div>
    </section>

    <!-- Secci√≥n de Retos -->
    <section class="activity-section challenges-section" style="margin-bottom: 3.5rem;">
      <div class="activity-section-header"
           style="display:flex;align-items:center;gap:1.1rem;margin-bottom:2.2rem;
                  background:linear-gradient(90deg,#fffbe6 0%,#fff 100%);
                  border-radius:14px;padding:1.2rem 1.7rem;box-shadow:0 2px 12px #ffe06655;">
        <div style="background:var(--challenge-dark);color:#fff;border-radius:50%;width:48px;height:48px;display:flex;align-items:center;justify-content:center;font-size:2rem;box-shadow:0 2px 8px #ffe06633;">
          <i class="fas fa-trophy"></i>
        </div>
        <div>
          <h2 style="color:var(--challenge-dark);font-weight:900;font-size:1.45rem;margin:0;letter-spacing:-1px;">Tus retos</h2>
          <div style="color:#a67c00;font-size:1rem;font-weight:500;">Tus retos y desaf√≠os solidarios</div>
        </div>
      </div>
      <div class="activities-grid" id="challengesGrid"></div>
    </section>

    <!-- Secci√≥n de Voluntariado -->
    <section class="activity-section volunteering-section" style="margin-bottom: 3.5rem;">
      <div class="activity-section-header"
           style="display:flex;align-items:center;gap:1.1rem;margin-bottom:2.2rem;
                  background:linear-gradient(90deg,#e6faff 0%,#fff 100%);
                  border-radius:14px;padding:1.2rem 1.7rem;box-shadow:0 2px 12px #00bcd433;">
        <div style="background:var(--volunteering-dark);color:#fff;border-radius:50%;width:48px;height:48px;display:flex;align-items:center;justify-content:center;font-size:2rem;box-shadow:0 2px 8px #00bcd433;">
          <i class="fas fa-hands-helping"></i>
        </div>
        <div>
          <h2 style="color:var(--volunteering-dark);font-weight:900;fontsize:1.45rem;margin:0;letter-spacing:-1px;">Tus voluntariados</h2>
          <div style="color:#0097a7;font-size:1rem;font-weight:500;">Tus acciones de voluntariado</div>
        </div>
      </div>
      <div class="activities-grid" id="volunteeringGrid"></div>
    </section>
  </div>

  <!-- Modal de administraci√≥n de actividad -->
  <div class="admin-modal" id="adminModal">
    <div class="admin-modal-content">
      <button class="close-admin-modal" id="closeAdminModal">&times;</button>
      <h2 id="adminModalTitle">Administrar Actividad</h2>
      <div class="admin-tabs">
        <button class="admin-tab active" data-tab="overview">Resumen</button>
        <button class="admin-tab" data-tab="members">Miembros</button>
        <button class="admin-tab" data-tab="settings">Configuraci√≥n</button>
        <button class="admin-tab" data-tab="content">Contenido</button>
      </div>
      <div class="admin-tab-content active" id="overviewTab">
        <div class="stats-grid">
          <div class="stat-card">
            <div class="stat-value" id="participantsCount">0</div>
            <div class="stat-label">Participantes</div>
          </div>
          <div class="stat-card">
            <div class="stat-value" id="impactPoints">0</div>
            <div class="stat-label">Puntos de Impacto</div>
          </div>
          <div class="stat-card">
            <div class="stat-value" id="beneficiariesCount">0</div>
            <div class="stat-label">Beneficiarios</div>
          </div>
        </div>
        <h3>Progreso de la actividad</h3>
        <div class="progress-bar">
          <div class="progress-fill" id="activityProgress" style="width: 0%"></div>
        </div>
        <div class="progress-info">
          <span id="progressPercent">0% completado</span>
          <span id="progressAmount">0 ‚Ç¨ de 0 ‚Ç¨</span>
        </div>
        <div style="margin-top:1.5rem;">
          <strong>Resumen:</strong> <span id="activitySummary"></span><br>
          <strong>Descripci√≥n:</strong> <span id="activityDescription"></span>
        </div>
      </div>
      <div class="admin-tab-content" id="membersTab">
        <h3>Miembros actuales</h3>
        <div class="members-list" id="membersList"></div>
      </div>
      <div class="admin-tab-content" id="settingsTab">
        <!-- Dentro de #settingsTab en el modal de administraci√≥n -->
        <form class="cause-form" id="editCauseForm" autocomplete="off" style="margin-top:1.2rem;">
          <div class="form-group">
            <label for="editTitle">T√≠tulo de la causa</label>
            <input type="text" id="editTitle" name="editTitle" required>
          </div>
          <div class="form-group">
            <label for="editShortDescription">Resumen (m√°x. 3 l√≠neas)</label>
            <textarea id="editShortDescription" name="editShortDescription" maxlength="180" required></textarea>
          </div>
          <div class="form-group">
            <label for="editDescription">Descripci√≥n exhaustiva</label>
            <textarea id="editDescription" name="editDescription" required></textarea>
          </div>
          <div class="form-group">
            <label for="editPhoto">Foto principal</label>
            <input type="file" id="editPhoto" name="editPhoto" accept="image/*">
            <img id="editPreviewImg" class="preview-img" alt="Vista previa de la foto" style="display:none;">
          </div>
          <div class="form-inline-group">
            <div class="form-group">
              <label for="editGoal">Meta de recaudaci√≥n (‚Ç¨)</label>
              <input type="number" id="editGoal" name="editGoal" min="1" step="0.01" required>
            </div>
            <div class="form-group">
              <label for="editBeneficiaries">N¬∫ de beneficiarios</label>
              <input type="number" id="editBeneficiaries" name="editBeneficiaries" min="1" required>
            </div>
          </div>
          <div class="form-inline-group">
            <div class="form-group">
              <label for="editCity">Ciudad</label>
              <input type="text" id="editCity" name="editCity" required>
            </div>
            <div class="form-group">
              <label for="editCountry">Pa√≠s</label>
              <input type="text" id="editCountry" name="editCountry" required>
            </div>
          </div>
          <div class="form-group">
            <label for="editPoints">Puntos por colaborar</label>
            <input type="number" id="editPoints" name="editPoints" min="1" max="1000" required>
            <div class="points-info" id="editPointsText">
              <i class="fas fa-star"></i>
              Colaborar en esta causa otorgar√° <strong>50 puntos</strong> a cada participante.
            </div>
          </div>
          <input type="hidden" id="editLat" name="editLat">
          <input type="hidden" id="editLng" name="editLng">
          <button type="submit" class="btn btn-primary" style="margin-top:1rem;">
            <i class="fas fa-save"></i> Guardar Cambios
          </button>
        </form>
      </div>
      <div class="admin-tab-content" id="contentTab">
        <h3>Mensaje para los participantes</h3>
        <textarea id="activityMessage" rows="5" style="width: 100%; margin-bottom: 1rem;"></textarea>
        <button class="btn btn-primary" id="saveMessageBtn">
          <i class="fas fa-bullhorn"></i> Publicar Mensaje
        </button>
      </div>
    </div>
  </div>
{% endblock %}   {# <-- CIERRA EL BLOQUE CONTENT AQU√ç #}

{% block scripts %}
  {{ super() }}
  <script>
    document.addEventListener('DOMContentLoaded', async function() {
      // --- Funciones auxiliares ---
      function formatDate(dateString) {
        if (!dateString) return 'Sin fecha';
        const date = new Date(dateString);
        return date.toLocaleDateString('es-ES', {
          day: 'numeric',
          month: 'short',
          year: 'numeric'
        });
      }

      function showToast(message, type = 'success') {
        const toast = document.createElement('div');
        toast.textContent = message;
        toast.style.position = 'fixed';
        toast.style.bottom = '30px';
        toast.style.left = '50%';
        toast.style.transform = 'translateX(-50%)';
        toast.style.padding = '14px 28px';
        toast.style.borderRadius = '8px';
        toast.style.backgroundColor = type === 'success' ? '#4fc3a1' : '#e53e3e';
        toast.style.color = '#fff';
        toast.style.fontWeight = '600';
        toast.style.fontSize = '1.05rem';
        toast.style.boxShadow = '0 4px 16px rgba(0,0,0,0.13)';
        toast.style.zIndex = '99999';
        toast.style.opacity = '0';
        toast.style.transition = 'opacity 0.3s';
        document.body.appendChild(toast);
        setTimeout(() => { toast.style.opacity = '1'; }, 10);
        setTimeout(() => {
          toast.style.opacity = '0';
          setTimeout(() => toast.remove(), 350);
        }, 2200);
      }

      // --- MODAL ADMIN robusto con datos y edici√≥n ---
      window.openAdminActivityModal = async function(activityId, activityType) {
        // Busca la actividad seleccionada
        const act = (window.allActivities || allActivities || []).find(a => a.id == activityId && a.type == activityType);
        if (!act) return;

        // Rellena los campos del modal (Resumen)
        document.getElementById('adminModalTitle').textContent = `Administrar: ${act.title || ''}`;
        document.getElementById('participantsCount').textContent = act.participants || 0;
        document.getElementById('impactPoints').textContent = act.points || 0;
        document.getElementById('beneficiariesCount').textContent = act.beneficiaries || 0;
        document.getElementById('activitySummary').textContent = act.short_description || '';
        document.getElementById('activityDescription').textContent = act.description || '';

        // --- Megadatos en el resumen ---
        const oldExtra = document.getElementById('modal-extra-info');
        if (oldExtra) oldExtra.remove();
        const resumenExtra = `
          <div id="modal-extra-info" style="margin-top:1rem;font-size:0.98em;color:#666;">
            <strong>Tipo:</strong> ${activityType.charAt(0).toUpperCase() + activityType.slice(1)}<br>
            <strong>Ciudad:</strong> ${act.city || '-'}<br>
            <strong>Pa√≠s:</strong> ${act.country || '-'}<br>
            <strong>Creada:</strong> ${formatDate(act.created_at)}
          </div>
        `;
        document.getElementById('activityDescription').parentElement.insertAdjacentHTML('beforeend', resumenExtra);

        // Progreso
        const meta = act.goal || 0;
        const recaudado = act.raised || 0;
        const porcentaje = meta ? Math.min(100, Math.round((recaudado / meta) * 100)) : 0;
        document.getElementById('activityProgress').style.width = porcentaje + '%';
        document.getElementById('progressPercent').textContent = `${porcentaje}% completado`;
        document.getElementById('progressAmount').textContent = `${recaudado} ‚Ç¨ de ${meta} ‚Ç¨`;

        // Rellena los campos del formulario de edici√≥n (Configuraci√≥n)
        document.getElementById('editTitle').value = act.title || '';
        document.getElementById('editShortDescription').value = act.short_description || '';
        document.getElementById('editDescription').value = act.description || '';
        document.getElementById('editGoal').value = act.goal || '';
        document.getElementById('editBeneficiaries').value = act.beneficiaries || '';
        document.getElementById('editCity').value = act.city || '';
        document.getElementById('editCountry').value = act.country || '';
        document.getElementById('editPoints').value = act.points || '';
        document.getElementById('editLat').value = act.lat || '';
        document.getElementById('editLng').value = act.lng || '';
        document.getElementById('editPreviewImg').style.display = act.photo_url ? 'block' : 'none';
        document.getElementById('editPreviewImg').src = act.photo_url || '';

        // Mensaje para participantes (Contenido)
        document.getElementById('activityMessage').value = act.message || '';

        // Abre el modal
        document.getElementById('adminModal').classList.add('active');
        document.body.style.overflow = 'hidden';

        // Guarda el id y tipo de la actividad editada para el submit
        document.getElementById('editCauseForm').dataset.activityId = activityId;
        document.getElementById('editCauseForm').dataset.activityType = activityType;

        // --- Cargar miembros participantes en el modal ---
        const membersList = document.getElementById('membersList');
        membersList.innerHTML = '<div style="color:#888;">Cargando miembros...</div>';
        let members = [];
        let membersTable = '';
        let idField = '';
        if (activityType === 'cause') {
          membersTable = 'causes_members';
          idField = 'cause_id';
        } else if (activityType === 'task') {
          membersTable = 'task_members';
          idField = 'task_id';
        } else if (activityType === 'challenge') {
          membersTable = 'challenges_members';
          idField = 'challenge_id';
        } else if (activityType === 'volunteering') {
          membersTable = 'volunteering_members';
          idField = 'volunteering_id';
        }
        if (membersTable && idField) {
          // 1. Traer user_id, role y status de la tabla de miembros
          const { data: memberRows } = await supabase
            .from(membersTable)
            .select('user_id, role, status')
            .eq(idField, activityId);

          if (memberRows && memberRows.length > 0) {
            // 2. Traer username y photo_url de cada usuario
            const userIds = memberRows.map(m => m.user_id);
            const { data: profiles } = await supabase
              .from('profiles')
              .select('id, username, photo_url')
              .in('id', userIds);

            // 3. Unir datos y renderizar
            members = memberRows.map(m => {
              const profile = profiles?.find(p => p.id === m.user_id) || {};
              return {
                ...m,
                username: profile.username || m.user_id,
                photo_url: profile.photo_url || 'https://via.placeholder.com/40?text=U'
              };
            });
          }
        }

        // Renderizar miembros
        membersList.innerHTML = '';
        if (members.length === 0) {
          membersList.innerHTML = '<div style="color:#888;">No hay miembros en esta actividad.</div>';
        } else {
          members.forEach(member => {
            membersList.innerHTML += `
              <div class="member-item">
                <div class="member-info">
                  <img src="${member.photo_url}" class="member-avatar" alt="${member.username}">
                  <span class="member-name">${member.username}</span>
                </div>
                <div class="member-actions">
                  <span class="role-badge ${member.role === 'founder' ? 'admin' : 'member'}">
                    <i class="fas fa-user"></i> ${member.role}
                  </span>
                </div>
              </div>
            `;
          });
        }
      };

      document.getElementById('closeAdminModal')?.addEventListener('click', function() {
        document.getElementById('adminModal').classList.remove('active');
        document.body.style.overflow = '';
      });

      document.getElementById('adminModal')?.addEventListener('click', function(e) {
        if (e.target === this) {
          document.getElementById('adminModal').classList.remove('active');
          document.body.style.overflow = '';
        }
      });

      document.querySelectorAll('.admin-tab').forEach(tab => {
        tab.addEventListener('click', function() {
          document.querySelectorAll('.admin-tab').forEach(t => t.classList.remove('active'));
          document.querySelectorAll('.admin-tab-content').forEach(c => c.classList.remove('active'));
          this.classList.add('active');
          const tabId = this.getAttribute('data-tab');
          document.getElementById(tabId + 'Tab').classList.add('active');
        });
      });

      document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
          document.getElementById('adminModal').classList.remove('active');
          document.body.style.overflow = '';
        }
      });

      // --- Variables globales ---
      let userId = null;
      window.allActivities = [];
      let filteredActivities = [];

      // --- Obtener usuario actual ---
      const { data: { session } } = await supabase.auth.getSession();
      if (!session?.user) {
        window.location.href = '/login?return=/profile/myactivities';
        return;
      }
      userId = session.user.id;

      // --- Cargar actividades del usuario ---
      async function loadUserActivities() {
        try {
          // 1. Causas
          const { data: createdCauses } = await supabase
            .from('causes')
            .select('*')
            .eq('user_id', userId);

          const { data: joinedCauses } = await supabase
            .from('causes_members')
            .select('cause_id, role, status')
            .eq('user_id', userId);

          let joinedCausesDetails = [];
          if (joinedCauses && joinedCauses.length > 0) {
            const causeIds = joinedCauses.map(j => j.cause_id);
            const { data: causesDetails } = await supabase
              .from('causes')
              .select('*')
              .in('id', causeIds);

            joinedCausesDetails = causesDetails.map(cause => {
              const part = joinedCauses.find(j => j.cause_id === cause.id);
              return { ...cause, role: part.role, status: part.status };
            });
          }

          // 2. Tareas
          const { data: createdTasks } = await supabase
            .from('tasks')
            .select('*')
            .eq('user_id', userId);

          const { data: joinedTasks } = await supabase
            .from('task_members')
            .select('task_id, role, status')
            .eq('user_id', userId);

          let joinedTasksDetails = [];
          if (joinedTasks && joinedTasks.length > 0) {
            const taskIds = joinedTasks.map(j => j.task_id);
            const { data: tasksDetails } = await supabase
              .from('tasks')
              .select('*')
              .in('id', taskIds);

            joinedTasksDetails = tasksDetails.map(task => {
              const part = joinedTasks.find(j => j.task_id === task.id);
              return { ...task, role: part.role, status: part.status };
            });
          }

          // 3. Retos
          const { data: createdChallenges } = await supabase
            .from('challenges')
            .select('*')
            .eq('creator_id', userId);

          const { data: joinedChallenges } = await supabase
            .from('challenges_members')
            .select('challenge_id, role, status')
            .eq('user_id', userId);

          let joinedChallengesDetails = [];
          if (joinedChallenges && joinedChallenges.length > 0) {
            const challengeIds = joinedChallenges.map(j => j.challenge_id);
            const { data: challengesDetails } = await supabase
              .from('challenges')
              .select('*')
              .in('id', challengeIds);

            joinedChallengesDetails = challengesDetails.map(challenge => {
              const part = joinedChallenges.find(j => j.challenge_id === challenge.id);
              return { ...challenge, role: part.role, status: part.status };
            });
          }

          // 4. Voluntariados
          const { data: createdVolunteering } = await supabase
            .from('volunteering')
            .select('*')
            .eq('user_id', userId);

          const { data: joinedVolunteering } = await supabase
            .from('volunteering_members')
            .select('volunteering_id, role, status')
            .eq('user_id', userId);

          let joinedVolunteeringDetails = [];
          if (joinedVolunteering && joinedVolunteering.length > 0) {
            const volunteeringIds = joinedVolunteering.map(j => j.volunteering_id);
            const { data: volunteeringDetails } = await supabase
              .from('volunteering')
              .select('*')
              .in('id', volunteeringIds);

            joinedVolunteeringDetails = volunteeringDetails.map(vol => {
              const part = joinedVolunteering.find(j => j.volunteering_id === vol.id);
              return { ...vol, role: part.role, status: part.status };
            });
          }

          // Unificar y normalizar
          const normalize = (arr, type, isCreator = false) =>
            arr.map(item => ({
              ...item,
              type,
              isCreator,
              status: item.status || 'in_progress'
            }));

          window.allActivities = [
            ...normalize(createdCauses || [], 'cause', true),
            ...normalize(joinedCausesDetails || [], 'cause', false),
            ...normalize(createdTasks || [], 'task', true),
            ...normalize(joinedTasksDetails || [], 'task', false),
            ...normalize(createdChallenges || [], 'challenge', true),
            ...normalize(joinedChallengesDetails || [], 'challenge', false),
            ...normalize(createdVolunteering || [], 'volunteering', true),
            ...normalize(joinedVolunteeringDetails || [], 'volunteering', false)
          ];

          // Eliminar duplicados
          const activityMap = new Map();
          window.allActivities.forEach(act => {
            activityMap.set(`${act.type}-${act.id}`, act);
          });
          window.allActivities = Array.from(activityMap.values());

          // Ordenar por fecha
          window.allActivities.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));

          filteredActivities = [...window.allActivities];
          renderActivities();
        } catch (error) {
          console.error('Error loading user activities:', error);
          showToast('Error al cargar actividades', 'error');
          showEmptyState();
        }
      }

      function showEmptyState() {
        document.getElementById('causesGrid').innerHTML =
        document.getElementById('tasksGrid').innerHTML =
        document.getElementById('challengesGrid').innerHTML =
        document.getElementById('volunteeringGrid').innerHTML =
          `<div class="empty-state" style="grid-column: 1 / -1; text-align: center; padding: 3rem;">
            <i class="fas fa-clipboard-list" style="font-size: 3rem; color: #a0aec0; margin-bottom: 1rem;"></i>
            <h3 style="color: #4a5568; margin-bottom: 0.5rem;">No tienes actividades solidarias a√∫n</h3>
            <p style="color: #718096; margin-bottom: 1.5rem;">Empieza creando una nueva actividad o √∫nete a alguna existente.</p>
            <a href="/causes" class="btn btn-primary" style="margin-right: 1rem;">
              <i class="fas fa-heart"></i> Explorar causas
            </a>
            <a href="/tasks" class="btn btn-accent" style="margin-right: 1rem;">
              <i class="fas fa-tasks"></i> Ver tareas
            </a>
            <a href="/challenges" class="btn btn-warning">
              <i class="fas fa-trophy"></i> Descubrir retos
            </a>
          </div>`;
      }

      function renderActivities() {
        const types = [
          { key: 'cause', grid: 'causesGrid' },
          { key: 'task', grid: 'tasksGrid' },
          { key: 'challenge', grid: 'challengesGrid' },
          { key: 'volunteering', grid: 'volunteeringGrid' }
        ];

        types.forEach(({ key, grid }) => {
          const activities = filteredActivities.filter(a => a.type === key);
          const container = document.getElementById(grid);
          container.innerHTML = '';

          if (activities.length === 0) {
            container.innerHTML = `<div style="color:#aaa;text-align:center;padding:2rem;">No tienes ${key === 'cause' ? 'causas' : key === 'task' ? 'tareas' : key === 'challenge' ? 'retos' : 'voluntariados'}.</div>`;
            return;
          }

          activities.forEach(activity => {
            const img = activity.photo_url || '/img/causa-default.jpg';
            const resumen = activity.short_description || activity.description || 'Sin descripci√≥n';
            const meta = activity.goal || 0;
            const recaudado = activity.raised || 0;
            const porcentaje = meta ? Math.min(100, Math.round((recaudado / meta) * 100)) : 0;
            const fecha = formatDate(activity.created_at);
            let metaExtra = '';
            let url = '#';

            if (activity.type === 'cause') {
              metaExtra = `<span><i class="fas fa-users"></i> ${activity.beneficiaries || 0} beneficiarios</span>`;
              url = `/causes/${activity.id}`;
            } else if (activity.type === 'task') {
              metaExtra = `<span><i class="fas fa-users"></i> ${activity.participants || 0} participantes</span>`;
              url = `/tasks/${activity.id}`;
            } else if (activity.type === 'challenge') {
              metaExtra = `<span><i class="fas fa-users"></i> ${activity.participants || 0} participantes</span>`;
              url = `/challenges/${activity.id}`;
            } else if (activity.type === 'volunteering') {
              metaExtra = `<span><i class="fas fa-users"></i> ${activity.participants || 0} participantes</span>`;
              url = `/volunteering/${activity.id}`;
            }

            const card = document.createElement('div');
            card.className = `${activity.type}-card`;
            card.innerHTML = `
              <div class="cause-image">
                <img src="${img}" alt="${activity.title}">
              </div>
              <div class="cause-content">
                <h3>${activity.title}</h3>
                <p>${resumen}</p>
                <div class="progress-container">
                  <div class="progress-bar">
                    <div class="progress" style="width: ${porcentaje}%"></div>
                  </div>
                  <div class="progress-info">
                    <span>${recaudado}‚Ç¨</span>
                    <span>${meta}‚Ç¨</span>
                  </div>
                </div>
                <div class="meta">
                  ${metaExtra}
                  <span><i class="fas fa-calendar-alt"></i> ${fecha}</span>
                </div>
                <div class="actions">
                  <a href="${url}" class="btn btn-primary btn-sm"><i class="fas fa-eye"></i> Ver m√°s</a>
                  ${(activity.role === 'founder' || activity.role === 'admin')
                    ? `<button class="btn btn-accent btn-sm admin-activity-btn" data-id="${activity.id}" data-type="${activity.type}"><i class="fas fa-cog"></i> Administrar</button>`
                    : `<span class="role-badge member"><i class="fas fa-user"></i> Miembro</span>`
                  }
                </div>
              </div>
            `;
            // Evento administrar
            const adminBtn = card.querySelector('.admin-activity-btn');
            if (adminBtn) {
              adminBtn.addEventListener('click', (e) => {
                e.preventDefault();
                if (typeof window.openAdminActivityModal === 'function') {
                  window.openAdminActivityModal(activity.id, activity.type);
                } else {
                  alert('El modal de administraci√≥n a√∫n no est√° listo. Intenta de nuevo en un momento.');
                }
              });
            }
            container.appendChild(card);
          });
        });
      }

      // --- Geocodificaci√≥n autom√°tica para ciudad/pa√≠s en edici√≥n de causa ---
      function geocodeEditCityCountry() {
        const city = document.getElementById('editCity')?.value.trim();
        const country = document.getElementById('editCountry')?.value.trim();
        if (!city || !country) return;

        const query = encodeURIComponent(`${city}, ${country}`);
        const url = `https://nominatim.openstreetmap.org/search?q=${query}&format=json&limit=1`;

        fetch(url, { headers: { 'Accept-Language': 'es' } })
          .then(res => res.json())
          .then(data => {
            if (data && data.length > 0) {
              document.getElementById('editLat').value = data[0].lat;
              document.getElementById('editLng').value = data[0].lon;
            } else {
              document.getElementById('editLat').value = '';
              document.getElementById('editLng').value = '';
            }
          })
          .catch(() => {
            document.getElementById('editLat').value = '';
            document.getElementById('editLng').value = '';
          });
      }

      document.getElementById('editCity')?.addEventListener('change', geocodeEditCityCountry);
      document.getElementById('editCountry')?.addEventListener('change', geocodeEditCityCountry);

      // --- Inicializaci√≥n ---
      await loadUserActivities();

      document.getElementById('editCauseForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        const activityId = this.dataset.activityId;
        const activityType = this.dataset.activityType;
        if (!activityId || !activityType) return;

        // Recoge los datos del formulario
        const updated = {
          title: document.getElementById('editTitle').value.trim(),
          short_description: document.getElementById('editShortDescription').value.trim(),
          description: document.getElementById('editDescription').value.trim(),
          goal: Number(document.getElementById('editGoal').value),
          beneficiaries: Number(document.getElementById('editBeneficiaries').value),
          city: document.getElementById('editCity').value.trim(),
          country: document.getElementById('editCountry').value.trim(),
          points: Number(document.getElementById('editPoints').value),
          lat: document.getElementById('editLat').value,
          lng: document.getElementById('editLng').value
          // A√±ade m√°s campos si los tienes
        };

        // Si hay nueva foto, s√∫bela (opcional)
        const photoInput = document.getElementById('editPhoto');
        if (photoInput && photoInput.files && photoInput.files[0]) {
          const file = photoInput.files[0];
          const fileExt = file.name.split('.').pop();
          const filePath = `${activityType}/${activityId}.${fileExt}`;
          let { error: uploadError } = await supabase.storage.from('activities').upload(filePath, file, { upsert: true });
          if (!uploadError) {
            const { data: publicUrl } = supabase.storage.from('activities').getPublicUrl(filePath);
            updated.photo_url = publicUrl.publicUrl;
          }
        }

        // Actualiza en la base de datos
        let table = '';
        if (activityType === 'cause') table = 'causes';
        else if (activityType === 'task') table = 'tasks';
        else if (activityType === 'challenge') table = 'challenges';
        else if (activityType === 'volunteering') table = 'volunteering';
        else return;

        const { error } = await supabase
          .from(table)
          .update(updated)
          .eq('id', activityId);

        if (error) {
          showToast('Error al guardar cambios', 'error');
          return;
        }

        showToast('Cambios guardados');
        document.getElementById('adminModal').classList.remove('active');
        document.body.style.overflow = '';
        await loadUserActivities(); // <-- Esto refresca las tarjetas
      });
    });
  </script>
{% endblock %}