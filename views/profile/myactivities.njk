{% extends "layout.njk" %}

{% block title %}Solidarity - Mis Actividades{% endblock %}

{% block head %}
  {{ super() }}
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
  <style>
    :root {
      --primary: #4a6fa5;
      --primary-dark: #166088;
      --gray: #e2e8f0;
      --white: #fff;
      --accent: #4fc3a1;
      --accent-dark: #3da58a;
      --urgent: #e53e3e;
      --challenge: #ffe066;
      --challenge-dark: #a67c00;
      --volunteering: #00bcd4;
      --volunteering-dark: #0097a7;
    }

    .main-container {
      max-width: 1200px;
      margin: 2rem auto;
      padding: 0 2rem;
    }

    .section-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;
    }

    .section-header h1 {
      font-size: 2rem;
      color: var(--primary);
      font-weight: 700;
    }

    .search-container {
      margin-bottom: 2rem;
      display: flex;
      align-items: center;
      gap: 0.7rem;
    }

    .search-container input {
      flex: 1;
      padding: 0.6rem 1.2rem;
      border-radius: 7px;
      border: 1.5px solid var(--gray);
      font-size: 1.05rem;
      outline: none;
      transition: border 0.2s;
      background: #fff;
    }

    .search-container input:focus {
      border-color: var(--primary);
    }

    /* --- CSS COMPLETO DE TAREAS (copiado de index.njk) --- */
    .tasks-grid, .activities-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
      gap: 2rem;
    }
    .task-card {
      background: white;
      border-radius: 12px;
      overflow: hidden;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
      transition: all 0.3s ease;
      border: 1px solid var(--gray);
      display: flex;
      flex-direction: column;
    }
    .task-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    }
    .task-image {
      height: 180px;
      overflow: hidden;
      position: relative;
    }
    .task-image img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: transform 0.3s ease;
    }
    .task-card:hover .task-image img {
      transform: scale(1.05);
    }
    .task-badge {
      position: absolute;
      top: 1rem;
      right: 1rem;
      background: rgba(255, 255, 255, 0.9);
      padding: 0.3rem 0.8rem;
      border-radius: 50px;
      font-size: 0.8rem;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }
    .task-badge.urgent {
      background: var(--urgent);
      color: white;
    }
    .task-badge.points {
      background: var(--primary);
      color: white;
      left: 1rem;
      right: auto;
    }
    .task-content {
      padding: 1.5rem;
      display: flex;
      flex-direction: column;
      flex: 1;
    }
    .task-content h3 {
      font-size: 1.3rem;
      margin-bottom: 0.8rem;
      color: #2d3748;
    }
    .task-content p {
      color: #6b7280;
      margin-bottom: 1.5rem;
      font-size: 0.95rem;
      line-height: 1.6;
      flex-grow: 1;
    }
    .task-meta {
      display: flex;
      gap: 1rem;
      margin-bottom: 1.5rem;
      font-size: 0.85rem;
      flex-wrap: wrap;
    }
    .meta-item {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      color: #6b7280;
    }
    .meta-item i {
      color: var(--primary);
    }
    .beneficiaries-count {
      display: inline-flex;
      align-items: center;
      background: #f0f9ff;
      color: var(--primary);
      padding: 0.3rem 0.8rem;
      border-radius: 50px;
      font-size: 0.85rem;
      font-weight: 600;
    }
    .beneficiaries-count i {
      margin-right: 0.3rem;
    }
    .linked-cause {
      display: inline-flex;
      align-items: center;
      background: #f0f0ff;
      color: var(--primary);
      padding: 0.3rem 0.8rem;
      border-radius: 50px;
      font-size: 0.85rem;
      font-weight: 600;
      margin-bottom: 1rem;
    }
    .linked-cause img {
      width: 22px;
      height: 22px;
      object-fit: cover;
      border-radius: 50%;
      border: 1px solid #e5e7eb;
      margin-right: 0.4em;
    }
    .task-progress {
      margin-bottom: 1.5rem;
    }
    .progress-bar {
      height: 8px;
      background: var(--gray);
      border-radius: 4px;
      overflow: hidden;
      margin-bottom: 0.5rem;
    }
    .progress-fill {
      height: 100%;
      background: var(--primary);
      border-radius: 4px;
    }
    .progress-info {
      display: flex;
      justify-content: space-between;
      font-size: 0.9rem;
      color: #6b7280;
    }
    .task-actions {
      display: flex;
      gap: 0.8rem;
    }
    .task-actions .btn {
      flex: 1;
      text-align: center;
      justify-content: center;
    }
    .btn-accent {
      background: var(--accent);
      color: white;
    }
    .btn-accent:hover {
      background: var(--accent-dark);
      transform: translateY(-2px);
    }
    /* Responsive */
    @media (max-width: 768px) {
      .activities-grid, .tasks-grid {
        grid-template-columns: 1fr;
      }
      .task-actions {
        flex-direction: column;
      }
    }
  </style>
{% endblock %}

{% block content %}
  <div class="main-container">
    <div class="section-header">
      <h1>Tus Actividades Solidarias</h1>
    </div>
    <div class="search-container">
      <input type="text" id="search-input" placeholder="Buscar entre tus actividades...">
      <i class="fas fa-search" style="color:#4a6fa5;"></i>
    </div>

    <!-- Estado vacío general (aparece antes de las secciones) -->
    <div id="generalEmptyState" class="empty-state" style="text-align: center; padding: 3rem; margin-bottom: 2rem; background: linear-gradient(135deg, #f0f9ff 0%, #e6f0fa 100%); border-radius: 12px; border: 1px solid var(--gray);">
      <i class="fas fa-clipboard-list" style="font-size: 3rem; color: #a0aec0; margin-bottom: 1rem;"></i>
      <h3 style="color: #4a5568; margin-bottom: 0.5rem;">No tienes actividades solidarias aún</h3>
      <p style="color: #718096; margin-bottom: 1.5rem;">Empieza creando una nueva actividad o únete a alguna existente.</p>
      <div style="display: flex; gap: 1rem; justify-content: center; flex-wrap: wrap;">
        <a href="/causes" class="btn btn-primary" style="display: inline-flex; align-items: center; gap: 0.5rem; padding: 0.8rem 1.5rem; border-radius: 8px; font-weight: 600; text-decoration: none; background: var(--primary); color: white;">
          <i class="fas fa-heart"></i> Explorar causas
        </a>
        <a href="/tasks" class="btn btn-accent" style="display: inline-flex; align-items: center; gap: 0.5rem; padding: 0.8rem 1.5rem; border-radius: 8px; font-weight: 600; text-decoration: none; background: var(--accent); color: white;">
          <i class="fas fa-tasks"></i> Ver tareas
        </a>
        <a href="/challenges" class="btn btn-warning" style="display: inline-flex; align-items: center; gap: 0.5rem; padding: 0.8rem 1.5rem; border-radius: 8px; font-weight: 600; text-decoration: none; background: var(--challenge); color: #333;">
          <i class="fas fa-trophy"></i> Descubrir retos
        </a>
        <a href="/volunteering" class="btn btn-secondary" style="display: inline-flex; align-items: center; gap: 0.5rem; padding: 0.8rem 1.5rem; border-radius: 8px; font-weight: 600; text-decoration: none; background: var(--volunteering); color: white;">
          <i class="fas fa-hands-helping"></i> Ver voluntariados
        </a>
      </div>
    </div>

    <!-- Sección de Causas -->
    <section class="activity-section causes-section" style="margin-bottom: 3.5rem;">
      <div class="activity-section-header"
           style="display:flex;align-items:center;gap:1.1rem;margin-bottom:2.2rem;
                  background:linear-gradient(90deg,#e6f4ea 0%,#fff 100%);
                  border-radius:14px;padding:1.2rem 1.7rem;box-shadow:0 2px 12px #e3eefd55;">
        <div style="background:var(--accent);color:#fff;border-radius:50%;width:48px;height:48px;display:flex;align-items:center;justify-content:center;font-size:2rem;box-shadow:0 2px 8px #4fc3a133;">
          <i class="fas fa-heart"></i>
        </div>
        <div>
          <h2 style="color:var(--accent);font-weight:900;font-size:1.45rem;margin:0;letter-spacing:-1px;">Tus causas</h2>
          <div style="color:#3da58a;font-size:1rem;font-weight:500;">Todas tus causas solidarias activas</div>
        </div>
      </div>
      <div class="activities-grid" id="causesGrid"></div>
    </section>

    <!-- Sección de Tareas -->
    <section class="activity-section tasks-section" style="margin-bottom: 3.5rem;">
      <div class="activity-section-header"
           style="display:flex;align-items:center;gap:1.1rem;margin-bottom:2.2rem;
                  background:linear-gradient(90deg,#e3eefd 0%,#fff 100%);
                  border-radius:14px;padding:1.2rem 1.7rem;box-shadow:0 2px 12px #e3eefd55;">
        <div style="background:var(--primary);color:#fff;border-radius:50%;width:48px;height:48px;display:flex;align-items:center;justify-content:center;font-size:2rem;box-shadow:0 2px 8px #4a6fa533;">
          <i class="fas fa-tasks"></i>
        </div>
        <div>
          <h2 style="color:var(--primary);font-weight:900;font-size:1.45rem;margin:0;letter-spacing:-1px;">Tus tareas</h2>
          <div style="color:#166088;font-size:1rem;font-weight:500;">Tus tareas pendientes y completadas</div>
        </div>
      </div>
      <div class="activities-grid tasks-grid" id="tasksGrid"></div>
    </section>

    <!-- Sección de Retos -->
    <section class="activity-section challenges-section" style="margin-bottom: 3.5rem;">
      <div class="activity-section-header"
           style="display:flex;align-items:center;gap:1.1rem;margin-bottom:2.2rem;
                  background:linear-gradient(90deg,#fffbe6 0%,#fff 100%);
                  border-radius:14px;padding:1.2rem 1.7rem;box-shadow:0 2px 12px #ffe06655;">
        <div style="background:var(--challenge-dark);color:#fff;border-radius:50%;width:48px;height:48px;display:flex;align-items:center;justify-content:center;font-size:2rem;box-shadow:0 2px 8px #ffe06633;">
          <i class="fas fa-trophy"></i>
        </div>
        <div>
          <h2 style="color:var(--challenge-dark);font-weight:900;font-size:1.45rem;margin:0;letter-spacing:-1px;">Tus retos</h2>
          <div style="color:#a67c00;font-size:1rem;font-weight:500;">Tus retos y desafíos solidarios</div>
        </div>
      </div>
      <div class="activities-grid" id="challengesGrid"></div>
    </section>

    <!-- Sección de Voluntariado -->
    <section class="activity-section volunteering-section" style="margin-bottom: 3.5rem;">
      <div class="activity-section-header"
           style="display:flex;align-items:center;gap:1.1rem;margin-bottom:2.2rem;
                  background:linear-gradient(90deg,#e6faff 0%,#fff 100%);
                  border-radius:14px;padding:1.2rem 1.7rem;box-shadow:0 2px 12px #00bcd433;">
        <div style="background:var(--volunteering-dark);color:#fff;border-radius:50%;width:48px;height:48px;display:flex;align-items:center;justify-content:center;font-size:2rem;box-shadow:0 2px 8px #00bcd433;">
          <i class="fas fa-hands-helping"></i>
        </div>
        <div>
          <h2 style="color:var(--volunteering-dark);font-weight:900;font-size:1.45rem;margin:0;letter-spacing:-1px;">Tus voluntariados</h2>
          <div style="color:#0097a7;font-size:1rem;font-weight:500;">Tus acciones de voluntariado</div>
        </div>
      </div>
      <div class="activities-grid" id="volunteeringGrid"></div>
    </section>
  </div>
{% endblock %}

{% block scripts %}
  {{ super() }}
  <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
  <script src="/js/modules/causes-renderer.js"></script>
  <script src="/js/modules/tasks-renderer.js"></script>
  <script src="/js/modules/challenges-renderer.js"></script>
  <script src="/js/modules/volunteering-renderer.js"></script>
  <script src="/js/modules/share-system.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', async function() {
      // --- Funciones auxiliares básicas ---
      function showToast(message, type = 'success') {
        const toast = document.createElement('div');
        toast.textContent = message;
        toast.style.position = 'fixed';
        toast.style.bottom = '30px';
        toast.style.left = '50%';
        toast.style.transform = 'translateX(-50%)';
        toast.style.padding = '14px 28px';
        toast.style.borderRadius = '8px';
        toast.style.backgroundColor = type === 'success' ? '#4fc3a1' : type === 'info' ? '#4a6fa5' : '#e53e3e';
        toast.style.color = '#fff';
        toast.style.fontWeight = '600';
        toast.style.fontSize = '1.05rem';
        toast.style.boxShadow = '0 4px 16px rgba(0,0,0,0.13)';
        toast.style.zIndex = '99999';
        toast.style.opacity = '0';
        toast.style.transition = 'opacity 0.3s';
        document.body.appendChild(toast);
        setTimeout(() => { toast.style.opacity = '1'; }, 10);
        setTimeout(() => {
          toast.style.opacity = '0';
          setTimeout(() => toast.remove(), 350);
        }, 2200);
      }

      // --- Variables globales ---
      let userId = null;
      let userActivities = {
        causes: [],
        tasks: [],
        challenges: [],
        volunteering: []
      };

      // --- Obtener usuario actual ---
      const { data: { session } } = await supabase.auth.getSession();
      if (!session?.user) {
        window.location.href = '/login?return=/profile/myactivities';
        return;
      }
      userId = session.user.id;

      // --- Cargar causas map para challenges ---
      async function loadCausesMap() {
        const { data: causes } = await supabase.from('causes').select('id, title, photo_url, short_description');
        if (causes) {
          window.causesMap = {};
          causes.forEach(c => {
            window.causesMap[c.id] = {
              title: c.title,
              photo_url: c.photo_url,
              short_description: c.short_description
            };
          });
        }
      }

      // --- Función para obtener o crear el modal de challenge ---
      function getOrCreateChallengeModal() {
        let modal = document.getElementById('challengeModal');
        if (!modal) {
          modal = document.createElement('div');
          modal.id = 'challengeModal';
          modal.style.cssText = 'display:none; position:fixed; z-index:9999; left:0; top:0; width:100vw; height:100vh; background:rgba(0,0,0,0.35); align-items:center; justify-content:center;';
          
          modal.innerHTML = `
            <div class="modal-content" style="background:#fff; border-radius:18px; max-width:800px; width:95vw; padding:2rem; box-shadow:0 8px 32px rgba(74,111,165,0.13); position:relative; max-height:90vh; overflow-y:auto; text-align:left;">
              <button id="closeChallengeModal" style="position:absolute; top:1.5rem; right:1.5rem; background:none; border:none; font-size:1.8rem; color:#6b7280; cursor:pointer; transition:color 0.2s;" onmouseover="this.style.color='#4a6fa5'" onmouseout="this.style.color='#6b7280'">&times;</button>
              <div id="challengeModalBody" style="text-align:left;">
                <!-- Contenido dinámico -->
              </div>
            </div>
          `;
          document.body.appendChild(modal);
          
          // Agregar evento para cerrar
          document.getElementById('closeChallengeModal').onclick = function() {
            modal.style.display = 'none';
            document.body.style.overflow = '';
          };
          
          // Cerrar al hacer clic fuera
          modal.onclick = function(e) {
            if (e.target === modal) {
              modal.style.display = 'none';
              document.body.style.overflow = '';
            }
          };
        }
        return modal;
      }

      // --- Función para obtener o crear el modal de volunteering ---
      function getOrCreateVolunteeringModal() {
        let modal = document.getElementById('volunteeringModal');
        if (!modal) {
          modal = document.createElement('div');
          modal.id = 'volunteeringModal';
          modal.style.cssText = 'display:none; position:fixed; z-index:9999; left:0; top:0; width:100vw; height:100vh; background:rgba(0,0,0,0.35); align-items:center; justify-content:center;';
          
          modal.innerHTML = `
            <div class="modal-content" style="background:#fff; border-radius:18px; max-width:800px; width:95vw; padding:2rem; box-shadow:0 8px 32px rgba(74,111,165,0.13); position:relative; max-height:90vh; overflow-y:auto; text-align:left;">
              <button id="closeVolunteeringModal" style="position:absolute; top:1.5rem; right:1.5rem; background:none; border:none; font-size:1.8rem; color:#6b7280; cursor:pointer; transition:color 0.2s;" onmouseover="this.style.color='#4a6fa5'" onmouseout="this.style.color='#6b7280'">&times;</button>
              <div id="volunteeringModalBody" style="text-align:left;">
                <!-- Contenido dinámico -->
              </div>
            </div>
          `;
          document.body.appendChild(modal);
          
          // Agregar evento para cerrar
          document.getElementById('closeVolunteeringModal').onclick = function() {
            modal.style.display = 'none';
            document.body.style.overflow = '';
          };
          
          // Cerrar al hacer clic fuera
          modal.onclick = function(e) {
            if (e.target === modal) {
              modal.style.display = 'none';
              document.body.style.overflow = '';
            }
          };
        }
        return modal;
      }

      // --- Función para obtener o crear el modal de task ---
      function getOrCreateTaskModal() {
        let modal = document.getElementById('taskModal');
        if (!modal) {
          modal = document.createElement('div');
          modal.id = 'taskModal';
          modal.style.cssText = 'display:none; position:fixed; z-index:9999; left:0; top:0; width:100vw; height:100vh; background:rgba(0,0,0,0.35); align-items:center; justify-content:center;';
          
          modal.innerHTML = `
            <div class="modal-content" style="background:#fff; border-radius:18px; max-width:800px; width:95vw; padding:2rem; box-shadow:0 8px 32px rgba(74,111,165,0.13); position:relative; max-height:90vh; overflow-y:auto; text-align:left;">
              <button id="closeTaskModal" style="position:absolute; top:1.5rem; right:1.5rem; background:none; border:none; font-size:1.8rem; color:#6b7280; cursor:pointer; transition:color 0.2s;" onmouseover="this.style.color='#4a6fa5'" onmouseout="this.style.color='#6b7280'">&times;</button>
              <div id="taskModalBody" style="text-align:left;">
                <!-- Contenido dinámico -->
              </div>
            </div>
          `;
          document.body.appendChild(modal);
          
          // Agregar evento para cerrar
          document.getElementById('closeTaskModal').onclick = function() {
            modal.style.display = 'none';
            document.body.style.overflow = '';
          };
          
          // Cerrar al hacer clic fuera
          modal.onclick = function(e) {
            if (e.target === modal) {
              modal.style.display = 'none';
              document.body.style.overflow = '';
            }
          };
        }
        return modal;
      }

      // --- Función para cargar causas del usuario ---
      async function loadUserCauses() {
        try {
          // 1. Obtener causas creadas por el usuario (fundador)
          const { data: createdCauses, error: createdError } = await supabase
            .from('causes')
            .select('*')
            .eq('user_id', userId);

          if (createdError) {
            console.error('Error cargando causas creadas:', createdError);
          }

          // 2. Obtener causas donde el usuario es miembro
          const { data: memberships, error: membershipsError } = await supabase
            .from('causes_members')
            .select('cause_id, role, status')
            .eq('user_id', userId)
            .eq('status', 'active');

          if (membershipsError) {
            console.error('Error cargando membresías:', membershipsError);
          }

          // 3. Si hay membresías, obtener los detalles de esas causas
          let joinedCauses = [];
          if (memberships && memberships.length > 0) {
            const causeIds = memberships.map(m => m.cause_id);
            const { data: causesDetails, error: detailsError } = await supabase
              .from('causes')
              .select('*')
              .in('id', causeIds);

            if (detailsError) {
              console.error('Error cargando detalles de causas:', detailsError);
            } else if (causesDetails) {
              // Agregar información de rol a cada causa
              joinedCauses = causesDetails.map(cause => {
                const membership = memberships.find(m => m.cause_id === cause.id);
                return {
                  ...cause,
                  userRole: membership ? membership.role : 'member',
                  isCreator: false
                };
              });
            }
          }

          // 4. Combinar causas creadas y causas donde es miembro
          const allUserCauses = [
            ...(createdCauses || []).map(cause => ({ ...cause, userRole: 'founder', isCreator: true })),
            ...joinedCauses
          ];

          // 5. Eliminar duplicados (en caso de que sea fundador Y miembro)
          const uniqueCauses = allUserCauses.reduce((acc, current) => {
            const existing = acc.find(cause => cause.id === current.id);
            if (!existing) {
              acc.push(current);
            } else if (current.userRole === 'founder') {
              // Si ya existe pero este es fundador, reemplazar
              const index = acc.findIndex(cause => cause.id === current.id);
              acc[index] = current;
            }
            return acc;
          }, []);

          // 6. Actualizar array de actividades
          userActivities.causes = uniqueCauses;

          console.log('Causas del usuario cargadas:', uniqueCauses);

        } catch (error) {
          console.error('Error en loadUserCauses:', error);
          userActivities.causes = [];
        }
      }

      // --- Función para cargar tareas del usuario ---
      async function loadUserTasks() {
        try {
          // 1. Obtener tareas creadas por el usuario (fundador)
          const { data: createdTasks, error: createdError } = await supabase
            .from('tasks')
            .select(`
              *,
              linkedCause:causes!tasks_cause_id_fkey(id, title, photo_url)
            `)
            .eq('user_id', userId);

          if (createdError) {
            console.error('Error cargando tareas creadas:', createdError);
          }

          // 2. Obtener tareas donde el usuario es miembro (cualquier rol, cualquier status)
          const { data: memberships, error: membershipsError } = await supabase
            .from('task_members')  // ✅ CORREGIDO: era 'tasks_members'
            .select('task_id, role, status')
            .eq('user_id', userId)
            .eq('status', 'active');  // Añadir filtro de status como en retos

          if (membershipsError) {
            console.error('Error cargando membresías de tareas:', membershipsError);
          }

          // 3. Si hay membresías, obtener los detalles de esas tareas
          let joinedTasks = [];
          if (memberships && memberships.length > 0) {
            const taskIds = memberships.map(m => m.task_id);
            const { data: tasksDetails, error: detailsError } = await supabase
              .from('tasks')
              .select(`
                *,
                linkedCause:causes!tasks_cause_id_fkey(id, title, photo_url)
              `)
              .in('id', taskIds);

            if (detailsError) {
              console.error('Error cargando detalles de tareas:', detailsError);
            } else if (tasksDetails) {
              // Agregar información de rol a cada tarea
              joinedTasks = tasksDetails.map(task => {
                const membership = memberships.find(m => m.task_id === task.id);
                return {
                  ...task,
                  userRole: membership ? membership.role : 'member',
                  isCreator: false
                };
              });
            }
          }

          // 4. Combinar tareas creadas y tareas donde es miembro
          const allUserTasks = [
            ...(createdTasks || []).map(task => ({ ...task, userRole: 'founder', isCreator: true })),
            ...joinedTasks
          ];

          // 5. Eliminar duplicados (en caso de que sea fundador Y miembro)
          const uniqueTasks = allUserTasks.reduce((acc, current) => {
            const existing = acc.find(task => task.id === current.id);
            if (!existing) {
              acc.push(current);
            } else if (current.userRole === 'founder') {
              // Si ya existe pero este es fundador, reemplazar
              const index = acc.findIndex(task => task.id === current.id);
              acc[index] = current;
            }
            return acc;
          }, []);

          // 6. Procesar datos para compatibilidad con el renderer
          uniqueTasks.forEach(task => {
            // Mapear linkedCause para compatibilidad con el renderer
            if (task.linkedCause && Array.isArray(task.linkedCause)) {
              task.linkedCause = task.linkedCause[0] || null;
            }
            
            // Asegurar que tenga una imagen por defecto si no tiene
            if (!task.photo_url) {
              task.photo_url = '/images/default-task.jpg';
            }

            // Marcar que ya está participando (para el renderer)
            task.isParticipating = true;
          });

          // 7. Actualizar array de actividades
          userActivities.tasks = uniqueTasks;

          console.log('Tareas del usuario cargadas:', uniqueTasks);

        } catch (error) {
          console.error('Error en loadUserTasks:', error);
          userActivities.tasks = [];
        }
      }

      // --- Función para cargar retos del usuario ---
      async function loadUserChallenges() {
        try {
          // 1. Obtener retos creados por el usuario (fundador)
          const { data: createdChallenges, error: createdError } = await supabase
            .from('challenges')
            .select('*')
            .eq('creator_id', userId);

          if (createdError) {
            console.error('Error cargando retos creados:', createdError);
          }

          // 2. Obtener retos donde el usuario es miembro
          const { data: memberships, error: membershipsError } = await supabase
            .from('challenges_members')
            .select('challenge_id, role, status')
            .eq('user_id', userId)
            .eq('status', 'active');

          if (membershipsError) {
            console.error('Error cargando membresías de retos:', membershipsError);
          }

          // 3. Si hay membresías, obtener los detalles de esos retos
          let joinedChallenges = [];
          if (memberships && memberships.length > 0) {
            const challengeIds = memberships.map(m => m.challenge_id);
            const { data: challengesDetails, error: detailsError } = await supabase
              .from('challenges')
              .select('*')
              .in('id', challengeIds);

            if (detailsError) {
              console.error('Error cargando detalles de retos:', detailsError);
            } else if (challengesDetails) {
              // Agregar información de rol a cada reto
              joinedChallenges = challengesDetails.map(challenge => {
                const membership = memberships.find(m => m.challenge_id === challenge.id);
                return {
                  ...challenge,
                  userRole: membership ? membership.role : 'member',
                  isCreator: false
                };
              });
            }
          }

          // 4. Combinar retos creados y retos donde es miembro
          const allUserChallenges = [
            ...(createdChallenges || []).map(challenge => ({ ...challenge, userRole: 'founder', isCreator: true })),
            ...joinedChallenges
          ];

          // 5. Eliminar duplicados (en caso de que sea fundador Y miembro)
          const uniqueChallenges = allUserChallenges.reduce((acc, current) => {
            const existing = acc.find(challenge => challenge.id === current.id);
            if (!existing) {
              acc.push(current);
            } else if (current.userRole === 'founder') {
              // Si ya existe pero este es fundador, reemplazar
              const index = acc.findIndex(challenge => challenge.id === current.id);
              acc[index] = current;
            }
            return acc;
          }, []);

          // 6. Enriquecer con información de causa vinculada
          for (let challenge of uniqueChallenges) {
            if (challenge.cause_id && window.causesMap && window.causesMap[challenge.cause_id]) {
              challenge.linkedCause = window.causesMap[challenge.cause_id];
            }
          }

          // 7. Actualizar array de actividades
          userActivities.challenges = uniqueChallenges;

          console.log('Retos del usuario cargados:', uniqueChallenges);

        } catch (error) {
          console.error('Error en loadUserChallenges:', error);
          userActivities.challenges = [];
        }
      }

      // --- Función para cargar voluntariados del usuario ---
      async function loadUserVolunteering() {
        try {
          // 1. Obtener voluntariados creados por el usuario (fundador)
          const { data: createdVolunteering, error: createdError } = await supabase
            .from('volunteering')
            .select(`
              *,
              linkedCause:causes!volunteering_cause_id_fkey(id, title, photo_url)
            `)
            .eq('user_id', userId);

          if (createdError) {
            console.error('Error cargando voluntariados creados:', createdError);
          }

          // 2. Obtener voluntariados donde el usuario es miembro
          const { data: memberships, error: membershipsError } = await supabase
            .from('volunteering_members')
            .select('volunteering_id, role, status')
            .eq('user_id', userId)
            .eq('status', 'active');

          if (membershipsError) {
            console.error('Error cargando membresías de voluntariados:', membershipsError);
          }

          // 3. Si hay membresías, obtener los detalles de esos voluntariados
          let joinedVolunteering = [];
          if (memberships && memberships.length > 0) {
            const volunteeringIds = memberships.map(m => m.volunteering_id);
            const { data: volunteeringDetails, error: detailsError } = await supabase
              .from('volunteering')
              .select(`
                *,
                linkedCause:causes!volunteering_cause_id_fkey(id, title, photo_url)
              `)
              .in('id', volunteeringIds);

            if (detailsError) {
              console.error('Error cargando detalles de voluntariados:', detailsError);
            } else if (volunteeringDetails) {
              // Agregar información de rol a cada voluntariado
              joinedVolunteering = volunteeringDetails.map(volunteering => {
                const membership = memberships.find(m => m.volunteering_id === volunteering.id);
                return {
                  ...volunteering,
                  userRole: membership ? membership.role : 'member',
                  isCreator: false
                };
              });
            }
          }

          // 4. Combinar voluntariados creados y voluntariados donde es miembro
          const allUserVolunteering = [
            ...(createdVolunteering || []).map(volunteering => ({ ...volunteering, userRole: 'founder', isCreator: true })),
            ...joinedVolunteering
          ];

          // 5. Eliminar duplicados (en caso de que sea fundador Y miembro)
          const uniqueVolunteering = allUserVolunteering.reduce((acc, current) => {
            const existing = acc.find(volunteering => volunteering.id === current.id);
            if (!existing) {
              acc.push(current);
            } else if (current.userRole === 'founder') {
              // Si ya existe pero este es fundador, reemplazar
              const index = acc.findIndex(volunteering => volunteering.id === current.id);
              acc[index] = current;
            }
            return acc;
          }, []);

          // 6. Procesar datos para compatibilidad con el renderer (como en index.njk)
          uniqueVolunteering.forEach(volunteering => {
            // Mapear linkedCause para compatibilidad con el renderer
            if (volunteering.linkedCause && Array.isArray(volunteering.linkedCause)) {
              volunteering.linkedCause = volunteering.linkedCause[0] || null;
            }
            
            // Asegurar que tenga una imagen por defecto si no tiene
            if (!volunteering.photo_url) {
              volunteering.photo_url = '/images/default-volunteering.jpg';
            }

            // Marcar que ya está participando (para el renderer)
            volunteering.isParticipating = true;
          });

          // 7. Actualizar array de actividades
          userActivities.volunteering = uniqueVolunteering;

          console.log('Voluntariados del usuario cargados:', uniqueVolunteering);

        } catch (error) {
          console.error('Error en loadUserVolunteering:', error);
          userActivities.volunteering = [];
        }
      }

      // --- Función para obtener actividades del usuario ---
      async function loadUserActivities() {
        try {
          // Cargar causes map ANTES que los challenges
          await loadCausesMap();
          
          // Cargar causas del usuario
          await loadUserCauses();
          
          // Cargar tareas del usuario
          await loadUserTasks();
          
          // Cargar retos del usuario
          await loadUserChallenges();
          
          // Cargar voluntariados del usuario
          await loadUserVolunteering();
          
          renderActivities();
        } catch (error) {
          console.error('Error cargando actividades:', error);
          showToast('Error al cargar actividades', 'error');
        }
      }

      // --- Función para renderizar actividades ---
      function renderActivities() {
        const totalActivities = userActivities.causes.length + 
                               userActivities.tasks.length + 
                               userActivities.challenges.length + 
                               userActivities.volunteering.length;

        // Si no hay ninguna actividad, mostrar estado general
        if (totalActivities === 0) {
          document.getElementById('generalEmptyState').style.display = 'block';
        } else {
          document.getElementById('generalEmptyState').style.display = 'none';
        }

        // Renderizar cada sección
        renderSection('causesGrid', userActivities.causes, 'causes');
        renderSection('tasksGrid', userActivities.tasks, 'tasks');
        renderSection('challengesGrid', userActivities.challenges, 'challenges');
        renderSection('volunteeringGrid', userActivities.volunteering, 'volunteering');
      }

      // --- Función para renderizar una sección específica ---
      function renderSection(gridId, activities, type) {
        const grid = document.getElementById(gridId);
        
        if (activities.length === 0) {
          const emptyMessages = {
            causes: {
              title: 'No tienes causas solidarias aún',
              subtitle: 'Explora y únete a causas que te importen',
              icon: 'fas fa-heart',
              buttonText: 'Explorar causas',
              buttonLink: '/causes',
              buttonColor: 'var(--accent)'
            },
            tasks: {
              title: 'No tienes tareas pendientes',
              subtitle: 'Encuentra tareas donde puedas ayudar',
              icon: 'fas fa-tasks',
              buttonText: 'Ver tareas',
              buttonLink: '/tasks',
              buttonColor: 'var(--primary)'
            },
            challenges: {
              title: 'No tienes retos activos',
              subtitle: 'Acepta desafíos solidarios y suma impacto',
              icon: 'fas fa-trophy',
              buttonText: 'Descubrir retos',
              buttonLink: '/challenges',
              buttonColor: 'var(--challenge-dark)'
            },
            volunteering: {
              title: 'No tienes voluntariados',
              subtitle: 'Únete a oportunidades de voluntariado',
              icon: 'fas fa-hands-helping',
              buttonText: 'Ver voluntariados',
              buttonLink: '/volunteering',
              buttonColor: 'var(--volunteering-dark)'
            }
          };

          const message = emptyMessages[type];
          
          grid.innerHTML = `
            <div style="grid-column: 1 / -1; text-align: center; padding: 2.5rem; background: linear-gradient(135deg, rgba(74, 111, 165, 0.05) 0%, rgba(255, 255, 255, 0.8) 100%); border-radius: 12px; border: 2px dashed #e2e8f0;">
              <i class="${message.icon}" style="font-size: 2.5rem; color: ${message.buttonColor}; margin-bottom: 1rem; opacity: 0.7;"></i>
              <h4 style="color: #4a5568; margin-bottom: 0.5rem; font-size: 1.1rem; font-weight: 600;">${message.title}</h4>
              <p style="color: #718096; margin-bottom: 1.5rem; font-size: 0.95rem;">${message.subtitle}</p>
              <a href="${message.buttonLink}" 
                 style="display: inline-flex; align-items: center; gap: 0.5rem; padding: 0.7rem 1.2rem; border-radius: 8px; font-weight: 600; text-decoration: none; background: ${message.buttonColor}; color: white; transition: all 0.2s; font-size: 0.9rem;"
                 onmouseover="this.style.transform='translateY(-2px)'; this.style.boxShadow='0 4px 12px rgba(0,0,0,0.15)';"
                 onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='none';">
                <i class="${message.icon}"></i> ${message.buttonText}
              </a>
            </div>
          `;
        } else {
          // Renderizar actividades reales
          if (type === 'causes' && window.causesRenderer) {
            // Usar el causes-renderer para renderizar las causas
            window.causesRenderer.renderGrid(activities, grid, { showUserRole: true });
            
            // Agregar badges de rol después del renderizado
            setTimeout(() => {
              activities.forEach(cause => {
                const cards = grid.querySelectorAll('.cause-card');
                cards.forEach(card => {
                  // Buscar la tarjeta correspondiente y agregar badge de rol
                  if (card.querySelector('h3')?.textContent === cause.title) {
                    addRoleBadge(card, cause.userRole, cause.isCreator);
                  }
                });
              });
            }, 100);
          } else if (type === 'tasks' && window.tasksRenderer) {
            // Asegurarse de que el grid tenga las clases CSS correctas
            if (!grid.classList.contains('tasks-grid')) {
              grid.classList.add('tasks-grid');
            }
            
            // Guardar tasks globalmente para compatibilidad con modales
            window.tasks = activities;
            window.tasksRenderer.renderGrid(activities, grid, { showUserRole: true });
            
            // Agregar event listeners para los modales después del renderizado
            setTimeout(() => {
              // Event listeners para "Ver más" de tasks
              grid.querySelectorAll('.view-task-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                  e.preventDefault();
                  const taskId = btn.getAttribute('data-task-id');
                  if (window.showTaskModal) {
                    window.showTaskModal(taskId);
                  }
                });
              });

              // Agregar badges de rol después del renderizado
              activities.forEach(task => {
                const cards = grid.querySelectorAll('.task-card');
                cards.forEach(card => {
                  // Buscar la tarjeta correspondiente y agregar badge de rol
                  const titleElement = card.querySelector('h3');
                  if (titleElement && titleElement.textContent.trim() === task.title.trim()) {
                    addRoleBadgeToTask(card, task.userRole, task.isCreator);
                  }
                });
              });
            }, 200);
          } else if (type === 'challenges' && window.challengesRenderer) {
            // Asegurarse de que el grid tenga las clases CSS correctas
            if (!grid.classList.contains('challenges-grid')) {
              grid.classList.add('challenges-grid');
            }
            
            // Guardar challenges globalmente para compatibilidad con modales
            window.challenges = activities;
            
            // Usar el challenges-renderer para renderizar los retos
            window.challengesRenderer.renderGrid(activities, grid, { showUserRole: true });
            
            // Agregar event listeners para los modales después del renderizado
            setTimeout(() => {
              // Event listeners para "Ver más" de challenges
              grid.querySelectorAll('.view-challenge-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                  e.preventDefault();
                  const challengeId = btn.getAttribute('data-challenge-id');
                  if (window.showChallengeModal) {
                    window.showChallengeModal(challengeId);
                  }
                });
              });

              // Agregar badges de rol después del renderizado
              activities.forEach(challenge => {
                const cards = grid.querySelectorAll('.challenge-card');
                cards.forEach(card => {
                  const titleElement = card.querySelector('h3');
                  if (titleElement && titleElement.textContent.trim() === challenge.title.trim()) {
                    addRoleBadgeToChallenge(card, challenge.userRole, challenge.isCreator);
                  }
                });
              });
            }, 200);
          } else if (type === 'volunteering' && window.volunteeringRenderer) {
            // Asegurarse de que el grid tenga las clases CSS correctas
            if (!grid.classList.contains('volunteering-grid')) {
              grid.classList.add('volunteering-grid');
            }
            
            // Guardar volunteering globalmente para compatibilidad con modales Y renderers (igual que index.njk)
            window.volunteerings = activities;
            
            // Usar el volunteering-renderer para renderizar los voluntariados
            window.volunteeringRenderer.renderGrid(activities, grid, { showUserRole: true });
            
            // Agregar event listeners después del renderizado (igual que index.njk)
            setTimeout(() => {
              // Agregar badges de rol después del renderizado
              activities.forEach(volunteering => {
                const cards = grid.querySelectorAll('.volunteering-card');
                cards.forEach(card => {
                  // Buscar la tarjeta correspondiente y agregar badge de rol
                  const titleElement = card.querySelector('h3');
                  if (titleElement && titleElement.textContent.trim() === volunteering.title.trim()) {
                    addRoleBadgeToVolunteering(card, volunteering.userRole, volunteering.isCreator);
                  }
                });
              });
            }, 200);
          } else {
            // Para otros tipos que aún no están implementados
            grid.innerHTML = `
              <div style="grid-column: 1 / -1; text-align: center; padding: 2rem; color: #4a6fa5;">
                Tienes ${activities.length} ${type} (renderizado pendiente)
              </div>
            `;
          }
        }
      }

      // --- Handler para clicks de volunteering ---
      function handleVolunteeringClick(e) {
        e.preventDefault();
        e.stopPropagation();
        const volunteeringId = e.currentTarget.getAttribute('data-volunteering-id');
        if (window.showVolunteeringModal && volunteeringId) {
          window.showVolunteeringModal(volunteeringId);
        }
      }

      // --- Función para agregar badge de rol a una tarjeta de reto ---
      function addRoleBadgeToChallenge(card, role, isCreator) {
        const content = card.querySelector('.challenge-content');
        if (!content) return;

        const roleLabels = {
          founder: { text: 'Fundador', color: '#4a6fa5', icon: 'fas fa-crown' },
          admin: { text: 'Coordinador', color: '#166088', icon: 'fas fa-user-tie' },
          member: { text: 'Miembro', color: '#4fc3a1', icon: 'fas fa-user' }
        };

        const roleInfo = roleLabels[role] || roleLabels.member;
        
        // Buscar si ya existe un badge de rol para evitar duplicados
        if (content.querySelector('.user-role-badge')) return;

        const roleBadge = document.createElement('div');
        roleBadge.className = 'user-role-badge';
        roleBadge.style.cssText = `
          display: inline-flex;
          align-items: center;
          gap: 0.3rem;
          background: ${roleInfo.color};
          color: white;
          padding: 0.2rem 0.6rem;
          border-radius: 12px;
          font-size: 0.75rem;
          font-weight: 600;
          margin-bottom: 0.8rem;
          box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        `;
        roleBadge.innerHTML = `<i class="${roleInfo.icon}"></i> ${roleInfo.text}`;

        // Insertar al principio del contenido
        content.insertBefore(roleBadge, content.firstChild);
      }

      // --- Función para agregar badge de rol a una tarjeta de causa ---
      function addRoleBadge(card, role, isCreator) {
        const content = card.querySelector('.cause-content');
        if (!content) return;

        const roleLabels = {
          founder: { text: 'Fundador', color: '#4a6fa5', icon: 'fas fa-crown' },
          admin: { text: 'Coordinador', color: '#166088', icon: 'fas fa-user-tie' },
          member: { text: 'Miembro', color: '#4fc3a1', icon: 'fas fa-user' }
        };

        const roleInfo = roleLabels[role] || roleLabels.member;
        
        // Buscar si ya existe un badge de rol para evitar duplicados
        if (content.querySelector('.user-role-badge')) return;

        const roleBadge = document.createElement('div');
        roleBadge.className = 'user-role-badge';
        roleBadge.style.cssText = `
          display: inline-flex;
          align-items: center;
          gap: 0.3rem;
          background: ${roleInfo.color};
          color: white;
          padding: 0.2rem 0.6rem;
          border-radius: 12px;
          font-size: 0.75rem;
          font-weight: 600;
          margin-bottom: 0.8rem;
          box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        `;
        roleBadge.innerHTML = `<i class="${roleInfo.icon}"></i> ${roleInfo.text}`;

        // Insertar al principio del contenido
        content.insertBefore(roleBadge, content.firstChild);
      }

      // --- Función para agregar badge de rol a una tarjeta de voluntariado ---
      function addRoleBadgeToVolunteering(card, role, isCreator) {
        const content = card.querySelector('.volunteering-content');
        if (!content) return;

        const roleLabels = {
          founder: { text: 'Fundador', color: '#4a6fa5', icon: 'fas fa-crown' },
          admin: { text: 'Coordinador', color: '#166088', icon: 'fas fa-user-tie' },
          member: { text: 'Miembro', color: '#4fc3a1', icon: 'fas fa-user' }
        };

        const roleInfo = roleLabels[role] || roleLabels.member;
        
        // Buscar si ya existe un badge de rol para evitar duplicados
        if (content.querySelector('.user-role-badge')) return;

        const roleBadge = document.createElement('div');
        roleBadge.className = 'user-role-badge';
        roleBadge.style.cssText = `
          display: inline-flex;
          align-items: center;
          gap: 0.3rem;
          background: ${roleInfo.color};
          color: white;
          padding: 0.2rem 0.6rem;
          border-radius: 12px;
          font-size: 0.75rem;
          font-weight: 600;
          margin-bottom: 0.8rem;
          box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        `;
        roleBadge.innerHTML = `<i class="${roleInfo.icon}"></i> ${roleInfo.text}`;

        // Insertar al principio del contenido
        content.insertBefore(roleBadge, content.firstChild);
      }

      // --- Función para agregar badge de rol a una tarjeta de tarea ---
      function addRoleBadgeToTask(card, role, isCreator) {
        const content = card.querySelector('.task-content');
        if (!content) return;

        const roleLabels = {
          founder: { text: 'Fundador', color: '#4a6fa5', icon: 'fas fa-crown' },
          admin: { text: 'Coordinador', color: '#166088', icon: 'fas fa-user-tie' },
          coordinator: { text: 'Coordinador', color: '#166088', icon: 'fas fa-user-tie' },
          member: { text: 'Miembro', color: '#4fc3a1', icon: 'fas fa-user' }
        };
        const roleInfo = roleLabels[role] || roleLabels.member;

        if (content.querySelector('.user-role-badge')) return;

        const roleBadge = document.createElement('div');
        roleBadge.className = 'user-role-badge';
        roleBadge.style.cssText = `
          display: inline-flex;
          align-items: center;
          gap: 0.3rem;
          background: ${roleInfo.color};
          color: white;
          padding: 0.2rem 0.6rem;
          border-radius: 12px;
          font-size: 0.75rem;
          font-weight: 600;
          margin-bottom: 0.8rem;
          box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        `;
        roleBadge.innerHTML = `<i class="${roleInfo.icon}"></i> ${roleInfo.text}`;
        content.insertBefore(roleBadge, content.firstChild);
      }

      // --- MODAL DE VOLUNTEERING - Implementación completa ---
      window.showVolunteeringModal = async function(volunteeringId) {
        // Limpiar antes de mostrar nuevo modal
        cleanUpModals();

        const volunteering = window.volunteerings?.find(v => v.id == volunteeringId);
        if (!volunteering) {
          console.error('❌ Voluntariado no encontrado:', volunteeringId);
          return;
        }

        const startDate = volunteering.start_date ? new Date(volunteering.start_date).toLocaleDateString('es-ES', {
          year: 'numeric',
          month: 'long',
          day: 'numeric'
        }) : 'Sin fecha de inicio';
        
        const endDate = volunteering.end_date ? new Date(volunteering.end_date).toLocaleDateString('es-ES', {
          year: 'numeric',
          month: 'long',
          day: 'numeric'
        }) : 'Sin fecha de fin';

        // Información de la causa vinculada si existe
        let causeInfo = '';
        if (volunteering.cause_id && window.causesMap && window.causesMap[volunteering.cause_id]) {
          const cause = window.causesMap[volunteering.cause_id];
          causeInfo = `
            <div class="linked-cause-section" style="margin-bottom:1.5rem;">
              <h3 class="content-title" style="font-size:1.2rem; font-weight:600; color:var(--primary); margin-bottom:0.9rem; display:flex; align-items:center; gap:0.7rem; text-align:left;">
                <i class="fas fa-link"></i> Vinculado a la causa
              </h3>
              <div style="display:flex; align-items:center; gap:1.2rem; background:#f8fafc; padding:1rem; border-radius:8px; border:1px solid #e5e7eb;">
                <img src="${cause.photo_url || '/img/causa-default.jpg'}"
                     alt="Imagen de la causa vinculada"
                     style="width:80px; height:80px; object-fit:cover; border-radius:6px;"
                     onerror="this.src='/img/causa-default.jpg'">
                <div style="flex:1; min-width:0;">
                  <div style="font-weight:700; color:var(--primary); font-size:1.05rem; margin-bottom:0.2rem; text-align:left;">
                    ${cause.title}
                  </div>
                  <div style="color:#6b7280; font-size:0.97rem; text-align:left;">
                    ${cause.short_description || 'Sin resumen disponible'}
                  </div>
                </div>
                <a href="/causes/${volunteering.cause_id}"
                   class="btn btn-primary"
                   style="margin-left:1.2rem; white-space:nowrap; font-size:0.97rem; padding:0.5rem 1.1rem;">
                  <i class="fas fa-arrow-right"></i> Ver causa
                </a>
              </div>
            </div>
          `;
        }

        // Obtener o crear el modal
        const modal = getOrCreateVolunteeringModal();
        const modalBody = modal.querySelector('#volunteeringModalBody');

        modalBody.innerHTML = `
          <div class="modal-task-container" style="text-align:left;">
            <h1 class="modal-task-title" style="font-size:2rem; font-weight:800; color:var(--primary); margin-bottom:2.7rem; text-align:center; width:100%;">${volunteering.title}</h1>
            <div class="modal-task-header" style="display:flex; gap:2.5rem; margin-bottom:2.7rem;">
              <div class="modal-task-image-wrapper" style="flex:1; min-width:320px; height:300px; border-radius:12px; overflow:hidden; position:relative; box-shadow:0 4px 12px rgba(0,0,0,0.08);">
                <div class="modal-cause-badge" style="top:1.2rem; left:1.2rem; right:auto; background:var(--volunteering); color:white; position:absolute; border-radius:50px; padding:0.5rem 1rem; font-size:0.9rem; font-weight:600; display:flex; align-items:center; gap:0.6rem; box-shadow:0 2px 8px rgba(0,0,0,0.1); z-index:2;">
                  <i class="fas fa-hands-helping"></i> Voluntariado
                </div>
                <img class="modal-task-image" src="${volunteering.photo_url || '/img/volunteer-default.jpg'}"
                     alt="Imagen del voluntariado ${volunteering.title}"
                     style="width:100%;height:100%;object-fit:cover;"
                     onerror="this.src='/img/volunteer-default.jpg'">
                ${volunteering.is_urgent ? `
                <div class="modal-cause-badge urgent" style="right:1.2rem; left:auto; top:1.2rem; background:var(--urgent); color:white; border-radius:50px; padding:0.5rem 1rem; font-size:0.9rem; font-weight:600; display:flex; align-items:center; gap:0.6rem; box-shadow:0 2px 8px rgba(0,0,0,0.1); z-index:2;">
                  <i class="fas fa-exclamation-circle"></i> Urgente
                </div>` : ''}
              </div>
              <div class="modal-task-info" style="flex:1.5; display:flex; flex-direction:column; justify-content:flex-start; text-align:left;">
                <div class="modal-task-meta-grid" style="display:grid; grid-template-columns:1fr 1fr; gap:0.7rem 1.2rem; margin-bottom:1.2rem; text-align:left;">
                  <div class="meta-item" style="text-align:left;">
                    <span class="meta-icon"><i class="fas fa-map-marker-alt"></i></span>
                    <span>${volunteering.city || 'Sin ubicación'}${volunteering.country ? ', ' + volunteering.country : ''}</span>
                  </div>
                  <div class="meta-item" style="text-align:left;">
                    <span class="meta-icon"><i class="fas fa-calendar-alt"></i></span>
                    <span>${startDate}</span>
                  </div>
                  <div class="meta-item" style="text-align:left;">
                    <span class="meta-icon"><i class="fas fa-calendar-check"></i></span>
                    <span>${endDate}</span>
                  </div>
                  <div class="meta-item" style="text-align:left;">
                    <span class="meta-icon"><i class="fas fa-clock"></i></span>
                    <span>${volunteering.hours_required || 0} horas</span>
                  </div>
                </div>
                <div class="points-notice" style="background:#e6faff; border-left:4px solid var(--volunteering); padding:0.8rem; border-radius:0 8px 8px 0; font-size:0.97rem; display:flex; align-items:center; gap:0.7rem; text-align:left;">
                  <i class="fas fa-hands-helping" style="color: var(--volunteering);"></i>
                  Participar en este voluntariado suma <strong>impacto social</strong>
                </div>
              </div>
            </div>
            ${causeInfo}
            <div class="content-section" style="margin-bottom:2.2rem; text-align:left;">
              <h3 class="content-title" style="font-size:1.2rem; font-weight:600; color:var(--primary); margin-bottom:0.9rem; display:flex; align-items:center; gap:0.7rem; text-align:left;">
                <i class="fas fa-align-left"></i> Resumen
              </h3>
              <div class="content-text" style="line-height:1.7; color:#4b5563; font-size:1.05rem; text-align:left;">
                ${volunteering.summary || 'No hay resumen disponible para este voluntariado.'}
              </div>
            </div>
            <div class="modal-task-content" style="margin-top:0; text-align:left;">
              <div class="content-section" style="margin-bottom:2.2rem; text-align:left;">
                <h3 class="content-title" style="font-size:1.2rem; font-weight:600; color:var(--primary); margin-bottom:0.9rem; display:flex; align-items:center; gap:0.7rem; text-align:left;">
                  <i class="fas fa-info-circle"></i> Descripción completa
                </h3>
                <div class="content-text" style="line-height:1.7; color:#4b5563; font-size:1.05rem; text-align:left;">${volunteering.description || 'No hay descripción disponible para este voluntariado.'}</div>
              </div>
            </div>
            <div class="task-actions" style="display:flex; gap:0.8rem; margin-top:2.2rem; text-align:left;">
              <button class="btn btn-primary btn-apuntarse" data-volunteering-id="${volunteering.id}" style="flex:1;">
                <i class="fas fa-hand-holding-heart"></i> Apuntarse
              </button>
              <button class="btn btn-accent share-btn" style="flex:1;" data-type="volunteering" data-id="${volunteering.id}" data-title="${volunteering.title}" data-url="/volunteering/${volunteering.id}">
                <i class="fas fa-share-alt"></i> Compartir
              </button>
            </div>
            <div class="share-section" id="shareSectionVolunteering" style="text-align:left;"></div>
          </div>
        `;
        
        modal.style.display = 'flex';
        document.body.style.overflow = 'hidden';

        // Agregar event listener para el botón de compartir usando el sistema centralizado
        const shareBtn = modal.querySelector('.share-btn');
        if (shareBtn && window.shareItem) {
          shareBtn.addEventListener('click', () => {
            window.shareItem('volunteering', volunteering.id, volunteering.title, `/volunteering/${volunteering.id}`);
          });
        }
      };

      // --- Función para mostrar opciones de compartir volunteering ---
      window.showVolunteeringShareOptions = function(volunteeringId) {
        const shareSection = document.getElementById('shareSectionVolunteering');
        if (!shareSection) return;

        const volunteering = window.volunteerings?.find(v => v.id == volunteeringId);
        if (!volunteering) return;

        const shareUrl = `${window.location.origin}/volunteering/${volunteeringId}`;
        const shareText = `¡Únete a este voluntariado solidario! ${volunteering.title}`;

        shareSection.innerHTML = `
          <div style="margin-top: 1.5rem; padding: 1rem; background: #f8fafc; border-radius: 8px; border: 1px solid #e5e7eb; text-align:left;">
            <h4 style="margin-bottom: 1rem; color: var(--primary); font-weight: 600; text-align:left;">Compartir voluntariado</h4>
            <div style="display: flex; gap: 0.5rem; flex-wrap: wrap; text-align:left; justify-content:flex-start;">
              <button onclick="copyToClipboard('${shareUrl}')" class="btn btn-outline" style="font-size: 0.9rem; padding: 0.4rem 0.8rem; border: 1px solid #d1d5db; background: white; color: #374151; border-radius: 6px; cursor: pointer;">
                <i class="fas fa-link"></i> Copiar enlace
              </button>
              <a href="https://wa.me/?text=${encodeURIComponent(shareText + ' ' + shareUrl)}" target="_blank" class="btn btn-outline" style="font-size: 0.9rem; padding: 0.4rem 0.8rem; border: 1px solid #d1d5db; background: white; color: #374151; border-radius: 6px; text-decoration: none; display: inline-flex; align-items: center; gap: 0.3rem;">
                <i class="fab fa-whatsapp"></i> WhatsApp
              </a>
              <a href="https://twitter.com/intent/tweet?text=${encodeURIComponent(shareText)}&url=${encodeURIComponent(shareUrl)}" target="_blank" class="btn btn-outline" style="font-size: 0.9rem; padding: 0.4rem 0.8rem; border: 1px solid #d1d5db; background: white; color: #374151; border-radius: 6px; text-decoration: none; display: inline-flex; align-items: center; gap: 0.3rem;">
                <i class="fab fa-twitter"></i> Twitter
              </a>
            </div>
          </div>
        `;
      };

      // --- Función para copiar al portapapeles ---
      window.copyToClipboard = function(text) {
        navigator.clipboard.writeText(text).then(() => {
          showToast('Enlace copiado al portapapeles', 'success');
        }).catch(() => {
          showToast('Error al copiar enlace', 'error');
        });
      };

      // --- MODAL DE CHALLENGE - Implementación completa igual a challenges/index.njk ---
      window.showChallengeModal = async function(challengeId) {
        // Limpiar antes de mostrar nuevo modal
        cleanUpModals();

        // Resto del código existente...
        const challenge = window.challenges?.find(c => c.id == challengeId);
        if (!challenge) {
          console.error('❌ Reto no encontrado:', challengeId);
          return;
        }

        const progress = challenge.goal ? Math.min(Math.round((challenge.raised / challenge.goal) * 100), 100) : 0;
        const createdDate = new Date(challenge.created_at).toLocaleDateString('es-ES', {
          year: 'numeric',
          month: 'long',
          day: 'numeric'
        });
        const deadline = challenge.deadline ? new Date(challenge.deadline).toLocaleDateString('es-ES', {
          year: 'numeric',
          month: 'long',
          day: 'numeric'
        }) : 'Sin fecha límite';

        // Badge tipo
        let tipo = 'Reto general';
        let tipoIcon = 'fa-bolt';
        if (challenge.challenge_type === 'duel') {
          tipo = 'Duelo 1vs1';
          tipoIcon = 'fa-user-friends';
        } else if (challenge.challenge_type === 'open') {
          tipo = 'Reto abierto';
          tipoIcon = 'fa-users';
        } else if (challenge.challenge_type === 'community') {
          tipo = 'Comunitario';
          tipoIcon = 'fa-people-group';
        } else if (challenge.challenge_type === 'creative') {
          tipo = 'Creativo';
          tipoIcon = 'fa-lightbulb';
        }

        // Información de la causa vinculada si existe
        let causeInfo = '';
        if (challenge.cause_id && window.causesMap && window.causesMap[challenge.cause_id]) {
          const cause = window.causesMap[challenge.cause_id];
          causeInfo = `
            <div class="linked-cause-section" style="margin-bottom:1.5rem;">
              <h3 class="content-title" style="font-size:1.2rem; font-weight:600; color:var(--primary); margin-bottom:0.9rem; display:flex; align-items:center; gap:0.7rem;">
                <i class="fas fa-link"></i> Vinculado a la causa
              </h3>
              <div style="display:flex; align-items:center; gap:1.2rem; background:#f8fafc; padding:1rem; border-radius:8px; border:1px solid #e5e7eb;">
                <img src="${cause.photo_url || '/img/causa-default.jpg'}"
                     alt="Imagen de la causa vinculada"
                     style="width:80px; height:80px; object-fit:cover; border-radius:6px;"
                     onerror="this.src='/img/causa-default.jpg'">
                <div style="flex:1; min-width:0;">
                  <div style="font-weight:700; color:var(--primary); font-size:1.05rem; margin-bottom:0.2rem;">
                    ${cause.title}
                  </div>
                  <div style="color:#6b7280; font-size:0.97rem;">
                    ${cause.short_description || 'Sin resumen disponible'}
                  </div>
                </div>
                <a href="/causes/${challenge.cause_id}"
                   class="btn btn-primary"
                   style="margin-left:1.2rem; white-space:nowrap; font-size:0.97rem; padding:0.5rem 1.1rem;">
                  <i class="fas fa-arrow-right"></i> Ver causa
                </a>
              </div>
            </div>
          `;
        }

        // Obtener o crear el modal
        const modal = getOrCreateChallengeModal();
        const modalBody = modal.querySelector('#challengeModalBody');

        modalBody.innerHTML = `
          <div class="modal-task-container" style="text-align:left;">
            <h1 class="modal-task-title" style="font-size:2rem; font-weight:800; color:var(--primary); margin-bottom:2.7rem; text-align:center; width:100%;">${challenge.title}</h1>
            <div class="modal-task-header" style="display:flex; gap:2.5rem; margin-bottom:2.7rem;">
              <div class="modal-task-image-wrapper" style="flex:1; min-width:320px; height:300px; border-radius:12px; overflow:hidden; position:relative; box-shadow:0 4px 12px rgba(0,0,0,0.08);">
                <div class="modal-cause-badge" style="top:1.2rem; left:1.2rem; right:auto; background:var(--accent); color:white; position:absolute; border-radius:50px; padding:0.5rem 1rem; font-size:0.9rem; font-weight:600; display:flex; align-items:center; gap:0.6rem; box-shadow:0 2px 8px rgba(0,0,0,0.1); z-index:2;">
                  <i class="fas ${tipoIcon}"></i> ${tipo}
                </div>
                <img class="modal-task-image" src="${challenge.photo_url || '/img/challenge-default.jpg'}"
                     alt="Imagen del reto ${challenge.title}"
                     style="width:100%;height:100%;object-fit:cover;"
                     onerror="this.src='/img/challenge-default.jpg'">
                ${challenge.is_urgent ? `
                <div class="modal-cause-badge urgent" style="right:1.2rem; left:auto; top:1.2rem; background:var(--urgent); color:white; border-radius:50px; padding:0.5rem 1rem; font-size:0.9rem; font-weight:600; display:flex; align-items:center; gap:0.6rem; box-shadow:0 2px 8px rgba(0,0,0,0.1); z-index:2;">
                  <i class="fas fa-exclamation-circle"></i> Urgente
                </div>` : ''}
              </div>
              <div class="modal-task-info" style="flex:1.5; display:flex; flex-direction:column; justify-content:flex-start;">
                <div class="modal-task-meta-grid" style="display:grid; grid-template-columns:1fr 1fr; gap:0.7rem 1.2rem; margin-bottom:1.2rem;">
                  <div class="meta-item">
                    <span class="meta-icon"><i class="fas fa-map-marker-alt"></i></span>
                    <span>${challenge.city || 'Sin ubicación'}${challenge.country ? ', ' + challenge.country : ''}</span>
                  </div>
                  <div class="meta-item">
                    <span class="meta-icon"><i class="fas fa-star"></i></span>
                    <span>${challenge.points || 0} puntos</span>
                  </div>
                  <div class="meta-item">
                    <span class="meta-icon"><i class="fas fa-calendar-alt"></i></span>
                    <span>${deadline}</span>
                  </div>
                  <div class="meta-item">
                    <span class="meta-icon"><i class="fas fa-bolt"></i></span>
                    <span>${tipo}</span>
                  </div>
                </div>
                <div class="points-notice" style="background:#f0f9ff; border-left:4px solid var(--accent); padding:0.8rem; border-radius:0 8px 8px 0; font-size:0.97rem; display:flex; align-items:center; gap:0.7rem;">
                  <i class="fas fa-star" style="color: var(--accent);"></i>
                  Completar este reto otorga <strong>${challenge.points || 0} puntos</strong>
                </div>
              </div>

            </div>
            ${causeInfo}
           

            <div class="content-section" style="margin-bottom:2.2rem;">
              <h3 class="content-title" style="font-size:1.2rem; font-weight:600; color:var(--primary); margin-bottom:0.9rem; display:flex; align-items:center; gap:0.7rem;">
                <i class="fas fa-align-left"></i> Resumen
              </h3>
              <div class="content-text" style="line-height:1.7; color:#4b5563; font-size:1.05rem; text-align:left;">
                ${challenge.summary || 'No hay resumen disponible para este reto.'}
              </div>
            </div>
            <div class="modal-task-content" style="margin-top:0;">
              <div class="content-section" style="margin-bottom:2.2rem;">
                <h3 class="content-title" style="font-size:1.2rem; font-weight:600; color:var(--primary); margin-bottom:0.9rem; display:flex; align-items:center; gap:0.7rem;">
                  <i class="fas fa-info-circle"></i> Descripción completa
                </h3>
                <div class="content-text" style="line-height:1.7; color:#4b5563; font-size:1.05rem; text-align:left;">${challenge.description || 'No hay descripción disponible para este reto.'}</div>
              </div>
            </div>
            <div class="task-actions" style="display:flex; gap:0.8rem; margin-top:2.2rem;">
              <button class="btn btn-primary btn-aceptar" data-challenge-id="${challenge.id}" style="flex:1;">
                <i class="fas fa-hand-holding-heart"></i> Aceptar reto
              </button>
              <button class="btn btn-accent" style="flex:1;" onclick="showChallengeShareOptions('${challenge.id}')">
                <i class="fas fa-share-alt"></i> Compartir
              </button>
            </div>
            <div class="share-section" id="shareSectionChallenge"></div>
          </div>
        `;

        modal.style.display = 'flex';
        document.body.style.overflow = 'hidden';
      };

      // --- Función para mostrar opciones de compartir challenge ---
      window.showChallengeShareOptions = function(challengeId) {
        const shareSection = document.getElementById('shareSectionChallenge');
        if (!shareSection) return;

        const challenge = window.challenges?.find(c => c.id == challengeId);
        if (!challenge) return;

        const shareUrl = `${window.location.origin}/challenges/${challengeId}`;
        const shareText = `¡Acepta este reto solidario! ${challenge.title}`;

        shareSection.innerHTML = `
          <div style="margin-top: 1.5rem; padding: 1rem; background: #f8fafc; border-radius: 8px; border: 1px solid #e5e7eb;">
            <h4 style="margin-bottom: 1rem; color: var(--primary); font-weight: 600;">Compartir reto</h4>
            <div style="display: flex; gap: 0.5rem; flex-wrap: wrap;">
              <button onclick="copyToClipboard('${shareUrl}')" class="btn btn-outline" style="font-size: 0.9rem; padding: 0.4rem 0.8rem; border: 1px solid #d1d5db; background: white; color: #374151; border-radius: 6px; cursor: pointer;">
                <i class="fas fa-link"></i> Copiar enlace
              </button>
              <a href="https://wa.me/?text=${encodeURIComponent(shareText + ' ' + shareUrl)}" target="_blank" class="btn btn-outline" style="font-size: 0.9rem; padding: 0.4rem 0.8rem; border: 1px solid #d1d5db; background: white; color: #374151; border-radius: 6px; text-decoration: none; display: inline-flex; align-items: center; gap: 0.3rem;">
                <i class="fab fa-whatsapp"></i> WhatsApp
              </a>
              <a href="https://twitter.com/intent/tweet?text=${encodeURIComponent(shareText)}&url=${encodeURIComponent(shareUrl)}" target="_blank" class="btn btn-outline" style="font-size: 0.9rem; padding: 0.4rem 0.8rem; border: 1px solid #d1d5db; background: white; color: #374151; border-radius: 6px; text-decoration: none; display: inline-flex; align-items: center; gap: 0.3rem;">
                <i class="fab fa-twitter"></i> Twitter
              </a>
            </div>
          </div>
        `;
      };

      // --- Función para copiar al portapapeles ---
      window.copyToClipboard = function(text) {
        navigator.clipboard.writeText(text).then(() => {
          showToast('Enlace copiado al portapapeles', 'success');
        }).catch(() => {
          showToast('Error al copiar enlace', 'error');
        });
      };

      // --- MODAL DE TASK - Implementación completa ---
      window.showTaskModal = async function(taskId) {
        // Limpiar antes de mostrar nuevo modal
        cleanUpModals();

        const task = window.tasks?.find(t => t.id == taskId);
        if (!task) {
          console.error('❌ Tarea no encontrada:', taskId);
          return;
        }

        const createdDate = new Date(task.created_at).toLocaleDateString('es-ES', {
          year: 'numeric',
          month: 'long',
          day: 'numeric'
        });
        
        const deadline = task.deadline ? new Date(task.deadline).toLocaleDateString('es-ES', {
          year: 'numeric',
          month: 'long',
          day: 'numeric'
        }) : 'Sin fecha límite';

        // Información de la causa vinculada si existe
        let causeInfo = '';
        if (task.cause_id && window.causesMap && window.causesMap[task.cause_id]) {
          const cause = window.causesMap[task.cause_id];
          causeInfo = `
            <div class="linked-cause-section" style="margin-bottom:1.5rem;">
              <h3 class="content-title" style="font-size:1.2rem; font-weight:600; color:var(--primary); margin-bottom:0.9rem; display:flex; align-items:center; gap:0.7rem; text-align:left;">
                <i class="fas fa-link"></i> Vinculado a la causa
              </h3>
              <div style="display:flex; align-items:center; gap:1.2rem; background:#f8fafc; padding:1rem; border-radius:8px; border:1px solid #e5e7eb;">
                <img src="${cause.photo_url || '/img/causa-default.jpg'}"
                     alt="Imagen de la causa vinculada"
                     style="width:80px; height:80px; object-fit:cover; border-radius:6px;"
                     onerror="this.src='/img/causa-default.jpg'">
                <div style="flex:1; min-width:0;">
                  <div style="font-weight:700; color:var(--primary); font-size:1.05rem; margin-bottom:0.2rem; text-align:left;">
                    ${cause.title}
                  </div>
                  <div style="color:#6b7280; font-size:0.97rem; text-align:left;">
                    ${cause.short_description || 'Sin resumen disponible'}
                  </div>
                </div>
                <a href="/causes/${task.cause_id}"
                   class="btn btn-primary"
                   style="margin-left:1.2rem; white-space:nowrap; font-size:0.97rem; padding:0.5rem 1.1rem;">
                  <i class="fas fa-arrow-right"></i> Ver causa
                </a>
              </div>
            </div>
          `;
        }

        // Obtener o crear el modal
        const modal = getOrCreateTaskModal();
        const modalBody = modal.querySelector('#taskModalBody');

        modalBody.innerHTML = `
          <div class="modal-task-container" style="text-align:left;">
            <h1 class="modal-task-title" style="font-size:2rem; font-weight:800; color:var(--primary); margin-bottom:2.7rem; text-align:center; width:100%;">${task.title}</h1>
            <div class="modal-task-header" style="display:flex; gap:2.5rem; margin-bottom:2.7rem;">
              <div class="modal-task-image-wrapper" style="flex:1; min-width:320px; height:300px; border-radius:12px; overflow:hidden; position:relative; box-shadow:0 4px 12px rgba(0,0,0,0.08);">
                <div class="modal-cause-badge" style="top:1.2rem; left:1.2rem; right:auto; background:var(--primary); color:white; position:absolute; border-radius:50px; padding:0.5rem 1rem; font-size:0.9rem; font-weight:600; display:flex; align-items:center; gap:0.6rem; box-shadow:0 2px 8px rgba(0,0,0,0.1); z-index:2;">
                  <i class="fas fa-tasks"></i> Tarea
                </div>
                <img class="modal-task-image" src="${task.photo_url || '/img/task-default.jpg'}"
                     alt="Imagen de la tarea ${task.title}"
                     style="width:100%;height:100%;object-fit:cover;"
                     onerror="this.src='/img/task-default.jpg'">
                ${task.is_urgent ? `
                <div class="modal-cause-badge urgent" style="right:1.2rem; left:auto; top:1.2rem; background:var(--urgent); color:white; border-radius:50px; padding:0.5rem 1rem; font-size:0.9rem; font-weight:600; display:flex; align-items:center; gap:0.6rem; box-shadow:0 2px 8px rgba(0,0,0,0.1); z-index:2;">
                  <i class="fas fa-exclamation-circle"></i> Urgente
                </div>` : ''}
              </div>
              <div class="modal-task-info" style="flex:1.5; display:flex; flex-direction:column; justify-content:flex-start;">
                <div class="modal-task-meta-grid" style="display:grid; grid-template-columns:1fr 1fr; gap:0.7rem 1.2rem; margin-bottom:1.2rem;">
                  <div class="meta-item">
                    <span class="meta-icon"><i class="fas fa-map-marker-alt"></i></span>
                    <span>${task.city || 'Sin ubicación'}${task.country ? ', ' + task.country : ''}</span>
                  </div>
                  <div class="meta-item">
                    <span class="meta-icon"><i class="fas fa-star"></i></span>
                    <span>${task.points || 0} puntos</span>
                  </div>
                  <div class="meta-item">
                    <span class="meta-icon"><i class="fas fa-calendar-alt"></i></span>
                    <span>${deadline}</span>
                  </div>
                  <div class="meta-item">
                    <span class="meta-icon"><i class="fas fa-clock"></i></span>
                    <span>${task.hours_required || 0} horas</span>
                  </div>
                </div>
                <div class="points-notice" style="background:#f0f9ff; border-left:4px solid var(--primary); padding:0.8rem; border-radius:0 8px 8px 0; font-size:0.97rem; display:flex; align-items:center; gap:0.7rem;">
                  <i class="fas fa-star" style="color: var(--primary);"></i>
                  Completar esta tarea otorga <strong>${task.points || 0} puntos</strong>
                </div>
              </div>
            </div>
            ${causeInfo}
            <div class="content-section" style="margin-bottom:2.2rem; text-align:left;">
              <h3 class="content-title" style="font-size:1.2rem; font-weight:600; color:var(--primary); margin-bottom:0.9rem; display:flex; align-items:center; gap:0.7rem;">
                <i class="fas fa-align-left"></i> Resumen
              </h3>
              <div class="content-text" style="line-height:1.7; color:#4b5563; font-size:1.05rem; text-align:left;">
                ${task.summary || 'No hay resumen disponible para esta tarea.'}
              </div>
            </div>
            <div class="modal-task-content" style="margin-top:0;">
              <div class="content-section" style="margin-bottom:2.2rem; text-align:left;">
                <h3 class="content-title" style="font-size:1.2rem; font-weight:600; color:var(--primary); margin-bottom:0.9rem; display:flex; align-items:center; gap:0.7rem;">
                  <i class="fas fa-info-circle"></i> Descripción completa
                </h3>
                <div class="content-text" style="line-height:1.7; color:#4b5563; font-size:1.05rem; text-align:left;">${task.description || 'No hay descripción disponible para esta tarea.'}</div>
              </div>
            </div>
            <div class="task-actions" style="display:flex; gap:0.8rem; margin-top:2.2rem;">
              <button class="btn btn-primary btn-participar" data-task-id="${task.id}" style="flex:1;">
                <i class="fas fa-hand-holding-heart"></i> Participar
              </button>
              <button class="btn btn-accent share-btn" style="flex:1;" data-type="task" data-id="${task.id}" data-title="${task.title}" data-url="/tasks/${task.id}">
                <i class="fas fa-share-alt"></i> Compartir
              </button>
            </div>
            <div class="share-section" id="shareSectionTask"></div>
          </div>
        `;

        modal.style.display = 'flex';
        document.body.style.overflow = 'hidden';

        // Agregar event listener para el botón de compartir usando el sistema centralizado
        const shareBtn = modal.querySelector('.share-btn');
        if (shareBtn && window.shareItem) {
          shareBtn.addEventListener('click', () => {
            window.shareItem('task', task.id, task.title, `/tasks/${task.id}`);
          });
        }
      };

      // --- Función para mostrar opciones de compartir task ---
      window.showTaskShareOptions = function(taskId) {
        const shareSection = document.getElementById('shareSectionTask');
        if (!shareSection) return;

        const task = window.tasks?.find(t => t.id == taskId);
        if (!task) return;

        const shareUrl = `${window.location.origin}/tasks/${taskId}`;
        const shareText = `¡Únete a esta tarea solidaria! ${task.title}`;

        shareSection.innerHTML = `
          <div style="margin-top: 1.5rem; padding: 1rem; background: #f8fafc; border-radius: 8px; border: 1px solid #e5e7eb;">
            <h4 style="margin-bottom: 1rem; color: var(--primary); font-weight: 600;">Compartir tarea</h4>
            <div style="display: flex; gap: 0.5rem; flex-wrap: wrap;">
              <button onclick="copyToClipboard('${shareUrl}')" class="btn btn-outline" style="font-size: 0.9rem; padding: 0.4rem 0.8rem; border: 1px solid #d1d5db; background: white; color: #374151; border-radius: 6px; cursor: pointer;">
                <i class="fas fa-link"></i> Copiar enlace
              </button>
              <a href="https://wa.me/?text=${encodeURIComponent(shareText + ' ' + shareUrl)}" target="_blank" class="btn btn-outline" style="font-size: 0.9rem; padding: 0.4rem 0.8rem; border: 1px solid #d1d5db; background: white; color: #374151; border-radius: 6px; text-decoration: none; display: inline-flex; align-items: center; gap: 0.3rem;">
                <i class="fab fa-whatsapp"></i> WhatsApp
              </a>
              <a href="https://twitter.com/intent/tweet?text=${encodeURIComponent(shareText)}&url=${encodeURIComponent(shareUrl)}" target="_blank" class="btn btn-outline" style="font-size: 0.9rem; padding: 0.4rem 0.8rem; border: 1px solid #d1d5db; background: white; color: #374151; border-radius: 6px; text-decoration: none; display: inline-flex; align-items: center; gap: 0.3rem;">
                <i class="fab fa-twitter"></i> Twitter
              </a>
            </div>
          </div>
        `;
      };

      // --- Función para copiar al portapapeles ---
      window.copyToClipboard = function(text) {
        navigator.clipboard.writeText(text).then(() => {
          showToast('Enlace copiado al portapapeles', 'success');
        }).catch(() => {
          showToast('Error al copiar enlace', 'error');
        });
      };

      // --- FUNCIONES DE LIMPIEZA Y CIERRE ---
      // --- Función para limpiar completamente los modales ---
      function cleanUpModals() {
        // Limpiar contenido de los modales
        const taskModalBody = document.getElementById('taskModalBody');
        const challengeModalBody = document.getElementById('challengeModalBody');
        const volunteeringModalBody = document.getElementById('volunteeringModalBody');
        
        if (taskModalBody) taskModalBody.innerHTML = '';
        if (challengeModalBody) challengeModalBody.innerHTML = '';
        if (volunteeringModalBody) volunteeringModalBody.innerHTML = '';
        
        // Eliminar cualquier sección de compartir residual
        const oldShareSections = document.querySelectorAll('.share-section');
        oldShareSections.forEach(section => section.remove());
        
        // Limpiar cualquier evento de compartir anterior
        const oldShareButtons = document.querySelectorAll('.share-btn');
        oldShareButtons.forEach(btn => {
          btn.replaceWith(btn.cloneNode(true)); // Clonar para eliminar event listeners
        });
        
        console.log('✅ Modales y secciones de compartir limpiados');
      }

      // --- Cargar actividades al inicializar ---
      await loadUserActivities();

      // --- Búsqueda (placeholder) ---
      document.getElementById('search-input')?.addEventListener('input', function(e) {
        const query = e.target.value.toLowerCase();
        if (query) {
          showToast('Funcionalidad de búsqueda en desarrollo', 'info');
        }
      });

      // --- Event listeners para cerrar modales y limpiar ---
      document.addEventListener('click', function(e) {
        // Cerrar modales al hacer clic en el botón de cerrar o fuera
        if (
          e.target.closest('#closeTaskModal') ||
          (e.target.id === 'taskModal' && e.target !== document.getElementById('taskModalBody'))
        ) {
          cleanUpModals();
          const modal = document.getElementById('taskModal');
          if (modal) modal.style.display = 'none';
          document.body.style.overflow = '';
        }

        if (
          e.target.closest('#closeChallengeModal') ||
          (e.target.id === 'challengeModal' && e.target !== document.getElementById('challengeModalBody'))
        ) {
          cleanUpModals();
          const modal = document.getElementById('challengeModal');
          if (modal) modal.style.display = 'none';
          document.body.style.overflow = '';
        }

        if (
          e.target.closest('#closeVolunteeringModal') ||
          (e.target.id === 'volunteeringModal' && e.target !== document.getElementById('volunteeringModalBody'))
        ) {
          cleanUpModals();
          const modal = document.getElementById('volunteeringModal');
          if (modal) modal.style.display = 'none';
          document.body.style.overflow = '';
        }
      });

      // Limpiar al cambiar de ruta (SPA)
      window.addEventListener('beforeunload', cleanUpModals);
    });
  </script>
{% endblock %}